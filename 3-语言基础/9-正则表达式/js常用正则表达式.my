<h1>js常用正则表达式</h1>

<p>整数或者小数：^[0-9]+\.{0,1}[0-9]{0,2}$<br />
只能输入数字："^[0-9]*$"。<br />
只能输入n位的数字："^\d{n}$"。<br />
只能输入至少n位的数字："^\d{n,}$"。<br />
只能输入m~n位的数字：。"^\d{m,n}$"<br />
只能输入零和非零开头的数字："^(0|[1-9][0-9]*)$"。<br />
只能输入有两位小数的正实数："^[0-9]+(.[0-9]{2})?$"。<br />
只能输入有1~3位小数的正实数："^[0-9]+(.[0-9]{1,3})?$"。<br />
只能输入非零的正整数："^\+?[1-9][0-9]*$"。<br />
只能输入非零的负整数："^\-[1-9][]0-9"*$。<br />
只能输入长度为3的字符："^.{3}$"。<br />
只能输入由26个英文字母组成的字符串："^[A-Za-z]+$"。<br />
只能输入由26个大写英文字母组成的字符串："^[A-Z]+$"。<br />
只能输入由26个小写英文字母组成的字符串："^[a-z]+$"。<br />
只能输入由数字和26个英文字母组成的字符串："^[A-Za-z0-9]+$"。<br />
只能输入由数字、26个英文字母或者下划线组成的字符串："^\w+$"。<br />
验证用户密码："^[a-zA-Z]\w{5,17}$"正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。<br />
验证是否含有^%&',;=?$\"等字符："[^%&',;=?$\x22]+"。<br />
只能输入汉字："^[\u4e00-\u9fa5]{0,}$"<br />
验证Email地址："^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"。<br />
验证InternetURL："^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$"。<br />
验证电话号码："^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$"正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"。<br />
验证身份证号（15位或18位数字）："^\d{15}|\d{18}$"。<br />
验证一年的12个月："^(0?[1-9]|1[0-2])$"正确格式为："01"～"09"和"1"～"12"。<br />
验证一个月的31天："^((0?[1-9])|((1|2)[0-9])|30|31)$"正确格式为；"01"～"09"和"1"～"31"。 匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）<br />
String.prototype.len=function(){return this.replace(/[^\x00-\xff]/g,"aa").length;}</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配html标签的正则表达式：<(.*)>(.*)<\/(.*)>|<(.*)\/></p>

<p>匹配首尾空格的正则表达式：(^\s*)|(\s*$)</p>

<p>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：</p>

<p>String.prototype.trim = function()<br />
{<br />
return this.replace(/(^\s*)|(\s*$)/g, "");<br />
}</p>

<p>利用正则表达式分解和转换IP地址：</p>

<p>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：</p>

<p>function IP2V(ip)<br />
{<br />
re=/(\d+)\.(\d+)\.(\d+)\.(\d+)/g //匹配IP地址的正则表达式<br />
if(re.test(ip))<br />
{<br />
return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1<br />
}<br />
else<br />
{<br />
throw new Error("Not a valid IP address!")<br />
}<br />
}</p>

<p>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：</p>

<p>var ip="10.100.20.168"<br />
ip=ip.split(".")<br />
alert("IP值是："+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1))</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：http://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?</p>

<p><br />
利用正则表达式限制网页表单里的文本框输入内容：</p>

<p>用正则表达式限制只能输入中文：onkeyup="value=value.replace(/[^\u4E00-\u9FA5]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\u4E00-\u9FA5]/g,''))"</p>

<p>用正则表达式限制只能输入全角字符： onkeyup="value=value.replace(/[^\uFF00-\uFFFF]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\uFF00-\uFFFF]/g,''))"</p>

<p>用正则表达式限制只能输入数字：onkeyup="value=value.replace(/[^\d]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))"</p>

<p>用正则表达式限制只能输入数字和英文：onkeyup="value=value.replace(/[\W]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))"</p>

<p> </p>

<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p>

<p>评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</p>

<p> </p>

<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p>

<p>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p>

<p> </p>

<p>匹配空白行的正则表达式：\n\s*\r</p>

<p>评注：可以用来删除空白行</p>

<p> </p>

<p>匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?|<.*? /></p>

<p>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p>

<p> </p>

<p>匹配首尾空白字符的正则表达式：^\s*|\s*$</p>

<p>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p>

<p> </p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</p>

<p>评注：表单验证时很实用</p>

<p> </p>

<p>匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*</p>

<p>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p>

<p> </p>

<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p>

<p>评注：表单验证时很实用</p>

<p> </p>

<p>匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}</p>

<p>评注：匹配形式如 0511-4405222 或 021-87888822</p>

<p> </p>

<p>匹配腾讯QQ号：[1-9][0-9]{4,}</p>

<p>评注：腾讯QQ号从10000开始</p>

<p> </p>

<p>匹配中国邮政编码：[1-9]\d{5}(?!\d)</p>

<p>评注：中国邮政编码为6位数字</p>

<p> </p>

<p>匹配身份证：\d{15}|\d{18}</p>

<p>评注：中国的身份证为15位或18位</p>

<p> </p>

<p>匹配ip地址：\d+\.\d+\.\d+\.\d+</p>

<p>评注：提取ip地址时有用</p>

<p> </p>

<p>匹配特定数字：</p>

<p>^[1-9]\d*$　 　 //匹配正整数</p>

<p>^-[1-9]\d*$ 　 //匹配负整数</p>

<p>^-?[1-9]\d*$　　 //匹配整数</p>

<p>^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）</p>

<p>^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）</p>

<p>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数</p>

<p>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数</p>

<p>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数</p>

<p>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）</p>

<p>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）</p>

<p>评注：处理大量数据时有用，具体应用时注意修正</p>

<p> </p>

<p>匹配特定字符串：</p>

<p>^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串</p>

<p>^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串</p>

<p>^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串</p>

<p>^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串</p>

<p>^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p>

<p>评注：最基本也是最常用的一些表达式</p>

<p> </p>

<p>整理出来的一些常用的正则表达式所属分类: JScript  (三)</p>

<p>Email : /^\w+([-+.]\w+)*@\w+([-.]\\w+)*\.\w+([-.]\w+)*$/</p>

<p>isEmail1 : /^\w+([\.\-]\w+)*\@\w+([\.\-]\w+)*\.\w+$/;</p>

<p>isEmail2 : /^.*@[^_]*$/;</p>

<p>Phone : /^((\(\d{3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}$/</p>

<p>Mobile : /^((\(\d{3}\))|(\d{3}\-))?13\d{9}$/</p>

<p>Url : /^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/</p>

<p>IdCard : /^\d{15}(\d{2}[A-Za-z0-9])?$/</p>

<p>Currency : /^\d+(\.\d+)?$/</p>

<p>Number : /^\d+$/</p>

<p>Code : /^[1-9]\d{5}$/</p>

<p>QQ : /^[1-9]\d{4,8}$/</p>

<p>Integer : /^[-\+]?\d+$/</p>

<p>Double : /^[-\+]?\d+(\.\d+)?$/</p>

<p>English : /^[A-Za-z]+$/</p>

<p>Chinese : /^[\u0391-\uFFE5]+$/</p>

<p>UnSafe : /^(([A-Z]*|[a-z]*|\d*|[-_\~!@#\$%\^&\*\.\(\)\[\]\{\}<>\?\\\/\'\"]*)|.{0,5})$|\s/</p>

<p>PassWord :^[\\w]{6,12}$</p>

<p>ZipCode : ^[\\d]{6}</p>

<p>/^(\+\d+ )?(\(\d+\) )?[\d ]+$/; //这个是国际通用的电话号码判断</p>

<p>/^(1[0-2]\d|\d{1,2})$/; //这个是年龄的判断</p>

<p>/^\d+\.\d{2}$/;  //这个是判断输入的是否为货币值</p>

<p> <!-- IP地址有效性验证函数--></p>

<p> <script language=javascript runat=server></p>

<p>    ip_ip = '(25[0-5]|2[0-4]\\d|1\\d\\d|\\d\\d|\\d)';</p>

<p>    ip_ipdot = ip + '\\.';</p>

<p>    isIPaddress = new RegExp('^'+ip_ipdot+ip_ipdot+ipdot+ip_ip+'$');</p>

<p></script></p>

<p>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p>

<p>String.prototype.len=function(){return this.replace([^\x00-\xff]/g,"aa").length;}</p>

<p>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：</p>

<p>String.prototype.trim = function()</p>

<p>{</p>

<p>    return this.replace(/(^\s*)|(\s*$)/g, "");</p>

<p>}</p>

<p>匹配空行的正则表达式：\n[\s| ]*\r</p>

<p>匹配HTML标记的正则表达式：/<(.*)>.*<\/\1>|<(.*) \/>/</p>

<p>匹配首尾空格的正则表达式：(^\s*)|(\s*$)</p>

<p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</p>

<p>匹配网址URL的正则表达式：http://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?</p>

<p> </p>

<p>^\d+$　　//匹配非负整数（正整数 + 0）</p>

<p>^[0-9]*[1-9][0-9]*$　　//匹配正整数</p>

<p>^((-\d+)|(0+))$　　//匹配非正整数（负整数 + 0）</p>

<p>^-[0-9]*[1-9][0-9]*$　　//匹配负整数</p>

<p>^-?\d+$　　　　//匹配整数</p>

<p>^\d+(\.\d+)?$　　//匹配非负浮点数（正浮点数 + 0）</p>

<p>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$　//匹配正浮点数</p>

<p>^((-\d+(\.\d+)?)|(0+(\.0+)?))$　　//匹配非正浮点数（负浮点数 + 0）</p>

<p>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$ //匹配负浮点数</p>

<p>^(-?\d+)(\.\d+)?$</p>
