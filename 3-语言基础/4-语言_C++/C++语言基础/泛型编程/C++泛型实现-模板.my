<h1>C++泛型以及泛型实现机制-模板</h1>

<p><span style="font-size:20px"><strong>泛型是概念, 模板是泛型的实现</strong></span><br />
　　泛型编程让你编写完全一般化并可重复使用的算法，其效率与针对某特定数据类型而设计的算法相同。泛型编程的代表作品STL是一种高效、泛型、可交互操作的软件组件。所谓泛型(Genericity)，是指具有在多种数据类型上皆可操作的含意，与模板有些相似。STL巨大，而且可以扩充，它包含很多计算机基本算法和数据结构，而且将算法与数据结构完全分离，其中算法是泛型的，不与任何特定数据结构或对象类型系在一起。STL以迭代器(Iterators)和容器(Containers)为基础，是一种泛型算法(Generic Algorithms)库，容器的存在使这些算法有东西可以操作。STL包含各种泛型算法(algorithms)、泛型指针(iterators)、泛型容器(containers)以及函数对象(function objects)。STL并非只是一些有用组件的集合，它是描述软件组件抽象需求条件的一个正规而有条理的架构。</p>

<h1>C++模板</h1>

<p>　　模板是C++支持<strong>参数化</strong>多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成员函数的参数、返回值取得任意类型。</p>

<p>　　模板是一种对<strong>类型</strong>进行<strong>参数化</strong>的工具；</p>

<p>　　通常有两种形式：<strong>函数模板</strong>和<strong>类模板</strong>；</p>

<p>　　函数模板针对仅<strong>参数类型</strong>不同的<strong>函数</strong>；</p>

<p>　　类模板针对仅<strong>数据成员</strong>和<strong>成员函数类型</strong>不同的类。</p>

<p>　　<strong>使用模板的目的就是能够让程序员编写与类型无关的代码。</strong>比如编写了一个交换两个整型int 类型的swap函数，这个函数就只能实现<strong>int</strong>&nbsp;型，对<strong>double</strong>，字符这些类型无法实现，要实现这些类型的交换就要重新编写另一个<strong>swap</strong>函数。使用模板的目的就是要让这程序的实现与类型无关，比如一个<strong>swap</strong>模板函数，即可以实现<strong>int</strong>&nbsp;型，又可以实现double型的交换。模板可以应用于函数和类。下面分别介绍。</p>

<p>　　<strong>注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中声明或定义一个模板。</strong></p>

<p>&nbsp;</p>

<h2>一、函数模板通式</h2>

<hr />
<p><strong>1、函数模板的格式：</strong></p>

<p>　　　　<strong>template&nbsp;&lt;class&nbsp;形参名，class&nbsp;形参名，......&gt;&nbsp;返回类型 函数名(参数列表)</strong></p>

<p><strong>　　　{</strong></p>

<p><strong>　　　　　　函数体</strong></p>

<p><strong>　　　}</strong></p>

<p>　　其中<strong>template</strong>和<strong>class</strong>是关见字，<strong>class</strong>可以用<strong>typename</strong>&nbsp;关见字代替，在这里<strong>typename 和class没区别</strong>，&lt;&gt;括号中的参数叫<strong>模板形参</strong>，模板形参和函数形参很相像，<strong>模板形参不能为空。</strong><strong>一但声明了模板函数就可以用模板函数的形参名声明类中的成员变量和成员函数，即可以在该函数中使用内置类型的地方都可以使用模板形参名。</strong>模板形参需要调用该模板函数时提供的模板实参来初始化模板形参，一旦编译器确定了实际的模板实参类型就称他实例化了函数模板的一个实例。比如<strong>swap</strong>的模板函数形式为</p>

<p>　　　　　　<strong>template &lt;class T&gt; void swap(T&amp; a, T&amp; b){}，</strong></p>

<p>当调用这样的模板函数时类型T就会被被调用时的类型所代替，比如<strong>swap(a,b)</strong>其中<strong>a</strong>和<strong>b</strong>是<strong>int</strong>&nbsp;型，这时模板函数swap中的形参<strong>T</strong>就会被<strong>int</strong>&nbsp;所代替，模板函数就变为<strong>swap(int &amp;a, int &amp;b)</strong>。而当<strong>swap(c,d)</strong>其中<strong>c</strong>和<strong>d</strong>是<strong>double</strong>类型时，模板函数会被替换为<strong>swap(double &amp;a, double &amp;b)</strong>，这样就实现了函数的实现与类型无关的代码。</p>

<p>　　2、注意：对于函数模板而言不存在&nbsp;<strong>h(int,int)</strong>&nbsp;这样的调用，<strong>不能在函数调用的参数中指定模板形参的类型，对函数模板的调用应使用实参推演来进行</strong>，即只能进行<strong>&nbsp;h(2,3)</strong>&nbsp;这样的调用，或者<strong>int a, b; h(a,b)</strong>。</p>

<p>　　<strong>函数模板的示例演示将在下文中涉及！</strong></p>

<h2>二、类模板通式</h2>

<hr />
<p>　　1、类模板的格式为：</p>

<p><strong>　　　　template&lt;class&nbsp;&nbsp;形参名，class&nbsp;形参名，&hellip;&gt;&nbsp;&nbsp;&nbsp;class&nbsp;类名</strong></p>

<p><strong>　　　　{ ... };</strong></p>

<p>　　类模板和函数模板都是以<strong>template</strong>开始后接模板形参列表组成，模板形参不能为空，<strong>一但声明了类模板就可以用类模板的形参名声明类中的成员变量和成员函数，即可以在类中使用内置类型的地方都可以使用模板形参名来声明。</strong>比如</p>

<p>　　　　<strong>template&lt;class T&gt; class A{public: T a; T b; T hy(T c, T &amp;d);};</strong></p>

<p>在类<strong>A</strong>中声明了两个类型为<strong>T</strong>的成员变量<strong>a</strong>和<strong>b</strong>，还声明了一个返回类型为<strong>T</strong>带两个参数类型为<strong>T</strong>的函数<strong>hy</strong>。</p>

<p>　　2、类模板对象的创建：比如一个模板类<strong>A</strong>，则使用类模板创建对象的方法为<strong>A&lt;int&gt; m;</strong>在类<strong>A</strong>后面跟上一个<strong>&lt;&gt;</strong>尖括号并在里面填上相应的类型，这样的话类<strong>A</strong>中凡是用到模板形参的地方都会被<strong>int</strong>&nbsp;所代替。当类模板有两个模板形参时创建对象的方法为<strong>A&lt;int, double&gt; m;</strong>类型之间用逗号隔开。</p>

<p>　　3、对于类模板，模板形参的类型必须在类名后的尖括号中明确指定。比如<strong>A&lt;2&gt; m;</strong>用这种方法把模板形参设置为<strong>int</strong>是错误的（<strong>编译错误：error C2079: &#39;a&#39; uses undefined class &#39;A&lt;int&gt;&#39;</strong>），<strong>类模板形参不存在实参推演的问题。</strong>也就是说不能把整型值<strong>2</strong>推演为<strong>int</strong>&nbsp;型传递给模板形参。要把类模板形参调置为<strong>int</strong>型必须这样指定<strong>A&lt;int&gt; m</strong>。</p>

<p>　　4、在类模板外部定义成员函数的方法为：</p>

<p>　　　　<strong>template&lt;模板形参列表&gt; 函数返回类型 类名&lt;模板形参名&gt;::函数名(参数列表){函数体}，</strong></p>

<p>比如有两个模板形参<strong>T1</strong>，<strong>T2</strong>的类<strong>A</strong>中含有一个<strong>void h()</strong>函数，则定义该函数的语法为：</p>

<p>　　　<strong>　template&lt;class T1,class T2&gt; void A&lt;T1,T2&gt;::h(){}。</strong></p>

<p>注意：当在类外面定义类的成员时<strong>template</strong>后面的模板形参应与要定义的类的模板形参一致。</p>

<p>　　5、再次提醒注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在<strong>main</strong>函数中声明或定义一个模板。</p>

<p>&nbsp;</p>

<h2>三、模板的形参</h2>

<hr />
<p><strong>有三种类型的模板形参：类型形参，非类型形参和模板形参。</strong></p>

<h3>　　1、类型形参</h3>

<p>　　　　1.1 、类型模板形参：<strong>类型形参由关见字class或typename后接说明符构成</strong>，如<strong>template&lt;class T&gt; void h(T a){}</strong>;其中<strong>T</strong>就是一个类型形参，类型形参的名字由用户自已确定。<strong>模板形参表示的是一个未知的类型</strong>。模板类型形参可作为类型说明符用在模板中的任何地方，与内置类型说明符或类类型说明符的使用方式完全相同，即可以用于指定返回类型，变量声明等。</p>

<p>　　　　<strong>作者原版：1.2、</strong>&nbsp;不能为同一个模板类型形参指定两种不同的类型，比如<strong>template&lt;class T&gt;void h(T a, T b){}，</strong>语句调用<strong>h(2, 3.2)</strong>将出错，因为该语句给同一模板形参<strong>T</strong>指定了两种类型，第一个实参<strong>2</strong>把模板形参T指定为<strong>int</strong>，而第二个实参<strong>3.2</strong>把模板形参指定为<strong>double</strong>，两种类型的形参不一致，会出错。<strong>（针对函数模板）</strong></p>

<p>　　　　作者原版：1.2针对函数模板是正确的，但是忽略了类模板。下面将对类模板的情况进行补充。</p>

<p>　　　　<strong>本人添加1.2补充版（针对于类模板）、</strong>当我们声明类对象为：<strong>A&lt;int&gt; a</strong>，比如<strong>template&lt;class T&gt;T g(T a, T b){}</strong>，语句调用<strong>a.g(2, 3.2)</strong>在编译时不会出错，但会有警告，因为在声明类对象的时候已经将<strong>T</strong>转换为<strong>int</strong>类型，而第二个实参<strong>3.2</strong>把模板形参指定为<strong>double</strong>，在运行时，会对<strong>3.2</strong>进行强制类型转换为<strong>3</strong>。当我们声明类的对象为：<strong>A&lt;double&gt; a</strong>,此时就不会有上述的警告，因为从<strong>int</strong>到<strong>double</strong>是自动类型转换。</p>

<p><strong>演示示例１：</strong></p>

<p><strong>　　TemplateDemo.h</strong></p>

<pre>
 1 #ifndef TEMPLATE_DEMO_HXX
 2 #define TEMPLATE_DEMO_HXX
 3 
 4 template&lt;class T&gt; class A{
 5     public:
 6         T g(T a,T b);
 7         A();
 8 };
 9 
10 #endif</pre>

<p><strong>　　TemplateDemo.cpp</strong></p>

<pre>
 1 #include&lt;iostream.h&gt;
 2 #include &quot;TemplateDemo.h&quot;
 3 
 4 template&lt;class T&gt; A&lt;T&gt;::A(){}
 5 
 6 template&lt;class T&gt; T A&lt;T&gt;::g(T a,T b){
 7     return a+b;
 8 }
 9 
10 void main(){
11     <strong>A&lt;int&gt; a;
</strong>12     <strong>cout&lt;&lt;a.g(2,3.2)&lt;&lt;endl;
</strong>13 }</pre>

<p><strong>　　编译结果：</strong></p>

<pre>
1 --------------------Configuration: TemplateDemo - Win32 Debug--------------------
2 Compiling...
3 TemplateDemo.cpp
4 G:\C++\CDaima\TemplateDemo\TemplateDemo.cpp(12) :<strong> warning C4244: &#39;argument&#39; : conversion from &#39;const double&#39; to &#39;int&#39;, possible loss of data
</strong>5 
6 TemplateDemo.obj - <strong>0 error(s), 1 warning(s)</strong></pre>

<p>　　<strong>运行结果：　　　　　　5　　</strong></p>

<p>　　我们从上面的测试示例中可以看出，并非作者原作中的那么严密！此处仅是本人跟人测试结果！请大家本着实事求是的态度，自行验证！</p>

<p>&nbsp;</p>

<h3>　　2、非类型形参</h3>

<p>　　　　2.1 、非类型模板形参：<strong>模板的非类型形参也就是内置类型形参</strong>，如<strong>template&lt;class T, int a&gt; class B{};</strong>其中<strong>int a</strong>就是非类型的模板形参。</p>

<p>　　　　2.2、 非类型形参在模板定义的内部是常量值，也就是说非类型形参在模板的内部是常量。</p>

<p>　　　　<strong>2.3、&nbsp;非类型<strong>模板</strong>的形参只能是整型，指针和引用，像double，String, String **这样的类型是不允许的。</strong>但是<strong>double &amp;，double *，</strong>对象的引用或指针是正确的。</p>

<p>　　　　2.4、&nbsp;<strong>调用非类型模板形参的实参必须是一个常量表达式</strong>，即他必须能在编译时计算出结果。</p>

<p>　　　　2.5 、注意：<strong>任何局部对象，局部变量，局部对象的地址，局部变量的地址都不是一个常量表达式，都不能用作非类型模板形参的实参</strong>。全局指针类型，全局变量，全局对象也不是一个常量表达式，不能用作非类型模板形参的实参。</p>

<p>　　　　2.6、&nbsp;<strong>全局变量的地址或引用，全局对象的地址或引用const类型变量是常量表达式，可以用作非类型模板形参的实参</strong>。</p>

<p>　　　　2.7 、<strong>sizeof</strong>表达式的结果是一个常量表达式，也能用作非类型模板形参的实参。</p>

<p>　　　　2.8 、当模板的形参是整型时调用该模板时的实参必须是整型的，且在编译期间是常量，比如<strong>template &lt;class T, int a&gt; class A{};</strong>如果有<strong>int b，这时A&lt;int, b&gt; m;</strong>将出错，因为<strong>b</strong>不是常量，如果<strong>const int b，这时A&lt;int, b&gt; m</strong>;就是正确的，因为这时<strong>b</strong>是常量。</p>

<p>　　　　<strong>2.9 、非类型形参一般不应用于函数模板中</strong>，比如有函数模板<strong>template&lt;class T, int a&gt; void h(T b){}</strong>，若使用<strong>h(2)</strong>调用会出现无法为非类型形参a推演出参数的错误，对这种模板函数可以用显示模板实参来解决，如用h&lt;int, 3&gt;(2)这样就把非类型形参a设置为整数3。显示模板实参在后面介绍。</p>

<p>　　　　2.10、 非类型模板形参的形参和实参间所允许的转换<br />
<strong>　　　　　　1、允许从数组到指针，从函数到指针的转换。如：template &lt;int *a&gt; class A{}; int b[1]; A&lt;b&gt; m;即数组到指针的转换</strong><br />
<strong>　　　　　　2、const修饰符的转换。如：template&lt;const int *a&gt; class A{}; int b; A&lt;&amp;b&gt; m;&nbsp;&nbsp; 即从int *到const int *的转换。</strong><br />
<strong>　　　　　　3、提升转换。如：template&lt;int a&gt; class A{}; const short b=2; A&lt;b&gt; m; 即从short到int 的提升转换</strong><br />
<strong>　　　　　　4、整值转换。如：template&lt;unsigned int a&gt; class A{};&nbsp;&nbsp; A&lt;3&gt; m; 即从int 到unsigned int的转换。</strong><br />
<strong>　　　　　　5、常规转换。</strong></p>

<p><strong>非类型形参演示示例1：</strong></p>

<p>　　<strong>由用户自己亲自指定栈的大小，并实现栈的相关操作。</strong></p>

<p><strong>　　TemplateDemo.h</strong></p>

<pre>
 1 #ifndef TEMPLATE_DEMO_HXX
 2 #define TEMPLATE_DEMO_HXX
 3 
 4 template&lt;class T,int MAXSIZE&gt; class Stack{//MAXSIZE由用户创建对象时自行设置
 5     private:
 6         T elems[MAXSIZE];    // 包含元素的数组
 7         int numElems;    // 元素的当前总个数
 8     public:
 9         Stack();    //构造函数
10         void push(T const&amp;);    //压入元素
11         void pop();        //弹出元素
12         T top() const;    //返回栈顶元素
13         bool empty() const{     // 返回栈是否为空
14             return numElems == 0;
15         }
16         bool full() const{    // 返回栈是否已满
17             return numElems == MAXSIZE;
18         }
19 };
20 
21 template &lt;class T,int MAXSIZE&gt; 
22 Stack&lt;T,MAXSIZE&gt;::Stack():numElems(0){     // 初始时栈不含元素
23     // 不做任何事情
24 }
25 
26 template &lt;class T,int MAXSIZE&gt;
27 void Stack&lt;T, MAXSIZE&gt;::push(T const&amp; elem){
28     if(numElems == MAXSIZE){
29         throw std::out_of_range(&quot;Stack&lt;&gt;::push(): stack is full&quot;);
30     }
31     elems[numElems] = elem;   // 附加元素
32     ++numElems;               // 增加元素的个数
33 }
34 
35 template&lt;class T,int MAXSIZE&gt;
36 void Stack&lt;T,MAXSIZE&gt;::pop(){
37     if (numElems &lt;= 0) {
38         throw std::out_of_range(&quot;Stack&lt;&gt;::pop(): empty stack&quot;);
39     }
40     --numElems;               // 减少元素的个数
41 }
42 
43 template &lt;class T,int MAXSIZE&gt;
44 T Stack&lt;T,MAXSIZE&gt;::top()const{
45     if (numElems &lt;= 0) {
46         throw std::out_of_range(&quot;Stack&lt;&gt;::top(): empty stack&quot;);
47     }
48     return elems[numElems-1];  // 返回最后一个元素
49 }
50 
51 #endif</pre>

<p><strong>　　TemplateDemo.cpp</strong></p>

<pre>
 1 #include&lt;iostream.h&gt;
 2 #include &lt;iostream&gt;
 3 #include &lt;string&gt;
 4 #include &lt;cstdlib&gt;
 5 #include &quot;TemplateDemo.h&quot;
 6 
 7 int main(){
 8     try {
 9         Stack&lt;int,20&gt;  int20Stack;  // 可以存储20个int元素的栈
10         Stack&lt;int,40&gt;  int40Stack;  // 可以存储40个int元素的栈
11         Stack&lt;std::string,40&gt; stringStack; // 可存储40个string元素的栈
12 
13         // 使用可存储20个int元素的栈
14         int20Stack.push(7);
15         std::cout &lt;&lt; int20Stack.top() &lt;&lt; std::endl;    //7
16         int20Stack.pop();
17 
18         // 使用可存储40个string的栈
19         stringStack.push(&quot;hello&quot;);
20         std::cout &lt;&lt; stringStack.top() &lt;&lt; std::endl;    //hello
21         stringStack.pop();    
22         stringStack.pop();    //Exception: Stack&lt;&gt;::pop&lt;&gt;: empty stack
23         return 0;
24     }
25     catch (std::exception const&amp; ex) {
26         std::cerr &lt;&lt; &quot;Exception: &quot; &lt;&lt; ex.what() &lt;&lt; std::endl;
27         return EXIT_FAILURE;  // 退出程序且有ERROR标记
28     }
29 }</pre>

<p><strong>　　运行结果：</strong></p>

<p>　　　　<img alt="" src="http://pic002.cnblogs.com/images/2012/416402/2012102509100898.jpg" /></p>

<p>&nbsp;<strong>非类型形参演示示例2：</strong></p>

<p><strong>　　TemplateDemo01.h</strong></p>

<pre>
 1 #ifndef TEMPLATE_DEMO_O1
 2 #define TEMPLATE_DEMO_01
 3 
 4 template&lt;typename T&gt; class CompareDemo{
 5     public:
 6         int compare(const T&amp;, const T&amp;);
 7 };
 8 
 9 template&lt;typename T&gt; 
10 int CompareDemo&lt;T&gt;::compare(const T&amp; a,const T&amp; b){
11     if((a-b)&gt;0)
12         return 1;
13     else if((a-b)&lt;0)
14         return -1;
15     else
16         return 0;
17 }
18 
19 #endif</pre>

<p><strong>　　TemplateDemo01.cpp</strong></p>

<pre>
1 #include&lt;iostream.h&gt;
2 #include &quot;TemplateDemo01.h&quot;
3 
4 void main(){
5     CompareDemo&lt;int&gt; cd;
6     cout&lt;&lt;cd.compare(2,3)&lt;&lt;endl;
7 }</pre>

<p><strong>　　运行结果：　　　　　-1　</strong></p>

<pre>
1 #include&lt;iostream.h&gt;
2 #include &quot;TemplateDemo01.h&quot;
3 
4 void main(){
5     CompareDemo&lt;double&gt; cd;
6     cout&lt;&lt;cd.compare(3.2,3.1)&lt;&lt;endl;
7 }</pre>

<p>　<strong>　运行结果：　　　　　　1　　</strong></p>

<p>　　<strong>TemplateDemo01.h</strong>&nbsp;<strong>改动如下：</strong></p>

<pre>
 1 #ifndef TEMPLATE_DEMO_O1
 2 #define TEMPLATE_DEMO_01
 3 
 4 template&lt;typename T&gt; class CompareDemo{
 5     public:
 6         int compare(T&amp;, T&amp;);
 7 };
 8 
 9 template&lt;typename T&gt; 
10 int CompareDemo&lt;T&gt;::compare(T&amp; a,T&amp; b){
11     if((a-b)&gt;0)
12         return 1;
13     else if((a-b)&lt;0)
14         return -1;
15     else
16         return 0;
17 }
18 
19 #endif</pre>

<p><strong>　　TempalteDemo01.cpp</strong></p>

<pre>
1 #include&lt;iostream.h&gt;
2 #include &quot;TemplateDemo01.h&quot;
3 
4 void main(){
5     CompareDemo&lt;int&gt; cd;
6     int a=2,b=3;
7     cout&lt;&lt;cd.compare(a,b)&lt;&lt;endl;
8 }
</pre>

<p>&nbsp;</p>

<p>&nbsp;<strong>非类型形参演示示例3：</strong></p>

<p><strong>　　TemplateDemo02.cpp</strong></p>

<p>1 #include&lt;iostream.h&gt; 2 3 template&lt;typename T&gt; 4 const T&amp; max(const T&amp; a,const T&amp; b){ 5 return a&gt;b ? a:b; 6 } 7 8 void main(){ 9 cout&lt;&lt;max(2.1,2.2)&lt;&lt;endl;//模板实参被隐式推演成double 10 cout&lt;&lt;max&lt;double&gt;(2.1,2.2)&lt;&lt;endl;//显示指定模板参数。 11 cout&lt;&lt;max&lt;int&gt;(2.1,2.2)&lt;&lt;endl;//显示指定的模板参数，会将函数函数直接转换为int。 12 }</p>

<p><strong>　　运行结果：</strong></p>

<p>　　　　　　　<img alt="" src="http://pic002.cnblogs.com/images/2012/416402/2012102515230328.jpg" /></p>

<pre>
<strong>cout&lt;&lt;max&lt;int&gt;(2.1,2.2)&lt;&lt;endl;</strong>//显示指定的模板参数，会将函数函数直接转换为int。此语句会出现警告：</pre>

<p>1 --------------------Configuration: TemplateDemo02 - Win32 Debug-------------------- 2 Compiling... 3 TemplateDemo02.cpp 4 G:\C++\CDaima\TemplateDemo02\TemplateDemo02.cpp(11) : 　　warning C4244: &#39;argument&#39; : conversion from &#39;const double&#39; to &#39;const int&#39;, possible loss of data 5 G:\C++\CDaima\TemplateDemo02\TemplateDemo02.cpp(11) : 　　warning C4244: &#39;argument&#39; : conversion from &#39;const double&#39; to &#39;const int&#39;, possible loss of data 6 7 TemplateDemo02.obj - 0 error(s), 2 warning(s)</p>

<p>&nbsp;</p>
