<h1>c++中的.hpp文件</h1>

<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">hpp,<span style="font-family:宋体">其实质就是将</span><span style="font-family:Times New Roman">.cpp</span><span style="font-family:宋体">的实现代码混入</span><span style="font-family:Times New Roman">.h</span><span style="font-family:宋体">头文件当中，定义与实现都包含在同一文件，则该类的调用者只需要</span><span style="font-family:Times New Roman">include</span><span style="font-family:宋体">该</span><span style="font-family:Times New Roman">cpp</span><span style="font-family:宋体">文件即可，无需再&nbsp;将</span><span style="font-family:Times New Roman">cpp</span><span style="font-family:宋体">加入到</span><span style="font-family:Times New Roman">project</span><span style="font-family:宋体">中进行编译。而实现代码将直接编译到调用者的</span><span style="font-family:Times New Roman">obj</span><span style="font-family:宋体">文件中，不再生成单独的</span><span style="font-family:Times New Roman">obj,</span><span style="font-family:宋体">采用</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">将大幅度减少调用&nbsp;</span><span style="font-family:Times New Roman">project</span><span style="font-family:宋体">中的</span><span style="font-family:Times New Roman">cpp</span><span style="font-family:宋体">文件数与编译次数，也不用再发布烦人的</span><span style="font-family:Times New Roman">lib</span><span style="font-family:宋体">与</span><span style="font-family:Times New Roman">dll,</span><span style="font-family:宋体">因此非常适合用来编写公用的开源库。</span></span></span></span></span></span></p>

<div class="Blog_con2" style="-webkit-text-stroke-width:0px; text-align:left">
<div class="Blog_wz1">
<div>
<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">1<span style="font-family:宋体">、是</span><span style="font-family:Times New Roman">Header&nbsp;Plus&nbsp;Plus&nbsp;</span><span style="font-family:宋体">的简写。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">2<span style="font-family:宋体">、与</span><span style="font-family:Times New Roman">*.h</span><span style="font-family:宋体">类似，</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">是</span><span style="font-family:Times New Roman">C++</span><span style="font-family:宋体">程序头文件&nbsp;。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">3<span style="font-family:宋体">、是</span></span></span><a href="http://www.huarw.com/program/vc/Index.html" style="word-wrap:break-word; text-decoration:none; color:#19599b"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'"><u>VC</u></span></span></a><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">L&nbsp;<span style="font-family:宋体">专用的头文件</span><span style="font-family:Times New Roman">,</span><span style="font-family:宋体">已预编译。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">4<span style="font-family:宋体">、是一般模板类的头文件。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">5<span style="font-family:宋体">、一般来说，</span><span style="font-family:Times New Roman">*.h</span><span style="font-family:宋体">里面只有声明，没有实现，而</span><span style="font-family:Times New Roman">*.hpp</span><span style="font-family:宋体">里声明实现都有，后者可以减&nbsp;少</span><span style="font-family:Times New Roman">.cpp</span><span style="font-family:宋体">的数量。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">6<span style="font-family:宋体">、</span><span style="font-family:Times New Roman">*.h</span><span style="font-family:宋体">里面可以有</span><span style="font-family:Times New Roman">using&nbsp;namespace&nbsp;std</span><span style="font-family:宋体">，而</span><span style="font-family:Times New Roman">*.hpp</span><span style="font-family:宋体">里则无。</span></span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'"><span style="font-family:Times New Roman">hpp文件</span><span style="font-family:宋体">要注意的问题有：</span></span></span></span></span></span></h2>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">a)<span style="font-family:宋体">不可包含全局对象和全局函数</span></span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于<span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">本质上是作为</span><span style="font-family:Times New Roman">.h</span><span style="font-family:宋体">被调用者</span><span style="font-family:Times New Roman">include</span><span style="font-family:宋体">，所以当</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">文件中存在全局对象或者全局函数，而该</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">被多个调用者</span><span style="font-family:Times New Roman">include</span><span style="font-family:宋体">时，将在链接时导致符号重定义错误。要避免这种情况，需要去除全局对象，将全局函数封装为类的静态方法。</span></span></span></span></span></span></p>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">b)<span style="font-family:宋体">类之间不可循环调用</span></span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<span style="font-family:Times New Roman">.h</span><span style="font-family:宋体">和</span><span style="font-family:Times New Roman">.cpp</span><span style="font-family:宋体">的场景中，当两个类或者多个类之间有循环调用关系时，只要预先在头文件做被调用类的声明即可，如下：</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px">&nbsp;</span></span></span></p>
</div>

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;B;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;A{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;someMethod(B b);<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;B{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;someMethod(A a);<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">在<span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">场景中，由于定义与实现都已经存在于一个文件，调用者必需明确知道被调用者的所有定义，而不能等到</span><span style="font-family:Times New Roman">cpp</span><span style="font-family:宋体">中去编译。因此</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">中必须整理类之间调用关系，不可产生循环调用。同理，对于当两个类</span><span style="font-family:Times New Roman">A</span><span style="font-family:宋体">和</span><span style="font-family:Times New Roman">B</span><span style="font-family:宋体">分别定义在各自的</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">文件中，形如以下的循环调用也将导致编译错误：</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px">&nbsp;</span></span></span></p>

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//a.hpp<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;b.hpp&quot;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;A{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;someMethod(B b);<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//b.hpp<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;a.hpp&quot;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;B{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;someMethod(A a);<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">c)<span style="font-family:宋体">不可使用静态成员</span></span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;静态成员的使用限制在于如果类含有静态成员，则在<span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">中必需加入静态成员初始化代码，当该</span><span style="font-family:Times New Roman">hpp</span><span style="font-family:宋体">被多个文档</span><span style="font-family:Times New Roman">include</span><span style="font-family:宋体">时，将产生符号重定义错误。唯&nbsp;一的例外是</span><span style="font-family:Times New Roman">const&nbsp;static</span><span style="font-family:宋体">整型成员，因为在</span><span style="font-family:Times New Roman">vs2003</span><span style="font-family:宋体">中，该类型允许在定义时初始化，如：</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px">&nbsp;</span></span></span></p>

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;A{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;static&nbsp;int&nbsp;intValue&nbsp;=&nbsp;123;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;由于静态成员的使用是很常见的场景，无法强制清除，因此可以考虑以下几种方式（以下示例均为同一类中方法）</span></span></span></span></span></p>

<h2 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">如何简介使用静态成员</span></span></span></span></span></h2>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">一、类中仅有一个静态成员时，且仅有一个调用者时</span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">可以通过局域静态变量模拟</span></span></span></span></span></p>
&nbsp;

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;//方法模拟获取静态成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp; someType getMember()<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;someType value(xxx);//作用域内静态变量<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">二、<span style="font-family:Times New Roman">.</span><span style="font-family:宋体">类中有多个方法需要调用静态成员，而且可能存在多个静态成员时</span></span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'"><span style="font-family:宋体">可以将每个静态成员封装一个模拟方法，供其他方法调用。</span></span></span></span></span></span></p>

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;someType getMemberA()<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;someType value(xxx);//作用域内静态变量<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp; someType getMemberB()<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;someType value(xxx);//作用域内静态变量<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;accessMemberA()<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
			&nbsp;&nbsp;&nbsp;&nbsp; someType member&nbsp;=&nbsp;getMemberA();//获取静态成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取两个静态成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;accessStaticMember()<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
			&nbsp;&nbsp;&nbsp;&nbsp; someType a&nbsp;=&nbsp;getMemberA();//获取静态成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp; someType b&nbsp;=&nbsp;getMemberB();<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<h3 style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">三、第二种方法对于大部分情况是通用的，但是当所需的静态成员过多时</span></span></span></span></span></h3>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">编写封装方法的工作量将非常巨大，在此种情况下，建议使用<span style="font-family:Times New Roman">Singleton</span><span style="font-family:宋体">模式，将被调用类定义成普通类，然后使用</span><span style="font-family:Times New Roman">Singleton</span><span style="font-family:宋体">将其变为全局唯一的对象进行调用。</span></span></span></span></span></span></p>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如原<span style="font-family:Times New Roman">h+cpp</span><span style="font-family:宋体">下的定义如下：</span></span></span></span></span></span></p>
&nbsp;

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;A{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp; type getMember(){<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;member;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;type member;//静态成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>

<p style="margin-left:0px; margin-right:0px"><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><span style="font-size:10.5pt"><span style="font-family:'Times New Roman'">&nbsp;采用<span style="font-family:Times New Roman">singleton</span><span style="font-family:宋体">方式，实现代码可能如下（</span><span style="font-family:Times New Roman">singleton</span><span style="font-family:宋体">实现请自行查阅相关文档）</span></span></span></span></span></span></p>
&nbsp;

<table cellspacing="0" style="border-collapse:collapse; border:undefined; width:95%; word-wrap:break-word">
	<tbody>
		<tr>
			<td>
			<p><span style="font-size:12px"><span style="font-family:宋体,Arial"><span style="font-size:16px"><code>&nbsp;&nbsp;&nbsp;&nbsp;//实际实现类<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;Aprovider{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp; type getMember(){<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;member;<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp; type member;//变为普通成员<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//提供给调用者的接口类<br />
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;A{<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public:<br />
			&nbsp;&nbsp;&nbsp;&nbsp; type getMember(){<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Singleton&lt;AProvider&gt;::getInstance()-&gt;getMember();<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></span></span></span></p>
			</td>
		</tr>
	</tbody>
</table>
</div>
</div>
