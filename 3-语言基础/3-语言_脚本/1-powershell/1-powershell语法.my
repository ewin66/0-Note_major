<h1>powershell 语法</h1>

<p>PowerShell作为一个动态脚本语言，同样具有条件判断、逻辑控制的能力。诸如if、elseif、else以及switch都是被PowerShell所支持的。</p>

<h2>逻辑判断</h2>

<p>先来简单介绍最基本的逻辑判断：<br />
&nbsp; &nbsp; &bull; -eq 判断是否等于(equal)<br />
&nbsp; &nbsp; &bull; -lt 判断时候小于(less than)<br />
&nbsp; &nbsp; &bull; -gt 判断是否大于(greater than)<br />
&nbsp; &nbsp; &bull; -ge 判断是否大于或等于(greater of equal)<br />
&nbsp; &nbsp; &bull; -le 判断是否小于或等于(less or equal)<br />
&nbsp; &nbsp; &bull; -ne 判断是否不等于(no equal)<br />
&nbsp; 在之前的几个小节中，如果你注意的话，应该可以发现PowerShell对于大小写并不敏感，可是在某些时候我们却需要区分它们，因此，还可以使用诸如：<br />
&nbsp; &nbsp; &bull; &nbsp;-ieq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (case-insensitive)<br />
&nbsp; &nbsp; &bull; &nbsp;-ceq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(case-sensitive)<br />
前者是忽略大小写，后者则是区分大小写。<br />
示例：<br />
&quot;MaRui&quot; -eq &quot;marui&quot; &lt;enter&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 结果：&quot;True&quot;&nbsp;<br />
&quot;MaRui&quot; -ieq &quot;MARUI&quot; &lt;enter&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 结果：&quot;True&quot;&nbsp;<br />
&quot;MaRui&quot; -ceq &quot;MARUI&quot; &lt;enter&gt; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 结果：&quot;False&quot;&nbsp;</p>

<h2>逻辑运算</h2>

<p><br />
&nbsp; &nbsp; &bull; &nbsp;-and &nbsp; 与<br />
&nbsp; &nbsp; &bull; &nbsp;-or &nbsp; 或<br />
&nbsp; &nbsp; &bull; &nbsp;-not &nbsp; 非<br />
&nbsp; &nbsp; &bull; &nbsp;! &nbsp; 非<br />
&nbsp;</p>

<h2>条件</h2>

<h3>if、else、elseif语句</h3>

<p>基本语法：<br />
if (条件) &nbsp;<br />
{代码} &nbsp;<br />
elseif (条件) &nbsp;<br />
{代码} &nbsp;<br />
else (条件) &nbsp;<br />
{代码} &nbsp;<br />
else&nbsp;<br />
{代码}&nbsp;<br />
例如：<br />
$n=10 &nbsp;<br />
if ($n -eq 1) &nbsp;<br />
{&quot;n=1&quot;} &nbsp;<br />
elseif ($n -ne 1) &nbsp;<br />
{&quot;n!=1,and n=$n&quot;}&nbsp;</p>

<p>下面的脚本是用来查看本机操作系统的，使用了&quot;if&quot;语句。请复制下面的脚本并且保存为&quot;OS.ps1&quot;，用PowerShell运行试试。<br />
$ComputerName = (Get-WmiObject -class win32_computersystem).name&nbsp;<br />
$OS_Version = (Get-WmiObject -class win32_operatingsystem -computer $ComputerName).version &nbsp;<br />
&nbsp;<br />
if (($OS_Version -eq &quot;5.1.2600&quot;) -or ($OS_Version -eq &quot;5.2.3790&quot;)) &nbsp;<br />
{ &nbsp;<br />
&nbsp; &nbsp; write-host &quot;Computer Name:&quot;$ComputerName &nbsp;<br />
&nbsp;<br />
&nbsp; &nbsp; if ($OS_Version -eq &quot;5.1.2600&quot;) &nbsp;&nbsp;<br />
&nbsp; &nbsp; { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; write-host &quot;OS:Windows XP&quot;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; elseif ($OS_Version -eq &quot;5.2.3790&quot;) &nbsp;<br />
&nbsp; &nbsp; { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; write-host &quot;OS:Windows 2003&quot;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;<br />
&nbsp;<br />
elseif (($OS_Version -eq &quot;5.0.2195&quot;) -or ($OS_Version -eq &quot;6.1.7600&quot;)) &nbsp;<br />
{ &nbsp;<br />
&nbsp; &nbsp; write-host &quot;Computer Name:&quot;$ComputerName &nbsp;<br />
&nbsp;<br />
&nbsp; &nbsp; if ($OS_Version -eq &quot;5.0.2195&quot;) &nbsp;&nbsp;<br />
&nbsp; &nbsp; { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; write-host &quot;OS:Windows 2000 Server&quot;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
&nbsp; &nbsp; elseif ($OS_Version -eq &quot;6.1.7600&quot;) &nbsp;<br />
&nbsp; &nbsp; { &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; write-host &quot;OS:Windows 7&quot;&nbsp;<br />
&nbsp; &nbsp; } &nbsp;<br />
} &nbsp;<br />
&nbsp;<br />
else&nbsp;<br />
{ &nbsp;<br />
&nbsp; &nbsp; write-host &quot;$ComputerName is not supported.&quot;&nbsp;<br />
} &nbsp;<br />
&nbsp;<br />
&quot;&ndash;END OF REPORT&ndash;&quot;&nbsp;<br />
在我的计算机上的运行结果：</p>

<h3>&quot;switch&quot;语句</h3>

<p>基本语法：<br />
switch (表达式) &nbsp;<br />
{ &nbsp;<br />
&nbsp; (表达式) {代码} &nbsp;<br />
&nbsp; 值 {代码} &nbsp;<br />
&nbsp; default {默认执行代码} &nbsp;<br />
}&nbsp;<br />
例如，我们可以查询&quot;domainRole&quot;的值来判断计算机在当前Active Directory域中担任的角色，试试下面的代码：<br />
switch ((Get-WmiObject -Class win32_ComputerSystem).domainRole) &nbsp;<br />
{ &nbsp;<br />
&nbsp; 0 {Write-Host &quot;Standalone Workstation&quot;} &nbsp;<br />
&nbsp; 1 {Write-Host &quot;Member Workstation&quot;} &nbsp;<br />
&nbsp; 2 {Write-Host &quot;Standalone Server&quot;} &nbsp;<br />
&nbsp; 3 {Write-Host &quot;Member Server&quot;} &nbsp;<br />
&nbsp; 4 {Write-Host &quot;Backup Domain Controller&quot;} &nbsp;<br />
&nbsp; 5 {Write-Host &quot;Primary Domain Controller&quot;} &nbsp;<br />
&nbsp; default {Write-Host &quot;Cannot determine domain role&quot;} &nbsp;<br />
}&nbsp;<br />
判断语句为表达式的例子：<br />
switch (100) &nbsp;<br />
{ &nbsp;<br />
&nbsp; (99 + 1) {Write-Host &quot;99+1=100&quot;} &nbsp;<br />
&nbsp; (1 + 100) {Write-Host &quot;1+100=100&quot;} &nbsp;<br />
&nbsp; (50*2) {Write-Host &quot;50*2=100&quot;} &nbsp;<br />
&nbsp; (33.333*3) {Write-Host &quot;33.333*3=100&quot;} &nbsp;<br />
}&nbsp;<br />
运行结果：</p>

<p>这节就说到这里吧，下一节将讲一讲循环语句的使用。</p>
