<h1>PowerShell基本语法及常用命令</h1>

<h2>Powershell常用命令</h2>

<p>1.Get-Command 得到Powshell所有命令<br />
2.Get-Process 获取所有进程<br />
3.Set-Alias &nbsp;给指定命令重命名 如:Set-Alias aaa Get-Command&nbsp;<br />
4.Set-ExecutionPolicy remotesigned 设置powershell可直接执行脚本文件 一般脚本文件以.ps1结尾 执行脚本文件直接输入文件地址即可执行 &nbsp;脚本文件中只写命令即可<br />
5.Get-Help get-* 查询以get开头的命令 &nbsp; Get-Help *service* &nbsp;Get-Help Get-Command 获取Get-Command命令的基本用法<br />
6.Get-Member 获取对象属性 &nbsp;如: $var | Get-Memeber &nbsp;访问$var属性 直接$var.ToString()</p>

<h2>PS中的变量定义</h2>

<p>不需要定义或声明数据类型<br />
在变量前加&quot;$&quot;<br />
定义变量的规则<br />
&nbsp; -变量可以是数字 $123<br />
&nbsp; -变量可以是字符串 $abc<br />
&nbsp; -变量可以是特殊字符 ${@1b}<br />
&nbsp;内置的变量<br />
&nbsp; &nbsp;-$pshome<br />
&nbsp; &nbsp;-$home<br />
&nbsp; &nbsp;-$profile</p>

<p>变量赋值: $var=123 &nbsp;$var=&quot;aaaaaa&quot;<br />
取变量值: $var</p>

<p>变量赋值方法:Set-Variable var 100<br />
取值方法: &nbsp; &nbsp;Get-Variable var<br />
清空值: &nbsp; &nbsp; &nbsp;Clear-Variable var<br />
删除变量 &nbsp; &nbsp; Remove-Variable var<br />
取多个变量如var1 var2 var3地值: &nbsp; Get-Variable var*</p>

<p>另一种赋值方法 $var1=&quot;bbb&quot; &nbsp; &nbsp;$var2=&quot;$var $var1&quot; &nbsp;结果$var2=&quot;aaaaaa bbb&quot;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$var2=&#39;$var $var1&#39; 结果$var2=&quot;$var $var1&quot;<br />
$date=Get-Date &nbsp;获取当前时间<br />
$date.AddDays(3) 当前时间加3天</p>

<p>&nbsp;</p>

<h2>排序用法</h2>

<p>Get-Process | Sort-Object ws &nbsp; 根据WS值由小到大排序<br />
Get-Process | Sort-Object | fl &nbsp; &nbsp;Get-Process | Sort-Object | Format-List &nbsp;以列表形式显示数据</p>

<h2>导入导出文件</h2>

<p>Get-Process &gt; c:/aa.txt<br />
Get-Process | Export-Clixml c:/ddd.xml &nbsp;将命令执行结果导出到xml文件中<br />
Import-Clixml c:/ddd.xml &nbsp;将xml文件导出到控件台</p>

<h2>注释使用</h2>

<p>Get-Proccess | #这里写注释信息<br />
sort ws</p>

<p>比较运算符</p>

<p>$var=&quot;abc&quot;<br />
$var -like &quot;&amp;b&amp;&quot; &nbsp;返回true<br />
$var -clike &quot;&amp;b&amp;&quot; &nbsp; 返回true</p>

<p>&nbsp;</p>

<h2>函数使用</h2>

<p>案例:在一个脚本文件中有如下代码:<br />
$var1=10<br />
function one{&quot;The Variable is $var1&quot;}<br />
function two{$var1=20;one}<br />
one&nbsp;<br />
two<br />
one<br />
执行结果: The Variable is 10<br />
&nbsp; &nbsp; &nbsp;The Variable is 20<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The Variable is 10<br />
此示例表明,在函数中改变变量值并不影响实际值<br />
若需改变其值请看如下代码:<br />
$var1=10<br />
function one{&quot;The Variable is $var1&quot;}<br />
function two{$Script:var1=20;one}<br />
one&nbsp;<br />
two<br />
one<br />
执行结果: The Variable is 10<br />
&nbsp; &nbsp; &nbsp;The Variable is 20<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The Variable is 20</p>

<p>&nbsp;</p>

<h2>freach使用</h2>

<p>$var=1..6 &nbsp;#定义数组<br />
foreach($i in $var)<br />
{<br />
&nbsp; &nbsp;$n++<br />
&nbsp; &nbsp;Write-Host &quot;$i&quot;<br />
}<br />
Write-Host &quot;there were $n record&quot;</p>

<p>&nbsp;</p>

<h2>if使用</h2>

<p>Get-Service | foreach{<br />
&nbsp; if($_.status -eq &quot;running&quot;){<br />
&nbsp; &nbsp; &nbsp;Write-Host $_.displayname &nbsp;&quot;(&quot;$_status&quot;)&quot; -foregroundcolor &quot;green&quot;<br />
&nbsp; }<br />
&nbsp; else<br />
&nbsp; {<br />
&nbsp; &nbsp; &nbsp;Write-Host $_.displayname &nbsp;&quot;(&quot;$_status&quot;)&quot; -foregroundcolor &quot;red&quot;<br />
&nbsp; }<br />
}</p>

<p>&nbsp;</p>

<h2>error使用</h2>

<p>function one<br />
{<br />
&nbsp; &nbsp;Get-Process -ea stop<br />
&nbsp; &nbsp;Get-ChildItem ada -ErrorAction stop &nbsp;#此句有误<br />
&nbsp; &nbsp;Get-Process -ErrorAction stop<br />
}<br />
one</p>

<p>-ea 定义当错误发生以后该如何继续执行<br />
$?可以测试命令执行成功还是失败,成功则结果为true 反之为false</p>

<p>&nbsp;</p>

<h2>单步调试</h2>

<p>先设置Set-PSDebug -step<br />
for($i=1;$i -le 10;$i++)<br />
{<br />
&nbsp; Write-Host &quot;loop number $i&quot;<br />
}</p>
