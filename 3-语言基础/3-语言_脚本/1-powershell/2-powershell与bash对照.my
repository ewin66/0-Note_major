<h1>BASH和PowerShell命令对照表&nbsp;</h1>

<p>&nbsp;</p>

<table border="1" cellpadding="4" cellspacing="0" style="width:100%">
	<tbody>
		<tr>
			<td>ash</td>
			<td><strong>PowerShell</strong></td>
			<td><strong>Description</strong></td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Scripting Basics</strong></p>
			</td>
		</tr>
		<tr>
			<td>Put a &ldquo;shebang&rdquo; at the beginning of the file:&nbsp;<br />
			<code>#!/bin/bash</code><br />
			Change permissions on script file to allow execution.</td>
			<td>Give the file a ps1 extension. For downloaded scripts, unblock the file under file properties in Windows Explorer.</td>
			<td>Steps for making scripting files run. In PowerShell, the first time you do scripting, you will need to set the appropriate security settings: run PowerShell as administrator and type&nbsp;<code>set-executionpolicy remotesigned</code>.</td>
		</tr>
		<tr>
			<td><code>source (or) .</code></td>
			<td><code>.</code></td>
			<td>shell built-in: execute the commands in a file</td>
		</tr>
		<tr>
			<td><code>echo&nbsp;<em>String</em></code></td>
			<td><code>echo&nbsp;<em>String</em></code>&nbsp;(or)<br />
			<code>Write-Host&nbsp;<em>String</em></code></td>
			<td>Prints&nbsp;<em>String</em>&nbsp;to the screen. In PowerShell,&nbsp;<code>Write-Host</code>&nbsp;forces the output to the screen instead of being a return value.</td>
		</tr>
		<tr>
			<td><code><em>var</em>=0</code><br />
			(No spaces around =)</td>
			<td><code>$<em>var</em>&nbsp;= 0</code></td>
			<td>Creates a variable&nbsp;<em>$var</em>. In BASH, do not put whitespace around the equals sign, and do not use a $ in the variable assignment.</td>
		</tr>
		<tr>
			<td><code>let&nbsp;<em>var</em>=$<em>var</em>+5</code>&nbsp;(or)<br />
			<code><em>var</em>=$(( $<em>var</em>&nbsp;+ 5 ))</code></td>
			<td><code>$<em>var</em>&nbsp;+= 5</code></td>
			<td>Add 5 to $<em>var</em></td>
		</tr>
		<tr>
			<td><code>#&nbsp;<em>comment</em></code></td>
			<td><code>#&nbsp;<em>comment</em></code></td>
			<td>A comment</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Strings</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>= !=</code></td>
			<td><code>-eq -ne -ceq -cne</code></td>
			<td>String comparisons. In BASH, be sure the strings litereals are in quotes.</td>
		</tr>
		<tr>
			<td><code>&quot;&quot; | gm</code></td>
			<td>&nbsp;</td>
			<td>Get a list of non-static string members</td>
		</tr>
		<tr>
			<td><code>[string] | gm -static</code></td>
			<td>&nbsp;</td>
			<td>Get a list of static string members</td>
		</tr>
		<tr>
			<td><code>${<em>string</em>#<em>text_to_remove</em>}</code></td>
			<td><code><em>string</em>.TrimStart(&quot;<em>characters</em>&quot;)</code></td>
			<td>Removes the specified characters/text from the beginning of the string.</td>
		</tr>
		<tr>
			<td><code>${<em>string</em>%<em>text_to_remove</em>}</code></td>
			<td><code><em>string</em>.TrimEnd(&quot;<em>characters</em>&quot;)</code></td>
			<td>Removes the specified characters/text from the end of the string.&nbsp; Suppose $fnm == helloThere.txt; then ${fnm%.???} is helloThere</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Pattern Matching</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>grep</code></td>
			<td><code>select-string</code></td>
			<td>print lines matching a pattern</td>
		</tr>
		<tr>
			<td><code>sed</code></td>
			<td><code>-replace</code></td>
			<td>performs string transformations</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Booleans and Conditions</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>true&nbsp;&nbsp;false</code></td>
			<td><code>$true&nbsp;&nbsp;$false</code></td>
			<td>Boolean literals</td>
		</tr>
		<tr>
			<td><code>-lt -gt -le -ge -eq -ne</code></td>
			<td><code>-lt -gt -le -ge -eq -ne</code></td>
			<td>Arithmetic relational operators</td>
		</tr>
		<tr>
			<td><code>&nbsp;</code></td>
			<td><code>-like</code></td>
			<td>True if a string matches a wildcard pattern</td>
		</tr>
		<tr>
			<td><code>&nbsp;</code></td>
			<td><code>-match</code></td>
			<td>True if a string matches a regular expressions</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>Where-Object {&nbsp;<em>condition</em>&nbsp;}</code></td>
			<td>Used to filter input by a condition. Remember that $_ refers to the current object being tested.</td>
		</tr>
		<tr>
			<td><code>-z $<em>var</em></code></td>
			<td><code>$<em>var</em>&nbsp;-eq $null</code></td>
			<td>True if $<em>var</em>&nbsp;is null</td>
		</tr>
		<tr>
			<td><code>-n $<em>var</em></code></td>
			<td><code>$<em>var</em>&nbsp;-ne $null</code></td>
			<td>True if $<em>var</em>&nbsp;is not null (contains one or more characters)</td>
		</tr>
		<tr>
			<td><code>-o -a</code></td>
			<td><code>-or -and</code></td>
			<td>Logical&nbsp;<em>or</em>&nbsp;and&nbsp;<em>and</em></td>
		</tr>
		<tr>
			<td><code>-e&nbsp;<em>file</em></code></td>
			<td><code>Test-Path&nbsp;<em>file</em></code></td>
			<td>True if&nbsp;<em>file</em>&nbsp;exists.</td>
		</tr>
		<tr>
			<td><code>! -e&nbsp;<em>file</em></code></td>
			<td><code>! (Test-Path&nbsp;<em>file</em>)</code></td>
			<td>True if&nbsp;<em>file</em>&nbsp;does not exist.</td>
		</tr>
		<tr>
			<td><code>-d&nbsp;<em>file</em></code></td>
			<td><code><em>file</em>.PSISContainer</code></td>
			<td>True if&nbsp;<em>file</em>&nbsp;is a directory. In PowerShell, if&nbsp;<em>file</em>&nbsp;is not a file variable, be sure to get the file object first with&nbsp;<code>gi</code>.</td>
		</tr>
		<tr>
			<td><code>-s&nbsp;<em>file</em></code></td>
			<td>&nbsp;</td>
			<td>True if&nbsp;<em>file</em>&nbsp;exists and has a size greater than zero.</td>
		</tr>
		<tr>
			<td><code><em>file1</em>&nbsp;-nt&nbsp;<em>file2</em></code></td>
			<td>&nbsp;</td>
			<td>True if&nbsp;<em>file1</em>&nbsp;is newer (according to modification date) than&nbsp;<em>file2</em></td>
		</tr>
		<tr>
			<td><code><em>file1</em>&nbsp;-ot&nbsp;<em>file2</em></code></td>
			<td>&nbsp;</td>
			<td>True if&nbsp;<em>file1</em>&nbsp;is older (according to modification date) than&nbsp;<em>file2</em></td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Control Structures</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>if [&nbsp;<em>condition</em>&nbsp;]<br />
			then<br />
			<em>codeblock</em><br />
			fi</code></td>
			<td><code>if (<em>condition</em>) {<br />
			<em>codeblock</em><br />
			}</code></td>
			<td>If statement. In BASH, be sure to leave a space between the condition and the bracket.</td>
		</tr>
		<tr>
			<td><code>if [&nbsp;<em>condition</em>&nbsp;]<br />
			then<br />
			<em>codeblock</em><br />
			elif [&nbsp;<em>condition</em>&nbsp;]<br />
			then<br />
			<em>codeblock</em><br />
			else<br />
			<em>codeblock</em><br />
			fi</code></td>
			<td><code>if (<em>condition</em>) {<br />
			<em>codeblock</em><br />
			}<br />
			elseif (<em>condition</em>) {<br />
			<em>codeblock</em><br />
			}<br />
			else {<br />
			<em>codeblock</em><br />
			}</code></td>
			<td>If &ndash; else if &ndash; else statement</td>
		</tr>
		<tr>
			<td><code>var=0<br />
			while [ $var -lt 10 ]<br />
			do<br />
			echo $var<br />
			var=$(( $var + 1 ))<br />
			done</code></td>
			<td><code>$var = 0<br />
			while ($var -lt 10) {<br />
			echo $var<br />
			$var++<br />
			}</code></td>
			<td>Prints numbers 0 through 9.</td>
		</tr>
		<tr>
			<td><code>for ((i=0; i &lt; 10; i++)) do<br />
			echo $i<br />
			done</code></td>
			<td><code>for ($i=0;$i -lt 10; $i++)<br />
			{<br />
			echo $i<br />
			}</code></td>
			<td>Prints numbers 0 through 9.</td>
		</tr>
		<tr>
			<td><code>for&nbsp;<em>var</em>&nbsp;in $<em>array</em><br />
			do<br />
			<em>codeblock</em><br />
			done</code></td>
			<td><code>foreach ($<em>var</em>&nbsp;in $<em>array</em>)<br />
			{<br />
			<em>codeblock</em><br />
			}</code></td>
			<td>For each loop</td>
		</tr>
		<tr>
			<td><code>continue&nbsp;&nbsp;break</code></td>
			<td><code>continue&nbsp;&nbsp;break</code></td>
			<td>Loop controls: continue stops current loop iteration and begins the next; break exits the loop currently being executed.</td>
		</tr>
		<tr>
			<td><code>basename&nbsp;<em>file</em></code></td>
			<td><code><em>file</em>.name</code></td>
			<td>The name of&nbsp;<em>file</em>&nbsp;without the path. In PowerShell, remember to first get the file object.</td>
		</tr>
		<tr>
			<td><code>dirname&nbsp;<em>file</em></code></td>
			<td><code><em>file</em>.directoryname</code></td>
			<td>The name directory&nbsp;<em>file</em>&nbsp;is in. In PowerShell, remember to first get the file object.</td>
		</tr>
		<tr>
			<td><code>stat -c%s $<em>file</em></code>&nbsp;(or)<br />
			<code>$(stat -c%s $<em>file</em>)</code></td>
			<td><code><em>file</em>.length</code></td>
			<td>The number of bytes in&nbsp;<em>file</em>. In PowerShell, remember to first get the file object.</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code><em>file</em>.LastWriteTime</code></td>
			<td>The last modified time for&nbsp;<em>file</em>. Remember to first get the file object.</td>
		</tr>
		<tr>
			<td><code><em>files</em>=`ls`</code>&nbsp;(or)<br />
			<code><em>files</em>=$(ls)</code>&nbsp;(or)<br />
			<code><em>files</em>=*</code></td>
			<td><code>$<em>files</em>&nbsp;= Get-Item *</code></td>
			<td>Store a list of the files in the current working directory in&nbsp;<em>$files</em>. In PowerShell, check out the -exclude flag as well as the Get-ChildItem cmdlet.</td>
		</tr>
		<tr>
			<td><code>|&nbsp;&nbsp;&gt;&nbsp;&nbsp;&gt;&gt;&nbsp;&nbsp;2&gt;&nbsp;&nbsp;2&gt;&gt;</code></td>
			<td><code>|&nbsp;&nbsp;&gt;&nbsp;&nbsp;&gt;&gt;&nbsp;&nbsp;2&gt;&nbsp;&nbsp;2&gt;&gt;</code></td>
			<td>Piping, output and error redirection. In BASH, output redirected to&nbsp;<code>/dev/null</code>&nbsp;is gone. In PowerShell, output redirected to&nbsp;<code>$null</code>&nbsp;is gone.</td>
		</tr>
		<tr>
			<td><code><em>printArg</em>()<br />
			{<br />
			<em>echo</em>&nbsp;$1<br />
			}</code></td>
			<td><code>function&nbsp;<em>printArg</em><br />
			{<br />
			param ($<em>p1</em>)<br />
			<em>echo $p1</em><br />
			}</code></td>
			<td>function to print the first argument to the screen.</td>
		</tr>
		<tr>
			<td><code><em>return_five</em>()<br />
			{<br />
			return&nbsp;<em>5</em><br />
			}</code>
			<p>&nbsp;</p>

			<p><code><em>return_five</em><br />
			echo $?</code></p>
			</td>
			<td><code>function&nbsp;<em>return_five</em><br />
			{<br />
			echo<em>&nbsp;5</em></code>&nbsp;&nbsp;(or)&nbsp;&nbsp;<code>return&nbsp;<em>5</em><br />
			}</code>
			<p>&nbsp;</p>

			<p><code>$<em>value</em>&nbsp;=&nbsp;<em>return_five</em><br />
			echo $<em>value</em></code></p>
			</td>
			<td>Function returns 5, which is printed after the function call. In PowerShell, any output in a function that is not caught is returned. The return statement merely ends the function. The return value of a BASH function is stored in the variable $?.</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>File Information/Operations</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>ls</code></td>
			<td>&nbsp;</td>
			<td>Listing of files. For bash, learn the options of&nbsp;<code>-lisa, -r, -R</code>.</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>ls</code></td>
			<td>Listing of files. For PowerShell, learn&nbsp;<code>-f, -r, -filter,&nbsp;</code>and&nbsp;<code>-exclude</code></td>
		</tr>
		<tr>
			<td><code>tree</code></td>
			<td><code>tree</code></td>
			<td>Graphically displays the directory structure of a drive or path.</td>
		</tr>
		<tr>
			<td><code>cat</code></td>
			<td><code>cat</code></td>
			<td>List the contents of a file on the&nbsp;<code>stdout</code></td>
		</tr>
		<tr>
			<td><code>more</code></td>
			<td><code>more</code></td>
			<td>List the contents of a file on the&nbsp;<code>stdout</code>, pausing after each page</td>
		</tr>
		<tr>
			<td><code>mkdir</code></td>
			<td><code>mkdir</code></td>
			<td>Creates a directory.</td>
		</tr>
		<tr>
			<td><code>rmdir</code></td>
			<td><code>rmdir</code></td>
			<td>Deletes a folder if it is empty</td>
		</tr>
		<tr>
			<td><code>pwd</code></td>
			<td><code>pwd</code></td>
			<td>print working directory</td>
		</tr>
		<tr>
			<td><code>cd</code></td>
			<td><code>cd</code></td>
			<td>Change the current directory to the one given as argument.</td>
		</tr>
		<tr>
			<td><code>pushd</code></td>
			<td><code>pushd</code></td>
			<td>Saves the current directory name on the stack, and then cd&rsquo;s the one given as argument.</td>
		</tr>
		<tr>
			<td><code>popd</code></td>
			<td><code>popd</code></td>
			<td>Pop off the top-most name on the stack, and then cd to it</td>
		</tr>
		<tr>
			<td><code>mv</code></td>
			<td><code>mv</code></td>
			<td>Moves or renames files. In PowerShell, check out the -force and -WhatIf flags. In BASH, check out the -f flag.</td>
		</tr>
		<tr>
			<td><code>cp -r</code></td>
			<td><code>cp -r</code></td>
			<td>Copies files and directory trees recursively.</td>
		</tr>
		<tr>
			<td><code>cp</code></td>
			<td><code>cp</code></td>
			<td>Copies files. In PowerShell, check out the -force and -WhatIf flags. In BASH, check out the -f flag.</td>
		</tr>
		<tr>
			<td><code>rm</code></td>
			<td><code>rm</code></td>
			<td>Deletes a file. Check out the -r flag. In PowerShell, check out the -force and -WhatIf flags. In BASH, check out the -f flag.</td>
		</tr>
		<tr>
			<td><code>cat</code></td>
			<td><code>cat</code></td>
			<td>show the contents of each file in sequence</td>
		</tr>
		<tr>
			<td><code>more</code></td>
			<td><code>more</code></td>
			<td>pagination</td>
		</tr>
		<tr>
			<td><code>rm</code></td>
			<td><code>rm</code></td>
			<td>Remove files</td>
		</tr>
		<tr>
			<td><code>ln</code></td>
			<td>&nbsp;</td>
			<td>Link (hard or soft) to an existing file.</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>mklink</code></td>
			<td>Link (hard or soft) to an existing file. Type&nbsp;<code>cmd /c mklink</code>&nbsp;to use it in PowerShell</td>
		</tr>
		<tr>
			<td><code>chmod</code></td>
			<td><code>attrib</code></td>
			<td>Change file permissions/attributes</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>icacls</code></td>
			<td>Displays or modifies access control lists (ACLs) of files</td>
		</tr>
		<tr>
			<td><code>chown</code></td>
			<td><code>icacls</code></td>
			<td>Change ownership of a file. In PowerShell, multiple steps are necessary</td>
		</tr>
		<tr>
			<td><code>umask</code></td>
			<td>&nbsp;</td>
			<td>get/set the file mode creation mask; packed vector of bits controlling the initial permissions on a newly created file</td>
		</tr>
		<tr>
			<td><code>du</code></td>
			<td><code>measure</code></td>
			<td>Disk space Used. In PowerShell, try&nbsp;<code>gci . -r | measure -property length -sum</code></td>
		</tr>
		<tr>
			<td><code>wc</code></td>
			<td><code>Measure-Object</code></td>
			<td>word count, etc.</td>
		</tr>
		<tr>
			<td><code>od</code></td>
			<td>&nbsp;</td>
			<td>Octal dump of file content. Almost always used with -x for hexadecimal dump</td>
		</tr>
		<tr>
			<td><code>tr</code></td>
			<td>&nbsp;</td>
			<td>Translate/substitute characters; useful in improving interoperability</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>assoc</code></td>
			<td>List associations of commands with extensions. Type&nbsp;<code>cmd /c assoc</code>&nbsp;to use it in PowerShell</td>
		</tr>
		<tr>
			<td><code>file</code></td>
			<td>&nbsp;</td>
			<td>Heuristically determine the type of file content</td>
		</tr>
		<tr>
			<td><code>grep</code></td>
			<td><code>select-string</code></td>
			<td>Search for a string in a file&rsquo;s content. For now, learn it without regexp.</td>
		</tr>
		<tr>
			<td><code>find</code></td>
			<td><code>gci</code></td>
			<td>Locate a file. By name, etc. For now, learn it without regexp.</td>
		</tr>
		<tr>
			<td><code>which</code></td>
			<td>&nbsp;</td>
			<td>Gives the full path name of a command</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>where</code></td>
			<td>Gives the full path name of a command.&nbsp; Type&nbsp;<code>cmd /c where</code>&nbsp;to use it in PowerShell</td>
		</tr>
		<tr>
			<td><code>diff</code></td>
			<td><code>diff</code></td>
			<td>List the differences between two text files</td>
		</tr>
		<tr>
			<td><code>cmp, diff</code></td>
			<td><code>compare, diff</code></td>
			<td>show the differences between two files</td>
		</tr>
		<tr>
			<td><code>&nbsp;</code></td>
			<td><code>gci . -r | sort length -descending | select -first 10</code></td>
			<td>get a list of the 10 largest files in the current directory (recursive)</td>
		</tr>
		<tr>
			<td><code>vi</code></td>
			<td><a href="http://www.vim.org/" rel="nofollow" target="_blank"><code>vim</code></a></td>
			<td>A powerful text editor. For now, learn to edit simple text files with it.</td>
		</tr>
		<tr>
			<td><code>kate, leafpad</code></td>
			<td><code>notepad</code></td>
			<td>Simple text editors.</td>
		</tr>
		<tr>
			<td><code>emacs</code></td>
			<td><a href="http://www.gnu.org/software/emacs" rel="nofollow" target="_blank"><code>emacs</code></a></td>
			<td>A very powerful multi-purpose text editor. For now, learn to edit simple text files with it.</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>Processes</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>time</code></td>
			<td><code>Measure-Command</code></td>
			<td>times commands, etc.</td>
		</tr>
		<tr>
			<td><code>ps</code></td>
			<td><code>ps</code></td>
			<td>shows current processes</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>gps | sort ws | select -last 5</code></td>
			<td>Get a list of the 5 processes using the most memory</td>
		</tr>
		<tr>
			<td>&nbsp;</td>
			<td><code>gsv | where {$_.Status -eq &quot;Stopped&quot;}</code></td>
			<td>Get a list of stopped services</td>
		</tr>
		<tr>
			<td><code>top</code></td>
			<td>&nbsp;</td>
			<td>like ps, but with continuous updates</td>
		</tr>
		<tr>
			<td><code>bg</code></td>
			<td><code>&nbsp;</code></td>
			<td>place a STOPped process in the background</td>
		</tr>
		<tr>
			<td><code>fg</code></td>
			<td><code>&nbsp;</code></td>
			<td>bring a backgrounded process to foreground</td>
		</tr>
		<tr>
			<td><code>kill</code></td>
			<td><code>kill</code></td>
			<td>kills a running program</td>
		</tr>
		<tr>
			<td><code>ltrace</code></td>
			<td><code>&nbsp;</code></td>
			<td>show lib calls made</td>
		</tr>
		<tr>
			<td><code>strace</code></td>
			<td><code>&nbsp;</code></td>
			<td>show sys calls made</td>
		</tr>
		<tr>
			<td colspan="3">
			<p><strong>System</strong></p>
			</td>
		</tr>
		<tr>
			<td><code>man</code></td>
			<td><code>man</code></td>
			<td>show reference pages</td>
		</tr>
		<tr>
			<td><code>set</code></td>
			<td><code>set</code></td>
			<td>set the values of shell variables</td>
		</tr>
		<tr>
			<td><code>set</code></td>
			<td><code>gv</code></td>
			<td>get and show the values of shell variables</td>
		</tr>
		<tr>
			<td><code>env</code></td>
			<td><code>ls env:\</code></td>
			<td>lists the current environment variables</td>
		</tr>
		<tr>
			<td><code>$PATH</code></td>
			<td><code>$env:path</code></td>
			<td>the search path</td>
		</tr>
		<tr>
			<td><code>links</code></td>
			<td><code>&nbsp;</code></td>
			<td>WWW/News/Mail browser</td>
		</tr>
		<tr>
			<td><code>sftp, filezilla</code></td>
			<td><code>&nbsp;filezilla</code></td>
			<td>transfer files securely to/from a remote machine</td>
		</tr>
		<tr>
			<td><code>ssh, putty</code></td>
			<td><code>&nbsp;sshclient, putty</code></td>
			<td>remote login securely</td>
		</tr>
		<tr>
			<td><code>w</code></td>
			<td><code>&nbsp;</code></td>
			<td>who is on the system, and what they are doing</td>
		</tr>
		<tr>
			<td><code>df</code></td>
			<td><code>gdr</code></td>
			<td>show mounted volumes, etc.</td>
		</tr>
	</tbody>
</table>
