<h1>Linux中shell文件操作大全</h1>

<h2>1.创建文件夹</h2>

<p>#!/bin/sh<br />
mkdir -m 777 &quot;%%1&quot;</p>

<h2>2.创建文件</h2>

<p>#!/bin/sh<br />
touch &quot;%%1&quot;</p>

<h2>3.重命名</h2>

<p>#!/bin/sh<br />
rm a.doc&nbsp;b.txt</p>

<h2>4.删除文件、文件夹</h2>

<p>删除文件：<br />
#!/bin/sh<br />
rm -if &quot;%%1&quot;</p>

<p>删除文件夹：<br />
#!/bin/sh<br />
rm -rf &quot;%%1&quot;</p>

<h2>5.删除一个目录下所有的文件夹</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
for dir2del in $direc/* ; do<br />
if [ -d $dir2del ]; then<br />
&nbsp; rm -rf $dir2del<br />
fi<br />
done</p>

<h2>6.清空文件夹</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
rm -if $direc/*<br />
for dir2del in $direc/* ; do<br />
if [ -d $dir2del ]; then<br />
&nbsp; rm -rf $dir2del<br />
fi<br />
done</p>

<h2>7.读取文件</h2>

<p>#!/bin/sh<br />
7.1.操作系统默认编码<br />
cat &quot;%%1&quot; | while read line; do<br />
echo $line;<br />
done</p>

<p>7.2.UTF-8编码<br />
cat &quot;%%1&quot; | while read line; do<br />
echo $line;<br />
done</p>

<p>7.3.分块读取<br />
cat &quot;%%1&quot; | while read line; do<br />
echo $line;<br />
done</p>

<h2>8.写入文件</h2>

<p>#!/bin/sh<br />
cat &gt; &quot;%%1&quot; &lt;&lt; EOF<br />
%%2<br />
EOF</p>

<p>tee &quot;%%1&quot; &gt; /dev/null &lt;&lt; EOF<br />
%%2<br />
EOF</p>

<p>#sed -i &#39;$a %%2&#39; %%2</p>

<h2>9.写入随机文件</h2>

<p>#!/bin/sh<br />
cat &gt; &quot;%%1&quot; &lt;&lt; EOF<br />
%%2<br />
EOF</p>

<p>tee &quot;%%1&quot; &gt; /dev/null &lt;&lt; EOF<br />
%%2<br />
EOF</p>

<p>#sed -i &#39;$a %%2&#39; %%2</p>

<h2>10.读取文件属性</h2>

<p>#!/bin/bash<br />
file=%%1<br />
file=${file:?&#39;必须给出参数&#39;}<br />
if [ ! -e $file ]; then<br />
&nbsp; &nbsp; echo &quot;$file 不存在&quot;<br />
&nbsp; &nbsp; exit 1<br />
fi<br />
if [ -d $file ]; then<br />
&nbsp; &nbsp; echo &quot;$file 是一个目录&quot;<br />
&nbsp; &nbsp; if [ -x $file ]; then<br />
&nbsp; &nbsp; &nbsp; &nbsp; echo &quot;可以&quot;<br />
&nbsp; &nbsp; else<br />
&nbsp; &nbsp; &nbsp; &nbsp; echo &quot;不可以&quot;<br />
&nbsp; &nbsp; fi<br />
&nbsp; &nbsp; echo &quot;对此进行搜索&quot; &nbsp;<br />
elif [ -f $file ]; then<br />
&nbsp; &nbsp; echo &quot;$file 是一个正规文件&quot;<br />
else<br />
&nbsp; &nbsp; echo &quot;$file不是一个正规文件&quot;<br />
fi<br />
if [ -O $file ]; then<br />
&nbsp; &nbsp; echo &quot;你是$file的拥有者&quot;<br />
else<br />
&nbsp; &nbsp; echo &quot;你不是$file的拥有者&quot;<br />
fi<br />
if [ -r $file ]; then<br />
&nbsp; &nbsp; echo &quot;你对$file拥有&quot;<br />
else<br />
&nbsp; &nbsp; echo &quot;你并不对$file拥有&quot;<br />
fi<br />
echo &quot;可读权限&quot;<br />
if [ -w $file ]; then<br />
&nbsp; &nbsp; echo &quot;你对$file拥有&quot;<br />
else<br />
&nbsp; &nbsp; echo &quot;你并不对$file拥有&quot;<br />
fi<br />
echo &quot;可写权限&quot;<br />
if [ -x $file -a ! -d $file ]; then<br />
&nbsp; &nbsp; echo &quot;你拥有对$file&quot;<br />
else<br />
&nbsp; &nbsp; echo &quot;你并不拥有对$file&quot;<br />
fi<br />
echo &quot;可执行的权限&quot;</p>

<h2>11.写入文件属性</h2>

<p>#!/bin/bash<br />
#修改存放在ext2、ext3、ext4、xfs、ubifs、reiserfs、jfs等文件系统上的文件或目录属性，使用权限超级用户。<br />
#一些功能是由Linux内核版本来支持的，如果Linux内核版本低于2.2，那么许多功能不能实现。同样－D检查压缩文件中的错误的功能，需要2.5.19以上内核才能支持。另外，通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。<br />
chattr [-RV] [-+=AacDdijsSu] [-v version] 文件或目录<br />
&nbsp; －R：递归处理所有的文件及子目录。<br />
&nbsp; －V：详细显示修改内容，并打印输出。<br />
&nbsp; －：失效属性。<br />
&nbsp; ＋：激活属性。<br />
&nbsp; = ：指定属性。<br />
&nbsp; A：Atime，告诉系统不要修改对这个文件的最后访问时间。<br />
&nbsp; S：Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。<br />
&nbsp; a：Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。<br />
&nbsp; i：Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。<br />
&nbsp; D：检查压缩文件中的错误。<br />
&nbsp; d：No dump，在进行文件系统备份时，dump程序将忽略这个文件。<br />
&nbsp; C：Compress，系统以透明的方式压缩这个文件。从这个文件读取时，返回的是解压之后的数据；而向这个文件中写入数据时，数据首先被压缩之后才写入磁盘。<br />
&nbsp; S：Secure Delete，让系统在删除这个文件时，使用0填充文件所在的区域。<br />
&nbsp; u：Undelete，当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件。</p>

<h2>12.枚举一个目录中的所有文件夹</h2>

<p>#!/bin/bash<br />
OLDIFS=$IFS<br />
IFS=:<br />
for path in $( find &quot;%%1&quot; -type d -printf &quot;%p$IFS&quot;)<br />
do<br />
#&quot;$path&quot;<br />
done<br />
IFS=$OLDIFS</p>

<h3><strong>特别：</strong></h3>

<p>事实上，文件夹下的子文件很多。我们只需要列出下一级的子文件夹就好：<br />
find . -maxdepth 1 &nbsp;-type d</p>

<h2>13.复制文件夹</h2>

<p>#!/bin/sh<br />
cp -rf &quot;%%1&quot; &quot;%%2&quot;</p>

<h2>14.复制一个目录下所有的文件夹到另一个目录下</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
for dir2cp in $direc/* ; do<br />
if [ -d $dir2cp ]; then<br />
&nbsp; cp $dir2cp &quot;%%2&quot;<br />
fi<br />
done</p>

<h2>15.移动文件夹</h2>

<p>#!/bin/sh<br />
mv -rf &quot;%%1&quot; &quot;%%2&quot;</p>

<h2>16.移动一个目录下所有的文件夹到另一个目录下</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
for dir2mv in $direc/* ; do<br />
if [ -d $dir2mv ]; then<br />
&nbsp; mv $dir2mv &quot;%%2&quot;<br />
fi<br />
done</p>

<h2>17.以一个文件夹的框架在另一个目录下创建文件夹和空文件</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
OLDIFS=$IFS<br />
IFS=:<br />
for path in $( find $direc -type d -printf &quot;%p$IFS&quot;)<br />
do<br />
mkdir -p &quot;%%2/${path:${#direc}+1}&quot;<br />
done<br />
IFS=$OLDIFS<br />
#cp -a &quot;%%1&quot; &quot;%%2&quot;</p>

<p>表达式 含义<br />
${#string}<br />
{#string}<br />
1，取得字符串长度<br />
string=abc12342341 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//等号二边不要有空格<br />
echo ${#string} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //结果11<br />
expr length $string &nbsp; &nbsp; &nbsp; &nbsp; //结果11<br />
expr &quot;$string&quot; : &quot;.*&quot; &nbsp; &nbsp; &nbsp; //结果11 分号二边要有空格,这里的:根match的用法差不多2，字符串所在位置<br />
expr index $string &#39;123&#39; &nbsp; &nbsp;//结果4 字符串对应的下标是从0开始的这个方法让我想起来了js的indexOf，各种语言对字符串的操作方法大方向都差不多，如果有语言基础的话，学习shell会很快的。<br />
3，从字符串开头到子串的最大长度<br />
expr match $string &#39;abc.*3&#39; //结果9个人觉得这个函数的用处不大，为什么要从开头开始呢。<br />
4，字符串截取<br />
echo ${string:4} &nbsp; &nbsp; &nbsp;//2342341 &nbsp;从第4位开始截取后面所有字符串<br />
echo ${string:3:3} &nbsp; &nbsp;//123 &nbsp; &nbsp; &nbsp;从第3位开始截取后面3位<br />
echo ${string:3:6} &nbsp; &nbsp;//123423 &nbsp; 从第3位开始截取后面6位<br />
echo ${string: -4} &nbsp; &nbsp;//2341 &nbsp;：右边有空格 &nbsp; 截取后4位<br />
echo ${string:(-4)} &nbsp; //2341 &nbsp;同上<br />
expr substr $string 3 3 &nbsp; //123 &nbsp;从第3位开始截取后面3位上面的方法让我想起了，php的substr函数，后面截取的规则是一样的。<br />
5，匹配显示内容<br />
//例3中也有match和这里的match不同，上面显示的是匹配字符的长度，而下面的是匹配的内容<br />
expr match $string &#39;\([a-c]*[0-9]*\)&#39; &nbsp;//abc12342341<br />
expr $string : &#39;\([a-c]*[0-9]\)&#39; &nbsp; &nbsp; &nbsp; //abc1<br />
expr $string : &#39;.*\([0-9][0-9][0-9]\)&#39; //341 显示括号中匹配的内容这里括号的用法，是不是根其他的括号用法有相似之处呢，<br />
6，截取不匹配的内容<br />
echo ${string#a*3} &nbsp; &nbsp; //42341 &nbsp;从$string左边开始，去掉最短匹配子串<br />
echo ${string#c*3} &nbsp; &nbsp; //abc12342341 &nbsp;这样什么也没有匹配到<br />
echo ${string#*c1*3} &nbsp; //42341 &nbsp;从$string左边开始，去掉最短匹配子串<br />
echo ${string##a*3} &nbsp; &nbsp;//41 &nbsp; &nbsp; 从$string左边开始，去掉最长匹配子串<br />
echo ${string%3*1} &nbsp; &nbsp; //abc12342 &nbsp;从$string右边开始，去掉最短匹配子串<br />
echo ${string%%3*1} &nbsp; &nbsp;//abc12 &nbsp; &nbsp; 从$string右边开始，去掉最长匹配子串这里要注意，必须从字符串的第一个字符开始，或者从最后一个开始，<br />
7，匹配并且替换<br />
echo ${string/23/bb} &nbsp; //abc1bb42341 &nbsp;替换一次<br />
echo ${string//23/bb} &nbsp;//abc1bb4bb41 &nbsp;双斜杠替换所有匹配<br />
echo ${string/#abc/bb} //bb12342341 &nbsp; #以什么开头来匹配，根php中的^有点像<br />
echo ${string/%41/bb} &nbsp;//abc123423bb &nbsp;%以什么结尾来匹配，根php中的$有点像</p>

<p>#!/bin/bash<br />
direc=$(pwd)<br />
for file in &quot;$(direc)/*&quot;<br />
do<br />
if [ &quot;${file##*.}&quot; = &quot;sh&quot; ]; then<br />
xterm -e bash $file<br />
elif [ &quot;${file##*.}&quot; = &quot;bin&quot; ]; then<br />
xterm -e $file<br />
elif [ &quot;${file##*.}&quot; = &quot;run&quot; ]; then<br />
xterm -e $file<br />
elif [ &quot;${file##*.}&quot; = &quot;bundle&quot; ]; then<br />
xterm -e $file<br />
elif [ &quot;${file##*.}&quot; = &quot;pl&quot; ]; then<br />
xterm -e perl $file<br />
elif [ &quot;${file##*.}&quot; = &quot;class&quot; ]; then<br />
xterm -e java ${file%.*}<br />
elif [ &quot;${file##*.}&quot; = &quot;rpm&quot; ]; then<br />
xterm -e rpm -ivh $file<br />
elif [ &quot;${file##*.}&quot; = &quot;rb&quot; ]; then<br />
xterm -e ruby $file<br />
elif [ &quot;${file##*.}&quot; = &quot;py&quot; ]; then<br />
xterm -e python $file<br />
elif [ &quot;${file##*.}&quot; = &quot;jar&quot; ]; then<br />
xterm -e java -jar $file<br />
fi<br />
done<br />
OLDIFS=$IFS<br />
IFS=:<br />
for path in $( find $direc -type d -printf &quot;%p$IFS&quot;)<br />
do<br />
for file in `ls $path`<br />
do<br />
if [ &quot;${file##*.}&quot; = &quot;sh&quot; ]; then<br />
xterm -e bash &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;bin&quot; ]; then<br />
xterm -e &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;run&quot; ]; then<br />
xterm -e &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;bundle&quot; ]; then<br />
xterm -e &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;pl&quot; ]; then<br />
xterm -e perl &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;class&quot; ]; then<br />
xterm -e java &quot;&quot;&quot;&quot;$path&quot;/&quot;${file%.*}&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;rpm&quot; ]; then<br />
xterm -e rpm -ivh &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;rb&quot; ]; then<br />
xterm -e ruby &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;py&quot; ]; then<br />
xterm -e python &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
elif [ &quot;${file##*.}&quot; = &quot;jar&quot; ]; then<br />
xterm -e java -jar &quot;&quot;&quot;&quot;$path&quot;/&quot;$file&quot;&quot;&quot;&quot;<br />
fi<br />
done<br />
done<br />
IFS=$OLDIFS</p>

<h2>18.复制文件</h2>

<p>#!/bin/sh<br />
cp %%1 %%2</p>

<h2>19.复制一个目录下所有的文件到另一个目录</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; $(pwd)<br />
for file in &quot;$direc/*&quot;<br />
do<br />
cp &quot;$file&quot; &quot;%%1&quot;<br />
done</p>

<h2>20.提取扩展名</h2>

<p>#!/bin/sh<br />
%%2=${%%1##.}</p>

<h2>21.提取文件名</h2>

<p>#!/bin/sh<br />
%%2=&quot;$(basename %%1)&quot;</p>

<h2>22.提取文件路径</h2>

<p>#!/bin/sh<br />
%%2=&quot;$(dirname %%1)&quot;</p>

<h2>23.替换扩展名</h2>

<p>#!/bin/sh<br />
%%3=&quot;$(basename %%1)$%%2&quot;</p>

<h2>24.追加路径</h2>

<p>#!/bin/sh<br />
%%3=&quot;$(dirname %%1)/$%%2&quot;</p>

<h2>25.移动文件</h2>

<p>#!/bin/sh<br />
mv &quot;%%1&quot; &quot;%%2&quot;</p>

<h2>26.移动一个目录下所有文件到另一个目录</h2>

<p>#!/bin/bash<br />
direc=&quot;%%1&quot; #$(pwd)<br />
OLDIFS=$IFS<br />
IFS=:<br />
for file in &quot;$(direc)/*&quot;<br />
do<br />
mv &quot;$file&quot; &quot;%%1&quot;<br />
done<br />
IFS=$OLDIFS</p>

<h2>27.指定目录下搜索文件</h2>

<p>#!/bin/sh<br />
find -name &quot;%%1&quot;</p>

<h2>28.打开文件对话框</h2>

<p>#!/bin/sh<br />
%%1=&quot;$(Xdialog --fselect &#39;~/&#39; 0 0 2&gt;&amp;1)&quot;</p>

<h2>29.文件分割</h2>

<p>#!/bin/sh<br />
split -b 2k &quot;%%1&quot;</p>

<p>while read f1 f2 f3<br />
do<br />
&nbsp; &nbsp; echo $f1 &gt;&gt; f1<br />
&nbsp; &nbsp; echo $f2 &gt;&gt; f2<br />
&nbsp; &nbsp; echo $f3 &gt;&gt; f3<br />
done</p>

<p><br />
#!/bin/bash<br />
&nbsp; linenum=`wc &nbsp; -l &nbsp; httperr8007.log| &nbsp; awk &nbsp; &#39;{print &nbsp; $1}&#39;` &nbsp;<br />
&nbsp; n1=1 &nbsp;<br />
&nbsp; file=1 &nbsp;<br />
&nbsp; while &nbsp; [ &nbsp; $n1 &nbsp; -lt &nbsp; $linenum &nbsp; ] &nbsp;<br />
&nbsp; do &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n2=`expr &nbsp; $n1 &nbsp; + &nbsp; 999` &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sed &nbsp; -n &nbsp; &quot;${n1}, &nbsp; ${n2}p&quot; &nbsp; httperr8007.log &gt; &nbsp; file_$file.log &nbsp; &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n1=`expr &nbsp; $n2 &nbsp; + &nbsp; 1` &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; file=`expr &nbsp; $file &nbsp; + &nbsp; 1` &nbsp;<br />
&nbsp; done &nbsp;</p>

<p><br />
其中httperr8007.log为你想分割的大文件，file_$file.log &nbsp;为分割后的文件，最后为file_1.log，file_2.log，file_3.log&hellip;&hellip;,分割完后的每个文件只有1000行（参数可以自己设置）</p>

<p>split 参数：<br />
-b &nbsp;：后面可接欲分割成的档案大小，可加单位，例如 b, k, m 等；<br />
-l &nbsp;：以行数来进行分割；</p>

<p>#按每个文件1000行来分割除</p>

<p>split -l 1000 httperr8007.log httperr</p>

<p>httpaa，httpab，httpac ........</p>

<p>#按照每个文件100K来分割</p>

<p>split -b 100k httperr8007.log http</p>

<p>httpaa，httpab，httpac ........</p>

<p>#!/bin/bash<br />
if [ $# -ne 2 ]; then<br />
echo &#39;Usage: split file size(in bytes)&#39;<br />
exit<br />
fi</p>

<p>file=$1<br />
size=$2</p>

<p>if [ ! -f $file ]; then<br />
echo &quot;$file doesn&#39;t exist&quot;<br />
exit<br />
fi</p>

<p>#TODO: test if $size is a valid integer</p>

<p>filesize=`/bin/ls -l $file | awk &#39;{print $5}&#39;`<br />
echo filesize: $filesize</p>

<p>let pieces=$filesize/$size<br />
let remain=$filesize-$pieces*$size<br />
if [ $remain -gt 0 ]; then<br />
let pieces=$pieces+1<br />
fi<br />
echo pieces: $pieces</p>

<p>i=0<br />
while [ $i -lt $pieces ];<br />
do<br />
echo split: $file.$i:<br />
dd if=$file of=$file.$i bs=$size count=1 skip=$i<br />
let i=$i+1<br />
done</p>

<p>echo &quot;#!/bin/bash&quot; &gt; merge</p>

<p>echo &quot;i=0&quot; &gt;&gt; merge<br />
echo &quot;while [ $i -lt $pieces ];&quot; &gt;&gt; merge<br />
echo &quot;do&quot; &gt;&gt; merge<br />
echo &quot; echo merge: $file.$i&quot; &gt;&gt; merge<br />
echo &quot; if [ ! -f $file.$i ]; then&quot; &gt;&gt; merge<br />
echo &quot; echo merge: $file.$i missed&quot; &gt;&gt; merge<br />
echo &quot; rm -f $file.merged&quot; &gt;&gt; merge<br />
echo &quot; exit&quot; &gt;&gt; merge<br />
echo &quot; fi&quot; &gt;&gt; merge<br />
echo &quot; dd if=$file.$i of=$file.merged bs=$size count=1 seek=$i&quot; &gt;&gt; merge<br />
echo &quot; let i=$i+1&quot; &gt;&gt; merge<br />
echo &quot;done&quot; &gt;&gt; merge<br />
chmod u+x merge&#39;</p>

<h2>30.文件合并</h2>

<p>#!/bin/sh<br />
cp &quot;%%1&quot;+&quot;%%2&quot; &quot;%%3&quot;</p>

<p>exec 3 exec 4 while read f1 &lt;&amp;3 &amp;&amp; read f2 &lt;&amp;4<br />
do<br />
&nbsp; &nbsp; echo $f1 $f2 &gt;&gt; join.txt<br />
done</p>

<p>#!/bin/bash<br />
if [ $# -ne 2 ]; then<br />
echo &#39;Usage: split file size(in bytes)&#39;<br />
exit<br />
fi</p>

<p>file=$1<br />
size=$2</p>

<p>if [ ! -f $file ]; then<br />
echo &quot;$file doesn&#39;t exist&quot;<br />
exit<br />
fi</p>

<p>#TODO: test if $size is a valid integer</p>

<p>filesize=`/bin/ls -l $file | awk &#39;{print $5}&#39;`<br />
echo filesize: $filesize</p>

<p>let pieces=$filesize/$size<br />
let remain=$filesize-$pieces*$size<br />
if [ $remain -gt 0 ]; then<br />
let pieces=$pieces+1<br />
fi<br />
echo pieces: $pieces</p>

<p>i=0<br />
while [ $i -lt $pieces ];<br />
do<br />
echo split: $file.$i:<br />
dd if=$file of=$file.$i bs=$size count=1 skip=$i<br />
let i=$i+1<br />
done</p>

<p>echo &quot;#!/bin/bash&quot; &gt; merge</p>

<p>echo &quot;i=0&quot; &gt;&gt; merge<br />
echo &quot;while [ $i -lt $pieces ];&quot; &gt;&gt; merge<br />
echo &quot;do&quot; &gt;&gt; merge<br />
echo &quot; echo merge: $file.$i&quot; &gt;&gt; merge<br />
echo &quot; if [ ! -f $file.$i ]; then&quot; &gt;&gt; merge<br />
echo &quot; echo merge: $file.$i missed&quot; &gt;&gt; merge<br />
echo &quot; rm -f $file.merged&quot; &gt;&gt; merge<br />
echo &quot; exit&quot; &gt;&gt; merge<br />
echo &quot; fi&quot; &gt;&gt; merge<br />
echo &quot; dd if=$file.$i of=$file.merged bs=$size count=1 seek=$i&quot; &gt;&gt; merge<br />
echo &quot; let i=$i+1&quot; &gt;&gt; merge<br />
echo &quot;done&quot; &gt;&gt; merge<br />
chmod u+x merge&#39;</p>

<h2>31.文件简单加密</h2>

<p>#!/bin/bash<br />
#make test &amp;&amp; make strings &amp;&amp; sudo make install<br />
shc -r -f %%1.sh<br />
#%%1.x<br />
#%%1.x.c</p>

<h2>32.文件简单解密</h2>

<p>#!/bin/bash<br />
#make test &amp;&amp; make strings &amp;&amp; sudo make install<br />
shc -r -f %%1.sh<br />
#%%1.x<br />
#%%1.x.c</p>

<h2>33.读取ini文件属性</h2>

<p>#!/bin/bash<br />
if [ &quot;$%%3&quot; = &quot;&quot; ];then<br />
&nbsp; &nbsp;sed -n &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp;/^\[.*\]/d<br />
&nbsp; &nbsp;/^[ ]*$/d<br />
&nbsp; &nbsp;s/;.*$//<br />
&nbsp; &nbsp;p<br />
&nbsp; &nbsp;}&quot; $1<br />
elif [ &quot;$%%4&quot; = &quot;&quot; ];then<br />
&nbsp; &nbsp;sed -n &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp;/^\[.*\]/d<br />
&nbsp; &nbsp;/^[ ]*$/d<br />
&nbsp; &nbsp;s/;.*$//<br />
&nbsp; &nbsp;s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | ]*=[ | &nbsp; ]*\(.*\)[ | &nbsp; &nbsp; ]*/\1/p<br />
&nbsp; &nbsp;}&quot; $1<br />
else<br />
&nbsp; &nbsp; &nbsp; &nbsp;if [ &quot;$%%4&quot; = &quot;#&quot; ];then<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sed &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | &nbsp; &nbsp;]*=.*/ /<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }p&quot; $1 &gt; /tmp/sed$$<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mv /tmp/sed$$ $1<br />
&nbsp; &nbsp; &nbsp; &nbsp;else<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sed &quot;/\[$2\]/,/\[.*\]/{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | &nbsp; &nbsp;]*=.*/$%%3=$%%4/<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }p&quot; $1 &gt; /tmp/sed$$<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mv /tmp/sed$$ $%%1<br />
&nbsp; &nbsp; &nbsp; &nbsp;fi<br />
fi</p>

<h2>34.合并一个文件下所有的文件</h2>

<p>#!/bin/sh<br />
cat $(ls |grep -E &#39;%%1\.&#39;) &gt; %%1</p>

<p>#!/bin/bash<br />
OLDIFS=$IFS<br />
IFS=:<br />
for path in $( find %%1 -type d -printf &quot;%p$IFS&quot;)<br />
do<br />
for file in $path/*.c $path/*.cpp<br />
do<br />
if [[ ! &quot;$file&quot; =~ \*.[A-Za-z]+ ]]; then<br />
#&quot;$(path)/$(file)&quot;<br />
fi<br />
done<br />
done<br />
IFS=$OLDIFS</p>

<p>#!/bin/bash<br />
cat &lt;&lt;&#39;EOF&#39;&gt; combine.c<br />
#include<br />
int main()<br />
{<br />
FILE *f1,*f2,*f3;<br />
f1=fopen(&quot;a1.txt&quot;,&quot;r&quot;);<br />
f2=fopen(&quot;a2.txt&quot;,&quot;r&quot;);<br />
f3=fopen(&quot;a3.txt&quot;,&quot;w&quot;);<br />
int a,b;<br />
a=getw(f1); &nbsp; /*从a1.txt和a2.txt中分别取最小的数a和b*/<br />
b=getw(f2);<br />
while(!feof(f1)&amp;&amp;!feof(f2)) &nbsp;/*两个文件都没结束时，执行循环、比较*/<br />
{<br />
if(a&lt;=b)<br />
{<br />
putw(a,f3);<br />
a=getw(f1);<br />
}<br />
else<br />
{putw(b,f3);<br />
b=getw(f2);<br />
}<br />
&nbsp; &nbsp;}<br />
if(feof(f1)) &nbsp;/*文件a1.txt结束时，把a2.txt中的数全部输入a3.txt*/<br />
{putw(b,f3);<br />
while((b=getw(f2))!=EOF)<br />
putw(b,f3);<br />
}<br />
if(feof(f2)) &nbsp; /*同上*/<br />
{<br />
putw(a,f3);<br />
while((a=getw(f1))!=EOF)<br />
putw(a,f3);<br />
}<br />
fclose(f1);<br />
fclose(f2);<br />
fclose(f3);<br />
printf(&quot;已完成!&quot;);<br />
return 0;<br />
}<br />
EOF<br />
gcc -o combine combine.c<br />
if [ $? -eq 0 ]; then<br />
./combine<br />
else<br />
echo &#39;Compile ERROR&#39;<br />
fi</p>

<h2>35.写入ini文件属性</h2>

<p>#!/bin/bash<br />
if [ &quot;$%%3&quot; = &quot;&quot; ];then<br />
&nbsp; &nbsp;sed -n &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp;/^\[.*\]/d<br />
&nbsp; &nbsp;/^[ ]*$/d<br />
&nbsp; &nbsp;s/;.*$//<br />
&nbsp; &nbsp;p<br />
&nbsp; &nbsp;}&quot; $1<br />
elif [ &quot;$%%4&quot; = &quot;&quot; ];then<br />
&nbsp; &nbsp;sed -n &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp;/^\[.*\]/d<br />
&nbsp; &nbsp;/^[ ]*$/d<br />
&nbsp; &nbsp;s/;.*$//<br />
&nbsp; &nbsp;s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | ]*=[ | &nbsp; ]*\(.*\)[ | &nbsp; &nbsp; ]*/\1/p<br />
&nbsp; &nbsp;}&quot; $1<br />
else<br />
&nbsp; &nbsp; &nbsp; &nbsp;if [ &quot;$%%4&quot; = &quot;#&quot; ];then<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sed &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | &nbsp; &nbsp;]*=.*/ /<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }p&quot; $1 &gt; /tmp/sed$$<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mv /tmp/sed$$ $%%1<br />
&nbsp; &nbsp; &nbsp; &nbsp;else<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sed &quot;/\[$%%2\]/,/\[.*\]/{<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s/^[ | &nbsp; &nbsp; &nbsp; &nbsp;]*$%%3[ | &nbsp; &nbsp;]*=.*/$%%3=$%%4/<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }p&quot; $1 &gt; /tmp/sed$$<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mv /tmp/sed$$ $%%1<br />
&nbsp; &nbsp; &nbsp; &nbsp;fi<br />
fi</p>

<h2>36.获得当前路径</h2>

<p>#!/bin/sh<br />
%%1=$(pwd)</p>

<p>37.读取XML数据库</p>

<p>如何通过shell命令行读取xml文件中某个属性所对应的值？<br />
例如：<br />
BuildVersion 5<br />
我希望能够通过Unix shell命令对属性键的名称BuildVersion进行查询，返回的结果是5，如何实现呀？<br />
#!/bin/bash<br />
grep BuildVersion|sed &#39;s/.*&lt;.*&gt;\([^&lt;].*\)&lt;.*&gt;.*/\1/&#39;</p>

<p>结果返回的是&ldquo;BuildVersion&rdquo;，而不是&ldquo;5&rdquo;，如果要查询BuildVersion自动返回数值5应当如何写？</p>

<p>应该没错的。试一下： echo &quot;BuildVersion 5&quot;|grep BuildVersion|sed &#39;s/.*&lt;.*&gt;\([^&lt;].*\)&lt;.*&gt;.*/\1/&#39;我在SL的终端里试，返回值是5</p>

<p>目前需要从xml文件提取数据，想做一个xmlparser.sh<br />
xml 类似这样</p>

<p>&nbsp; &nbsp;</p>

<p>希望输入 xmlparser.sh a.xml hostip可以返回192.168.0.1</p>

<p><br />
#!/bin/sh</p>

<p>if [ $# -ne 2 ];then<br />
&nbsp; &nbsp;echo &quot;Usage: $0 &quot;<br />
&nbsp; &nbsp;exit 0<br />
fi</p>

<p>grep $2 $1|awk &#39;{print $2}&#39;|grep -o &quot;[0-9.]*&quot;</p>

<p><br />
把<br />
grep $2 $1|awk &#39;{print $2}&#39;|grep -o &quot;[0-9.]*&quot;<br />
改成<br />
grep $2 $1|awk &#39;{print $2}&#39;|grep -Eo &quot;[0-9.]+&quot;<br />
楼上这个有问题，如果我要得到的是</p>

<p>&nbsp; &nbsp;</p>

<p>中的sharename，那么，呵呵，就错了</p>

<p>我觉得应该先定位到第二个参数&ldquo;$2&rdquo;的位置，然后再提取&ldquo;=&rdquo;后面的内容</p>

<p>这里有个完整的实现：<br />
Parse Simple XML Files using Bash &ndash; Extract Name Value Pairs and Attributes<br />
http://www.humbug.in/2010/parse-simple-xml-files-using-bash-extract-name-value-pairs-and-attributes/</p>

<p><br />
不过需要安装xmllint.</p>

<p>设计到对多个xml文件进行element的读取和列表。有人做过么？<br />
举个例子，<br />
多个xml文件里面都有<br />
&nbsp;</p>