<p>&nbsp;</p>

<h1><a href="http://blog.csdn.net/sunshine__me/article/details/48810961">汇编语言编写的Hello World</a></h1>

<p>标签：&nbsp;<a href="http://www.csdn.net/tag/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">汇编语言</a></p>

<p>2015-09-29 20:36&nbsp;984人阅读&nbsp;<a href="http://blog.csdn.net/sunshine__me/article/details/48810961#comments" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])">评论</a>(0)&nbsp;<a href="javascript:void(0);" onclick="javascript:collectArticle('%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%bc%96%e5%86%99%e7%9a%84Hello+World','48810961');return false;" target="_blank" title="收藏">收藏</a>&nbsp;<a href="http://blog.csdn.net/sunshine__me/article/details/48810961#report" onclick="javascript:report(48810961,2);return false;" title="举报">举报</a></p>

<p><img src="http://static.blog.csdn.net/images/category_icon.jpg" />&nbsp;分类：</p>

<p>汇编语言</p>

<p>版权声明：本文为博主原创文章，未经博主允许不得转载。</p>

<p><a href="http://lib.csdn.net/base/linux" target="_blank" title="Linux知识库">Linux</a>&nbsp;下用汇编语言编写的代码具有两种不同的形式。第一种是完全的汇编代码，指的是整个程序全部用汇编语言编写。尽管是完全的汇编代码，Linux 平台下的汇编工具也吸收了 C 语言的长处，使得程序员可以使用 #include、#ifdef 等预处理指令，并能够通过宏定义来简化代码。第二种是内嵌的汇编代码，指的是可以嵌入到<a href="http://lib.csdn.net/base/c" target="_blank" title="C语言知识库">C语言</a>程序中的汇编代码片段。虽然 ANSI 的 C 语言标准中没有关于内嵌汇编代码的相应规定，但各种实际使用的 C 编译器都做了这方面的扩充，这其中当然就包括 Linux 平台下的 GCC。</p>

<p><strong><em>一 Linux汇编语法格式</em></strong></p>

<p>绝大多数 Linux 程序员以前只接触过DOS/Windows 下的汇编语言，这些汇编代码都是 Intel 风格的。但在 Unix 和 Linux 系统中，更多采用的还是 AT&amp;T 格式，两者在语法格式上有着很大的不同.</p>

<p><strong><em>二 Hello World的编写</em></strong></p>

<p>在 Linux&nbsp;<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" title="操作系统知识库">操作系统</a>中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。&nbsp;<br />
Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。 下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：</p>

<p>例:AT&amp;T格式</p>

<pre>
<code>#hello.s 
.data                    # 数据段声明
        msg : .string &quot;Hello, world!\\n&quot; # 要输出的字符串
        len = . - msg                   # 字串长度
.text                    # 代码段声明
.global _start           # 指定入口函数

_start:                  # 在屏幕上显示一个字符串
        movl $len, %edx  # 参数三：字符串长度
        movl $msg, %ecx  # 参数二：要显示的字符串
        movl $1, %ebx    # 参数一：文件描述符(stdout) 
        movl $4, %eax    # 系统调用号(sys_write) 
        int  $0x80       # 调用内核功能

                         # 退出程序
        movl $0,%ebx     # 参数一：退出代码
        movl $1,%eax     # 系统调用号(sys_exit) 
        int  $0x80       # 调用内核功能</code></pre>

<p>&nbsp;</p>

<p>例:Intel格式</p>

<pre>
<code>; hello.asm 
section .data            ; 数据段声明
        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串
        len equ $ - msg                 ; 字串长度
section .text            ; 代码段声明
global _start            ; 指定入口函数
_start:                  ; 在屏幕上显示一个字符串
        mov edx, len     ; 参数三：字符串长度
        mov ecx, msg     ; 参数二：要显示的字符串
        mov ebx, 1       ; 参数一：文件描述符(stdout) 
        mov eax, 4       ; 系统调用号(sys_write) 
        int 0x80         ; 调用内核功能
                         ; 退出程序
        mov ebx, 0       ; 参数一：退出代码
        mov eax, 1       ; 系统调用号(sys_exit) 
        int 0x80         ; 调用内核功能</code></pre>

<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>

<p><strong><em>三 Linux 汇编工具</em></strong></p>

<p>1.汇编器&nbsp;<br />
汇编器（assembler）的作用是将用汇编语言编写的源程序转换成二进制形式的目标代码。Linux 平台的标准汇编器是 GAS，它是 GCC 所依赖的后台汇编工具，通常包含在 binutils 软件包中。GAS 使用标准的 AT&amp;T 汇编语法，可以用来汇编用 AT&amp;T 格式编写的程序：</p>

<blockquote>
<p>panlu@ThinkPad:~/汇编语言$ as -o hello.o helloWorld.s</p>
</blockquote>

<p>Linux 平台上另一个经常用到的汇编器是 NASM，它提供了很好的宏指令功能，并能够支持相当多的目标代码格式，包括 bin、a.out、coff、elf、rdf 等。NASM 采用的是人工编写的语法分析器，因而执行速度要比 GAS 快很多，更重要的是它使用的是 Intel 汇编语法，可以用来编译用 Intel 语法格式编写的汇编程序：</p>

<blockquote>
<p>panlu@ThinkPad:~/汇编语言$ nasm -f elf hello.asm</p>
</blockquote>

<p>2.链接器&nbsp;<br />
由汇编器产生的目标代码是不能直接在计算机上运行的，它必须经过链接器的处理才能生成可执行代码。链接器通常用来将多个目标代码连接成一个可执行代码，这样可以先将整个程序分成几个模块来单独开发，然后才将它们组合(链接)成一个应用程序。 Linux 使用 ld 作为标准的链接程序，它同样也包含在 binutils 软件包中。汇编程序在成功通过 GAS 或 NASM 的编译并生成目标代码后，就可以使用 ld 将其链接成可执行程序了：</p>

<blockquote>
<p>panlu@ThinkPad:~/汇编语言$ ld -s -o hello hello.o</p>
</blockquote>

<p>3 运行</p>

<blockquote>
<p>panlu@ThinkPad:~/汇编语言$ ./hello&nbsp;<br />
Hello World!</p>
</blockquote>

<p>四 Intel格式</p>

<p>1、在ubuntu上安装nasm方法</p>

<p>首先在网站<a href="http://www.nasm.us/pub/nasm/releasebuilds/2.10.07/">http://www.nasm.us/pub/nasm/releasebuilds/2.10.07/</a>下面去下载2.10.07.tar.gz这个版本（一般在ubuntu上面都是使用这个压缩形式的）。如果要下其他版本的nasm可以通过<a href="http://www.nasm.us/">http://www.nasm.us/</a>来进行选择进行下载。</p>

<p>2、安装方法：使用如下的命令：</p>

<p>解压：tar zxvf nasm-2.10.07.tar.gz</p>

<p>进入刚解压的目录 cd 解压后的目录</p>

<blockquote>
<p>然后执行命令：./configure&nbsp;<br />
make&nbsp;<br />
sudo make install</p>
</blockquote>

<p>通过以上的步骤nasm就在ubuntu上安装好了。也可以通过使用命令：nasm -version来查看是否安装成功。如果出现了nasm的版本信息则说明安装成功，否则还需进一步安装。</p>

<blockquote>
<p>panlu@ThinkPad:~/汇编语言$ nasm -version&nbsp;<br />
NASM version 2.10.07 compiled on Sep 29 2015</p>
</blockquote>

<p>3 编译运行</p>

<blockquote>
<p>nasm -f elf64(elf32) hello.asm (注意这里使用elf64还是elf32要看操作系统的位数来决定)&nbsp;<br />
gcc -o hello hello.o&nbsp;<br />
./hello</p>
</blockquote>

<p>输出Hello World便成功了.</p>
