<h1>C# HashSet类常用函数</h1>

<h2>初始化</h2>

<ol>
<li>
<p><code>static HashSet<int> INT_HASHSET_1 = new HashSet<int>()</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>1,2,3,4,5</code></p>
</li>
<li>
<p><code>};</code></p>
</li>
<li>
<p><code>static HashSet<int> INT_HASHSET_2 = new HashSet<int>()</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>2,4,6,8,10</code></p>
</li>
<li>
<p><code>};</code></p>
</li>
</ol>

<h2>bool Add(T item)</h2>

<p>如果该元素添加到 System.Collections.Generic.HashSet<T> 对象中则为 true；如果该元素已存在则为 false。</p>

<ol>
<li>
<p><code>bool isHave5 = INT_HASHSET_1.Add(5);</code></p>
</li>
<li>
<p><code>bool isHave6 = INT_HASHSET_1.Add(6);</code></p>
</li>
<li>
<p><code>Console.WriteLine("isHave5 = " + isHave5 + "isHave6 = "+ isHave6);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921154929442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>bool Remove(T item)</h2>

<p>从 System.Collections.Generic.HashSet<T> 对象中移除某个元素。</p>

<ol>
<li>
<p><code>bool isRemove5 = INT_HASHSET_1.Remove(5);</code></p>
</li>
<li>
<p><code>bool isRemove6 = INT_HASHSET_1.Remove(6);</code></p>
</li>
<li>
<p><code>Console.WriteLine("isRemove5 = " + isRemove5 + "isRemove6 = " + isRemove6);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921155134928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>void Clear()</h2>

<p>从 System.Collections.Generic.HashSet<T> 对象中移除所有元素。</p>

<ol>
<li>
<p><code>INT_HASHSET_1.Clear();</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p>控制台无输出</p>

<h2>bool Contains(T item)</h2>

<p>如果 System.Collections.Generic.HashSet<T> 对象包含指定的元素，则为 true；否则为 false</p>

<ol>
<li>
<p><code>bool isHave5 = INT_HASHSET_1.Contains(5);</code></p>
</li>
<li>
<p><code>Console.WriteLine("isHave5 = " + isHave5);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p>控制台输出 : isHave5 = Ture</p>

<h2> void CopyTo(T[] array)</h2>

<p>作为从 System.Collections.Generic.HashSet<T> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</p>

<ol>
<li>
<p><code>int[] copyArray = new int[INT_HASHSET_1.Count];</code></p>
</li>
<li>
<p><code>INT_HASHSET_1.CopyTo(copyArray);</code></p>
</li>
<li>
<p><code>foreach (var team in copyArray)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921155657417?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>void CopyTo(T[] array, int arrayIndex)</h2>

<p>从指定数组索引处开始，将 System.Collections.Generic.HashSet<T> 对象的元素复制到数组中。</p>

<ol>
<li>
<p><code>int index = 2;</code></p>
</li>
<li>
<p><code>int[] copyArray = new int[INT_HASHSET_1.Count + index];</code></p>
</li>
<li>
<p><code>INT_HASHSET_1.CopyTo(copyArray, index);</code></p>
</li>
<li>
<p><code>foreach (var team in copyArray)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921155957871?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>void CopyTo(T[] array, int arrayIndex, int count)</h2>

<p>从指定数组索引处开始，将 System.Collections.Generic.HashSet<T> 对象的指定数目的元素复制到数组中。</p>

<ol>
<li>
<p><code>int index = 2, length = 3;</code></p>
</li>
<li>
<p><code>int[] copyArray = new int[INT_HASHSET_1.Count];</code></p>
</li>
<li>
<p><code>INT_HASHSET_1.CopyTo(copyArray, index, length);</code></p>
</li>
<li>
<p><code>foreach (var team in copyArray)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921160220121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /><br />
 </p>

<h2>void UnionWith(IEnumerable<T> other)</h2>

<p>A.UnionWith(B)  返回两个集合的合集  修改  A 为A B合集运算后的集合</p>

<ol>
<li>
<p><code>INT_HASHSET_1.UnionWith(INT_HASHSET_2);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921160415012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>void IntersectWith(IEnumerable<T> other)</h2>

<p>A.IntersectWith(B)  返回两个集合的交集  修改  A 为A B交集运算后的集合</p>

<ol>
<li>
<p><code>INT_HASHSET_1.IntersectWith(INT_HASHSET_2);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921162353030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2>void ExceptWith(IEnumerable<T> other)</h2>

<p>A.ExceptWith(B)  返回两个集合的差集  修改  A 为A B差集运算后的集合</p>

<ol>
<li>
<p><code>INT_HASHSET_1.ExceptWith(INT_HASHSET_2);</code></p>
</li>
<li>
<p><code>foreach (var team in INT_HASHSET_1)</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>Console.WriteLine(team);</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p><img alt="" src="https://img-blog.csdn.net/20150921162541680?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<h2> bool Overlaps(IEnumerable<T> other)</h2>

<p>Overlaps 对象和指定的集合是否共享常见元素(只要包含其中一个即返回true)。</p>

<ol>
<li>
<p><code>HashSet<int> INT_HASHSET_3 = new HashSet<int>()</code></p>
</li>
<li>
<p><code>{</code></p>
</li>
<li>
<p><code>1,10</code></p>
</li>
<li>
<p><code>};</code></p>
</li>
<li>
<p><code>bool isOverlaps = INT_HASHSET_1.Overlaps(INT_HASHSET_3);</code></p>
</li>
<li>
<p><code>Console.WriteLine("isOverlaps = " + isOverlaps);</code></p>
</li>
</ol>

<p>控制台输出 :isOverlaps = True</p>
