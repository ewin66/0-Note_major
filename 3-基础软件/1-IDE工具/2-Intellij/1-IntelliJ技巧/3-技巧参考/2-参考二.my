<h2>第一章 IDEA入门</h2>

<h4><a name="t1"></a>1.1 Intellij IDEA下载</h4>

<ol>
<li><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank">官网下载地址</a> 

<ul>
<li>Ultimate版本，所有的功能都完美的支持，收费 
<ul>
<li><a href="http://idea.lanyus.com/" target="_blank">破解方式</a></li>
</ul>
</li>
<li>Community版本，开源免费，有些功能不支持</li>
</ul>
</li>
</ol>

<h4><a name="t2"></a>1.2 IDEA界面介绍</h4>

<ol>
<li>IDEA的左侧侧边栏有1：Project、7：Structure和2：Favorities <br />
开发时，习惯全屏代码区，当需要左侧侧边栏时，无需使用鼠标，只需按住Alt+数字即可出现相应的侧边菜单。然后按下ESC就会把鼠标重新聚焦到代码区。 
<ul>
<li>Alt+1：Project</li>
<li>Alt+2：Favorities</li>
<li>Alt+4：Run</li>
<li>Alt+5：Debug</li>
<li>Alt+6：TODO</li>
<li>Alt+7：Structure</li>
</ul>
</li>
<li>Favorites功能：可以显示工程中所有的断点位置；收藏功能。</li>
</ol>

<h2><a name="t3"></a>第二章 Find Action</h2>

<ol>
<li>IDEA中Help下的Find Action可以帮助我们定位到各个指令。Find Action本身的快捷键是Ctrl+Shift+A</li>
</ol>

<h2><a name="t4"></a>第三章 无处不在的跳转</h2>

<h4><a name="t5"></a>3.1 项目之间的跳转</h4>

<ol>
<li>当使用IDEA同时打开多个项目协同开发时，可以使用快捷键进行跳转: 
<ul>
<li>Ctrl+Alt+右方括号跳转到Next Project Window下一个项目窗口</li>
<li>使用Ctrl+Alt+左方括号跳转到Previous Project Window前一个项目窗口</li>
<li>使用Ctrl+Shift+A输入window project等关键字成功得到相应提示</li>
</ul>
</li>
</ol>

<h4><a name="t6"></a>3.2 文件之间的跳转</h4>

<ol>
<li>在项目中文件很多的情况下，有时我们会想找到最近浏览过的文件 
<ul>
<li>Ctrl+E可以找到Recent Files最近浏览过的文件</li>
</ul>
</li>
<li>找到最近修改过的文件 
<ul>
<li>Ctrl+Shift+E可以找到Recently Changed Files最近修改过的文件</li>
</ul>
</li>
</ol>

<h4><a name="t7"></a>3.3 浏览、修改位置的跳转</h4>

<ol>
<li>使用Ctrl+Shift+Backspace可以跳转到Last Edit Location最后修改过的位置</li>
<li>Next Edit Loaction没有默认快捷键</li>
<li>使用Ctrl+Alt+向左箭头可以跳转到Back光标之前停留过的地方</li>
<li>使用Ctrl+Alt+向右箭头可以跳转到Forward光标之后停留过的地方</li>
</ol>

<h4><a name="t8"></a>3.4 利用书签进行跳转</h4>

<ol>
<li>当使用IDEA查看源码时，可以对关注的代码位置添加书签 
<ul>
<li>Ctrl+F11可以Toggle Bookmark with Mnemonic使用数字书签标记位置</li>
<li>Ctrl+1..9可以跳转到对应的书签位置</li>
</ul>
</li>
<li>可以某个类单独添加书签 
<ul>
<li>Alt+Shift+F可以给某个类add to Favorites添加到Favorites中 
<ul>
<li>Favorites中可以创建列表，例如把值得学习的代码放到一个列表中</li>
</ul>
</li>
<li>Alt+Shift+F可以给某个类的某个方法添加到Favorites中</li>
</ul>
</li>
</ol>

<h4><a name="t9"></a>3.5 跳转插件emacsIDEAs</h4>

<ol>
<li>在编辑一个文件时，有时需要将光标跳转到以某个字母开头的位置如以s开头，文件中有多个以s开头的位置，这时，可以借助emacsIDEAs插件做到快捷跳转</li>
<li>安装插件，Ctrl+Shift+A，输入plugins，到Browse Repositories中找到emacsIDEAs插件，Install，然后重启IDEA</li>
<li>设置其快捷键，Ctrl+Shift+A，输入keymaps，找到Manage keymaps 
<ul>
<li>选择Plug-ins，在最下面找到emacsIDEAs，找到AceJumpWord</li>
<li>AceJumpWord 默认的快捷键为<a href="https://www.cnblogs.com/exmyth/p/3541909.html" target="_blank">Meta</a>+F，一般计算机键盘上并没有这个键，需要另外添加快捷键</li>
<li>右键，Add keyboard Shortcut，为其添加快捷键，我这里设置为Ctrl+J</li>
<li>使用：如要跳转到以p开头的位置，先按住Ctrl+J，然后再输入p，这时，emacsIDEAs插件会为文件的所有以p开头的单词进行编号，asdf…按下光标要跳转到位置对应的字母即可</li>
</ul>
</li>
</ol>

<h4><a name="t10"></a>3.6 编辑区和文件区的跳转</h4>

<ol>
<li>在代码编辑区按Alt+1可以跳转到文件区下，再按ESC就可以从文件区返回到编辑区</li>
</ol>

<h4><a name="t11"></a>3.7 精准搜索</h4>

<ol>
<li>类 
<ul>
<li>Ctrl+N，可以搜索到指定的Class类</li>
<li>Ctrl+N+N，可以搜索包含JAR包中的类</li>
</ul>
</li>
<li>文件 
<ul>
<li>Ctrl+Shift+N，可搜索到指定的File文件</li>
</ul>
</li>
<li>符号</li>
<li>Ctrl+Alt+Shift+N，可以搜索关键字，包括变量名、函数名和类名等。</li>
<li>字符串 
<ul>
<li>要搜索字符串，可以通过Ctrl+Shift+F来实现，有几个选项： 
<ul>
<li>Match case，是否匹配大小写</li>
<li>Words，是否是一个单词</li>
<li>Regex，通过正则表达式搜索</li>
<li>File mask，可以指定在哪个文件下搜索 
<ul>
<li>In Project，在项目下搜索</li>
<li>Module，在模块下搜索</li>
<li>Directory，在目录下搜索</li>
<li>Scope，在指定区域内搜索，还可以自定义搜索区域</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>

<h2><a name="t12"></a>第四章代码助手</h2>

<h4><a name="t13"></a>4.1 列操作</h4>

<ol>
<li>光标选中相关操作 
<ul>
<li>Shift+右箭头，选中下一个位置，按住Shift并多次按方向键选中多个位置</li>
<li>Ctrl+右箭头，Move Caret to Next Word把光标移动到下一个单词</li>
<li>Ctrl+Shift+右箭头，Move Caret to Next Word With Slection把光标移动到下一个单词并选中</li>
</ul>
</li>
<li>大小写转换 
<ul>
<li>Ctrl+Shift+U，Toggle Case</li>
</ul>
</li>
<li>Home，Move Caret to Line Start将光标移动到本行开始的位置</li>
<li>End，Move Caret to Line End将光标移动到本行最后的位置</li>
<li>Ctrl+Alt+Shift+J，Select All Occurrences，选中所有相同的字符串，多光标操作</li>
<li>F2，自动将光标定位到报错的位置</li>
<li>Ctrl+Alt+L，Reformat Code，重新格式代码</li>
<li>案例，后台向前台传递响应状态时，定义如下四种状态，分别为响应成功、错误、需要登陆和非法参数</li>
</ol>

<pre>
<code>0: "success"
1: "error"
10: "need_login"
2: "illegal_argument"</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>

<p>现在要把状态封装成枚举类，需要以下几步： <br />
1. 创建枚举类ResponseCode，声明两个属性code和desc并生成构造方法和get方法 <br />
2. 把上面四种状态复制过来 <br />
3. 将光标选中到“：”，按Ctrl+Alt+Shift+J进行多光标操作，也可以用Alt+J，会依次选中下一个 <br />
4. 将全部的光标移动到双引号后面的位置，按住Ctrl+Shift+右箭头选中success等单词，并按Ctrl+Shift+U将单词转换成大写 <br />
5. Ctrl+C复制这些单词，使用Home，将光标移动到行首，粘贴，输入左括号，Ctrl+右箭头，将光标移动到“：”前面 <br />
6. Ctrl+Shift+右箭头，会选中“： ”，替换成“，” <br />
7. 连续按三次Ctrl+右箭头，或者直接按End键，将光标显示到行的末尾，输入“）,” <br />
8. 现在除了最后一行报错，前面的三行就都完成了。ESC取消多光标操作，按F2光标会定位到报错的位置，Shift+左箭头，将最后一个枚举的“，”换成“；” <br />
9. Ctrl+Alt+L，Reformat Code，重新格式代码</p>

<pre>
<code>public enum ResponseCode {

SUCCESS(0,"SUCCESS"),
ERROR(1,"ERROR"),
NEED_LOGIN(10,"NEED_LOGIN"),
ILLEGAL_ARGUMENT(2,"ILLEGAL_ARGUMENT");

private final int code;
private final String desc;

ResponseCode(int code, String desc) {
this.code = code;
this.desc = desc;
}

public int getCode() {
return code;
}

public String getDesc() {
return desc;
}

}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
</ul>

<h4><a name="t14"></a>4.2 live template</h4>

<ul>
<li>可以使用Setting下的Live Templates定义常用的代码模板，分为以下几步： 
<ul>
<li>创建分组：点击+按钮下的Template Group，Create New Group，取组名为“方法”</li>
<li>创建模板：在“方法”分组下，点击+按钮下的Live Templates创建模板。以main函数为例，下图中Abbreviation为模板名称，Description为模板注释，Template text中的内容为模板，其中<code>$END$</code>表示最后光标停留位置，最后要点击define，选择Java表示这个模板定义为Java语言的模板</li>
</ul>
</li>
</ul>

<p><img alt="这里写图片描述" src="https://img-blog.csdn.net/20180118195440298?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGp4bGp4bGp4NzQ3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /> <br />
- 为public static void main定义模板 <br />
- Abbreviation:main <br />
- Description:public static void main <br />
- Template text:</p>

<pre>
<code>public static void main(String[] args) {
$END$
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>

<ul>
<li>为public static final int定义模板 
<ul>
<li>Abbreviation:psfi</li>
<li>Description:public static final int自定义（IDEA本身就提供了一个）</li>
<li>Template text:<code>public static final int $var1$ = $var2$;</code>使用时var1的内容输入完成后按回车光标就直接到等号右边var2了</li>
</ul>
</li>
<li>为public static final String定义模板 
<ul>
<li>Abbreviation:psfs</li>
<li>Description:public static final String自定义（IDEA本身就提供了一个）</li>
<li>Template text:<code>public static final String $var1$ = $var2$;</code></li>
</ul>
</li>
<li>为private int定义模板 
<ul>
<li>Abbreviation:pi</li>
<li>Description:private int</li>
<li>Template text:</li>
</ul>
</li>
</ul>

<pre>
<code>private int $VAR2$;

$END$</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>

<ul>
<li>为private int定义模板 
<ul>
<li>Abbreviation:pic</li>
<li>Description:private int 有注释</li>
<li>Template text:</li>
</ul>
</li>
</ul>

<pre>
<code>/**
* $VAR1$
*/
private int $VAR2$;

$END$</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
</ul>

<ul>
<li>为private String定义模板 
<ul>
<li>Abbreviation:ps</li>
<li>Description:private String</li>
<li>Template text:</li>
</ul>
</li>
</ul>

<pre>
<code>private String $VAR2$;

$END$</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>

<ul>
<li>为private String定义模板 
<ul>
<li>Abbreviation:psc</li>
<li>Description:private String 有注释</li>
<li>Template text:</li>
</ul>
</li>
</ul>

<pre>
<code>/**
* $VAR1$
*/
private String $VAR2$;

$END$</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
</ul>

<h4><a name="t15"></a>4.3 postfix</h4>

<pre>
<code>for (int i = 0; i < 100; i++) {
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
</ul>

<ul>
<li>上面的for循环，只需输入100.fori按回车就可以出来</li>
<li>可以在Settings下的Postfix Completion查看有哪些后缀实现</li>
</ul>

<h5><a name="t16"></a>常用的Postfix：</h5>

<ul>
<li>fori：for循环，例子：100.fori</li>
<li>sout：打印输出，例子：new Date().sout</li>
<li>field：引入表达式字段，例子：</li>
</ul>

<pre>
<code>//当忘记声明arg变量时，使用field
public class Foo {
public Foo(int arg) {
arg.field
}
}

//使用后，会自动生成属性
public class Foo {
private final int arg;

public User(int arg) {
this.arg = arg;
}
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
</ul>

<ul>
<li>return：返回值，例子：</li>
</ul>

<pre>
<code>String m() {
"result".return
}
String m() {
return "result";
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
</ul>

<ul>
<li>nn：检查表达式是否为空，例子</li>
</ul>

<pre>
<code>void m(Object o) {
o.nn
}
void m(Object o) {
if (o != null){

}
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>

<h4><a name="t17"></a>4.4 Alt+Enter</h4>

<ul>
<li>自动创建函数</li>
</ul>

<pre>
<code>public static void main(String[] args) {
f1();//Alt+Enter就会自动创建出下面的函数
}

private static void f1() {
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
</ul>

<ul>
<li>List Replace</li>
</ul>

<pre>
<code>for (int i = 0; i < list.size(); i++) {
String item = list.get(i);
}
//选中for循环按住alt+enter出现Replace with foreach
for (String item : list) {
}
</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
</ul>

<ul>
<li>实现接口</li>
<li>单词拼写</li>
</ul>

<pre>
<code>System.out.println("usernmea is jone");//username拼写错误，单词下会出现波浪线
//按下alt+enter，出现Typo Change to...
//Intellij会给出一些建议的单词
</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>

<ul>
<li>导包</li>
</ul>

<h2><a name="t18"></a>第五章 编写高质量代码</h2>

<h4><a name="t19"></a>5.1 重构</h4>

<ul>
<li>重构变量，Shift+F6，Rename</li>
<li>重构函数 
<ul>
<li>Ctrl+F6，Change Signature，添加参数</li>
<li>先在调用的地方添加实参，Alt+Enter</li>
</ul>
</li>
</ul>

<h4><a name="t20"></a>5.2 抽取</h4>

<ul>
<li>抽取变量，Ctrl+Alt+V。Refactor->Extract->Variable</li>
</ul>

<pre>
<code>//抽取前
System.out.println("sun");
System.out.println("sun");
System.out.println("sun");
//抽取后
String sun = "sun";
System.out.println(sun);
System.out.println(sun);
System.out.println(sun);</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>

<ul>
<li>抽取成静态常量，Ctrl+Alt+C</li>
</ul>

<pre>
<code>public static final String SUN = "sun";

public static void main(String[] args) {
System.out.println(SUN);
System.out.println(SUN);
System.out.println(SUN);
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
</ul>

<ul>
<li>抽取成员变量，Ctrl+Alt+F</li>
</ul>

<pre>
<code>private static String sun;

public static void main(String[] args) {
sun = "sun";
System.out.println(sun);
System.out.println(sun);
System.out.println(sun);
}</code></pre>

<ul>
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>

<ul>
<li>抽取函数，Ctrl+Alt+M</li>
</ul>

<h2><a name="t21"></a>第六章 寻找修改轨迹</h2>

<h4><a name="t22"></a>6.1 git的集成</h4>

<ul>
<li>annotate，注释。在显示行号的位置右击，选中Annotate即可查看当前行代码的commit、author和date</li>
</ul>

<h4><a name="t23"></a>6.2 local history</h4>

<ul>
<li>show history，查看本地所有的更改</li>
<li>put label，做了更改后，为本次更改做个标记，再次show history可以看到左侧的标签</li>
</ul>

<h2><a name="t24"></a>第七章 关联一切</h2>

<h4><a name="t25"></a>7.1 spring的关联</h4>

<ul>
<li>File->Project Structure->Facets->+按钮->Spring把接口和实现类对应起来，bean是在哪个文件扫描到的等</li>
</ul>

<h4><a name="t26"></a>7.2 数据库的关联</h4>

<ul>
<li>数据库视图，IDEA右侧边栏的Database->+按钮->Data Source->选择是那种数据库->输入主机、数据库、用户名、密码、URL。 
<ul>
<li>书写Mapper时，IDEA就会提示数据库的相关信息（表名、列名）</li>
<li>可以在视图中重构表名、列名，Shift+F6</li>
</ul>
</li>
</ul>

<h2><a name="t27"></a>第八章 调试程序</h2>

<h4><a name="t28"></a>8.1 断点调试</h4>

<ul>
<li>添加断点，Toggle Line Breakpoint，Ctrl+F8</li>
<li>Debug方式启动程序，Shift+F9</li>
<li>单步运行，F8，Step Over</li>
<li>resume（重新开始，继续），F9。会跳转到下一个断点，如果没有断点了，直接结束程序运行</li>
<li>查看所有断点，Ctrl+Shift+F8</li>
<li>禁止所有断点，Mute Breakpoint，然后按F9，就可以跳过余下的所有断点了</li>
<li>表达式求值，Alt+F8。可以对程序中的变量做一些操作如list.size等</li>
<li>运行到指定行，从断点运行的位置直接让程序运行到光标所在的行，Run to Cursor，Alt+F9</li>
<li>setValue，在debug窗口，选中要设值得变量，F2，可以在调试时改变变量的值</li>
</ul>

<h2><a name="t29"></a>第九章 其他操作</h2>

<h4><a name="t30"></a>9.1 文件操作</h4>

<ul>
<li>Ctrl+Alt+Insert，快速创建类，文件等</li>
<li>复制当前文件，F5，无需复制粘贴</li>
<li>移动当前文件 
<ul>
<li>剪切、复制</li>
<li>F6</li>
</ul>
</li>
</ul>

<h4><a name="t31"></a>9.2 文本操作</h4>

<ul>
<li>复制文件名：选中文件名，Ctrl+C</li>
<li>复制文件完整路径：Ctrl+Shift+C</li>
<li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li>
<li>Alt+Insert，可以生成构造器/Getter/Setter等</li>
<li>Ctrl+Shift+Space，自动补全代码</li>
<li>Alt+Shift+Up/Down，将代码上/下移一行</li>
<li>Ctrl+X，删除行</li>
<li>Ctrl+D，复制行</li>
</ul>

<h4><a name="t32"></a>9.3 结构图</h4>

<ul>
<li>查看field、method大纲，File Structure，Ctrl+F12</li>
<li>查看maven依赖大纲，pom.xml右击->Maven->Show Dependency</li>
<li>查看类图大纲，找到代码右键Diagrams或Ctrl+Alt+Shift+U</li>
<li>查看类继承结构，Ctrl+H</li>
<li>查看当前函数调用了哪些其他函数，或当前函数被哪些函数调用，Ctrl+Alt+H，可以帮助看其他项目源码的结构</li>
</ul>
