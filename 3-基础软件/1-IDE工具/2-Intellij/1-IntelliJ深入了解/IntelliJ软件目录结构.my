<h1>深入剖析 IntelliJ IDEA 2017 的目录结构</h1>

<p>正常而言，一个软件安装完成之后，不需要用户去关心软件的安装目录和其中的文件才是合理的。但是，作为一名软件开发人员，为了能够更加深入地了解所使用的 IntelliJ IDEA 软件，本文将带来读者深入地来剖析一下 IntelliJ IDEA 安装后的文件和目录结构。</p>

<h4>整体结构</h4>

<p>首先，我们需要知道 IntelliJ IDEA 本身就是一个 Java 应用，所以必须运用于 JRE或者JDK之上。我们看一下该软件安装后的整体目录结构，如下图：</p>

<p><img alt="深入剖析 IntelliJ IDEA 2017 的目录结构" src="http://i1.buimg.com/597077/098b2502803c9b3f.jpg" title="深入剖析 IntelliJ IDEA 2017 的目录结构" /></p>

<blockquote>
<ul>
	<li>bin 是 IDEA 的可执行代码目录。</li>
	<li>help 是 IDEA 的帮助文件目录。</li>
	<li>jre64 是 IDEA 自带的 JRE 环境，故 IDEA 可在未安装 JDK 的计算机上进行 PHP、Python等语言的编码。</li>
	<li>lib 是 IDEA 依赖的库文件目录，里面有很多的 Jar 文件。</li>
	<li>license 是 IDEA 的许可证文件目录。</li>
	<li>plugins 是 IDEA 的插件目录。</li>
	<li>redist 是 IDEA 中索引机制所依赖的 redist 库目录。</li>
	<li>两个 .txt 说明文件和一个注册表项文件。</li>
</ul>
</blockquote>

<h4>执行结构</h4>

<p>如果只为了熟练掌握 IntelliJ IDEA 的使用和配置，仔细查看所有的文件和目录是没有必要的，本文主要看看其中的 bin 目录的几个重要文件。</p>

<p><img alt="深入剖析 IntelliJ IDEA 2017 的目录结构" src="http://i1.buimg.com/597077/65ea33d8d742495b.jpg" title="深入剖析 IntelliJ IDEA 2017 的目录结构" /></p>

<blockquote>
<ul>
	<li>idea.exe 文件是 IntelliJ IDEA 32位的可执行文件。</li>
	<li>idea.exe.vmoptions 文件是 IntelliJ IDEA 32位的可执行文件的 JVM 配置文件。</li>
	<li>idea.properties 文件是 IntelliJ IDEA 的一切全局属性的配置文件。</li>
	<li>idea64.exe 文件是 IntelliJ IDEA 64位的可执行文件。</li>
	<li>idea64.exe.vmoptions 文件是 IntelliJ IDEA 64位的可执行文件的 JVM 配置文件。</li>
</ul>
</blockquote>

<h5>idea64.exe.vmoptions 文件</h5>

<p>正如我们前面所述，IntelliJ IDEA 本身就是一个 Java 引用，所以也必须运行于 JVM 之上。此处的 idea64.exe.vmoptions 文件就是用来配置64位的 IDEA 所使用的 JVM 参数。我们看一下该文件的默认内容：</p>

<p><img alt="深入剖析 IntelliJ IDEA 2017 的目录结构" src="http://i1.buimg.com/597077/2e15649c02c84930.jpg" title="深入剖析 IntelliJ IDEA 2017 的目录结构" /></p>

<blockquote>
<ul>
	<li>对于是否需要修改该文件，需要具体情况具体分析。对于计算机内存配置大于 8G，开发的项目功能复杂的情况，个人建议进行适当的修改，具体修改值可以通过分析工具，比如 Jconsole等，进行实际情况分析。</li>
</ul>
</blockquote>

<h5>idea.properties 文件</h5>

<p>虽然 IntelliJ IDEA 分成了32位和64位两种，但是只存在一份 idea.properties 文件。该文件的主要作用是完成 IntelliJ IDEA 的一些个人化配置。该文件内容较多，我们只截图了其中的部分内容：</p>

<p><img alt="深入剖析 IntelliJ IDEA 2017 的目录结构" src="http://i1.buimg.com/597077/7d6b8bc5e0caf299.jpg" title="深入剖析 IntelliJ IDEA 2017 的目录结构" /></p>

<blockquote>
<ul>
	<li>该文件中使用了几个属性变量，比如 $(idea.home.path) 代表了 IDEA 安装的顶级目录，$(user.home) 表示用户的根目录等。</li>
	<li>idea.config.path=${user.home}/.IntelliJIdea/config 指向 IntelliJ IDEA 的个性化配置目录，默认不启用。</li>
	<li>idea.system.path=${user.home}/.IntelliJIdea/system 指向 IntelliJ IDEA 的系统文件目录，默认不启用。</li>
	<li>idea.max.intellisense.filesize=2500 文件超过此处设置的大小后，关闭该文件的智能检查和提示等功能，有效消除大文件的卡顿问题。</li>
	<li>idea.cycle.buffer.size=1024 设置控制输出台的缓存大小，解决大项目时，控制台缓存溢出的问题。</li>
</ul>
</blockquote>

<h4>个性配置</h4>

<p>现存的三个主流操作系统中，无论是 Windows、macOS 还是 Liunx，都是支持多用户的。IntelliJ IDEA 支持同一台计算机上的多个用户使用不同的配置选项。所以，在用户的主目录下都具有 IDEA 的个性化配置目录，如下图所示：</p>

<p><img alt="深入剖析 IntelliJ IDEA 2017 的目录结构" src="http://i1.buimg.com/597077/83785c59929456f9.jpg" title="深入剖析 IntelliJ IDEA 2017 的目录结构" /></p>

<blockquote>
<ul>
	<li>该配置目录的最显著特点是：如果删除整个目录，重启 IntelliJ IDEA 会自动重新生成一个全新的默认配置目录。所以，我们完全可以对 IDEA 进行大胆地修改和配置尝试，一旦需要恢复配置，删除该配置目录就可以了。</li>
	<li>config 目录是 IntelliJ IDEA 个人性配置的保存目录，这个目录记录了该 IDE 的所有主要配置值、自定义的代码模板、自定义的快捷键、自定义的文件模板、插件的启用与停用记录等重要信息。实际上，安装新版本 IntelliJ IDEA 时的默认查找目录就是该目录。</li>
	<li>system 目录是 IntelliJ IDEA 的系统文件目录，这个目录记录了该 IDE 所管理的所有项目信息。该目录主要存储了项目的索引、缓存、容器文件输出等重要资料。</li>
</ul>
</blockquote>

<h4>总结</h4>

<p>本文以图文的形式，详细地展示了 IntelliJ IDEA 安装之后的目录结构，并且对于其中的那些重要目录和文件进行了详细的描述，包括功能和修改意见。希望本文能够给读者带来一些收获，欢迎留言交流。</p>
