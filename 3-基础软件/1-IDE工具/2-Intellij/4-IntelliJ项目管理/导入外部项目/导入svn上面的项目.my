<h1>IntelliJ IDEA 下的SVN使用</h1>

<h2><strong>SVN</strong></h2>

<p>首先提一句，IDEA对各种的版本控制工具的支持是非常好的，点击3 打开系统设置界面，就可以看到他有专门的一栏 Version Control 里边是对各种版本控制工具的支持，其中我要用的SVN也在其中，就是Subversion，想要使用svn 你需要在电脑上安装一个svn的客户端才行，安装客户端或者小乌龟工具都可以，我安装的就是小乌龟工具，他里边同样含有svn.exe ，安装好后，看图 数字 4 选择你安装好的svn工具。&nbsp;</p>

<p>首先，使用的时候，自己得先在电脑上安装个小乌龟。也就是svn啦。</p>

<h3><strong>第一步安装小乌龟。</strong></h3>

<p>如下：</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709183557422" /></p>

<p>具体安装好像没什么具体要求，一路next，就好。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709183651940" /></p>

<p>如上图箭头所示，在安装 TortoiseSVN 的时候，默认 command line client tools，是不安装的，这里建议勾选上。</p>

<p>这个我不确定我当时选没选，不过呢，你给安装上，也是没问题的。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709183934098" style="height:603px; width:800px" /></p>

<p>把上面的勾选取消了，就可以应对下面的这个错误。看图。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709184103749" style="height:103px; width:800px" /></p>

<p>&nbsp;</p>

<p>安装OK之后，确保你这个编辑器也已经激活成功，那么下一步开始</p>

<h3><strong>第二步，导出。</strong></h3>

<p><strong>从svn上check out 项目我这以maven项目为例</strong>。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710101643615" /></p>

<p>或者在已经有项目打开了的情况下：</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20160116171050804" /></p>

<p>第一步，就是从svn上check out，当然也可以从github上check out，当然，前提是你已经配置了github和git。这就不赘述啦。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710101739739" style="height:540px; width:800px" /></p>

<p>这个就是输入svn仓库的地址，然后继续ing。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710101800473" /></p>

<p>选择导出的目的地，一般就是新建个文件夹用来存放所有的工作相关的项目。<strong>注意这里的文件夹下会直接放src、.idea等文件，而不是工程顶层文件夹</strong></p>

<p><img alt="" src="http://img.blog.csdn.net/20170710101847813" /></p>

<p>这地方应该看情况，导出的时候，最好导出到对应的项目文件夹下。第一个选项是直接到我的那个测试目录下，这个就不是太好。或者干脆就是不行 的。</p>

<p>下面会示范，两者的差别的。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102003814" /></p>

<p>这个版本究竟是啥意思，我暂时没有深究过，不过一般都选默认的吧。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102045108" /></p>

<p>这个就是我说的，要是没有直接导出到对应的项目名称的文件夹下的话，就会有这么个提示，如果你走到这了，那么最简单的处理方法，就是放弃，重新来过就是。</p>

<p>正确的，也就是上面你选择导出到对应项目名称的文件夹下的话，就会出现下图。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102210644" /></p>

<p>哦，这个是导出的时候，他在一个个文件的往外check ，这是个过程图。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102249725" /></p>

<p>你要是导出OK，也就是说你导出项目到对应的项目名称下的话，他就会提示说，你已经导出个项目了，你需要打开吗。</p>

<p>当然打开啦，点yes，打开。继续ing。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102354251" style="height:431px; width:800px" /></p>

<p>这个就是打开之后的，截的全图的效果。具体注释我都写在截图上了。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102450777" style="height:136px; width:800px" /></p>

<p>因为这个mavne项目，导出之后，编辑器会自动判断一下，他要是发现pom.xml文件的话，他就会这么提示你，按我图上的操作就OK啦。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102551158" style="height:160px; width:800px" /></p>

<p>继续吧，图上写的应该比较详细啦。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102632212" style="height:241px; width:800px" /></p>

<p>这个就是刚刚导出项目之后，这个版本控制的初始情况。虽然我后面也会说，你可以依我图操作一下，看着干净舒心。</p>

<p>要是下面有重复讲解的地方，还请见谅啊。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102852133" style="height:253px; width:800px" /></p>

<p>经过这么操作，这就干净啦。继续看图ing。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102917547" style="height:241px; width:800px" /></p>

<p><img alt="" src="http://img.blog.csdn.net/20170710102926845" style="height:255px; width:800px" /></p>

<p>这个就是所有提交记录的列表的地方。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710103025251" style="height:337px; width:800px" /></p>

<p>刷新出来的效果。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710103044695" style="height:350px; width:800px" /></p>

<p>&nbsp;</p>

<h3><strong>第三步，具体使用详情。</strong></h3>

<p>上面的都是安装过程可能会遇到的问题，下面看具体经常使用的地方。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709184327762" style="height:111px; width:800px" /></p>

<p>这个工具栏，可能你刚使用这个编辑器的时候，是没有的，可以参考下面链接，把这个工具栏给显示出来。</p>

<p><a href="http://blog.csdn.net/qq_27093465/article/details/51750535" target="_blank">IntelliJ IDEA中如何显示和关闭----工具栏，目录栏，</a></p>

<p>下面对这五个按钮的简单介绍。</p>

<p>&nbsp;</p>

<ul>
	<li>第一个按钮：<code>Update Project</code>&nbsp;更新项目。</li>
	<li>第二个按钮：<code>Commit changes</code>&nbsp;提交项目上所有变化文件。点击这个按钮不会立马提交所有文件，而是先弹出一个被修改文件的一个汇总框，具体操作下面会有图片进行专门介绍。</li>
	<li>第三个按钮：<code>Compare with the Same Repository Version</code>&nbsp;当前文件与服务器上该文件通版本的内容进行比较。如果当前编辑的文件没有修改，则是灰色不可点击。</li>
	<li>第四个按钮：<code>Show history</code>&nbsp;显示当前文件的历史记录。</li>
	<li>第五个按钮：<code>Revert</code>&nbsp;还原当前被修改的文件到违背修改的版本状态下。如果当前编辑的文件没有修改，则是灰色不可点击。</li>
</ul>

<p>再次强调下，</p>

<p>&nbsp;</p>

<p>上面的五个按钮，说实话，1，2是不常用的，因为在这个地方提交更新和下载更新，给你的感觉有点不清不楚的感觉。所以，在这一般不使用这2个按钮。</p>

<p>最常用的就是后面的3个，</p>

<p>第三个按钮就是在你把当前文件已经修改过了，有和svn库里面的代码<strong>做对比</strong>，那么就可以直接点击这个按钮，然后就可以直接看文件修改前后的差别啦。</p>

<p>第四个也常用，就是查看当前文件的<strong>提交历史</strong>，点击之后，当前文件的历史修改记录就都会呈现在眼前啦。</p>

<p>第五个按钮，就是你放弃对当前文件的修改，直接<strong>回撤</strong>到和最新库里一致的状态。</p>

<p>&nbsp;</p>

<p><strong>下面再看看经常用的地方，怎么提交代码和更新代码。</strong></p>

<p><strong>更新代码</strong>简单，就在这个地方，</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709190445224" style="height:337px; width:800px" /></p>

<p>你要是看不到这个version control，也不要紧，看下面这个图，教你怎么把他弄出来。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709190653996" /></p>

<p>这你就可以看到了吧。</p>

<p>本来，说<strong>更新到指定版本的代码</strong>是没找到的，但是，我回去又仔细看了下，还实验了一把，是可以的。</p>

<p>具体请看图：</p>

<p><img alt="" src="http://img.blog.csdn.net/20170711103045201" style="height:386px; width:800px" /></p>

<p><img alt="" src="http://img.blog.csdn.net/20170711103128656" /></p>

<p>对勾打上，现在看到的后面的是head也就是最新的，或者，以前，我这就没选，那默认就是更新全部嘛。现在可以点击第三个箭头所指的地方，然后选择你要更新到哪个版本号，然后就可以啦。剩下的就不详细描述啦。</p>

<p>不过，记得用完啦之后，下次再更新的时候，记得把这个对勾，给去掉哟，不然就不好啦</p>

<p><strong>更新代码还有个大问题就是：【可能产生代码冲突<strong>】</strong>。</strong></p>

<p>下面我给上更新冲突的时候的截图。</p>

<p>我这是演示呢，就不冲突很多个啦，就简单的整一个冲突的地方，给简单说明下问题就好。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170711143852611" style="height:465px; width:800px" /></p>

<p>这个弹框的界面都大差不差的。</p>

<p>一般遇到这个情况，你要是确定没什么可提交的，而且，你修改的本地代码也就是自己搞搞测试，那么，这种情况下，你就可以直接接受别人的，放弃本地修改。</p>

<p>要是，你一本正经的在完成你的任务，但是你的同事却凑巧也修改了你正在修改的文件，而且他还先你一步提交了，废话，要不然，解决代码冲突的事情，就是他来干啦。这个情况下，就得考虑合并了，也就是对应上图的merge按钮啦。</p>

<p>点了会出现下图。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170711144439595" style="height:443px; width:800px" /></p>

<p>注意下，这个页面的布局，左边的是local，也就是本地的，你修改的，右边的是server，也就是 服务器上的，中间的就是result，也就是合并结果。</p>

<p>再注意，右上角那地方，有个数字，也就是简单的总结下冲突和变更的个数。</p>

<p>这个视情况而定。</p>

<p>我的这个例子里面冲突的就一个地方。然后就是还有个比更的地方。</p>

<p>这个时候，你再看这个截图中间的2个红框，里面的箭头方向都是朝向中间的，要是你觉得哪边合适，也就是哪边的代码是OK的，那么就点哪边的箭头，然后抛弃的哪一边，就点对应的那个差号，就放弃啦。</p>

<p>因为这个地方有2个变化，一个冲突，一个变更。那么，这都是要处理的。</p>

<p>所以，你要把这些都变更，冲突，都处理完啦。最后，点apply，这之后，就算是合并冲突完事儿啦。</p>

<p><strong>下面说提交代码的相关说明。</strong></p>

<p>下面就是比较<strong>这个编辑器比eclipse的版本管理好的地方</strong>啦。</p>

<p>也就是这个本地代码在修改之后，他可以按你的想法分文件夹存放。</p>

<p>以方便把任务一个个的分开，做完一个提交一个。而不是在你提交的时候，你得自己仔细仔细的查找哪个和哪个是一个任务的，然后再提交，下面看图示范。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709191527759" /></p>

<p>图上，忘记打箭头啦（那个绿色的加号可以添加类别，红色减号，删除类别。就不示范了）。</p>

<p>可以看到我又添加了2个列表，一个是&ldquo;线程测试&rdquo;，一个是&ldquo;system测试&rdquo;。</p>

<p>这相当于是2个任务，他们又互不相干。你干完一个，你就可以选中一个列表，然后提交。</p>

<p>而不是下面这种。三个修改的文件放在一起，提交的时候，得自己找你完成了哪个任务，提交哪个文件。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709191853442" /></p>

<p>可以看到这三个文件，假设不分组存放的话，你干完任务你得找一下，哪个是需要提交的，然后再提交。</p>

<p>不要说这个无所谓啦，在这里，你看到的是只是改动了三个文件，但是，一般项目，动不动就是十几二十个文件的改动，你慢慢挑，挑瞎你。</p>

<p>搞不好，还会出现，哎，忘记提交了这个文件，或者多提交了那个文件。既然有这么好的功能，为何不好好利用一下呢。</p>

<p>这里面还有些个按钮我就不一一解释啦。</p>

<p>因为我这个是为了写这个文章而做的没必要的修改，这个时候，我就可以选中这个default类别，然后点击那个第一竖排的第三个按钮，revert，直接把代码回撤到与库里代码相同的版本。也就是撤销我的修改。（顺便示范一下这个按钮的作用）</p>

<p>默认，这个地方就只有一个default分类，所有修改的文件都会本分在这个default类里面，你可以根据需要，自行新建分类。</p>

<p>还有就是，刚刚从eclipse转过来的同学，可能会发现，在这编辑器里面修改了文件之后，发现，文件夹的颜色不像eclipse那样跟着变颜色。因为所有被修改的代码都会在这个local changes的地方显示的，所以，文件夹变颜色的这个，也就显得没必要啦。</p>

<p>&nbsp;</p>

<p>关于单独选择某个或者某些被修改的文件的截图如下。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709193710311" /></p>

<p>不想选中整个类别提交所有的话，你也可以按Ctrl选中你想要提交的文件，然后再点左边的第一竖排的第二个按钮提交。这几个按钮和我们在上面的工具栏看到的是一样的。</p>

<p>选中之后，</p>

<p>也可以revert，回撤，</p>

<p>move to another changelist，换个类别列表。</p>

<p>show diff，查看修改文件和原来库里的差别。注意一下，快捷键提示哦，这个你在提交代码的时候，把每个提交的文件都跟库里对比一下，确认一下修改的地方没错误，再提交。</p>

<p>delete，删除某个文件。</p>

<p>看个<strong>实际提交的图的例子</strong>。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709202949506" style="height:427px; width:800px" /></p>

<p>&nbsp;</p>

<ul>
	<li><code>Reformat code</code>&nbsp;格式化代码，如果是 Web 开发建议不要勾选，因为格式化 JSP 类文件，格式化效果不好。如果都是 Java 类则可以安心格式化。</li>
	<li><code>Rearrange code</code>&nbsp;重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，这个会在后面说。设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。</li>
	<li><code>Optimize imports</code>&nbsp;优化导入包，会在自动去掉没有使用的包。这个建议都勾选，这个只对 Java 类有作用，所以不用担心有副作用。</li>
	<li><code>Perform code analysis</code>&nbsp;进行代码分析，这个建议不用在提交的时候处理，而是在开发完之后，要专门养成对代码进行分析的习惯。IntelliJ IDEA 集成了代码分析功能。</li>
	<li><code>Check TODO</code>&nbsp;检查代码中的&nbsp;<code>TODO</code>。</li>
	<li><code>Cleanup</code>&nbsp;清除下版本控制系统，去掉一些版本控制系统的错误信息，建议勾选。</li>
</ul>

<p>为啥我一个没勾选，因为，</p>

<p>&nbsp;</p>

<p>第一个<strong>代码格式化</strong>，你只是格式化你写的代码就行，项目是很多人在不同的时间段写的，所以，不要随便格式化别人的代码，那样版本控制就会显得乱七八糟。你写的代码肯定要记的格式化一下。</p>

<p>优化导入包的，这个可以在编辑器的配置里面配置，不需要到这再弄，啰嗦啦。</p>

<p>分析代码，他分析代码会说你的代码会有多少警告，代码哪里和哪里重复啦，等等，也很啰嗦，这些你在写代码的时候，看到黄色警告线，都大概处理下就好啦，也没必要来这里啰嗦。</p>

<p>check todo 也没必要。所以，我就一个没勾选啦</p>

<p>&nbsp;</p>

<p><strong>还有一个比较有用的地方就是 &nbsp;ignore。</strong></p>

<p>有些不需要版本控制的文件，该怎么处理，才能是这个local changes，这一栏看着干净整洁点。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709195817175" /></p>

<p>因为我这个项目已经处理过了，所以，我只是把我处理的东西拿出来示范一下。这些个是我忽略版本管理的那些文件，</p>

<p>可以看到都是在.dea文件夹下的一些文件，这些文件是不需要版本控制的，也不需要显示在这local changes一栏的。所以，你选中这些多余的文件，然后ignore掉就可以啦。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709200211613" style="height:192px; width:800px" /></p>

<p>这样就把这些不需要版本控制的文件都从这一栏消失掉，这个操作完之后，点一下刷新就可以啦。</p>

<p>就是左边第一竖排的第一个 按钮啦。我这么大概解释下，你在摸索下，就知道具体怎么回事啦。</p>

<p>他可以忽略某个文件，或者忽略某个文件夹下的文件，或者是某一类型文件。。。对应上图中间的三个操作。</p>

<p>&nbsp;</p>

<p>你可以如下查看你<strong>忽略版本控制</strong>的文件。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709200559261" /></p>

<p>&nbsp;</p>

<p><strong>下面再补充一些常用的小技巧。</strong></p>

<p>这是第一个小技巧。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131016948" /></p>

<p>你再同样操作一下，就可以把这个给关掉啦。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131051989" /></p>

<p>这个是鼠标悬停在某一个提交记录上的效果，可以看到当时的提交理由。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131122675" />直接点击之后，就会有个弹出框，显示当时这次提交的时候，所有的改动文件。</p>

<p>第二个小技巧。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131409732" /></p>

<p>这个图上略显绿色的是新增的 代码，</p>

<p>下面这个直接修改的代码，</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131703903" /></p>

<p>下面是删除时候的样子。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170710131849237" /></p>

<p>&nbsp;</p>

<h3><strong>第四步，一些个简单的配置。</strong></h3>

<p>上面说的是一些<strong>常用的使用日常</strong>，下面再看一些比较<strong>常用的配置相关</strong>的内容。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709201231310" style="height:458px; width:800px" /></p>

<p><img alt="" src="http://img.blog.csdn.net/20170709201420270" style="height:451px; width:800px" /></p>

<p>&nbsp;</p>

<ul>
	<li>如上图标注 1 所示，<code>When files are created</code>&nbsp;表示当有新文件放进项目中的时候 IntelliJ IDEA 做如何处理，默认是&nbsp;<code>Show options before adding to version control</code>&nbsp;表示弹出提示选项，让开发者决定这些新文件是加入到版本控制中还是不加入。如果不想弹出提示，则选择下面两个选项进行默认操作。</li>
	<li>如上图标注 2 所示，<code>When files are deleted</code>&nbsp;表示当有新文件在项目中被删除的时候 IntelliJ IDEA 做如何处理，默认是&nbsp;<code>Show options before removing from version control</code>&nbsp;表示弹出提示选项，让开发者决定这些被删除的是否从版本控制中删除。如果不想弹出提示，则选择下面两个选项进行默认操作。</li>
</ul>

<p>个人建议，还是就如图所示，你在新建和删除的时候，都最好提示下，不要嫌弃麻烦。挺好的一个功能。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709201717190" style="height:451px; width:800px" /></p>

<p>下面就是上面说的那个图标的位置的图。</p>

<p><img alt="" src="http://img.blog.csdn.net/20170709201907767" style="height:224px; width:800px" /></p>

<p><img alt="" src="http://img.blog.csdn.net/20170709202128400" style="height:451px; width:800px" /></p>

<p>剩下的，可以自己闲的蛋疼的时候，随便点点，看个大概，估计就知道是什么意思啦。</p>
