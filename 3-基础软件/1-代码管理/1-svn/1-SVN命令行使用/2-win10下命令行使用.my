<h1>在Windows下使用svn命令行教程及svn命令行的解释</h1>

<p>以前在公司一直使用git，现在的公司改用svn，一时间还真的不知道如何下手，在网上搜寻了很多大神和官网文档的指导，总结了下面一份教程，希望能够帮助大家快速上手，如果想更细致的了解相关内容，可以点击每个小节里提供的的链接。</p>

<p>1、Windows下命令行工具：</p>

<p>发现原来安装的tortoisesvn已经集成到shell中，不能在命令行下使用。于是找到这个<a href="http://www.visualsvn.com/downloads/" target="_blank">http://www.visualsvn.com/downloads/</a></p>

<p>下载<strong>Apache Subversion command line tools</strong>，这是一个可以在cmd下使用的命令行工具，解压后把里面bin目录这个路径添加到环境变量的path，这样在cmd下就可以使用了，和linux下使用svn的习惯一样了。</p>

<p>2、简明教程：</p>

<p><a href="http://www.flyne.org/article/851" target="_blank">http://www.flyne.org/article/851</a></p>

<p>目录约定：</p>

<ul>
	<li><strong>/trunck：</strong>开发主线</li>
	<li><strong>/branches：</strong>支线副本</li>
	<li><strong>/tags：</strong>标签副本（一旦创建，不允许修改）</li>
</ul>

<p><strong>1）使用trunk作为主要的开发目录</strong></p>

<p>一般的，我们的所有的开发都是基于trunk进行开发，当一个版本（release）开发告一段落（开发、测试、文档、制作安装程序、打包等结束后），代码处于冻结状态（人为规定，可以通过hook来进行管理）。此时应该基于当前冻结的代码库，打tag。</p>

<p>当下一个版本/阶段的开发任务开始时，继续在trunk进行开发。此时，如果发现了上一个已发行版本（Released Version）有一些bug，或者一些很急迫的功能要求，而正在开发的版本（Developing Version）无法满足时间要求，这时候就需要在上一个版本上进行修改了。解决方法是基于发行版对应的tag，做相应的分支（branch）进行开发。</p>

<p><strong>2）下图为struts2的SVN仓库目录：</strong></p>

<p><img alt="" src="http://img.blog.csdn.net/20160222215953904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>3、常用命令</p>

<p>svn help</p>

<p>svn --version</p>

<p>svn --version --quiet&nbsp; &nbsp;&nbsp;只显示版本号</p>

<p>svn checkout 地址</p>

<p>svn add 文件或者文件夹&nbsp; &nbsp; 增加本地数据到服务器</p>

<p>svn commit / svn ci -m &ldquo;注释&rdquo;&nbsp; 文件名 &nbsp; 提交代码，要先add才commit</p>

<p>svn update / svn up&nbsp;不必跟特定的文件或目录，也可以自己指定需要更新的文件或目录。每次commit或者改动之前最好更新一下。</p>

<p>svn log</p>

<p>svn delete 文件名</p>

<p>svn resolve 路径 --accept working&nbsp; &nbsp; 解决冲突</p>

<p><a href="http://zccst.iteye.com/blog/1765519" target="_blank">http://zccst.iteye.com/blog/1765519</a></p>

<p>svn switch 远程路径&nbsp; &nbsp; 版本切换</p>

<p>svn list&nbsp;路径&nbsp;/&nbsp;svn ls&nbsp; &nbsp; 列出版本库下的文件和目录</p>

<p>svn merge -r m:n 路径&nbsp;&nbsp; &nbsp; 合并文件，从版本号m到版本号n的远程分支都合并到当前分支中</p>

<p>svn info 确认工作目录的svn信息</p>

<p>svn diff -r m:n 路径&nbsp; &nbsp; 对版本m和版本n比较差异</p>

<p>svn cleanup&nbsp; &nbsp;&nbsp;&nbsp;为失败的失误清场</p>

<p>svn status -v&nbsp; &nbsp; 在本地进行代码修改，检查修改状态</p>

<p>svn import 远程路径 --message &ldquo;message&rdquo;&nbsp; &nbsp;将当前路径下文件导入到版本库中</p>

<p>svn export 远程路径&nbsp; &nbsp; 导出一份干净的项目</p>

<p>svn move/ svn mv 原文件名 新文件名&nbsp; &nbsp;&nbsp;重命名</p>

<p>svn mkdir 文件名</p>

<p>svn copy / svn cp 源文件路径 新文件路径</p>

<p>svn revert 文件名&nbsp;&nbsp; &nbsp;&nbsp;只能恢复未提交之前的操作</p>

<p>若要还原已提交的改动：只能用旧文件覆盖新文件。操作如下：</p>

<p>&nbsp; &nbsp; 1）sun up&nbsp; &nbsp;&nbsp;让本地工作拷贝更新到最新状态</p>

<p>&nbsp; &nbsp;&nbsp;2）svn log your_file_path&nbsp;&nbsp; &nbsp;&nbsp;查看文件日志，这时候提交时填写的说明信息就派上用场了</p>

<p>&nbsp; &nbsp; 3）svn diff -r 旧修订版序号:新修订版序号 your_file_path&nbsp; &nbsp;&nbsp;查看两个修订版之间的不同。</p>

<p>&nbsp; &nbsp; 4）决定用哪个旧的修订版号后，用旧的修订版号文件覆盖新的修订版号文件。svn merge -r 新修订版序号:旧修订版序号 your_file_path</p>

<p>&nbsp; &nbsp; 5）svn commit -m &quot;恢复到某修订版（某修订版作废）&quot;</p>

<p>本地的版本叫做working copy</p>

<p>4、关于merge</p>

<ul>
	<li>branch主要用于新功能的开发</li>
	<li>合并发生在本地working copy，只要你不提交就不会影响到repository</li>
	<li>合并前一定要先update、commit，保证不会out of day，并将本地的修改保存到repository</li>
	<li>branch和trunk并行开发的过程中，要经常同步，将trunk的修改合并到branch，合并时选择&quot;Merge a range of revision&quot;</li>
	<li>branch最后合并回trunk时，merge type选择&quot;Reintegrate a branch&quot;
	<p>不管是从trunk合并到branch还是最终从branch合并回trunk，在每次合并前最好先update，然后将本地的修改先全部commit，保护好现场，万一合并不理想随时都可以revert&nbsp;<a href="http://blog.csdn.net/eggcalm/article/details/6606520" target="_blank">http://blog.csdn.net/eggcalm/article/details/6606520</a></p>
	</li>
</ul>

<p><a href="http://zhengkun.readthedocs.org/zh_CN/latest/2014/02/07/svn-usage/" target="_blank">http://zhengkun.readthedocs.org/zh_CN/latest/2014/02/07/svn-usage/</a></p>

<p>5、关于解决冲突</p>

<p>发生冲突之后会出现三个临时文件：</p>

<p>XXX.mine XXX.r1 XXX.r2</p>

<p>一旦解决了冲突，需用svn resolved让subversion知道，这样就会删除这三个临时文件，冲突状态解决。</p>

<p>三种解决方式：</p>

<ul>
	<li>手工合并冲突：需要将冲突标志删除</li>
	<li>用某一个临时文件覆盖自己的工作文件</li>
	<li>用svn revert 放弃本地修改，不需要执行resolved</li>
</ul>

<p>6、高级教程 很棒！！</p>

<p><a href="https://i18n-zh.googlecode.com/svn/www/svnbook-1.4/index.html" target="_blank">https://i18n-zh.googlecode.com/svn/www/svnbook-1.4/index.html</a></p>

<p>7、Git和SVN的区别</p>

<p><a href="http://blog.csdn.net/bruce_6/article/details/38299677" target="_blank">http://blog.csdn.net/bruce_6/article/details/38299677</a></p>

<p>Git是分布式svn是集中式；svn只有一个中央版本库，而git有无限个；svn有全局的版本号，git没有；git不必联网就可以看到所有的log，svn必须联网；git保存的是元数据，svn是复制整个文档；git强调分支，svn只是不同的文件目录，就是copy。</p>
