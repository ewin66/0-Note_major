<h1>svn备份一般采用三种方式</h1>

<h2>备份策略</h2>

<p>==============</p>

<p>svn备份一般采用三种方式：</p>

<p>1）svnadmin dump&nbsp;<br />
2)svnadmin hotcopy&nbsp;<br />
3)svnsync.&nbsp;<br />
<br />
注意，svn备份不宜采用普通的文件拷贝方式（除非你备份的时候将库暂停），如copy命令、rsync命令。&nbsp;<br />
笔者曾经用 rsync命令来做增量和全量备份，在季度备份检查审计中，发现备份出来的库大部分都不可用，因此最好是用svn本身提供的功能来进行备份。&nbsp;</p>

<h3>优缺点分析</h3>

<p>==============&nbsp;<br />
第一种svnadmin dump是官方推荐的备份方式，优点是比较灵活，可以全量备份也可以增量备份，并提供了版本恢复机制。&nbsp;<br />
缺点是：如果版本比较大，如版本数增长到数万、数十万，那么dump的过程将非常慢；备份耗时，恢复更耗时；不利于快速进行灾难恢复。&nbsp;<br />
个人建议在版本数比较小的情况下使用这种备份方式。&nbsp;<br />
第二种svnadmin hotcopy原设计目的估计不是用来备份的，只能进行全量拷贝，不能进行增量备份；&nbsp;<br />
优点是：备份过程较快，灾难恢复也很快；如果备份机上已经搭建了svn服务，甚至不需要恢复，只需要进行简单配置即可切换到备份库上工作。&nbsp;<br />
缺点是：比较耗费硬盘，需要有较大的硬盘支持（俺的备份机有1TB空间，呵呵）。&nbsp;<br />
第三种svnsync实际上是制作2个镜像库，当一个坏了的时候，可以迅速切换到另一个。不过，必须svn1.4版本以上才支持这个功能。&nbsp;<br />
优点是：当制作成2个镜像库的时候起到双机实时备份的作用；&nbsp;<br />
缺点是：当作为2个镜像库使用时，没办法做到&ldquo;想完全抛弃今天的修改恢复到昨晚的样子&rdquo;；而当作为普通备份机制每日备份时，操作又较前2种方法麻烦。</p>

<p>&nbsp;</p>

<h3>备份的命令</h3>

<p>==============</p>

<h4>全备份：</h4>

<p>使用svnadmin dump或svnadmin hotcopy或svnsync来做，<br />
hotcopy：<br />
svnadmin hotcopy path/to/repository path/to/backup &ndash;clean-logs<br />
dump:<br />
svnadmin dump 版本库路径及名称 &ndash;revision 导出的版本号&gt; 导出的命名</p>

<h4>增量备份：</h4>

<p>使用svnadmin dump的&ndash;incremental选项来实现</p>

<p>svnadmin dump 版本库路径及名称[本地路径!]&nbsp;&ndash;r&nbsp;上次导出的版本号:到本次要导出到的版本号 -&ndash;incremental &gt; 导出的命名<br />
<br />
一个技巧：如果你有一个较大的Subsersion版本库而你又想用最少的空间来将它备份下来，用这个命令（请将/repo替换成你的版本库路径）吧：<br />
svnadmin dump &ndash;deltas /repo |bzip2 |tee dump.bz2 | md5sum &gt;dump.md5<br />
分步解释：最重要的一步是 -deltas,将消耗更多的CPU资源，但拥有更有效的差异存储办法。<br />
bzip2压缩方案比gzip慢，但换来的更好的压缩率。<br />
更有趣的是，tee方法将压缩的数据流转向到文件dump.bz2,同时将其输出到标准输出，后者有转向给了MD5摘要计算工具。</p>

<h3>还原命令</h3>

<p>==============</p>

<h4>还原版本：</h4>

<p>svnadmin load 要恢复的版本库路径及名称 &lt; 导出的命名<br />
svnadmin hotcopy path/to/repository path/to/backup &ndash;clean-logs</p>

<p>&nbsp;</p>

<h2>svnadmin dump</h2>

<p>==============</p>

<p>这是subversion官方推荐的备份方式。&nbsp;<br />
<br />
1）定义备份策略：&nbsp;<br />
备份频度：每周六进行一次全量备份，每周日到周五进行增量备份&nbsp;<br />
备份地点：备份存储路径到/home/backup/svn/&nbsp;<br />
备份命名：全量备份文件名为：weekly_fully_backup.yymmdd,增量备份文件命名为：daily-incremental-backup.yymmdd&nbsp;<br />
备份时间：每晚21点开始&nbsp;<br />
备份检查：每月末进行svnadmin load恢复试验。&nbsp;<br />
2）建立全量备份脚本：&nbsp;<br />
在~/下建立一个perl脚本文件，名为weekly_backup.pl，执行全量备份，并压缩备份文件，代码如下(本代码只针对一个库的备份，如果是多个库请做相应改动)：&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
#!/usr/bin/perl -w&nbsp;<br />
my $svn_repos=&quot;/home/svn/repos/project1&quot;;&nbsp;<br />
my $backup_dir=&quot;/home/backup/svn/&quot;;&nbsp;<br />
my $next_backup_file = &quot;weekly_fully_backup.&quot;.`date +%Y%m%d`;&nbsp;<br />
<br />
$youngest=`svnlook youngest $svn_repos`;&nbsp;<br />
chomp $youngest;&nbsp;<br />
<br />
print &quot;Backing up to revision $youngest\n&quot;;&nbsp;<br />
my $svnadmin_cmd=&quot;svnadmin dump --revision 0:$youngest $svn_repos &gt;$backup_dir/$next_backup_file&quot;;&nbsp;<br />
`$svnadmin_cmd`;&nbsp;<br />
open(LOG,&quot;&gt;$backup_dir/last_backed_up&quot;); #记录备份的版本号&nbsp;<br />
print LOG $youngest;&nbsp;<br />
close LOG;&nbsp;<br />
#如果想节约空间，则再执行下面的压缩脚本&nbsp;<br />
print &quot;Compressing dump file...\n&quot;;&nbsp;<br />
print `gzip -g $backup_dir/$next_backup_file`;&nbsp;<br />
<br />
3）建立增量备份脚本：&nbsp;<br />
在全量备份的基础上，进行增量备份：在~/下建立一个perl脚本文件，名为：daily_backup.pl，代码如下：&nbsp;<br />
<br />
#!/usr/bin/perl -w&nbsp;<br />
my $svn_repos=&quot;/home/svn/repos/project1&quot;;&nbsp;<br />
my $backup_dir=&quot;/home/backup/svn/&quot;;&nbsp;<br />
my $next_backup_file = &quot;daily_incremental_backup.&quot;.`date +%Y%m%d`;&nbsp;<br />
<br />
open(IN,&quot;$backup_dir/last_backed_up&quot;);&nbsp;<br />
$previous_youngest =&nbsp;;&nbsp;<br />
chomp $previous_youngest;&nbsp;<br />
close IN;&nbsp;<br />
<br />
$youngest=`svnlook youngest $svn_repos`;&nbsp;<br />
chomp $youngest;&nbsp;<br />
if ($youngest eq $previous_youngest)&nbsp;<br />
{&nbsp;<br />
&nbsp; print &quot;No new revisions to backup.\n&quot;;&nbsp;<br />
&nbsp; exit 0;&nbsp;<br />
}&nbsp;<br />
my $first_rev = $previous_youngest + 1;&nbsp;<br />
print &quot;Backing up revisions $youngest ...\n&quot;;&nbsp;<br />
my $svnadmin_cmd = &quot;svnadmin dump --incremental --revision $first_rev:$youngest $svn_repos &gt; $backup_dir/$next_backup_file&quot;;&nbsp;<br />
`$svnadmin_cmd`;&nbsp;<br />
open(LOG,&quot;&gt;$backup_dir/last_backed_up&quot;); #记录备份的版本号&nbsp;<br />
print LOG $youngest;&nbsp;<br />
close LOG;&nbsp;<br />
#如果想节约空间，则再执行下面的压缩脚本&nbsp;<br />
print &quot;Compressing dump file...\n&quot;;&nbsp;<br />
print `gzip -g $backup_dir/$next_backup_file`;&nbsp;<br />
&nbsp;&nbsp;&nbsp;<br />
4）配置/etc/crontab文件&nbsp;<br />
配置 /etc/crontab 文件，指定每周六执行weekly_backup.pl，指定周一到周五执行daily_backup.pl;&nbsp;<br />
具体步骤俺就不啰嗦了.&nbsp;<br />
&nbsp;&nbsp;&nbsp;<br />
5）备份恢复检查&nbsp;<br />
在 月底恢复检查中或者在灾难来临时，请按照如下步骤进行恢复：恢复顺序从低版本逐个恢复到高版本；即，先恢复最近的一次完整备份 weekly_full_backup.071201（举例），然后恢复紧挨着这个文件的增量备份 daily_incremental_backup.071202，再恢复后一天的备份071203，依次类推。如下：&nbsp;<br />
user1&gt;mkdir newrepos&nbsp;<br />
user1&gt;svnadmin create newrepos&nbsp;<br />
user1&gt;svnadmin load newrepos &lt; weekly_full_backup.071201&nbsp;<br />
user1&gt;svnadmin load newrepos &lt; daily_incremental_backup.071202&nbsp;<br />
user1&gt;svnadmin load newrepos &lt; daily_incremental_backup.071203&nbsp;<br />
....&nbsp;<br />
<br />
如果备份时采用了gzip进行压缩，恢复时可将解压缩和恢复命令合并，简单写成：&nbsp;<br />
user1&gt;zcat weekly_full_backup.071201 | svnadmin load newrepos&nbsp;<br />
user1&gt;zcat daily_incremental_backup.071202 | svnadmin load newrepos&nbsp;<br />
...</p>

<h2>svnadmin hotcopy整库拷贝方式&nbsp;</h2>

<p>==============</p>

<p>svnadmin hotcopy是将整个库都&ldquo;热&rdquo;拷贝一份出来，包括库的钩子脚本、配置文件等；任何时候运行这个脚本都得到一个版本库的安全拷贝，不管是否有其他进程正在使用版本库。&nbsp;<br />
因此这是俺青睐的备份方式。&nbsp;<br />
<br />
1）定义备份策略&nbsp;<br />
备份频度：每天进行一次全量备份，&nbsp;<br />
备份地点：备份目录以日期命名，备份路径到 /home/backup/svn/${mmdd}&nbsp;<br />
备份保留时期：保留10天到15天，超过15天的进行删除。&nbsp;<br />
备份时间：每晚21点开始&nbsp;<br />
备份检查：备份完毕后自动运行检查脚本、自动发送报告。&nbsp;<br />
2）建立备份脚本&nbsp;<br />
在自己home目录 ~/下创建一个文件，backup.sh：&nbsp;<br />
<br />
#!/bin/bash&nbsp;<br />
SRCPATH=/home/svn/repos/; #定义仓库parent路径&nbsp;<br />
DISTPATH=/home/backup/svn/`date +\%m%d`/ ; #定义存放路径;&nbsp;<br />
if [ -d &quot;$DISTPATH&quot; ]&nbsp;<br />
then&nbsp;<br />
else&nbsp;<br />
&nbsp;&nbsp; mkdir $DISTPATH&nbsp;<br />
&nbsp;&nbsp; chmod g+s $DISTPATH&nbsp;<br />
fi&nbsp;<br />
echo $DISTPATH&nbsp;<br />
svnadmin hotcopy $SRCPATH/Project1 $DISTPATH/Project1 &gt;/home/backup/svn/cpreport.log 2&gt;&amp;1;&nbsp;<br />
svnadmin hotcopy $SRCPATH/Project2 $DISTPATH/Project2&nbsp;<br />
cp $SRCPATH/access&nbsp; $DISTPATH; #备份access文件&nbsp;<br />
cp $SRCPATH/passwd&nbsp; $DISTPATH; #备份passwd文件&nbsp;<br />
perl /home/backup/svn/backup_check.pl #运行检查脚本&nbsp;<br />
perl /home/backup/svn/deletDir.pl&nbsp; #运行删除脚本，对过期备份进行删除。&nbsp;<br />
<br />
3）建立检查脚本&nbsp;<br />
在上面指定的地方/home/backup/svn/下建立一个perl脚本：backup_check.pl&nbsp;<br />
备份完整性检查的思路是：对备份的库运行 svnlook youngest，如果能正确打印出最新的版本号，则表明备份文件没有缺失；如果运行报错，则说明备份不完整。我试过如果备份中断，则运行svnlook youngest会出错。&nbsp;<br />
&nbsp;&nbsp;&nbsp;<br />
4)定义删除脚本&nbsp;<br />
由于是全量备份，所以备份不宜保留太多，只需要保留最近10来天的即可，对于超过15天历史的备份基本可以删除了。&nbsp;<br />
&nbsp;&nbsp; 在/home/backup/svn/下建立一个perl脚本：deletDir.pl</p>

<p>&nbsp;</p>

<p>5）修改/etc/crontab 文件&nbsp;</p>

<p>&nbsp;&nbsp; 在该文件中指定每晚21点执行&ldquo;backup.sh&rdquo;脚本。</p>

<h2>svnsync备份</h2>

<p>==============</p>

<p>使用svnsync备份很简单，步骤如下：&nbsp;<br />
1）在备份机上创建一个空库：svnadmin create Project1&nbsp;<br />
2）更改该库的钩子脚本pre-revprop-change（因为svnsync要改这个库的属性，也就是要将源库的属性备份到这个库，所以要启用这个脚本）:&nbsp;&nbsp;&nbsp;<br />
&nbsp; cd SMP/hooks;&nbsp;<br />
&nbsp; cp pre-revprop-change.tmpl pre-revprop-change;&nbsp;<br />
&nbsp; chmod 755 pre-revprop-change;&nbsp;<br />
&nbsp; vi pre-revprop-change;&nbsp;<br />
&nbsp; 将该脚本后面的三句注释掉，或者干脆将它弄成一个空文件。&nbsp;<br />
3）初始化，此时还没有备份任何数据：&nbsp;<br />
svnsync init file:///home/backup/svn/svnsync/Project1/&nbsp; http://svntest.subversion.com/repos/Project1&nbsp;<br />
&nbsp; 语法是：svnsync init {你刚创建的库url} {源库url}&nbsp;<br />
&nbsp; 注意本地url是三个斜杠的：///&nbsp;<br />
4）开始备份（同步）：&nbsp;<br />
&nbsp; svnsync sync file:///home/backup/svn/svnsync/Project1&nbsp;<br />
5）建立同步脚本&nbsp;<br />
&nbsp; 备份完毕后，建立钩子脚本进行同步。在源库/hooks/下建立/修改post-commit脚本，在其中增加一行，内容如下：&nbsp;<br />
&nbsp;&nbsp;&nbsp; /usr/bin/svnsync sync&nbsp; --non-interactive file:///home/backup/svn/svnsync/Project1&nbsp;<br />
&nbsp; 你可能已经注意到上面的备份似乎都是本地备份，不是异地备份。实际上，我是通过将远程的备份机mount（请参阅mount命令）到svn服务器上来实现的，逻辑上看起来是本地备份，物理上实际是异地备份。</p>

<p>&nbsp;完！</p>

<p>感谢，Thanks！</p>
