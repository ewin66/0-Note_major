<h1>git,svn,github,码云之间联系区别</h1>

<h2>1.git与github（https://www.oschina.net/）的区别</h2>

<p>git（https://git-scm.com/）是一个版本控制工具<br />
github是一个用git做版本控制的项目托管平台。</p>

<h2>2.码云（http://git.oschina.net/）简介</h2>

<p>码云是开源中国社区2013年推出的基于 Git 的完全免费的代码托管服务，这个服务是基于 Gitlab 开源软件所开发的，我们在 Gitlab 的基础上做了大量的改进和定制开发，目前已经成为国内最大的代码托管系统，致力于为国内开发者提供优质稳定的托管服务。</p>

<p>码云主要功能</p>

<p>码云除了提供最基础的 Git 代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull Request、打包下载任意版本、Issue、Wiki 、保护分支、代码质量检测、PaaS 项目演示等方便管理、开发、协作、共享的功能。</p>

<h2>3.码云与&nbsp;github&nbsp;的对比</h2>

<p>优点：服务器在国内，在国内访问速度比github快很多，可以免费让自己的仓库他人不可见，但是否安全就不知道了。访问速度很快，支持svn，git两种方式，免费账户同样可以建立&nbsp;私有项目，而&nbsp;github&nbsp;上要建立私有项目必须&nbsp;付费。</p>

<p>缺点：每个仓库有1G的容量限制，把Unity工程弄上去一下就超了。</p>

<h2>4.git和svn的区别</h2>

<p><a href="http://git-scm.com/" target="_blank">GIT</a>不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。所以，这篇文章的主要目的就是通过介绍GIT能做什么、它和<a href="http://subversion.tigris.org/" target="_blank">SVN</a>在深层次上究竟有什么不同来帮助你认识它。</p>

<p><strong>1.GIT是分布式的，SVN是集中式：</strong></p>

<p>这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。如果你能理解这个概念，那么你就已经上手一半了。需要做一点声明，GIT并不是目前第一个或唯一的分布式版本控制系统。还有一些系统，例如<a href="http://www.bitkeeper.com/" target="_blank">Bitkeeper</a>,&nbsp;<a href="http://mercurial.selenic.com/" target="_blank">Mercurial</a>等，也是运行在分布式模式上的。但GIT在这方面做的更好，而且有更多强大的功能特征。</p>

<p>CVS、SVN这样的集中式版本控制系统，它的完整代码仓库（<em><strong>代码仓库不仅仅只包含了代码，还包含各个历史版本的信息等</strong></em>）在中心服务器上，一旦这个中心服务器挂了，也就是完整的代码仓库挂了，虽然你本地可能之前有从中心服务器上取得过代码，但是那些历史版本信息都没有了，而且你也无法再提交代码。</p>

<p>git不同，git没有中心服务器的概念，每一个git客户端（git节点）都含有一个完整的代码仓库（前提是你之前从远程git仓库fetch过代码），所以那些历史版本信息都在你本机上，假如哪一个git节点挂掉了，随意从其他git节点clone一个代码仓库过来就ok了， 那些原来的代码、版本信息之类的都还是完整的（<strong>当然如果你在这个挂掉的git节点上新增的代码是没有掉了的</strong>）。</p>

<p>综上，<em><strong>git的每一个节点（第一次从远程git仓库取得代码后，该git节点就是一个完整的代码仓库）相当于SVN的中心服务器，都包含完整的代码仓库</strong></em>。</p>

<p>git偏向于分布式及此带来的好处：</p>

<p>GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p>

<p>同样，这种分布式的操作模式对于开源软件社区的开发来说也是个巨大的恩赐，你不必再像以前那样做出补丁包，通过email方式发送出去，你只需要创建一个分支，向项目团队发送一个推请求。这能让你的代码保持最新，而且不会在传输过程中丢失。<a href="http://www.github.com/" target="_blank">GitHub.com</a>就是一个这样的优秀案例。</p>

<p>有些谣言传出来说subversion将来的版本也会基于分布式模式。但至少目前还看不出来。</p>

<p><strong>2.数据存储方式不同：</strong>GIT把内容按元数据方式存储，而SVN是按文件：</p>

<p>所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,<strong>.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西</strong>，例如标签，分支，版本记录等。</p>

<p><strong>3.分支概念不同：</strong>GIT分支和SVN的分支不同：</p>

<p>分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令<a href="http://jan.baresovi.cz/dr/en/subversion-mergeinfo" target="_blank">svn propget svn:mergeinfo</a>，来确认代码是否被合并。感谢Ben同学指出这个特征。所以，经常会发生有些分支被遗漏的情况。</p>

<p>然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p>

<p><strong>4.版本号不同：</strong>GIT没有一个全局的版本号，而SVN有：</p>

<p>目前为止这是跟SVN相比GIT缺少的最大的一个特征。你也知道，SVN的版本号实际是任何一个相应时间的源代码快照。我认为它是从CVS进化到SVN的最大的一个突破。因为GIT和SVN从概念上就不同，我不知道GIT里是什么特征与之对应。如果你有任何的线索，请在评论里奉献出来与大家共享。</p>

<p>更新：有些读者指出，我们可以使用GIT的SHA-1来唯一的标识一个代码快照。这个并不能完全的代替SVN里容易阅读的数字版本号。但，用途应该是相同的。</p>

<p>5.GIT的<strong>内容完整性</strong>要优于SVN：</p>

<p>GIT的内容存储使用的是<a href="http://en.wikipedia.org/wiki/SHA-1" target="_blank">SHA-1</a>哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。这里有一个很好的关于GIT内容完整性的讨论 &ndash;<a href="http://stackoverflow.com/questions/964331/git-file-integrity" target="_blank">http://stackoverflow.com/questions/964331/git-file-integrity</a></p>

<p><strong>6.代码提交对网络的要求</strong></p>

<p>git是分布式版本控制系统，代码提交是在本地的（如此速度就快），<em><strong>当然生成补丁（patch）然后push到远程服务器上是需要联网的</strong></em>。</p>

<p>CVS、SVN是集中式版本控制系统，代码提交都是提交到远程服务器上，是需要一直联网的（如此速度就慢）（<strong>这里的一直联网不是说你写代码的时候要联网，而是说你提交代码的时候必须联网；</strong>但是git不同，git提交代码是本地的不需要联网，生成patch后push patch才需要联网，相当于svn的远程的集中服务器对于git来说，这个集中的远程服务器就在本地）。这个地方比较难理解。</p>

<p>&nbsp;</p>
