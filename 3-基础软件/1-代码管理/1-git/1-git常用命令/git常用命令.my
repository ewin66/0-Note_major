<h1>Git 常用命令大全</h1>

<p><a href="http://gitref.org/index.html" target="_blank">Git</a>&nbsp;是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</p>

<h2><strong>git实际使用常用命令：</strong></h2>

<h3>移动文件和文件夹：</h3>

<p>&nbsp;</p>

<h2><strong>Git常用操作命令：</strong></h2>

<h2><strong>1)&nbsp;远程仓库相关命令</strong></h2>

<p>检出仓库：$ git clone git://github.com/jquery/jquery.git</p>

<p>查看远程仓库：$ git remote -v</p>

<p>添加远程仓库：$ git remote add [name] [url]</p>

<p>删除远程仓库：$ git remote rm [name]</p>

<p>修改远程仓库：$ git remote set-url --push&nbsp;[name]&nbsp;[newUrl]</p>

<p>拉取远程仓库：$ git pull [remoteName] [localBranchName]</p>

<p>推送远程仓库：$ git push [remoteName] [localBranchName]</p>

<p>&nbsp;</p>

<p>*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>

<p>$git push origin test:master &nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;提交本地test分支作为远程的master分支</p>

<p>$git push origin test:test &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//&nbsp;提交本地test分支作为远程的test分支</p>

<p>&nbsp;</p>

<h2><strong>2）分支(branch)操作相关命令</strong></h2>

<p>查看本地分支：$ git branch</p>

<p>查看远程分支：$ git branch -r</p>

<p>创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支</p>

<p>切换分支：$ git checkout [name]</p>

<p>创建新分支并立即切换到新分支：$ git checkout -b [name]</p>

<p>删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>

<p>合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并</p>

<p>创建远程分支(本地分支push到远程)：$ git push origin [name]</p>

<p>删除远程分支：$ git push origin :heads/[name]&nbsp;或&nbsp;$ gitpush origin :[name]&nbsp;</p>

<p>&nbsp;</p>

<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p>

<p>$git symbolic-ref HEAD refs/heads/[name]</p>

<p>$rm .git/index</p>

<p>$git clean -fdx</p>

<p>&nbsp;</p>

<h2><strong>3）版本(tag)操作相关命令</strong></h2>

<p>查看版本：$ git tag</p>

<p>创建版本：$ git tag [name]</p>

<p>删除版本：$ git tag -d [name]</p>

<p>查看远程版本：$ git tag -r</p>

<p>创建远程版本(本地版本push到远程)：$ git push origin [name]</p>

<p>删除远程版本：$ git push origin :refs/tags/[name]</p>

<p>合并远程仓库的tag到本地：$ git pull origin --tags</p>

<p>上传本地tag到远程仓库：$ git push origin --tags</p>

<p>创建带注释的tag：$ git tag -a [name] -m &#39;yourMessage&#39;</p>

<p>&nbsp;</p>

<h2><strong>4)&nbsp;子模块(submodule)相关操作命令</strong></h2>

<p>添加子模块：$ git submodule add [url] [path]</p>

<p>&nbsp;&nbsp;&nbsp;如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>

<p>初始化子模块：$ git submodule init &nbsp;----只在首次检出仓库时运行一次就行</p>

<p>更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下</p>

<p>删除子模块：（分4步走哦）</p>

<p>&nbsp;1)&nbsp;$ git rm --cached [path]</p>

<p>&nbsp;2)&nbsp;编辑&ldquo;.gitmodules&rdquo;文件，将子模块的相关配置节点删除掉</p>

<p>&nbsp;3)&nbsp;编辑&ldquo;&nbsp;.git/config&rdquo;文件，将子模块的相关配置节点删除掉</p>

<p>&nbsp;4)&nbsp;手动删除子模块残留的目录</p>

<p>&nbsp;</p>

<h2><strong>5）忽略一些文件、文件夹不提交</strong></h2>

<p>在仓库根目录下创建名称为&ldquo;.gitignore&rdquo;的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</p>

<p>target</p>

<p>bin</p>

<p>*.db</p>
