<h1>Git的奇技淫巧</h1>

<blockquote>
<p>Git常用命令集合，Fork于<a href="https://github.com/git-tips/tips">tips</a>项目</p>
</blockquote>

<p>Git是一个&ldquo;分布式版本管理工具&rdquo;，简单的理解版本管理工具：大家在写东西的时候都用过&ldquo;回撤&rdquo;这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用&ldquo;回撤&rdquo;是找不回来的。而&ldquo;版本管理工具&rdquo;能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>

<p>下面的内容就是列举了常用的git命令和一些小技巧，可以通过&quot;页面内查找&quot;的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>

<h2>开卷必读</h2>

<p><em>如果之前未使用过Git，可以学习<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="nofollow">廖老师的免费Git教程</a>入门</em></p>

<ol>
	<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
	<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>
	<li>统一概念：
	<ul>
		<li>工作区：改动（增删文件和内容）</li>
		<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了&lsquo;暂存区&rsquo;</li>
		<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了&rsquo;本地仓库&rsquo;，每个commit，我叫它为一个&lsquo;版本&rsquo;。</li>
		<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了&lsquo;远程仓库&rsquo;（github等)</li>
		<li>commit-id：输出命令：<code>git log</code>，最上面那行<code>commit xxxxxx</code>，后面的字符串就是commit-id</li>
	</ul>
	</li>
	<li>如果喜欢这个项目，欢迎Star、提交Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a><img alt="blush" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f60a.png" style="height:20px; width:20px" /></li>
</ol>

<h2>目录</h2>

<ul>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AAcommit">重设第一个commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF">快速切换分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0master%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到master的分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E7%9A%84%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">展示所有的分支关联的远程仓库</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%80%E4%B8%AAcommit%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E9%87%8D%E6%96%B0%E5%A2%9E%E6%B7%BB%E4%B8%80%E4%B8%AAcommit">回到某一个commit的状态，并重新增添一个commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AAcommit%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84commit">回到某个commit的状态，并删除后面的commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AAcommit%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个commit的描述</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%9F%A5%E7%9C%8Bcommit%E5%8E%86%E5%8F%B2">查看commit历史</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%89%A7%E8%A1%8C%E8%BF%87git%E5%91%BD%E4%BB%A4">显示本地执行过git命令</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84url">修改远程仓库的url</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%97%E5%87%BA%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出远程分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%8A%8AA%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AAcommit%E6%94%BE%E5%88%B0B%E5%88%86%E6%94%AF%E4%B8%8A">把A分支的某一个commit，放到B分支上</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E7%BB%99git%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给git命令起别名</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4commit">存储当前的修改，但不用提交commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%ACuntracked%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括untracked的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89stashes">展示所有stashes</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AAstash%E7%9A%84%E7%8A%B6%E6%80%81">回到某个stash的状态</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AAstash%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AAstash">回到最后一个stash的状态，并删除这个stash</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84stash">删除所有的stash</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BB%8Estash%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从stash中拿出某个文件的修改</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89tracked%E7%9A%84%E6%96%87%E4%BB%B6">展示所有tracked的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89untracked%E7%9A%84%E6%96%87%E4%BB%B6">展示所有untracked的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4untracked%E7%9A%84%E6%96%87%E4%BB%B6">强制删除untracked的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4untracked%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除untracked的目录</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF">重命名分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84commit%E5%8E%86%E5%8F%B2">展示简化的commit历史</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%88%B0%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支到导出成一个文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%89%A7%E8%A1%8Crebase%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8stash">执行rebase之前自动stash</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AEID%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81-%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据ID，拉下某一状态，到本地分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%B8%85%E9%99%A4gitignore%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除<code>.gitignore</code>文件中记录的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89alias%E5%92%8Cconfigs">展示所有alias和configs</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li>
	<li><a href="https://github.com/limaochang/git-tips#commit%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BABranch1%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AFBranch2%E6%B2%A1%E6%9C%89commit">commit历史中显示Branch1有的，但是Branch2没有commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9C%A8commit-log%E4%B8%AD%E6%98%BE%E7%A4%BAGPG%E7%AD%BE%E5%90%8D">在commit log中显示GPG签名</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95commit">新建并切换到新分支上，同时这个分支没有任何commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li>
	<li><a href="https://github.com/limaochang/git-tips#clone%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone下来指定的单一分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E8%AF%A5%E5%88%86%E6%94%AF">创建并切换到该分支</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%89%80%E6%9C%89%E7%9A%84%E5%88%86%E6%94%AF%E7%9A%84commit">展示本地所有的分支的commit</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%9C%A8commit-log%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在commit log中查找相关内容</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9Afile%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定file放到工作区中</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li>
	<li><a href="https://github.com/limaochang/git-tips#%E8%81%94%E7%B3%BB%E6%88%91">联系我</a></li>
</ul>

<h2>展示帮助信息</h2>

<pre>
git help -g</pre>

<h2>回到远程仓库的状态</h2>

<p>抛弃本地所有的修改，回到远程仓库的状态。</p>

<pre>
git fetch --all &amp;&amp; git reset --hard origin/master</pre>

<h2>重设第一个commit</h2>

<p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的commit</strong>，这样就可以重新提交第一个commit了</p>

<pre>
git update-ref -d HEAD</pre>

<h2>展示工作区和暂存区的不同</h2>

<p>输出<strong>工作区</strong>和<strong>暂存区</strong>的different(不同)。</p>

<pre>
git diff</pre>

<p>还可以展示本地仓库中任意两个commit之间的文件变动：</p>

<pre>
git diff &lt;commit-id&gt; &lt;commit-id&gt;</pre>

<h2>展示暂存区和最近版本的不同</h2>

<p>输出<strong>暂存区</strong>和本地最近的版本(commit)的different(不同)。</p>

<pre>
git diff --cached</pre>

<h2>展示暂存区、工作区和最近版本的不同</h2>

<p>输出<strong>工作区</strong>、<strong>暂存区</strong>&nbsp;和本地最近的版本(commit)的different(不同)。</p>

<pre>
git diff HEAD</pre>

<h2>快速切换分支</h2>

<pre>
git checkout -</pre>

<h2>删除已经合并到master的分支</h2>

<pre>
git branch --merged master | grep -v &#39;^\*\|  master&#39; | xargs -n 1 git branch -d</pre>

<h2>展示所有的分支关联的远程仓库</h2>

<pre>
git branch -vv</pre>

<h2>关联远程分支</h2>

<p>关联之后，<code>git branch -vv</code>就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>

<pre>
git branch -u origin/mybranch</pre>

<p>或者在push时加上<code>-u</code>参数</p>

<pre>
git push origin/mybranch -u</pre>

<h2>删除本地分支</h2>

<pre>
git branch -d &lt;local-branchname&gt;</pre>

<h2>删除远程分支</h2>

<pre>
git push origin --delete &lt;remote-branchname&gt;</pre>

<p>或者</p>

<pre>
git push origin :&lt;remote-branchname&gt;</pre>

<h2>查看标签</h2>

<pre>
<code>git tag
</code></pre>

<p>展示当前分支的最近的tag</p>

<pre>
git describe --tags --abbrev=0</pre>

<h2>本地创建标签</h2>

<pre>
git tag &lt;version-number&gt;</pre>

<p>默认tag是打在最近的一次commit上，如果需要指定commit打tag：</p>

<pre>
$ git tag -a &lt;version-number&gt; -m &quot;v1.0 发布(描述)&quot; &lt;commit-id&gt;</pre>

<h2>推送标签到远程仓库</h2>

<p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>

<pre>
git push origin &lt;local-version-number&gt;</pre>

<p>一次性推送所有标签，同步到远程仓库：</p>

<pre>
<code>git push origin --tags
</code></pre>

<h2>删除本地标签</h2>

<pre>
git tag -d &lt;tag-name&gt;</pre>

<h2>删除远程标签</h2>

<p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令</p>

<pre>
git push origin :refs/tags/&lt;tag-name&gt;</pre>

<h2>放弃工作区的修改</h2>

<pre>
git checkout &lt;file-name&gt;</pre>

<p>放弃所有修改：</p>

<pre>
git checkout .</pre>

<h2>回到某一个commit的状态，并重新增添一个commit</h2>

<pre>
git revert &lt;commit-id&gt;</pre>

<h2>回到某个commit的状态，并删除后面的commit</h2>

<p>和revert的区别：reset命令会抹去某个commit id之后的所有commit</p>

<pre>
git reset &lt;commit-id&gt;</pre>

<h2>修改上一个commit的描述</h2>

<pre>
git commit --amend</pre>

<h2>查看commit历史</h2>

<pre>
git log</pre>

<h2>查看某段代码是谁写的</h2>

<p>blame的意思为&lsquo;责怪&rsquo;，你懂的。</p>

<pre>
git blame &lt;file-name&gt;</pre>

<h2>显示本地执行过git命令</h2>

<p>就像shell的history一样</p>

<pre>
<code>git reflog
</code></pre>

<h2>修改作者名</h2>

<pre>
git commit --amend --author=&#39;Author Name &lt;email@address.com&gt;&#39;</pre>

<h2>修改远程仓库的url</h2>

<pre>
git remote set-url origin &lt;URL&gt;</pre>

<h2>列出所有远程仓库</h2>

<pre>
git remote</pre>

<h2>列出本地和远程分支</h2>

<p>-a参数相当于：all</p>

<pre>
git branch -a</pre>

<h2>列出远程分支</h2>

<p>-r参数相当于：remote</p>

<pre>
git branch -r</pre>

<h2>查看两个星期内的改动</h2>

<pre>
git whatchanged --since=&#39;2 weeks ago&#39;</pre>

<h2>把A分支的某一个commit，放到B分支上</h2>

<p>这个过程需要<code>cherry-pick</code>命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928" rel="nofollow">参考</a></p>

<pre>
git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</pre>

<h2>给git命令起别名</h2>

<p>简化命令</p>

<pre>
git config --global alias.&lt;handle&gt; &lt;command&gt;

比如：git status 改成 git st，这样可以简化命令

git config --global alias.st status</pre>

<h2>存储当前的修改，但不用提交commit</h2>

<p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" rel="nofollow">廖雪峰老师的git教程</a></p>

<pre>
git stash</pre>

<h2>保存当前状态，包括untracked的文件</h2>

<p>untracked文件：新建的文件</p>

<pre>
git stash -u</pre>

<h2>展示所有stashes</h2>

<pre>
git stash list</pre>

<h2>回到某个stash的状态</h2>

<pre>
git stash apply &lt;stash@{n}&gt;</pre>

<h2>回到最后一个stash的状态，并删除这个stash</h2>

<pre>
git stash pop</pre>

<h2>删除所有的stash</h2>

<pre>
git stash clear</pre>

<h2>从stash中拿出某个文件的修改</h2>

<pre>
git checkout &lt;stash@{n}&gt; -- &lt;file-path&gt;</pre>

<h2>展示所有tracked的文件</h2>

<pre>
git ls-files -t</pre>

<h2>展示所有untracked的文件</h2>

<pre>
git ls-files --others</pre>

<h2>展示所有忽略的文件</h2>

<pre>
git ls-files --others -i --exclude-standard</pre>

<h2>强制删除untracked的文件</h2>

<p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的untracked文件。<code>clean</code>命令，<strong>注意两点</strong>：</p>

<ol>
	<li>clean后，删除的文件无法找回</li>
	<li>不会影响tracked的文件的改动，只会删除untracked的文件</li>
</ol>

<pre>
git clean &lt;file-name&gt; -f</pre>

<h2>强制删除untracked的目录</h2>

<p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除untracked的文件。详情见上一条</p>

<pre>
git clean &lt;directory-name&gt; -df</pre>

<h2>重命名分支</h2>

<pre>
git branch -m &lt;new-branch-name&gt;</pre>

<h2>展示简化的commit历史</h2>

<pre>
git log --pretty=oneline --graph --decorate --all</pre>

<h2>把某一个分支到导出成一个文件</h2>

<pre>
git bundle create &lt;file&gt; &lt;branch-name&gt;</pre>

<h2>从包中导入分支</h2>

<p>新建一个分支，分支内容就是上面<code>git bundle create</code>命令导出的内容</p>

<pre>
git clone repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</pre>

<h2>执行rebase之前自动stash</h2>

<pre>
git rebase --autostash</pre>

<h2>从远程仓库根据ID，拉下某一状态，到本地分支</h2>

<pre>
git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</pre>

<h2>详细展示一行中的修改</h2>

<pre>
git diff --word-diff</pre>

<h2>清除gitignore文件中记录的文件</h2>

<pre>
git clean -X -f</pre>

<h2>展示所有alias和configs</h2>

<p><strong>注意：</strong>&nbsp;config分为：当前目录（local）和全局（golbal）的config，默认为当前目录的config</p>

<pre>
git config --local --list (当前目录)
git config --global --list (全局)</pre>

<h2>展示忽略的文件</h2>

<pre>
git status --ignored</pre>

<h2>commit历史中显示Branch1有的，但是Branch2没有commit</h2>

<pre>
git log Branch1 ^Branch2</pre>

<h2>在commit log中显示GPG签名</h2>

<pre>
git log --show-signature</pre>

<h2>删除全局设置</h2>

<pre>
git config --global --unset &lt;entry-name&gt;</pre>

<h2>新建并切换到新分支上，同时这个分支没有任何commit</h2>

<p>相当于保存修改，但是重写commit历史</p>

<pre>
git checkout --orphan &lt;branch-name&gt;</pre>

<h2>展示任意分支某一文件的内容</h2>

<pre>
git show &lt;branch-name&gt;:&lt;file-name&gt;</pre>

<h2>clone下来指定的单一分支</h2>

<pre>
git clone -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</pre>

<h2>创建并切换到该分支</h2>

<pre>
git checkout -b &lt;branch-name&gt;</pre>

<h2>忽略文件的权限变化</h2>

<p>不再将文件的权限变化视作改动</p>

<pre>
git config core.fileMode false</pre>

<h2>展示本地所有的分支的commit</h2>

<p>最新的放在最上面</p>

<pre>
git for-each-ref --sort=-committerdate --format=&#39;%(refname:short)&#39; refs/heads/</pre>

<h2>在commit log中查找相关内容</h2>

<p>通过grep查找，given-text：所需要查找的字段</p>

<pre>
git log --all --grep=&#39;&lt;given-text&gt;&#39;</pre>

<h2>把暂存区的指定file放到工作区中</h2>

<pre>
git reset &lt;file-name&gt;</pre>

<h2>强制推送</h2>

<pre>
git push -f &lt;remote-name&gt; &lt;branch-name&gt;</pre>

<h2>增加远程仓库</h2>

<pre>
git remote add origin &lt;remote-url&gt;</pre>

<h2>联系我</h2>

<ul>
	<li>博客园：<a href="http://www.cnblogs.com/xueweihan/" rel="nofollow">削微寒</a></li>
	<li>邮箱：<a href="mailto:595666367@qq.com">发邮件给我</a></li>
	<li>或者直接提Pr，Issues</li>
</ul>
