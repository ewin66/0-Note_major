<h2>Git命令的用法小结</h2>

<p>可以离线工作.便于协作!便于使用分支!版本合并容易!速度快.灵活性高.</p>

<p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3183102862,511752826&fm=173&app=49&f=JPEG?w=640&h=418&s=2EE0EC121D9A41CA16D5CDD90300C0B3" />git命令的基本数据流</p>

<p>Git架构</p>

<p>仓库</p>

<p>一个git仓库包含工作目录，与.git目录。其中.git目录是工作目录的下的一级子目录。</p>

<p>由于所有版本控制相关信息都在该.git目录下，整个工作目录保持与未版本控制时一样的状态。</p>

<p>.git目录</p>

<p>该目录下包含所有的配置，日志，分支，头(HEAD)等版本控制所需的全部信息。</p>

<p>工作目录</p>

<p>即版本控制管理的对象。是某项工作进行的需要增减文件，变更文件内容等操作所包含于的目录。该目录下的所有文件或目录内容可以被git管理。</p>

<p>缓存区 (Index)</p>

<p>主要用来保存下一次需要提交（正式修改）到git仓库中的内容。又称为Cache, Staging Area等。</p>

<p>提交 (Commit)</p>

<p>一次提交的表示一组针对工作目录内容的修改或操作。例如新增了5个文件，删除了2个，修改3个。这些修改信息一次性纳入git仓库中，形成了对工作目录整体的新的快照。在git中一次提交即对应于新的快照，即可看作一个临时版本。“提交”总是从缓冲区发出。</p>

<p>分支(Branch)</p>

<p>分支可以看作一个指针，总是指向一个版本树中的一个"提交"。分支帮助用户指示版本树中的某个分支。</p>

<p>标签(Tag)</p>

<p>标签代表了版本历史中的某些特殊点的标识，例如用来标识版本发布点 (v1.0, 等等)</p>

<p>头 (HEAD)</p>

<p>HEAD即指向当前分支的指针。在git操作的命令中HEAD取当前分支指向的"版本"(对应于提交，标签等）</p>

<p>文件状态</p>

<p>已修改（Modified） - 文件已修改，且没有存入缓存或者版本库已缓存（Staged） - 文件最新修改已放入缓存区中，但尚未存入版本库已提交（Committed） - 文件最新修改已存入版本库Git可管理广义的内容</p>

<p>计算机科学相关的版本管理各种设计工程的版本管理命令</p>

<p>初始化（init）</p>

<p>初始化工作目录，使之能够被git管理。会生成子目录“.git”.</p>

<p>$ git init</p>

<p>配置（config）</p>

<p>可以在配置文件.gitconfig中设置，配置文件一般在用户的HOME路径下。也可以通过命令行设置，如</p>

<p>$ git config --global user.email 邮箱机制</p>

<p>$ git config --global user.name 用户名</p>

<p>帮助（help）</p>

<p>有多种方式获取git的整体帮助，或者某个命令的帮助。</p>

<p>$ git help</p>

<p># 获取某个命令的帮助 git help <command_here></p>

<p>$ git help add</p>

<p># 或者 git <command_here> --help</p>

<p>$ git add --help</p>

<p>忽略的文件 ignore files</p>

<p>明确令git不管理某些文件或者目录。通常这是开发者私有文件，或者临时生成的文件。把这些文件或目录名添加到.gitignore文件中。</p>

<p>$ echo"temp/" >> .gitignore</p>

<p>$ echo"private_key" >> .gitignore</p>

<p>状态（status）</p>

<p>显示当前工作区与暂存区（Index）的粗略状态。</p>

<p># 显示某些文件已修改，哪些文件已准备提交等信息</p>

<p>$ git status</p>

<p># 了解git status的更多用法</p>

<p>$ git help status</p>

<p>添加 （add）</p>

<p>将文件加入缓存区</p>

<p># 添加文件</p>

<p>$ git add HelloWorld.java</p>

<p># 添加子目录下的文件</p>

<p>$ git add /path/to/file/HelloWorld.c</p>

<p># 通配符方式添加多个文件</p>

<p>$ git add ./*.java</p>

<p># 添加工作目录下的所有文件</p>

<p>$ git add -A</p>

<p>分支（branch）</p>

<p>该命令用于管理分支。可以查看，修改，创建，删除分支。、</p>

<p># 列出所有本质</p>

<p>$ git branch -a</p>

<p># 创建新分支</p>

<p>$ git branch myNewBranch</p>

<p># 删除分支</p>

<p>$ git branch -d myBranch</p>

<p># 重命名分支： git branch -m <oldname> <newname></p>

<p>$ git branch -m myBranchName myNewBranchName</p>

<p># 修改分支描述</p>

<p>$ git branch myBranchName --edit-description</p>

<p>标签（tag）</p>

<p>管理标签，标签一般是对当前git仓库的快照设置一个标志。标签包括轻量（lightweight）与可标注（annotated），后者允许记录更多信息。</p>

<p># 列出标签</p>

<p>$ git tag</p>

<p># 创建可标注标签：-a表示可标注类型，-m 选项加一个说明</p>

<p>$ git tag -a v2.0 -m 'my version 2.0'</p>

<p># 显示某个标签相关的信息</p>

<p>$ git show v2.0</p>

<p># 把本端的标签v2.0（的版本）推送到远端</p>

<p>$ git push origin v2.0</p>

<p># 把本端所有的标签（的版本）推送到远端</p>

<p>$ git push origin --tags</p>

<p>切换（checkout）</p>

<p>工作区的文件更换为某个分支或提交的版本.</p>

<p># 切换到缺省分支，一般是master分支</p>

<p>$ git checkout</p>

<p># 切换至某分支</p>

<p>$ git checkout branchName</p>

<p>#创建新分支并切换到该分支，等价于:"git branch <name>; git checkout <name>"</p>

<p>$ git checkout -b newBranch</p>

<p>克隆（clone）</p>

<p>克隆远端的git仓库至本地。并且为新创建仓库中的所有分支绑定对应的远端分支。</p>

<p># 克隆</p>

<p>$ git clone URI路径</p>

<p># 浅克隆-快速克隆。注意如果不设置–no–single-branch，只会克隆HEAD所在的分支。--depth表示克隆的最近版本数</p>

<p>$ git clone --depth 1 URI路径</p>

<p>提交（commit）</p>

<p>将缓存区（Index）中的内容提交到git仓库中</p>

<p># 提交时填写说明(message)</p>

<p>$ git commit -m "Added multiplyNumbers() function to HelloWorld.c"</p>

<p># 提交时带数字签名（由提交者的GPG密钥生成）</p>

<p>$ git commit -S -m "signed commit message"</p>

<p># 自动将修改的文件加入缓存区（Index），再进行提交。</p>

<p>$ git commit -a -m "Modified foo.php and removed bar.php"</p>

<p># 把本次提交与最后一次提交合并（删除最后一次提交，加入合并后的提交）</p>

<p>$ git commit --amend -m "Correct message"</p>

<p>显示差异（diff）</p>

<p>显示工作目录、缓存区（Index）、当前git库版本之间的差异</p>

<p># 显示工作目录与缓存区（Index）之间的差异</p>

<p>$ git diff</p>

<p># 显示缓存区（Index）与当前git库版本之间的差异</p>

<p>$ git diff --cached</p>

<p># 显示工作目录与当前git库版本之间的差异</p>

<p>$ git diff HEAD</p>

<p>查找grep</p>

<p>快速查找git库的内容.</p>

<p>可能配置:</p>

<p># grep结果显示行号</p>

<p>$ git config --global grep.lineNumber true</p>

<p># 定义快捷命令g对于grep且美化输出结果</p>

<p>$ git config --global alias.g "grep --break --heading --line-number"</p>

<p># 在所有的java文件中查找字符串"variableName"</p>

<p>$ git grep 'variableName' -- '*.java'</p>

<p>日志（log）</p>

<p>显示提交到git仓库的记录信息.</p>

<p># 显示所有提交</p>

<p>$ git log</p>

<p># 以简化单行方式显示（每个提交）</p>

<p>$ git log --oneline</p>

<p># 只显示合并的提交</p>

<p>$ git log --merges</p>

<p># 在提交行的左侧以字符串图像的方式表示版本变化情况</p>

<p>$ git log --graph</p>

<p>合并 （merge）</p>

<p>把外部的分支的修改，合并入当前分支.</p>

<p># 把其他某个分支，合并入当前分支.</p>

<p>$ git merge branchName</p>

<p># --no-ff标志标识，对任何情况合并都生成新的版本（因为有的优化可以不生成新的版本）</p>

<p>$ git merge --no-ff branchName</p>

<p>改名 （mv）</p>

<p>改名或者移动文件</p>

<p>#改名文件</p>

<p>$ git mv HelloWorld.c HelloNewWorld.c</p>

<p>#移动文件</p>

<p>$ git mv HelloWorld.c ./new/path/HelloWorld.c</p>

<p>#强制改名或者移动文件（适用于目的文件已经存在的情况）</p>

<p>$ git mv -f myFile existingFile</p>

<p>拖动（pull）</p>

<p>把某个版本从远端git仓库中拖出，并且合并到本端的某个分支</p>

<p># git pull <remote> <branch>：把远端origin的master分支拖动到本端git仓库</p>

<p># 过程是拖动到本端的“远端镜像”分支，再合并入其对应的本端分支</p>

<p>$ git pull origin master</p>

<p># 如果当前分支与某个“远端分支”绑定，则先把其远端分支拖动到本地，再合并入当前分支</p>

<p>$ git pull</p>

<p># 合并到本端分支的策略是采用rebase（即本端修改在远端最新版本之上的单线演进）</p>

<p>$ git pull origin master --rebase</p>

<p>推送（push）</p>

<p>把本端分支与修改推送至远端的分支并合并</p>

<p># git push <remote> <branch>：把本端的branch分支推送到远端git仓库中</p>

<p>$ git push origin master</p>

<p># 如果不设置远端名称，将会推送所有与远端绑定的本端分支</p>

<p>$ git push</p>

<p>#在命令中加-u标志，可以在推送之前立即设置本端分支的远端绑定（以后无需再设）。以下含义是在将本端的master分支与origin(远端名）上的master绑定</p>

<p>$ git push -u origin master</p>

<p>暂存（stash）</p>

<p>保存当前暂存区(Index)与工作目录中的变更内容到git中的某个存储区域。再必要的时候，可以取出这些变更并合并到当前工作目录与暂存区（Index）</p>

<p>如果工作区由变更为保存，而执行pull操作会报错。因此需要先用stash保存修改，并使得工作区变为“干净”状态。此时可以执行pull操作。</p>

<p>stash以类似堆栈的方式存储保存的"修改"</p>

<p>#列出所有存储的“修改”，最新的位于最上部</p>

<p>$git stash list</p>

<p># 弹出堆栈顶部的“修改”，并实施于工作目录或者暂存区（Index）。</p>

<p>$ git stash pop</p>

<p># 实施堆栈顶部的“修改”，但不弹出</p>

<p>$ git stash apply</p>

<p># 实施堆栈顶部起第2个的“修改”（0序），但不弹出</p>

<p>git stash apply stash@{1}</p>

<p># 抛弃/删除堆栈顶部的“修改”</p>

<p>git stash drop</p>

<p>重整（rebase）</p>

<p>把一个分支上的提交转移到另外一个分支上。这样有可能把两个分支合并成一个。</p>

<p>一个重要准则：不要重整已经提交到公共仓库的版本。</p>

<p># 把特性开发分支重整到主分支上</p>

<p>$ git rebase master experimentBranch</p>

<p>复位 （reset）</p>

<p>通常reset命令，变更当前的HEAD某个版本，也可以根据HEAD指向的内容，更新存储区（Index）或工作目录。</p>

<p># 复位缓存区，用HEAD指向的内容更新缓存区（Index）</p>

<p>$ git reset</p>

<p># 复位缓存区，用HEAD指向的内容更新缓存区（Index）与工作目录</p>

<p>$ git reset --hard</p>

<p># 先移动HEAD指针，再用$get reset的操作.</p>

<p>$ git reset 31f2bb1</p>

<p># 先移动HEAD指针，再用git reset --hard的操作</p>

<p>$ git reset --hard 31f2bb1</p>

<p># 只移动HEAD指针</p>

<p>$ git reset --soft31f2bb1</p>

<p>参考日志 （reflog）</p>

<p>reflog以时间由近到远列出所有的git操作, 缺省时间长度是90天。因为有些操作的结果没有直接的版本或标签对应，比如历史版本经过rebase等原因在现有版本树中已经找不到了，这些历史版本都可以在reflog中找到。</p>

<p># 列出参考日志</p>

<p>$ git reflog</p>

<p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=24298417,768683916&fm=173&app=49&f=JPEG?w=515&h=89&s=58C1A144CD4C3F7014579C930200808B" style="width:515px" />git reflog的输出</p>

<p>#如果上述日志中显示最后一次操作是在master分支的hard reset。要恢复到原来的master指针，并更新工作目录与缓存区（Index）的内容，找到master分支初始状态时对应的Ref值</p>

<p>$git reset --hard 0254ea7</p>

<p>回退（revert）</p>

<p>回退用于对某个提交的修改，做反操作的修改，在效果上实现回退。回退在git仓库中产生一个新的提交。回退针对的“提交”与该回退之间，可能存在若干其他的提交。但“回退”只回退对应提交的修改，而保留其他提交的修改。</p>

<p># 回退特定提交</p>

<p>$ git revert <commit></p>

<p>删除（rm）</p>

<p>删除文件的同时，也变更git工作目录与缓存区（Index）的状态</p>

<p># 删除文件</p>

<p>$ git rm /pather/to/the/file/HelloWorld.c</p>
