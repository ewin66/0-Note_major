<h1>解决 Git 冲突的 14 个建议和工具</h1>

<p>Git 非常善于合并代码。代码的合并在本地完成，快速而且灵活。正常情况下每次从不同分支合并内容时，冲突有可能会发生。通常解决冲突很简单，就如同知道（如何）选择（保留）重要的更改一样，而有时解决冲突则需要额外的工作。</p>

<p>每个开发者对于解决冲突有不同的偏好。不久前，一位叫丹&middot;史蒂文斯的同事用内部软件&nbsp;<a href="https://www.atlassian.com/software/confluence-questions/">Questions for Confluence</a>&nbsp;询问了大家是如何做的。</p>

<p><a href="https://www.atlassian.com/software/confluence-questions/" target="new"><img alt="Questions on Confluence" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/questions.png" style="width:650px" /></a></p>

<p>收集到的回答和看法比&nbsp;Atlassian 之墙有更大的吸引力。下面是我们用多种方式解决 Git 冲突的详尽描述，希望它能提供一些可以去尝试的想法，并且融入到你日常编程习惯中。</p>

<p>（&nbsp;Atlassian 之墙是指&nbsp;Atlassian 公司让客户将意见和反馈贴在墙上，可以参考<a href="http://atlassian.wpengine.netdna-cdn.com/wp-content/uploads/ww-customers-600x450.jpg" target="_blank">这幅图</a>，译者注）</p>

<h2>通用设置建议</h2>

<p>为了设置 Git 使其能正确合并，我们先开始做一些简单的配置。</p>

<h3>1. 设置建议</h3>

<p>当遇到冲突时，可以在命令行或者其他可视化工具中输入&ldquo;git mergetool&rdquo;来初始化合并活动。在&ldquo;.gitconfig&rdquo;中用&ldquo;merge.tool&rdquo;变量来设置 Git 中自己喜欢的冲突解决软件，比如用&nbsp;<a href="http://kdiff3.sourceforge.net/">KDiff3</a>&nbsp;的可能会这样填写&rdquo;<code>.gitconfig</code>&rdquo; 的&nbsp;<em>merge&nbsp;</em>部分：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p>[merge]</p>

			<p>tool=&quot;kdiff3&quot;</p>
			</td>
		</tr>
	</tbody>
</table>

<p>上面的语句等价于在命令行输入以下命令：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git config --global merge.tool kdiff3</p>
			</td>
		</tr>
	</tbody>
</table>

<h3>2. 在冲突标记中显示（分支）共同的祖先</h3>

<p>用下面的设置来改进冲突标记使其也显示（分支）共同祖先（感谢罗宾&middot;斯托克和休&middot;吉登斯）：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git config --global merge.conflictstyle diff3</p>
			</td>
		</tr>
	</tbody>
</table>

<p>这个设置命令新添加一部分标记<code>|||||||</code>&nbsp;从而给冲突加了注释，这样可以看到冲突行在有问题的两个分支的共同祖先处是什么状态。</p>

<h3>3. 合并时使用&ldquo;耐心&rdquo;算法</h3>

<p>如果文件内容很长（比如一个&nbsp;XML文件）、冲突很多或者两个版本很不一致时，试着用下面的命令再次合并：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git merge --strategy-option=patience</p>
			</td>
		</tr>
	</tbody>
</table>

<p>&ldquo;耐心&rdquo;算法的结果应该可以更好地协调一些函数中或者标记中没有配对的括号，具体算法细节可以参考&nbsp;<a href="http://stackoverflow.com/questions/4045017/what-is-git-diff-patience-for">Stack Overflow</a>&nbsp;上的一个回答。</p>

<h3>4. 当你需要单个文件的历史信息时</h3>

<p>除非使用像&nbsp;<a href="https://www.sourcetreeapp.com/">SourceTree</a>&nbsp;一样的可视化工具来弄清到底对一个文件做过什么，不然你可以使用：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git log --merge --decorate --source -p path/to/file/you/care/about</p>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h2>手动解决冲突</h2>

<p>处理合并问题主要有两类做法：有些开发者喜欢偏底层处理，因而手工操作处理冲突标记，而有些则偏好可视化工具来辅助（解决冲突）。两种方式都能极其有效地解决冲突。</p>

<h3>5. 处理过程示例</h3>

<p>有几个同事分享了他们手动处理的过程，比如詹森&middot;欣奇描述了他的处理流程：</p>

<ul>
	<li>从手头的合并开始：</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p>git merge the/other/branch</p>

			<p>git status</p>
			</td>
		</tr>
	</tbody>
</table>

<ul>
	<li>看下有多少文件冲突。</li>
	<li>对每个冲突文件：
	<ul>
		<li>在编辑器中打开文件（比如 IntelliJ 或 Vim ）</li>
		<li>看看每个被冲突标记（&ldquo;&gt;&gt;&gt;&gt;&rdquo;和&ldquo;&lt;&lt;&lt;&lt;&rdquo;）围绕的区块。</li>
		<li>看看（被冲突标记的区块）是否有意义，每个作者的意图是什么，如果能弄清楚就解决掉。</li>
		<li>如果冲突标记无法理解，通常是这些文件改动很大，运行下面的命令：</li>
	</ul>
	</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p>git diff HEAD...the/other/branch -- path/to/conflicting/file</p>

			<p>git diff the/other/branch...HEAD -- path/to/conflicting/file</p>
			</td>
		</tr>
	</tbody>
</table>

<ul>
	<li>这样做是为了看哪边改动较小</li>
	<li>通常下面的命令：</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p>git log -p HEAD..the/other/branch -- path/to/conflicting/file</p>

			<p>git log -p the/other/branch..HEAD -- path/to/conflicting/file</p>
			</td>
		</tr>
	</tbody>
</table>

<p>能帮助理解另一边改动了什么。</p>

<ul>
	<li>
	<ul>
		<li>回溯文件到改动最大的一边：</li>
	</ul>
	</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git checkout the/other/branch -- path/to/conflicting/file</p>
			</td>
		</tr>
	</tbody>
</table>

<p>（在这里你也可以用&nbsp;<code>git checkout --theirs 或者</code>&nbsp;<code>--ours )</code></p>

<ul>
	<li>
	<ul>
		<li>&nbsp;手动检查并且再重新应用从另一边对文件的更改:</li>
	</ul>
	</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git add path/to/conflicting/file</p>
			</td>
		</tr>
	</tbody>
</table>

<ul>
	<li>
	<ul>
		<li>当这些更改都修复之后要构建整个项目，确保至少可以编译通过，如果测试可以很快运行起来，也要运行一下这些测试：</li>
	</ul>
	</li>
</ul>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p>git commit</p>
			</td>
		</tr>
	</tbody>
</table>

<p>这个过程看起来有点太手工化了，但詹森发现对于他的工作流程来说会更少产生不合理的合并。</p>

<p>想看一步步手动解决冲突的基本视频，可以参看我们最近的&nbsp;<a href="https://www.youtube.com/playlist?list=PLDshL1Z581YYxLsjYwM25HkIYrymXb7H_">Git Power Routines</a>&nbsp;课程。</p>

<p><a href="https://www.youtube.com/playlist?list=PLDshL1Z581YYxLsjYwM25HkIYrymXb7H_" target="new"><img alt="Git Power Routines" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/power-routines.png" style="width:650px" /></a></p>

<h2>合并工具的天堂</h2>

<p>有很多不同的可视化工具来操作复杂的合并和解决冲突。我的同事们提到了一些（并不是所有）：</p>

<h3>6. IntelliJ IDEA 冲突解决工具</h3>

<p>IntelliJ IDEA 是很多&nbsp;Atlassian 工作人员使用的 IDE 。很多人使用它内建的冲突解决工具来处理冲突，它提供了三个面板来分析：本地、远程和合并结果：</p>

<p><img alt="IntelliJ IDEA" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/intellij.png" style="width:650px" /></p>

<h3>7. KDiff3</h3>

<p><a href="http://kdiff3.sourceforge.net/">KDiff3</a>&nbsp;是 KDE 产品系列的一部分，并且在我们内部调查时提到过几次。</p>

<p><img alt="KDiff3" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/kdiff3.png" style="width:650px" /></p>

<h3>8. P4Merge</h3>

<p><a href="https://www.sourcetreeapp.com/">SourceTree</a>&nbsp;的作者斯蒂夫&middot;斯特里廷和其他几个同事使用&nbsp;P4Merge 来执行合并操作。<a href="https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools">P4Merge</a>&nbsp;是免费的可视化工具，它具有四个面板而不是其他工具提供的三个，显示了&rdquo;<code>base</code>&ldquo;、&rdquo;<code>local</code>&ldquo;、&rdquo;<code>remote</code>&ldquo;和&rdquo;<code>merge result</code>&ldquo;。</p>

<p><img alt="P4Merge" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/p4merge.png" style="width:650px" /></p>

<h3>9. meld&nbsp;</h3>

<p><a href="http://meldmerge.org/">meld</a>&nbsp;是用 GTK+ 和 Python 开发的，也是已经存在了很久的工具，被提到了几次。</p>

<p><img alt="Meld" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/meld.png" style="width:650px" /></p>

<h3>10. tig for status + diff</h3>

<p>更多喜欢终端的人使用&nbsp;<a href="http://jonas.nitro.dk/tig/">tig</a>&nbsp;（我们之前写过&nbsp;<a href="http://blogs.atlassian.com/2013/05/git-tig/">tig</a>&nbsp;的一篇介绍），再加上 &ldquo; git diff &rdquo;。</p>

<p><img alt="Tig+diff" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/tig.png" style="width:650px" /></p>

<h3>11. OS X 下的 FileMerge 即 opendiff</h3>

<h3>在长长的建议列表里，有几个开发者提到了 OS X 下原生的&ldquo;opendiff&rdquo;工具，或者叫做&ldquo;FileMerge&rdquo;。</h3>

<p><img alt="Filemerge" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/filemerge.png" style="width:650px" /></p>

<h3>12. diffmerge</h3>

<p>我并不知道&nbsp;<a href="https://sourcegear.com/diffmerge/">diffmerge</a>&nbsp;这个工具，不过在列表里也被提到了。</p>

<p><img alt="Diffmerge" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/diffmerge.png" style="width:650px" /></p>

<h3>13. Araxis Merge (商业版)</h3>

<p><a href="http://www.araxis.com/merge/index.en">Araxis Merge</a>&nbsp;这个名字让我想起了很久以前。那时，我在一台 Windows 机器上一堆让人抓狂的 XML 文件中垂死挣扎，而这个工具证明了它可以经受住这个挑战。它是个商业软件。</p>

<p><img alt="Araxis Merge" src="https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/araxis.jpg" style="width:650px" /></p>

<h3>14. vimdiff3</h3>

<p>有几个同事用&nbsp;<a href="http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/">vimdiff</a>&nbsp;来解决冲突，那是 vim 自带的合并/差异分析&nbsp;工具，你可以这样设置：</p>

<p>Shell</p>

<table>
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>
			</td>
			<td>
			<p>git config merge.tool vimdiff</p>

			<p>git config merge.conflictstyle diff3</p>

			<p>git config mergetool.prompt false</p>
			</td>
		</tr>
	</tbody>
</table>

<p>或者按照上面展示的那样直接修改&nbsp;.gitconfig 文件。</p>

<h2>结论</h2>

<p>你是如何解决冲突的呢？流程是怎样？你还使用过其他除了上文中提到以外的工具吗？让我们知晓你的技能吧，通过&nbsp;<a href="https://www.twitter.com/durdn">@durdn</a>&nbsp;联系我或者&nbsp;<a href="https://www.twitter.com/atlassiandev">@atlassiandev</a>&nbsp;我那很棒的团队。</p>
