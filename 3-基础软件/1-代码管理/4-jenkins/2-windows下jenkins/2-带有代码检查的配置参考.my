<h1>jenkins部署项目</h1>

<p>2018年03月30日 15:05:58&nbsp;<a href="https://me.csdn.net/weixin_40584932" target="_blank">随心所欲qbh</a>&nbsp;阅读数：912</p>

<h2>1 安装 Jenkins</h2>

<p>官网:&nbsp;<a href="https://jenkins.io/" rel="nofollow" target="_blank">https://jenkins.io/</a></p>

<h3>1.1 安装 JDK/Maven</h3>

<p>Jenkins 自身采用 Java 开发，所以要必须安装 JDK；<br />
本文集成的项目基于 Maven 构架，所以 Maven 也必须安装；<br />
两者的安装方法请参考我的另一篇文章：<a href="https://kefeng.wang/2016/12/26/tomcat-installation/" rel="nofollow" target="_blank">Tomcat 安装及其单机多实例部署</a></p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
</pre>
			</td>
			<td>
			<pre>
export JAVA_HOME=/usr/java/jdk1.8.0_111
export MAVEN_HOME=/opt/apache-maven-3.3.9
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h3>1.2 安装 Jenkins</h3>

<p>以下四种方法任选一种，推荐第一种。</p>

<h4>1.2.1 离线安装</h4>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
</pre>
			</td>
			<td>
			<pre>
## http://pkg.jenkins-ci.org/redhat/
wget http://pkg.jenkins-ci.org/redhat/jenkins-2.39-1.1.noarch.rpm ## 下载(也可以Windows下载再转过来)
sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins.io.key ## 公钥
sudo yum -y install jenkins-*.noarch.rpm
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>1.2.2 在线安装</h4>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
</pre>
			</td>
			<td>
			<pre>
## http://pkg.jenkins-ci.org/redhat/
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
sudo yum -y install jenkins
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h4>1.2.3 基于 Tomcat 安装</h4>

<ul>
	<li>安装并启动 Tomcat；</li>
	<li>从官网下载&nbsp;<a href="http://mirrors.jenkins.io/war/latest/jenkins.war" rel="nofollow" target="_blank">jenkins.war</a>&nbsp;至 $CATALINA_BASE/webapps，Tomcat 会自动部署；</li>
	<li>浏览器访问：<a href="http://centos:8080/jenkins/" rel="nofollow" target="_blank">http://centos:8080/jenkins/</a></li>
</ul>

<h4>1.2.4 免安装方式</h4>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
</pre>
			</td>
			<td>
			<pre>
wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
sudo java -jar jenkens.war ## 启动服务，直至看到日志 `Jenkins is fully up and running`
curl http://localhost:8080/ ## Jenkins 已就绪
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3>1.3 调整配置文件</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
</pre>
			</td>
			<td>
			<pre>
## sudo vim /etc/sysconfig/jenkins
JENKINS_USER=&quot;root&quot; ## 原值 &quot;jenkins&quot; 必须修改，否则权限不足
JENKINS_PORT=&quot;8080&quot; ## 原值 &quot;8080&quot; 可以不修改
## 还有开启 HTTPS 相关参数，此处不打算开启，故不作说明
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>安装目录: /usr/lib/jenkins<br />
工作目录: /var/lib/jenkins(对应于环境变量 JENKINS_HOME)</p>

<h3>1.4 启动</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
</pre>
			</td>
			<td>
			<pre>
sudo systemctl enable jenkins
sudo systemctl restart jenkins
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>查看日志文件:&nbsp;<code>sudo tail -f /var/log/jenkins/jenkins.log</code></p>

<p>启动后会生成文件 hudson.model.UpdateCenter.xml，需要修改它，<br />
否则浏览器首次进入时会卡在&ldquo;Jenkins 正在启动，请稍后&hellip;&rdquo;</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
7
</pre>
			</td>
			<td>
			<pre>
## 原值: http://updates.jenkins-ci.org/update-center.json
## 新值: http://mirror.xmission.com/jenkins/updates/update-center.json
## 或者: http://mirror.xmission.com/jenkins/updates/current/update-center.json
sudo cat /var/lib/jenkins/hudson.model.UpdateCenter.xml
sudo sed -i &#39;s/updates.jenkins-ci.org/mirror.xmission.com\/jenkins\/updates/g&#39; /var/lib/jenkins/hudson.model.UpdateCenter.xml
sudo cat /var/lib/jenkins/hudson.model.UpdateCenter.xml
sudo systemctl restart jenkins
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h3>1.5 防火墙放行</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
</pre>
			</td>
			<td>
			<pre>
### sudo vim /etc/sysconfig/iptables
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
### 重启生效: sudo systemctl restart iptables
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3>1.6 卸载</h3>

<p>如果要重装，或者本机不需要 Jenkins，可卸载：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
</pre>
			</td>
			<td>
			<pre>
sudo systemctl stop jenkins
sudo systemctl disable jenkins
sudo yum -y remove jenkins
sudo rm -rf /var/{lib,log,cache}/jenkins /usr/lib/jenkins /root/.jenkins
sudo rm -rf `sudo find /{etc,var,run} -name &quot;jenkins*&quot;`
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h2>2 基本配置</h2>

<h3>2.1 登录</h3>

<p>浏览器进入&nbsp;<a href="http://centos:8080/" rel="nofollow" target="_blank">http://centos:8080/</a><br />
首次进入需要输入初始密码来解锁，初始密码查看方法:&nbsp;<code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword</code><br />
<a href="https://kefeng.wang/images/jenkins/unlock.png" rel="nofollow" target="_blank" title="jenkins unlock"><img alt="jenkins unlock" src="https://kefeng.wang/images/jenkins/unlock.png" /></a>jenkins unlock<br />
进入 Jenkins 定制界面，让选择&nbsp;<code>Install suggested plugins</code>&nbsp;或&nbsp;<code>Select plugins to install</code>&nbsp;时，两者都不要选，直接关闭，下一个界面点击&ldquo;Start using Jenkins&rdquo;；<br />
<a href="https://kefeng.wang/images/jenkins/customize.png" rel="nofollow" target="_blank" title="jenkins customize"><img alt="jenkins customize" src="https://kefeng.wang/images/jenkins/customize.png" /></a>jenkins customize<br />
修改登录密码：主界面右上角&ldquo;注销&rdquo;链接的左边的用户名下拉菜单中点&ldquo;设置&rdquo;。</p>

<h3>2.2 安全设置</h3>

<p>默认情况下，任何用户都可以使用 Jenkins 进行发布。<br />
可以进入相关设置：系统管理 / Configure Global Security,<br />
选择&nbsp;<code>Jenkins专有用户数据库</code>，不要选中&nbsp;<code>允许用户注册</code>；<br />
选择&nbsp;<code>登录用户可以做任何事</code>，选中&nbsp;<code>Allow anonymous read access</code></p>

<h3>2.3 插件安装方法</h3>

<p>如果安装插件失败率很高，可设置翻墙，请参考我之前的文章：<a href="https://kefeng.wang/2016/12/15/shadowsocks/#5-Linux-%E4%BD%BF%E7%94%A8-Shadowsocks" rel="nofollow" target="_blank">翻墙代理 Shadowsocks 使用详解</a></p>

<h4>2.3.1 离线安装</h4>

<p>手工下载(*.hpi):&nbsp;<a href="http://updates.jenkins-ci.org/download/plugins/" rel="nofollow" target="_blank">http://updates.jenkins-ci.org/download/plugins/</a><br />
进入：系统管理 / 管理插件 / 高级，然后上传插件进行安装。<br />
无需重启 Jenkins 插件即生效。</p>

<h4>2.3.2 在线安装</h4>

<p>进入：系统管理 / 管理插件 / 可选插件<br />
查找并勾选所需插件，点击&ldquo;直接安装&rdquo;；<br />
无需重启 Jenkins 插件即生效。如遇失败可重试或离线安装。<br />
<a href="https://kefeng.wang/images/jenkins/plugins.png" rel="nofollow" target="_blank" title="jenkins plugins"><img alt="jenkins plugins" src="https://kefeng.wang/images/jenkins/plugins.png" /></a>jenkins plugins</p>

<h3>2.4 工具设置</h3>

<p>进入：系统管理 / Global Tool Configuration<br />
JDK 下不勾选&ldquo;自动安装&rdquo;，指定别名=<code>JDK-1.8.0.111</code>, JAVA_HOME=<code>/usr/java/jdk1.8.0_111</code><br />
Maven 下不勾选&ldquo;自动安装&rdquo;，指定别名=<code>Maven-3.3.9</code>, MAVEN_HOME=<code>/opt/apache-maven-3.3.9</code><br />
点击&nbsp;<code>Save</code>&nbsp;按钮。<br />
重启 Jenkins 后生效：<code>sudo systemctl restart jenkins</code><br />
<a href="https://kefeng.wang/images/jenkins/tools.png" rel="nofollow" target="_blank" title="jenkins tools"><img alt="jenkins tools" src="https://kefeng.wang/images/jenkins/tools.png" /></a>jenkins tools</p>

<h2>3 Maven(SVN) 项目接入</h2>

<h3>3.1 准备 SVN 源码</h3>

<p>使用 alibaba 的 fastjson 来演示：<br />
下载:&nbsp;<a href="https://github.com/alibaba/fastjson/archive/master.zip" rel="nofollow" target="_blank">https://github.com/alibaba/fastjson/archive/master.zip</a><br />
SVN地址: svn://centos/repo1/fastjson</p>

<h3>3.2 安装相关插件</h3>

<ul>
	<li><a href="http://updates.jenkins-ci.org/latest/subversion.hpi" rel="nofollow" target="_blank">Subversion Plug-in</a>&nbsp;## 版本管理 SVN 的插件</li>
	<li><a href="http://updates.jenkins-ci.org/latest/git.hpi" rel="nofollow" target="_blank">Git plugin</a>&nbsp;## 版本管理 GIT 的插件</li>
	<li><a href="http://updates.jenkins-ci.org/latest/maven-plugin.hpi" rel="nofollow" target="_blank">Maven Integration plugin</a>&nbsp;## 项目构建 Maven 的插件</li>
	<li><a href="http://updates.jenkins-ci.org/latest/gradle.hpi" rel="nofollow" target="_blank">Gradle Plugin</a>&nbsp;## 项目构建 Gradle 的插件<br />
	无需重启 Jenkins 插件即生效。如遇失败可重试或离线安装。</li>
</ul>

<h3>3.3 新建构建项目</h3>

<h4>3.3.1 开始创建</h4>

<p>主页：点击&ldquo;新建&rdquo;；<br />
项目类型：输入项目名称&nbsp;<code>fastjson</code>，类型选择&ldquo;构建一个Maven项目&rdquo;(如果没有此项可选，请检查插件&ldquo;Maven Integration plugin&rdquo;是否已安装)；<br />
<a href="https://kefeng.wang/images/jenkins/create.png" rel="nofollow" target="_blank" title="jenkins create"><img alt="jenkins create" src="https://kefeng.wang/images/jenkins/create.png" /></a>jenkins create</p>

<h4>3.3.2 源码管理</h4>

<p>选择&ldquo;Subversion&rdquo;(如果没有此项可选，请检查插件&ldquo;Subversion Plug-in&rdquo;是否已安装)，<br />
仓库URL可以指定 svn/http/https 之一，这里指定&nbsp;<code>svn://centos/repo1/fastjson</code><br />
Credentials: 添加 SVN 用户名密码，并从下拉列表中选择它。<br />
<a href="https://kefeng.wang/images/jenkins/source.png" rel="nofollow" target="_blank" title="jenkins source"><img alt="jenkins source" src="https://kefeng.wang/images/jenkins/source.png" /></a>jenkins source</p>

<h4>3.3.3 定时触发构建</h4>

<p>构建触发器: 只选中&nbsp;<code>Build periodically</code>, &ldquo;日程表&rdquo;格式与 crontab 相似但有细微差别，示例如下：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
</pre>
			</td>
			<td>
			<pre>
## 每行由 5 个值组成(空格或TAB分隔)，分别表示分(0-59)、时(0-23)、日(1-31)、月(1-12)、周(0-7, 0/7=周日)
## &quot;M,N&quot; 表示M和N；&quot;M-N&quot; 表示范围[M,N]；&quot;M-N/X&quot; 表示范围[M,N]内每隔X；&quot;*/X&quot; 表示整个范围内每隔X
## 前面提到的M/N/X的值都可以用H(意为Hash)代替，散列值起到随机值的效果，且同一项目取值稳定，这对于项目多时分散压力很有用。
H/10  H(0-8)  *  *  1-5   ## 触发时间: 工作日、Hour为0~8按哈希随机、Minute以10为间隔
H/10  H       *  *  0,6,7 ## 触发时间: 周末、Hour为全天按哈希随机、Minute以10为间隔
## &ldquo;日程表&rdquo;修改后，下方会给出下次执行时间点的预告。
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p><a href="https://kefeng.wang/images/jenkins/trigger1.png" rel="nofollow" target="_blank" title="jenkins trigger"><img alt="jenkins trigger" src="https://kefeng.wang/images/jenkins/trigger1.png" /></a>jenkins trigger</p>

<h4>3.3.4 版本提交触发构建</h4>

<p>构建触发器: 只选中&nbsp;<code>Poll SCM</code>，可指定检查 SVN 代码是否有提交的时间：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
</pre>
			</td>
			<td>
			<pre>
## 格式与 &quot;Build periodically&quot; 相同
H/10  *  *  *  *  ## 任何时候，每隔 30 分钟就检测一次 SVN，如果有提交就启动构建
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p><a href="https://kefeng.wang/images/jenkins/trigger2.png" rel="nofollow" target="_blank" title="jenkins trigger"><img alt="jenkins trigger" src="https://kefeng.wang/images/jenkins/trigger2.png" /></a>jenkins trigger</p>

<h4>3.3.5 Build 设置</h4>

<p>Root POM: 指定 pom.xml 相对路径<br />
Goals and options: 指定 mvn 执行目标或选项，设置为&nbsp;<code>package -Dmaven.test.skip=true</code></p>

<h4>3.3.6 Post Steps 设置</h4>

<p>定制构建后的操作，通常选择&ldquo;Run only if build succeeds&rdquo;，支持 shell 等脚本；</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
</pre>
			</td>
			<td>
			<pre>
## 脚本工作目录为: /var/lib/jenkins/workspace/fastjson
# sudo systemctl stop tomcat
# sudo cp -f target/*.war /opt/apache-tomcat-8.5.9/webapps/
# sudo systemctl start tomcat
ls -l target/*.?ar
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p><a href="https://kefeng.wang/images/jenkins/poststep.png" rel="nofollow" target="_blank" title="jenkins poststep"><img alt="jenkins poststep" src="https://kefeng.wang/images/jenkins/poststep.png" /></a>jenkins poststep</p>

<h3>3.4 手工触发构建</h3>

<p>进入&nbsp;<code>My Views</code>, 右侧看到各个项目；<br />
点击进入关注的项目，点击左侧的&ldquo;立即构建&rdquo;；<br />
<a href="https://kefeng.wang/images/jenkins/build.png" rel="nofollow" target="_blank" title="jenkins build"><img alt="jenkins build" src="https://kefeng.wang/images/jenkins/build.png" /></a>jenkins build<br />
开始构建或构建完毕后，左下方列出每次构建的链接，点击进入某次构建；<br />
点击左侧的&ldquo;Console Output&rdquo;，可查看构建日志，如有报错可以看到；<br />
<a href="https://kefeng.wang/images/jenkins/console.png" rel="nofollow" target="_blank" title="jenkins console"><img alt="jenkins console" src="https://kefeng.wang/images/jenkins/console.png" /></a>jenkins console<br />
纠正错误后，返回到工程，再次点击&ldquo;立即构建&rdquo;，直至构建成功；<br />
如有网络相关报错，重试几次也会成功。</p>

<h2>4 开启 Java 代码静态检查</h2>

<h3>4.1 安装相关插件</h3>

<p>如果是离线安装，需要先依次安装被依赖的插件：</p>

<ul>
	<li><a href="http://updates.jenkins-ci.org/latest/script-security.hpi" rel="nofollow" target="_blank">Script Security Plugin</a></li>
	<li><a href="http://updates.jenkins-ci.org/latest/matrix-project.hpi" rel="nofollow" target="_blank">Matrix Project Plugin</a></li>
	<li><a href="http://updates.jenkins-ci.org/latest/analysis-core.hpi" rel="nofollow" target="_blank">Static Analysis Utilities</a></li>
</ul>

<p>再安装直接被使用的插件：</p>

<ul>
	<li><a href="http://updates.jenkins-ci.org/latest/findbugs.hpi" rel="nofollow" target="_blank">FindBugs Plug-in</a></li>
	<li><a href="http://updates.jenkins-ci.org/latest/checkstyle.hpi" rel="nofollow" target="_blank">Checkstyle Plug-in</a></li>
	<li><a href="http://updates.jenkins-ci.org/latest/pmd.hpi" rel="nofollow" target="_blank">PMD Plug-in</a></li>
</ul>

<p>插件官方资料：<br />
FindBugs:&nbsp;<a href="https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin" rel="nofollow" target="_blank">https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin</a><br />
Checkstyle:&nbsp;<a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html" rel="nofollow" target="_blank">http://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html</a><br />
PMD:&nbsp;<a href="http://maven.apache.org/plugins/maven-pmd-plugin/usage.html" rel="nofollow" target="_blank">http://maven.apache.org/plugins/maven-pmd-plugin/usage.html</a></p>

<h3>4.2 Maven 中设置插件(pom.xml)</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre>
			</td>
			<td>
			<pre>
&lt;project ...&gt;
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
    &lt;/properties&gt;

    &lt;!-- ...... --&gt;

    &lt;reporting&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.0.4&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;
                    &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;
                    &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.17&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;linkXRef&gt;false&lt;/linkXRef&gt;
                    &lt;failsOnError&gt;true&lt;/failsOnError&gt;
                    &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;
                    &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.7&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;linkXref&gt;false&lt;/linkXref&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/reporting&gt;
&lt;/project&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3>4.3 修改 Jenkins 构建配置</h3>

<p><a href="https://kefeng.wang/images/jenkins/findbugs-config.png" rel="nofollow" target="_blank" title="jenkins findbugs config"><img alt="jenkins findbugs config" src="https://kefeng.wang/images/jenkins/findbugs-config.png" /></a>jenkins findbugs config</p>

<h4>4.3.1 设置 Maven</h4>

<p>&ldquo;Build&rdquo;标签页，<code>Goals and options</code>&nbsp;设置为：<br />
<code>package -Dmaven.test.skip=true findbugs:findbugs checkstyle:checkstyle pmd:pmd</code></p>

<h4>4.3.2 开启相关报告</h4>

<p>&ldquo;构建设置&rdquo;标签页，打开以下三个选项：</p>

<ul>
	<li>Publish FindBugs analysis results</li>
	<li>Publish Checkstyle analysis results</li>
	<li>Publish PMD analysis results</li>
</ul>

<h3>4.4 构建后查看报告</h3>

<p>构建后进入构建页面，从左边点击查看报告：</p>

<ul>
	<li>FindBugs Warnings</li>
	<li>Checkstyle Warnings</li>
	<li>PMD Warnings<br />
	<a href="https://kefeng.wang/images/jenkins/findbugs-report.png" rel="nofollow" target="_blank" title="jenkins findbugs report"><img alt="jenkins findbugs report" src="https://kefeng.wang/images/jenkins/findbugs-report.png" /></a>jenkins findbugs report</li>
</ul>

<h2>5 开启邮件报告</h2>

<p>Jenkins 的邮件发送，原理与邮件客户端一样：把发件人的邮箱帐号、密码、SMTP服务器告诉 Jenkins，Jenkins 需要时使用该帐号向指定的收件人发送邮件报告。</p>

<h3>5.1 安装相关插件</h3>

<p>Jenkins 自带邮件插件(Mailer Plugin)的功能很弱且无法自定制，<br />
需要安装扩展邮件插件: Email Extension Plugin</p>

<h3>5.2 全局统一设置</h3>

<p>以&nbsp;<a href="mailto:admin@company.com" rel="nofollow" target="_blank">admin@company.com</a>&nbsp;为例，如下图设置：<br />
<a href="https://kefeng.wang/images/jenkins/email-global.png" rel="nofollow" target="_blank" title="jenkins email-global"><img alt="jenkins email-global" src="https://kefeng.wang/images/jenkins/email-global.png" /></a>jenkins email-global</p>

<h4>5.2.1 设置管理员邮箱</h4>

<p>进入：系统管理 / 系统设置 / Jenkins Location<br />
<code>系统管理员邮件地址</code>&nbsp;设为&nbsp;<a href="mailto:admin@company.com" rel="nofollow" target="_blank">admin@company.com</a></p>

<h4>5.2.2 设置发件人帐号</h4>

<p>进入：系统管理 / 系统设置 / Extended E-mail Notification<br />
&ldquo;SMTP server&rdquo; 设为 smtp.company.com<br />
&ldquo;Default user E-mail suffix&rdquo; 设为 @company.com<br />
&ldquo;Use SMTP Authentication&rdquo; 选中<br />
&ldquo;User Name&rdquo; =&nbsp;<a href="mailto:admin@company.com" rel="nofollow" target="_blank">admin@company.com</a>(必须与管理员邮箱相同)<br />
&ldquo;Password&rdquo; =&nbsp;**<br />
&ldquo;Use SSL&rdquo; = on<br />
&ldquo;SMTP port&rdquo; = 465<br />
&ldquo;Charset&rdquo; = UTF-8<br />
&ldquo;Default Content Type&rdquo; = HTML (text/html)</p>

<h4>5.2.3 设置邮箱模板</h4>

<p><code>Default Subject</code>: 构建通知：$PROJECT_NAME - #$BUILD_NUMBER - $BUILD_STATUS<br />
<code>Default Content</code>:</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre>
			</td>
			<td>
			<pre>
本邮件由系统自动发出，请勿回复！&lt;br/&gt;
&lt;h2&gt;&lt;font color=&quot;#CC0000&quot;&gt;构建结果 - ${BUILD_STATUS}&lt;/font&gt;&lt;/h2&gt;

&lt;h4&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息&lt;/font&gt;&lt;/h4&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;
&lt;ul&gt;
    &lt;li&gt;项目名称：${PROJECT_NAME} - #${BUILD_NUMBER}&lt;/li&gt;
    &lt;li&gt;触发原因：${CAUSE}&lt;/li&gt;
    &lt;li&gt;项目 URL：&lt;a href=&quot;${PROJECT_URL}&quot;&gt;${PROJECT_URL}&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;构建 URL：&lt;a href=&quot;${BUILD_URL}&quot;&gt;${BUILD_URL}&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;构建日志：&lt;a href=&quot;${BUILD_URL}console&quot;&gt;${BUILD_URL}console&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;工作目录：&lt;a href=&quot;${PROJECT_URL}ws&quot;&gt;${PROJECT_URL}ws&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;font color=&quot;#0B610B&quot;&gt;失败用例&lt;/font&gt;&lt;/h4&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;
$FAILED_TESTS&lt;br/&gt;

&lt;h4&gt;&lt;font color=&quot;#0B610B&quot;&gt;最近提交(#$SVN_REVISION)&lt;/font&gt;&lt;/h4&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;
&lt;ul&gt;
${CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;&lt;li&gt;%d [%a] %m&lt;/li&gt;&quot;}
&lt;/ul&gt;
详细提交: &lt;a href=&quot;${PROJECT_URL}changes&quot;&gt;${PROJECT_URL}changes&lt;/a&gt;&lt;br/&gt;

&lt;h4&gt;&lt;font color=&quot;#0B610B&quot;&gt;代码检查&lt;/font&gt;&lt;/h4&gt;
&lt;hr size=&quot;2&quot; width=&quot;100%&quot; /&gt;
FindBugs：&lt;a href=&quot;${BUILD_URL}findbugsResult&quot;&gt;${BUILD_URL}findbugsResult&lt;/a&gt;&lt;br/&gt;
CheckStyle：&lt;a href=&quot;${BUILD_URL}checkstyleResult&quot;&gt;${BUILD_URL}checkstyleResult&lt;/a&gt;&lt;br/&gt;
PMD：&lt;a href=&quot;${BUILD_URL}pmdResult&quot;&gt;${BUILD_URL}pmdResult&lt;/a&gt;&lt;br/&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>也可以自定义 Jelly 模板，并在&nbsp;<code>Default Content</code>&nbsp;中引用&nbsp;<code>${JELLY_SCRIPT, template=&quot;html_gmail&quot;}</code>：</p>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
</pre>
			</td>
			<td>
			<pre>
sudo mkdir -p /var/lib/jenkins/email-templates
sudo cd /var/lib/jenkins/email-templates
sudo wget https://github.com/jenkinsci/email-ext-plugin/raw/master/src/main/resources/hudson/plugins/emailext/templates/html_gmail.jelly
# 更多模板列表: https://github.com/jenkinsci/email-ext-plugin/tree/master/src/main/resources/hudson/plugins/emailext/templates
</pre>
			</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h4>5.2.4 设置邮件触发时机</h4>

<p>点击&nbsp;<code>Default Triggers</code>，比较好的方案是选中两项：</p>

<ul>
	<li>Failure - Any ## 可定义&ldquo;编译失败时&rdquo;才向哪些人员发邮件(比如最近代码提交者)</li>
	<li>Success ## 可定义&ldquo;构建成功时&rdquo;才向哪些人员发邮件(比如所有产品关注者)</li>
</ul>

<h4>5.2.5 邮件可用变量</h4>

<p>点击&nbsp;<code>Content Token Reference</code>&nbsp;右侧的问号图标，可以看到各邮件模板中可引用变量的含义。</p>

<h4>5.2.6 邮件未发送问题排查</h4>

<p>构建设置里指定的收件人只是 kevin，没有后续，希望采用插件&nbsp;<code>Email Extension Plugin</code>&nbsp;中的邮箱后缀，<br />
却发现构建日志中报错:<code>Failed to send e-mail to kevin because no e-mail address is known, and no default e-mail domain is configured</code><br />
原来，扩展邮件插件有BUG，使用的是自带邮件插件的后缀设置，而后者之前没有设置。<br />
点击&nbsp;<code>保存</code>，保存邮件全局设置。</p>

<h3>5.3 项目设置中启用邮件</h3>

<p>构建后操作步骤: 增加&nbsp;<code>Editable Email Notification</code>(来自插件&nbsp;<code>Email Extension Plugin</code>)。下图设置的效果是：</p>

<ul>
	<li>构建失败时，向上次成功构建之后导致构建失败的 SVN 提交的人员发送邮件；</li>
	<li>构建成功时，向上次成功构建之后有 SVN 提交的人员、还有&ldquo;Project Recipient List&rdquo;中的人员发送邮件；</li>
</ul>

<p><a href="https://kefeng.wang/images/jenkins/email-project.png" rel="nofollow" target="_blank" title="jenkins email-project"><img alt="jenkins email-project" src="https://kefeng.wang/images/jenkins/email-project.png" /></a>jenkins email-project</p>

<h3>5.4 验证构建报告邮件</h3>

<p>分别按以下三种情形触发构建，都能看到构建报告邮件：</p>

<ul>
	<li>手工触发：进入工程后，点击&ldquo;立即构建&rdquo;；</li>
	<li>定时触发构建：&ldquo;构建触发器&rdquo;只选中&nbsp;<code>Build periodically</code>；</li>
	<li>版本提交触发构建：&ldquo;构建触发器&rdquo;只选中&nbsp;<code>Poll SCM</code>。<br />
	<a href="https://kefeng.wang/images/jenkins/email-report.png" rel="nofollow" target="_blank" title="jenkins email-report"><img alt="jenkins email-report" src="https://kefeng.wang/images/jenkins/email-report.png" /></a>jenkins email-report</li>
</ul>

<h2>6 Java/JUnit 单元测试</h2>

<h3>6.1 Maven 中设置插件(pom.xml)</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
7
8
9
10
11
</pre>
			</td>
			<td>
			<pre>
&lt;project ...&gt;
    &lt;reporting&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.19.1&lt;/version&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/reporting&gt;
&lt;/project&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3>6.2 修改 Jenkins 构建配置</h3>

<p>&ldquo;Build&rdquo;标签页，<code>Goals and options</code>：确保去掉<code>-Dmaven.test.skip=true</code>即可。</p>

<h3>6.3 构建后查看单元测试报告</h3>

<p><a href="https://kefeng.wang/images/jenkins/testing.png" rel="nofollow" target="_blank" title="jenkins findbugs report"><img alt="jenkins findbugs report" src="https://kefeng.wang/images/jenkins/testing.png" /></a>jenkins findbugs report</p>

<h2>7 单元测试覆盖率报告</h2>

<h3>7.1 安装插件</h3>

<p><a href="http://updates.jenkins-ci.org/latest/jacoco.hpi" rel="nofollow" target="_blank">JaCoCo plugin</a>：与插件 Cobertura 一样，用于生成覆盖率报告，但比 Cobertura 更易用。</p>

<h3>7.2 调整工程 pom.xml</h3>

<table>
	<tbody>
		<tr>
			<td>
			<pre>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre>
			</td>
			<td>
			<pre>
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.7.8&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;prepare&lt;/id&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;prepare-agent&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
                &lt;execution&gt;
                    &lt;id&gt;report&lt;/id&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;report&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h3>7.3 调整项目的构建设置</h3>

<p>项目的构建设置 Post Build Action 中，增加 &ldquo;Record JaCoCo coverage report&rdquo;，并设置期望的覆盖率阈值。<br />
<a href="https://kefeng.wang/images/jenkins/jacoco-config.png" rel="nofollow" target="_blank" title="jenkins jacoco-config"><img alt="jenkins jacoco-config" src="https://kefeng.wang/images/jenkins/jacoco-config.png" /></a>jenkins jacoco-config</p>

<h3>7.4 构建并查看报告</h3>

<p>构建完成后，点击本次构建页的&ldquo;Coverage Report&rdquo;查看报告：<br />
<a href="https://kefeng.wang/images/jenkins/jacoco-report.png" rel="nofollow" target="_blank" title="jenkins jacoco-report"><img alt="jenkins jacoco-report" src="https://kefeng.wang/images/jenkins/jacoco-report.png" /></a>jenkins jacoco-report</p>

<h2>8 更多有用插件</h2>

<ul>
	<li>Folders Plugin：可嵌套地定义文件夹来级别 views / jobs；</li>
	<li>build timeout plugin：允许用户中止耗时太久的构建；</li>
	<li>Dingding[钉钉] Plugin：允许向阿里钉钉发送构建通知；</li>
	<li>TestNG Results Plugin: 用 TestNG 代替 JUnit；</li>
	<li>Publish Over SSH: 通过SSH发布文件或执行命令(使用SFTP的SCP)。</li>
</ul>
