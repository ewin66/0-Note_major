<h1>快速入门</h1>

<h2>开发准备</h2>

<h3>相关资源</h3>

<p>对象存储服务的 XML Python SDK 资源下载地址：&nbsp;<a href="https://github.com/tencentyun/cos-python-sdk-v5" target="_blank">XML Python SDK&nbsp;</a><br />
演示示例 Demo 下载地址：<a href="https://github.com/tencentyun/cos-python-sdk-v5/blob/master/qcloud_cos/demo.py" target="_blank">XML Python Demo</a></p>

<h3>环境依赖</h3>

<p>对象存储服务的 XML Python SDK 目前可以支持 Python2.6 与 Python2.7。</p>

<blockquote>
<p>关于文章中出现的 SecretId、SecretKey、Bucket 等名称的含义和获取方式请参考：<a href="https://cloud.tencent.com/document/product/436/7751" target="_blank">COS 术语信息</a></p>
</blockquote>

<h3>安装SDK</h3>

<p>安装 SDK 的方式有两种：pip 安装和手动安装。</p>

<ul>
	<li><strong>使用 pip 安装</strong>

	<ul>
		<li>&nbsp;</li>
	</ul>

	<pre>
<code>pip install -U cos-python-sdk-v5
</code></pre>
	</li>
	<li><strong>手动安装</strong><br />
	从&nbsp;<a href="https://github.com/tencentyun/cos-python-sdk-v5" target="_blank">XML Python SDK</a>&nbsp;下载源码，通过 setup 手动安装：
	<ul>
		<li>&nbsp;</li>
	</ul>

	<pre>
<code>python setup.py install
</code></pre>
	</li>
</ul>

<h2>快速入门</h2>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code># appid已在配置中移除,请在参数Bucket中带上appid。Bucket由bucketname-appid组成
# 1. 设置用户配置, 包括 secretId，secretKey 以及 Region
secret_id = &#39;xxxxxxxx&#39;      # 替换为用户的 secretId
secret_key = &#39;xxxxxxx&#39;      # 替换为用户的 secretKey
region = &#39;ap-beijing-1&#39;     # 替换为用户的 Region
token = &#39;&#39;                  # 使用临时秘钥需要传入 Token，默认为空，可不填
config = CosConfig(Secret_id=secret_id, Secret_key=secret_key, Region=region, Token=token)
# 2. 获取客户端对象
client = CosS3Client(config)
# 参照下文的描述。或者参照 Demo程序，详见 https://github.com/tencentyun/cos-python-sdk-v5/blob/master/qcloud_cos/demo.py
</code></pre>

<h2>简单上传</h2>

<h3>功能说明</h3>

<p>支持上传文件流或字节流到指定的 Bucket 中。推荐上传不大于 20 MB 的小文件，单次上传大小限制为 5 GB，返回类型为 dict，包含上传成功的文件的 Etag 等信息。</p>

<h3>文件流 简单上传</h3>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code>file_name = &#39;test.txt&#39;
with open(&#39;test.txt&#39;, &#39;rb&#39;) as fp:
    response = client.put_object(
        Bucket=&#39;test04-123456789&#39;,
        Body=fp,
        Key=file_name,
        StorageClass=&#39;STANDARD&#39;,
        CacheControl=&#39;no-cache&#39;,
        ContentDisposition=&#39;download.txt&#39;
    )
print response[&#39;ETag&#39;]
</code></pre>

<h4>参数说明</h4>

<table>
	<thead>
		<tr>
			<th>参数名称</th>
			<th>参数描述</th>
			<th>类型</th>
			<th>必填</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Bucket</td>
			<td>Bucket名称，由bucketname-appid构成</td>
			<td>String</td>
			<td>是</td>
		</tr>
		<tr>
			<td>Body file</td>
			<td>上传文件的内容，可以为文件流或字节流</td>
			<td>String</td>
			<td>是</td>
		</tr>
		<tr>
			<td>Key</td>
			<td>上传文件的路径名。</td>
			<td>String</td>
			<td>是</td>
		</tr>
		<tr>
			<td>StorageClass</td>
			<td>设置文件的存储类型，STANDARD,STANDARD_IA，NEARLINE，默认值：STANDARD</td>
			<td>String</td>
			<td>否</td>
		</tr>
		<tr>
			<td>CacheControl</td>
			<td>缓存策略，设置 Cache-Control</td>
			<td>String</td>
			<td>否</td>
		</tr>
		<tr>
			<td>ContentDisposition</td>
			<td>文件名称，设置 Content-Disposition</td>
			<td>String</td>
			<td>否</td>
		</tr>
	</tbody>
</table>

<p>更多可选参数详见&nbsp;<a href="https://cloud.tencent.com/document/product/436/12270" target="_blank">Python SDK 文档</a>。</p>

<h3>字节流 简单上传</h3>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code>response = client.put_object(
    Bucket=&#39;test04-123456789&#39;,
    Body=&#39;abcdefg&#39;,
    Key=file_name,
    CacheControl=&#39;no-cache&#39;,
    ContentDisposition=&#39;download.txt&#39;
)
print response[&#39;ETag&#39;]
</code></pre>

<h2>简单下载</h2>

<h3>功能说明</h3>

<p>将指定存储桶中的文件下载到本地或文件流，返回类型为 dict，包含文件的内容和元信息。</p>

<h3>文件下载 获取文件到本地</h3>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code>response = client.get_object(
    Bucket=&#39;test04-123456789&#39;,
    Key=file_name,
)
response[&#39;Body&#39;].get_stream_to_file(&#39;output.txt&#39;)
</code></pre>

<h4>参数说明</h4>

<table>
	<thead>
		<tr>
			<th>参数名称</th>
			<th>参数描述</th>
			<th>类型</th>
			<th>必填</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Bucket</td>
			<td>存储桶名称，由bucketname-appid构成</td>
			<td>String</td>
			<td>是</td>
		</tr>
		<tr>
			<td>Key</td>
			<td>下载文件的路径名</td>
			<td>string</td>
			<td>是</td>
		</tr>
	</tbody>
</table>

<p>更多可选参数详见&nbsp;<a href="https://cloud.tencent.com/document/product/436/12270" target="_blank">Python SDK 文档</a>。</p>

<h3>文件下载 获取文件流</h3>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code>response = client.get_object(
    Bucket=&#39;test04-123456789&#39;,
    Key=file_name,
)
fp = response[&#39;Body&#39;].get_raw_stream()
print fp.read(2)
</code></pre>

<h2>异常类型</h2>

<p>包括 CosClientError 和 CosServiceError，分别对应 SDK 客户端错误和 COS 服务端错误。</p>

<h3>CosClientError</h3>

<p>CosClientError 一般指如 timeout 引起的客户端错误，用户捕获后可以选择重试或其它操作。</p>

<h3>CosServiceError</h3>

<p>CosServiceError 提供服务端返回的具体信息。</p>

<ul>
	<li>&nbsp;</li>
</ul>

<pre>
<code>#except CosServiceError as e
e.get_origin_msg()  # 获取原始错误信息，格式为 XML
e.get_digest_msg()  # 获取处理过的错误信息，格式为 dict
e.get_status_code() # 获取 http 错误码（如4XX,5XX)
e.get_error_code()  # 获取 COS 定义的错误码
e.get_error_msg()   # 获取 COS 错误码的具体描述
e.get_trace_id()    # 获取请求的 trace_id
e.get_request_id()  # 获取请求的 request_id
e.get_resource_location() # 获取 URL 地址</code></pre>
