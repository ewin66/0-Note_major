<h1>maven核心，pom.xml详解(转)</h1>

<h2><strong>什么是pom?</strong></h2>

<p>&nbsp; pom作为项目对象模型。通过xml表示maven项目，使用pom.xml来实现。主要描述了项目：包括配置文件；开发者需要遵循的规则，缺陷管理系统，组织和licenses，项目的url，项目的依赖性，以及其他所有的项目相关因素。</p>

<h2><strong>快速察看：</strong></h2>

<p>&lt;project&gt;<br />
&nbsp; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br />
&nbsp; &lt;!--maven2.0必须是这样写，现在是maven2唯一支持的版本--&gt;</p>

<p>&nbsp; &lt;!-- 基础设置 --&gt;<br />
&nbsp; &lt;groupId&gt;...&lt;/groupId&gt;<br />
&nbsp; &lt;artifactId&gt;...&lt;/artifactId&gt;<br />
&nbsp; &lt;version&gt;...&lt;/version&gt;<br />
&nbsp; &lt;packaging&gt;...&lt;/packaging&gt; nbsp; &lt;name&gt;...&lt;/name&gt;</p>

<p>&nbsp; &lt;!-- POM关系&nbsp;--&gt;<br />
&nbsp; &lt;dependencies&gt;...&lt;/dependencies&gt;<br />
&nbsp; &lt;parent&gt;...&lt;/parent&gt;<br />
&nbsp; &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;<br />
&nbsp; &lt;modules&gt;...&lt;/modules&gt;<br />
&nbsp; &lt;properties&gt;...&lt;/properties&gt;</p>

<p>&nbsp; &lt;!--构建设置 --&gt;<br />
&nbsp; &lt;build&gt;...&lt;/build&gt;<br />
&nbsp; &lt;reporting&gt;...&lt;/reporting&gt;<br />
<br />
&nbsp; &lt;!-- 更多项目信息 --&gt;<br />
&nbsp; &lt;name&gt;...&lt;/name&gt;<br />
&nbsp; &lt;description&gt;...&lt;/description&gt;<br />
&nbsp; &lt;url&gt;...&lt;/url&gt;<br />
&nbsp; &lt;classifer&gt;...&lt;/classifer&gt;<br />
&nbsp; &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;<br />
&nbsp; &lt;licenses&gt;...&lt;/licenses&gt;<br />
&nbsp; &lt;organization&gt;...&lt;/organization&gt;<br />
&nbsp; &lt;developers&gt;...&lt;/developers&gt;<br />
&nbsp; &lt;contributors&gt;...&lt;/contributors&gt;<br />
<br />
&nbsp; &lt;!-- 环境设置--&gt;<br />
&nbsp; &lt;issueManagement&gt;...&lt;/issueManagement&gt;<br />
&nbsp; &lt;ciManagement&gt;...&lt;/ciManagement&gt;<br />
&nbsp; &lt;mailingLists&gt;...&lt;/mailingLists&gt;&nbsp;<br />
&nbsp; &lt;scm&gt;...&lt;/scm&gt;<br />
&nbsp; &lt;prerequisites&gt;...&lt;/prerequisites&gt;<br />
&nbsp; &lt;repositories&gt;...&lt;/repositories&gt;<br />
&nbsp; &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;<br />
&nbsp; &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;<br />
&nbsp; &lt;profiles&gt;...&lt;/profiles&gt;</p>

<p>&lt;/project&gt;</p>

<h1>分类详解</h1>

<h2>基本内容</h2>

<p>POM包括了所有的项目信息</p>

<p>groupId:<strong>项目或者组织的唯一标志</strong>，并且配置时生成路径也是由此生成，如org.myproject.mojo生成的相对路径为：/org/myproject/mojo</p>

<p>artifactId:项目的通用名称</p>

<p>version:项目的版本</p>

<p>packaging:<strong>打包机制</strong>，如pom,jar,maven-plugin,ejb,war,ear,rar,par</p>

<p>name:用户描述项目的名称，无关紧要的东西，可选</p>

<p>url:应该是只是写明开发团队的网站，无关紧要，可选</p>

<p>classifer:分类</p>

<p><strong>其中groupId,artifactId,version,packaging这四项组成了项目的唯一坐标。一般情况下，前面三项就可以组成项目的唯一坐标了。</strong></p>

<h2>POM关系</h2>

<p>主要为依赖，继承，合成</p>

<h3>依赖关系：</h3>

<p>&lt;dependencies&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;dependency&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;junit&lt;/groupId&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;junit&lt;/artifactId&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;4.0&lt;/version&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;type&gt;jar&lt;/type&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;scope&gt;test&lt;/scope&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;optional&gt;true&lt;/optional&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;/dependency&gt;</p>

<p>&nbsp;&nbsp; &nbsp;&lt;dependency&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;groupId&gt;com.alibaba.china.shared&lt;/groupId&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;artifactId&gt;alibaba.apollo.webx&lt;/artifactId&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;version&gt;2.5.0&lt;/version&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;exclusions&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;exclusion&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;artifactId&gt;org.slf4j.slf4j-api&lt;/artifactId&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;groupId&gt;com.alibaba.external&lt;/groupId&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/exclusion&gt;<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;....<br />
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;/exclusions&gt;<br />
......<br />
&nbsp;&nbsp;&nbsp; &lt;/dependency&gt;<br />
&lt;/dependencies&gt;</p>

<p>其中groupId, artifactId, version这三个组合标示依赖的具体工程，而且 这个依赖工程必需是maven中心包管理范围内的，如果碰上非开源包，maven支持不了这个包，那么则有有三种 方法处理：</p>

<p>1.本地安装这个插件install plugin</p>

<p>例如：mvn install:intall-file -Dfile=non-maven-proj.jar -DgroupId=som.group -DartifactId=non-maven-proj -Dversion=1</p>

<p>2.创建自己的repositories并且部署这个包，使用类似上面的deploy:deploy-file命令，</p>

<p>3.设置scope为system,并且指定系统路径。</p>

<p>dependency里属性介绍：</p>

<p>type：默认为jar类型，常用的类型有：jar,ejb-client,test-jar...,可设置plugins中的extensions值为true后在增加 新的类型，</p>

<p>scope：是用来指定当前包的依赖范围，<a href="http://blog.csdn.net/zhuxinhua/archive/2010/08/04/5789278.aspx">maven的依赖范围</a></p>

<p>optional:设置指依赖是否可选，默认为false,即子项目默认都继承，为true,则子项目必需显示的引入，与dependencyManagement里定义的依赖类似 。</p>

<p>exclusions：如果X需要A,A包含B依赖，那么X可以声明不要B依赖，只要在exclusions中声明exclusion.</p>

<p>exclusion:是将B从依赖树中删除，如上配置，alibaba.apollo.webx不想使用com.alibaba.external&nbsp;&nbsp;,但是alibaba.apollo.webx是集成了com.alibaba.external,r所以就需要排除掉.</p>

<h3>继承关系：</h3>

<p>如果一个工程是parent或者aggregation（即mutil-module的）的，那么必须在packing赋值为pom,child工程从parent继承的包括：dependencies,developers,contributors,plugin lists,reports lists,plugin execution with matching ids,plugin configuration</p>

<p>parent的使用方法如下：</p>

<p>&lt;parent&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;my-parent&lt;/artifactId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;version&gt;2.0&lt;/version&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;relativePath&gt;../my-parent&lt;/relativePath&gt;&nbsp;<br />
&nbsp; &lt;/parent&gt;</p>

<p>relativePath是可选的,maven会首先搜索这个地址,在搜索本地远程repositories之前.</p>

<h3>合成关系</h3>

<h4>dependencyManagement使用</h4>

<p>dependencyManagement：是用于帮助管理chidren的dependencies的。例如如果parent使用dependencyManagement定义了一个dependencyon junit:junit4.0,那么 它的children就可以只引用 groupId和artifactId,而version就可以通过parent来设置，这样的好处就是可以集中管理 依赖的详情</p>

<h4>modules使用</h4>

<p>modules:对于多模块的project,outer-module没有必需考虑inner-module的dependencies,当列出modules的时候，modules的顺序是不重要的，因为maven会自动根据依赖关系来拓扑排序，</p>

<p>modules例子如下 ：</p>

<p>&lt;module&gt;my-project&lt;/module&gt;</p>

<p>&lt;module&gt;other-project&lt;/module&gt;</p>

<h4>properties使用</h4>

<p>properties:是为pom定义一些常量，在pom中的其它地方可以直接引用。</p>

<p>定义方式如下：</p>

<p>&lt;properties&gt;</p>

<p>&nbsp;&nbsp; &nbsp; &nbsp;&lt;file.encoding&gt;UTF-8&lt;/file_encoding&gt;</p>

<p>&nbsp;&nbsp; &nbsp; &nbsp;&lt;java.source.version&gt;1.5&lt;/java_source_version&gt;</p>

<p>&nbsp;&nbsp; &nbsp; &nbsp;&lt;java.target.version&gt;1.5&lt;/java_target_version&gt;</p>

<p>&lt;/properties&gt;</p>

<p>使用方式 如下 ：</p>

<p>${file.encoding}</p>

<p>还可以使用project.xx引用pom里定义的其它属性：如$(project.version}&nbsp;</p>

<h2>构建设置</h2>

<h3>build设置:</h3>

<p>defaultGoal:默认的目标，必须跟命令行上的参数相同，如：jar:jar,或者与时期parse相同,例如install</p>

<p>directory:指定build target目标的目录，默认为$(basedir}/target,即项目根目录下的target</p>

<p>finalName:指定去掉后缀的工程名字，例如：默认为${artifactId}-${version}</p>

<p>filters:用于定义指定filter属性的位置，例如filter元素赋值filters/filter1.properties,那么这个文件里面就可以定义name=value对，这个name=value对的值就可以在工程pom中通过${name}引用，默认的filter目录是${basedir}/src/main/fiters/</p>

<p>resources: 描述工程中资源的位置&nbsp;</p>

<p>&lt;resource&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;targetPath&gt;META-INF/plexus&lt;/targetPath&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;filtering&gt;false&lt;/filtering&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;directory&gt;${basedir}/src/main/plexus&lt;/directory&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;includes&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;include&gt;configuration.xml&lt;/include&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/includes&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;excludes&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;exclude&gt;**/*.properties&lt;/exclude&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/excludes&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/resource&gt;</p>

<p>targetPath:指定build资源到哪个目录，默认是base directory</p>

<p>filtering:指定是否将filter文件(即上面说的filters里定义的*.property文件)的变量值在这个resource文件有效,例如上面就指定那些变量值在configuration文件无效。</p>

<p>directory:指定属性文件的目录，build的过程需要找到它，并且将其放到targetPath下，默认的directory是${basedir}/src/main/resources</p>

<p>includes:指定包含文件的patterns,符合样式并且在directory目录下的文件将会包含进project的资源文件。</p>

<p>excludes:指定不包含在内的patterns,如果inclues与excludes有冲突，那么excludes胜利，那些符合冲突的样式的文件是不会包含进来的。</p>

<p>testResources:这个模块包含测试资源元素，其内容定义与resources类似，不同的一点是默认的测试资源路径是${basedir}/src/test/resources,测试资源是不部署的。</p>

<p>plugins配置：</p>

<p>&lt;plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;2.0&lt;/version&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;extensions&gt;false&lt;/extensions&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;inherited&gt;true&lt;/inherited&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;classifier&gt;test&lt;/classifier&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependencies&gt;...&lt;/dependencies&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;executions&gt;...&lt;/executions&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;</p>

<p>extensions:true or false, 决定是否要load这个plugin的extensions，默认为true.</p>

<p>inherited:是否让子pom继承，ture or false 默认为true.</p>

<p>configuration:通常用于私有不开源的plugin,不能够详细了解plugin的内部工作原理，但使plugin满足的properties</p>

<p>dependencies:与pom基础的dependencies的结构和功能都相同，只是plugin的dependencies用于plugin,而pom的denpendencies用于项目本身。在plugin的dependencies主要用于改变plugin原来的dependencies，例如排除一些用不到的dependency或者修改dependency的版本等，详细请看pom的denpendencies.</p>

<p>executions:plugin也有很多个目标，每个目标具有不同的配置，executions就是设定plugin的目标，</p>

<p>&lt;execution&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;echodir&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;goals&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;goal&gt;run&lt;/goal&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/goals&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;phase&gt;verify&lt;/phase&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;inherited&gt;false&lt;/inherited&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tasks&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;echo&gt;Build Dir: ${project.build.directory}&lt;/echo&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tasks&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/execution&gt;&nbsp;</p>

<p>id:标识符</p>

<p>goals:里面列出一系列的goals元素，例如上面的run goal</p>

<p>phase:声明goals执行的时期，例如：verify</p>

<p>inherited:是否传递execution到子pom里。</p>

<p>configuration:设置execution下列表的goals的设置，而不是plugin所有的goals的设置</p>

<h3>pluginManagement配置：</h3>

<p>pluginManagement的作用类似于denpendencyManagement,只是denpendencyManagement是用于管理项目jar包依赖，pluginManagement是用于管理plugin。与pom build里的plugins区别是，这里的plugin是列出来，然后让子pom来决定是否引用。</p>

<p>例如：</p>

<p>&lt;pluginManagement&gt;&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugins&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;2.2&lt;/version&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;executions&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;execution&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;pre-process-classes&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;phase&gt;compile&lt;/phase&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;goals&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;goal&gt;jar&lt;/goal&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/goals&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;classifier&gt;pre-process&lt;/classifier&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/execution&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/executions&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugins&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/pluginManagement&gt;&nbsp;</p>

<p>子pom引用方法：&nbsp;</p>

<p>在pom的build里的plugins引用：&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;plugins&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/plugins&gt;</p>

<p>build里的directories:&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;sourceDirectory&gt;${basedir}/src/main/java&lt;/sourceDirectory&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;scriptSourceDirectory&gt;${basedir}/src/main/scripts&lt;/scriptSourceDirectory&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;testSourceDirectory&gt;${basedir}/src/test/java&lt;/testSourceDirectory&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;outputDirectory&gt;${basedir}/target/classes&lt;/outputDirectory&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;testOutputDirectory&gt;${basedir}/target/test-classes&lt;/testOutputDirectory&gt;</p>

<p>这几个元素只在parent build element里面定义，他们设置多种路径结构，他们并不在profile里，所以不能通过profile来修改</p>

<p>build 里面的Extensions：&nbsp;</p>

<p>它们是一系列build过程中要使用的产品，他们会包含在running bulid&lsquo;s classpath里面。他们可以开启extensions，也可以通过提供条件来激活plugins。简单来讲，extensions是在build过程被激活的产品&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;extensions&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;extension&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;wagon-ftp&lt;/artifactId&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;1.0-alpha-3&lt;/version&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/extension&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/extensions&gt;&nbsp;</p>

<p>reporting设置:</p>

<p>reporting包含site生成阶段的一些元素，某些maven plugin可以生成reports并且在reporting下配置。例如javadoc,maven site等，在reporting下配置的report plugin的方法与build几乎一样，最不同的是build的plugin goals在executions下设置，而reporting的configures goals在reporttest。</p>

<p>excludeDefaults:是否排除site generator默认产生的reports</p>

<p>outputDirectory，默认的dir变成:${basedir}/target/site</p>

<p>report sets:设置execution goals,相当于build里面的executions,不同的是不能够bind a report to another phase,只能够是site</p>

<p>&lt;reporting&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;plugins&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;reportSets&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;reportSet&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;sunlink&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;reports&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;report&gt;javadoc&lt;/report&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/reports&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;inherited&gt;true&lt;/inherited&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;links&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;link&gt;http://java.sun.com/j2se/1.5.0/docs/api/&lt;/link&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/links&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/reportSet&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/reportSets&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/plugins&gt;&nbsp;<br />
&nbsp; &lt;/reporting&gt;&nbsp;<br />
reporting里面的厄reportSets和build里面的executions的作用都是控制pom的不同粒度去控制build的过程，我们不单要配置plugins，还要配置那些plugins单独的goals。</p>

<h2>更多项目信息:</h2>

<p>name:项目除了artifactId外，可以定义多个名称<br />
description: 项目描述<br />
url: 项目url<br />
inceptionYear:创始年份</p>

<p><strong>Licenses</strong><br />
&lt;licenses&gt;<br />
&nbsp; &lt;license&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;name&gt;Apache 2&lt;/name&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;distribution&gt;repo&lt;/distribution&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;<br />
&nbsp; &lt;/license&gt;<br />
&lt;/licenses&gt;</p>

<p>列出本工程直接的licenses，而不要列出dependencies的licenses</p>

<p>配置组织信息:<br />
&nbsp; &lt;organization&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;name&gt;Codehaus Mojo&lt;/name&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;url&gt;http://mojo.codehaus.org&lt;/url&gt;<br />
&nbsp; &lt;/organization&gt;</p>

<p>很多工程都受到某些组织运行，这里设置基本信息</p>

<p>配置开发者信息:</p>

<p>例如：一个开发者可以有多个roles，properties是&nbsp;<br />
&lt;developers&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;developer&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;eric&lt;/id&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Eric&lt;/name&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;email&gt;eredmond@codehaus.org&lt;/email&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;http://eric.propellors.net&lt;/url&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;organization&gt;Codehaus&lt;/organization&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;organizationUrl&gt;http://mojo.codehaus.org&lt;/organizationUrl&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;roles&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;role&gt;architect&lt;/role&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;role&gt;developer&lt;/role&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/roles&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;timezone&gt;-6&lt;/timezone&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;properties&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;picUrl&gt;http://tinyurl.com/prv4t&lt;/picUrl&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/properties&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;/developer&gt;<br />
&nbsp; &lt;/developers&gt;</p>

<h2>环境设置</h2>

<p>issueManagement:bug跟踪管理系统,定义defect tracking system缺陷跟踪系统，比如有（bugzilla,testtrack,clearquest等）.</p>

<p>例如:</p>

<p>&nbsp;&nbsp;&lt;issueManagement&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;system&gt;Bugzilla&lt;/system&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;url&gt;http://127.0.0.1/bugzilla/&lt;/url&gt;&nbsp;<br />
&nbsp; &lt;/issueManagement&gt;&nbsp;</p>

<h3>仓库：</h3>

<p>Repositories：pom里面的仓库与setting.xml里的仓库功能是一样的。主要的区别在于，pom里的仓库是个性化的。比如一家大公司里的setting文件是公用 的，所有项目都用一个setting文件，但各个子项目却会引用不同的第三方库，所以就需要在pom里设置自己需要的仓库地址。</p>

<p>repositories：要成为maven2的repository artifact，必须具有pom文件在$BASE_REPO/groupId/artifactId/version/artifactId-version.pom&nbsp;<br />
BASE_REPO可以是本地，也可以是远程的。repository元素就是声明那些去查找的repositories&nbsp;<br />
默认的central Maven repository在http://repo1.maven.org/maven2/</p>

<p>&lt;repositories&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;repository&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;releases&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;enabled&gt;false&lt;/enabled&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/releases&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;snapshots&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;enabled&gt;true&lt;/enabled&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/snapshots&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;codehausSnapshots&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Codehaus Snapshots&lt;/name&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;layout&gt;default&lt;/layout&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/repository&gt;&nbsp;<br />
&nbsp; &lt;/repositories&gt;&nbsp;</p>

<p>release和snapshots：是artifact的两种policies，pom可以选择那种政策有效。&nbsp;<br />
enable：本别指定两种类型是否可用，true or false&nbsp;<br />
updatePolicy:说明更新发生的频率always 或者 never 或者 daily（默认的）或者 interval:X（X是分钟数）&nbsp;</p>

<p>checksumPolicy：当Maven的部署文件到仓库中，它也部署了相应的校验和文件。您可以选择忽略，失败，或缺少或不正确的校验和警告。</p>

<p>layout：maven1.x与maven2有不同的layout，所以可以声明为default或者是legacy（遗留方式maven1.x）。</p>

<h3>插件仓库：</h3>

<p>pluginRepositories：与Repositories具有类似的结构，只是Repositories是dependencies的home，而这个是plugins 的home。</p>

<h3>分发管理:</h3>

<p>distributionManagement :管理distribution和supporting files。&nbsp;</p>

<p>downloadUrl：是其他项目为了抓取本项目的pom&rsquo;s artifact而指定的url，就是说告诉pom upload的地址也就是别人可以下载的地址。&nbsp;<br />
status：这里的状态不要受到我们的设置，maven会自动设置project的状态，有效的值：none：没有声明状态，pom默认的；converted：本project是管理员从原先的maven版本convert到maven2的；partner：以前叫做synched，意思是与partner repository已经进行了同步；deployed：至今为止最经常的状态，意思是制品是从maven2 instance部署的，人工在命令行deploy的就会得到这个；verified：本制品已经经过验证，也就是已经定下来了最终版。&nbsp;<br />
repository：声明deploy过程中current project会如何变成repository，说明部署到repository的信息。&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;repository&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;uniqueVersion&gt;false&lt;/uniqueVersion&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;corp1&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Corporate Repository&lt;/name&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;scp://repo1/maven2&lt;/url&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;layout&gt;default&lt;/layout&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/repository&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;snapshotRepository&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;propSnap&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Propellors Snapshots&lt;/name&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;sftp://propellers.net/maven&lt;/url&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;layout&gt;legacy&lt;/layout&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/snapshotRepository&gt;&nbsp;<br />
id, name：唯一性的id，和可读性的name&nbsp;<br />
classifer:分类&nbsp;<br />
uniqueVersion：指定是否产生一个唯一性的version number还是使用address里的其中version部分。true or false&nbsp;<br />
url：说明location和transport protocol&nbsp;<br />
layout：default或者legacy</p>

<h2>环境选择</h2>

<h3>profiles:</h3>

<p>pom4.0的一个新特性就是具有根据environment来修改设置的能力</p>

<p>它包含可选的activation（profile的触发器）和一系列的changes。例如test过程可能会指向不同的数据库（相对最终的deployment）或者不同的dependencies或者不同的repositories，并且是根据不同的JDK来改变的。那么结构如下：&nbsp;<br />
<br />
&nbsp; &lt;profiles&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;profile&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;test&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;activation&gt;...&lt;/activation&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;build&gt;...&lt;/build&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;modules&gt;...&lt;/modules&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;repositories&gt;...&lt;/repositories&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependencies&gt;...&lt;/dependencies&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;reporting&gt;...&lt;/reporting&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;/profile&gt;&nbsp;<br />
&nbsp; &lt;/profiles&gt;&nbsp;</p>

<h3>Activation：&nbsp;</h3>

<p>触发这个profile的条件配置如下例：（只需要其中一个成立就可以激活profile，如果第一个条件满足了，那么后面就不会在进行匹配。&nbsp;<br />
&nbsp;&nbsp;&nbsp; &lt;profile&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;test&lt;/id&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;activation&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jdk&gt;1.5&lt;/jdk&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;os&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Windows XP&lt;/name&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;family&gt;Windows&lt;/family&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;arch&gt;x86&lt;/arch&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;5.1.2600&lt;/version&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/os&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mavenVersion&lt;/name&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;2.0.3&lt;/value&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;file&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;exists&gt;${basedir}/file2.properties&lt;/exists&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;missing&gt;${basedir}/file1.properties&lt;/missing&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/file&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/activation&gt;&nbsp;</p>

<p>激活profile的方法有多个：setting文件的activeProfile元素明确指定激活的profile的ID，在命令行上明确激活Profile用-P flag 参数&nbsp;<br />
查看某个build会激活的profile列表可以用：mvn help:active-profiles&nbsp;</p>

<h2>pom.xml文件示例</h2>

<p>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br />
&nbsp; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;<br />
&nbsp; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>

<p>&nbsp; maven坐标<br />
&nbsp; &lt;groupId&gt;com.yiibai&lt;/groupId&gt;<br />
&nbsp; &lt;artifactId&gt;NumberGenerator&lt;/artifactId&gt;<br />
&nbsp; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</p>

<p>&nbsp; &lt;packaging&gt;jar&lt;/packaging&gt;<br />
&nbsp; &lt;name&gt;NumberGenerator&lt;/name&gt;</p>

<p>&nbsp; &lt;url&gt;http://maven.apache.org&lt;/url&gt;</p>

<p><br />
&nbsp; 依赖<br />
&nbsp; &lt;dependencies&gt;<br />
&nbsp; &nbsp; &lt;dependency&gt;<br />
&nbsp; &nbsp; &nbsp; &lt;groupId&gt;junit&lt;/groupId&gt;<br />
&nbsp; &nbsp; &nbsp; &lt;artifactId&gt;junit&lt;/artifactId&gt;<br />
&nbsp; &nbsp; &nbsp; &lt;version&gt;3.8.1&lt;/version&gt;<br />
&nbsp; &nbsp; &nbsp; &lt;scope&gt;test&lt;/scope&gt;<br />
&nbsp; &nbsp; &lt;/dependency&gt;<br />
&nbsp; &lt;/dependencies&gt;<br />
&nbsp; 在 Maven 的本地仓库搜索 log4j&nbsp;<br />
&nbsp; 在 Maven 中央存储库搜索 log4j<br />
&nbsp; 在 Maven 远程仓库搜索 log4j(如果在 pom.xml 中定义)</p>

<p>&lt;/project&gt;<br />
&nbsp;</p>
