<h1><a href="http://www.cnblogs.com/wkrbky/p/6352188.html" id="cb_post_title_url">Maven常用命令：</a></h1>

<p>Maven库：</p>

<p><a href="http://repo2.maven.org/maven2/" target="_blank">http://repo2.maven.org/maven2/</a></p>

<p>Maven依赖查询：</p>

<p><a href="http://mvnrepository.com/" target="_blank">http://mvnrepository.com/</a></p>

<h2>一，Maven常用命令：</h2>

<p><strong>1. 创建Maven的普通Java项目：</strong></p>

<pre>
mvn archetype:create
    -DgroupId=packageName
    -DartifactId=projectName</pre>

<p><strong>2. 创建Maven的Web项目：</strong></p>

<pre>
mvn archetype:create
    -DgroupId=packageName
    -DartifactId=webappName
    -DarchetypeArtifactId=maven-archetype-webapp</pre>

<p><strong>3. 反向生成 maven 项目的骨架：</strong></p>

<pre>
mvn archetype:generate</pre>

<p>　　你是怎么创建你的maven项目的?是不是像这样:</p>

<pre>
mvn archetype:create -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.ryanote -Dartifact=common</pre>

<p>　　如果你还再用的话,那你就out了,现代人都用mvn archetype:generate了,它将创建项目这件枯燥的事更加人性化,你再也不需要记那么多的archetypeArtifactId,你只需输入archetype:generate,剩下的就是做&rdquo;选择题&rdquo;了.</p>

<p>　　cmd步骤：</p>

<p><img alt="" src="https://images2015.cnblogs.com/blog/983815/201701/983815-20170127032346612-1566232122.png" />　　缩写写法：</p>

<pre>
mvn archetype:generate -DgroupId=otowa.user.dao -DartifactId=user-dao -Dversion=0.01-SNAPSHOT</pre>

<p><strong>4. 编译源代码：</strong></p>

<pre>
mvn compile</pre>

<p><strong>5. 编译测试代码：</strong></p>

<pre>
mvn test-compile</pre>

<p><strong>6. 运行测试:</strong></p>

<pre>
mvn test</pre>

<p><strong>7. 产生site：</strong></p>

<pre>
mvn site</pre>

<p><strong>8. 打包：</strong></p>

<pre>
mvn package</pre>

<p><strong>9. 在本地Repository中安装jar：</strong></p>

<pre>
mvn install
例：installing D:\xxx\xx.jar to D:\xx\xxxx</pre>

<p><strong>10. 清除产生的项目：</strong></p>

<pre>
mvn clean</pre>

<p><strong>11. 生成eclipse项目：</strong></p>

<pre>
mvn eclipse:eclipse</pre>

<p><strong>12. 生成idea项目：</strong></p>

<pre>
mvn idea:idea</pre>

<p><strong>13. 组合使用goal命令，如只打包不测试：</strong></p>

<pre>
mvn -Dtest package</pre>

<p><strong>14. 编译测试的内容：</strong></p>

<pre>
mvn test-compile</pre>

<p><strong>15. 只打jar包:</strong></p>

<pre>
mvn jar:jar</pre>

<p><strong>16. 只测试而不编译，也不测试编译：</strong></p>

<pre>
mvn test -skipping compile -skipping test-compile
 ( -skipping 的灵活运用，当然也可以用于其他组合命令) </pre>

<p><strong>17. 清除eclipse的一些系统设置:</strong></p>

<pre>
mvn eclipse:clean&nbsp;</pre>

<p><strong>18.查看当前项目已被解析的依赖：</strong></p>

<pre>
mvn dependency:list</pre>

<p><strong>19.上传到私服：</strong></p>

<pre>
mvn deploy</pre>

<p><strong>20.&nbsp;强制检查更新，由于快照版本的更新策略(一天更新几次、隔段时间更新一次)存在，如果想强制更新就会用到此命令:&nbsp;</strong></p>

<pre>
mvn clean install-U</pre>

<p><strong>21. 源码打包：</strong></p>

<pre>
mvn source:jar
或
mvn source:jar-no-fork</pre>

<p>mvn compile与mvn install、mvn deploy的区别</p>

<ol>
	<li>mvn compile，编译类文件</li>
	<li>mvn install，包含mvn compile，mvn package，然后上传到本地仓库</li>
	<li>mvn deploy,包含mvn install,然后，上传到私服</li>
</ol>

<h2>二，PS:</h2>

<p>　　一般使用情况是这样，首先通过cvs或svn下载代码到本机，然后执行mvn eclipse:eclipse生成ecllipse项目文件，然后导入到eclipse就行了；修改代码后执行mvn compile或mvn test检验，也可以下载eclipse的maven插件。</p>

<p><strong>1.&nbsp;显示版本信息 :</strong></p>

<pre>
mvn -version/-v</pre>

<p><strong>2.&nbsp;创建mvn项目:</strong></p>

<pre>
mvn archetype:create -DgroupId=com.oreilly -DartifactId=my-app</pre>

<p><strong>3.&nbsp;生成target目录，编译、测试代码，生成测试报告，生成jar/war文件 :</strong></p>

<pre>
mvn package</pre>

<p><strong>4.&nbsp;运行项目于jetty上:</strong></p>

<pre>
mvn jetty:run</pre>

<p><strong>5.&nbsp;显示详细错误 信息:</strong></p>

<pre>
mvn -e</pre>

<p><strong>6.&nbsp;验证工程是否正确，所有需要的资源是否可用:</strong></p>

<pre>
mvn validate</pre>

<p><strong>7.&nbsp;在集成测试可以运行的环境中处理和发布包:</strong></p>

<pre>
mvn integration-test</pre>

<p><strong>8.&nbsp;运行任何检查，验证包是否有效且达到质量标准:</strong></p>

<pre>
mvn verify</pre>

<p><strong>9.&nbsp;产生应用需要的任何额外的源代码，如xdoclet :</strong></p>

<pre>
mvn generate-sources</pre>

<p><strong>10.&nbsp;使用 help 插件的&nbsp; describe 目标来输出 Maven Help 插件的信息:</strong></p>

<pre>
mvn help:describe -Dplugin=help</pre>

<p><strong>11.&nbsp;使用Help 插件输出完整的带有参数的目标列 :</strong></p>

<pre>
mvn help:describe -Dplugin=help -Dfull</pre>

<p><strong>12.&nbsp;获取单个目标的信息,设置&nbsp; mojo 参数和&nbsp; plugin 参数。此命令列出了Compiler 插件的compile 目标的所有信息 :</strong></p>

<pre>
mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull</pre>

<p><strong>13.&nbsp;列出所有 Maven Exec 插件可用的目标:</strong></p>

<pre>
mvn help:describe -Dplugin=exec -Dfull</pre>

<p><strong>14.&nbsp;看这个&ldquo;有效的 (effective)&rdquo;POM，它暴露了 Maven的默认设置 :</strong></p>

<pre>
mvn help:effective-pom</pre>

<p><strong>15.&nbsp;想要查看完整的依赖踪迹，包含那些因为冲突或者其它原因而被拒绝引入的构件，打开 Maven 的调试标记运行 :</strong></p>

<pre>
mvn install -X</pre>

<p><strong>16.&nbsp;给任何目标添加maven.test.skip 属性就能跳过测试 :</strong></p>

<pre>
mvn install -Dmaven.test.skip=true</pre>

<p><strong>17.&nbsp;构建装配Maven Assembly 插件是一个用来创建你应用程序特有分发包的插件 :</strong></p>

<pre>
mvn install assembly:assembly</pre>

<p><strong>18. 生成Wtp插件的Web项目 :</strong></p>

<pre>
mvn -Dwtpversion=1.0 eclipse:eclipse</pre>

<p><strong>19. 清除Eclipse项目的配置信息(Web项目) :</strong></p>

<pre>
mvn -Dwtpversion=1.0 eclipse:clean</pre>

<p><strong>20. 将项目转化为Eclipse项目 :</strong></p>

<pre>
mvn eclipse:eclipse</pre>

<p><strong>21.&nbsp;mvn exec命令可以执行项目中的main函数 :</strong></p>

<pre>
首先需要编译java工程：mvn compile
不存在参数的情况下：mvn exec:java -Dexec.mainClass=&quot;***.Main&quot;
存在参数：mvn exec:java -Dexec.mainClass=&quot;***.Main&quot; -Dexec.args=&quot;arg0 arg1 arg2&quot;
指定运行时库：mvn exec:java -Dexec.mainClass=&quot;***.Main&quot; -Dexec.classpathScope=runtime</pre>

<p><strong>22.&nbsp;打印出已解决依赖的列表 :</strong></p>

<pre>
mvn dependency:resolve</pre>

<p><strong>23.&nbsp;打印整个依赖树 :</strong></p>

<pre>
mvn dependency:tree</pre>

<p><strong>24.在应用程序用使用多个存储库&nbsp;</strong></p>

<pre>
&lt;repositories&gt;    
    &lt;repository&gt;     
        &lt;id&gt;Ibiblio&lt;/id&gt;     
        &lt;name&gt;Ibiblio&lt;/name&gt;     
        &lt;url&gt;http://www.ibiblio.org/maven/&lt;/url&gt;   
    &lt;/repository&gt;   
    &lt;repository&gt;     
        &lt;id&gt;PlanetMirror&lt;/id&gt;     
        &lt;name&gt;Planet Mirror&lt;/name&gt;     
        &lt;url&gt;http://public.planetmirror.com/pub/maven/&lt;/url&gt;   
    &lt;/repository&gt;  
&lt;/repositories&gt;

mvn deploy:deploy-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\client-0.1.0.jar -DrepositoryId=maven-repository-inner -Durl=ftp://xxxxxxx/opt/maven/repository/
</pre>

<p><strong>25.发布第三方Jar到本地库中</strong></p>

<pre>
mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\client-0.1.0.jar

-DdownloadSources=true

-DdownloadJavadocs=true
</pre>

<h2>三，附加</h2>

<pre>
mvn help:describe</pre>

<p>你是否因为记不清某个插件有哪些goal而痛苦过,你是否因为想不起某个goal有哪些参数而苦恼,那就试试这个命令吧,它会告诉你一切的.</p>

<p>参数: 1. -Dplugin=pluginName&nbsp;&nbsp; 2. -Dgoal(或-Dmojo)=goalName:与-Dplugin一起使用,它会列出某个插件的goal信息,</p>

<p>如果嫌不够详细,同样可以加-Ddetail.(注:一个插件goal也被认为是一个 &ldquo;Mojo&rdquo;)</p>

<p>下面大家就运行mvn help:describe -Dplugin=help -Dmojo=describe感受一下吧!</p>

<pre>
mvn tomcat:run</pre>

<p>用了maven后,你再也不需要用eclipse里的tomcat来运行web项目(实际工作中经常会发现用它会出现不同步更新的情况),只需在对应目录里运行 mvn tomat:run命令,然后就可在浏览器里运行查看了.如果你想要更多的定制,可以在pom.xml文件里加下面配置:</p>

<p>01 02 03 04 org.codehaus.mojo 05 tomcat-maven-plugin 06 07 /web 08 9090 09 10 11 12 当然你也可以在命令里加参数来实现特定的功能,</p>

<p>下面几个比较常用:</p>

<p>　　1&gt;. 跳过测试:-Dmaven.test.skip(=true)</p>

<p>　　2&gt;. 指定端口:-Dmaven.tomcat.port=9090</p>

<p>　　3&gt;. 忽略测试失败:-Dmaven.test.failure.ignore=true 当然,如果你的其它关联项目有过更新的话,一定要在项目根目录下运行mvn clean install来执行更新,再运行mvn tomcat:run使改动生效.</p>

<pre>
mvnDebug tomcat:run</pre>

<p>这条命令主要用来远程测试,它会监听远程测试用的8000端口,在eclipse里打开远程测试后,它就会跑起来了,设断点,调试,一切都是这么简单.上面提到的那几个参数在这里同样适用.</p>

<pre>
mvn dependency:sources</pre>

<p>故名思义,有了它,你就不用到处找源码了,运行一下,你项目里所依赖的jar包的源码就都有了</p>
