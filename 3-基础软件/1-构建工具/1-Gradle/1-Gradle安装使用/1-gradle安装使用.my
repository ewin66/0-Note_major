<h1>在IDEA里gradle配置和使用</h1>

<h1>前言</h1>

<p>有人说Gradle使用groovy语言编写，简单，明了没像maven使用xml臃肿，其实我倒不觉得，我觉得maven挺好的，管理jar依赖和项目生命周期挺方便的，我使用gradle只是因为公司用，不然我估计不会学习gradle。下面是gradle的优点，自己斟酌吧。&nbsp;<br />
1. 按约定声明构建和建设；&nbsp;<br />
2. 强大的支持多工程的构建；&nbsp;<br />
3. 强大的依赖管理（基于Apache Ivy），提供最大的便利去构建工程；&nbsp;<br />
4. 全力支持已有的 Maven 或者Ivy仓库基础建设；&nbsp;<br />
5. 支持传递性依赖管理，在不需要远程仓库和pom.xml和ivy配置文件的前提下；&nbsp;<br />
6. 基于groovy脚本构建，其build脚本使用groovy语言编写；&nbsp;<br />
7. 具有广泛的领域模型支持构建；&nbsp;<br />
8. 深度 API；&nbsp;<br />
9. 易迁移；&nbsp;<br />
10. 自由和开放源码，Gradle是一个开源项目，基于 ASL 许可。</p>

<hr />
<h1>Windows环境IDEA配置gradle</h1>

<h2>配置系统环境变量</h2>

<p>为了使用gradle命令，idea里使用不了命令。比如编译命令<code>gradle build</code></p>

<h2>下载</h2>

<p><a href="https://gradle.org/releases/" rel="nofollow" target="_blank">gradle安装包下载地址</a>,解压到&ldquo;<code>D:\soft\gradle\gradle-4.8</code>&rdquo;</p>

<h2>配置环境变量</h2>

<p>打开环境配置，新建系统环境&ldquo;GRADLE_HOME&rdquo;,值为<code>D:\soft\gradle\gradle-4.8</code>,找到path变量，后面添加<code>%GRADLE_HOME%\bin;</code>。</p>

<h2>测试</h2>

<p>在cmd命令里输入<code>gradle -v</code>如果能打出版本号，说明环境配置完毕。</p>

<h2>idea配置</h2>

<p>在D盘新建文件<code>.gradle</code>（使用dos命令<code>mkdir .gradle</code>&nbsp;）,做为gradle下载的jar包仓库主目录，默认在<code>C:\Users\Administrator\.gradle</code>.&nbsp;<br />
打开file-&gt;setting-&gt;Build,Execution,Deployment-&gt;Gradle，修改如下：&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20180613171805848?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjaGVueXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" title="" />&nbsp;<br />
<code>Gradle home</code>指定了gradle文件目录&nbsp;<br />
<code>Service directory path</code>指定了gradle工作主目录</p>

<hr />
<h1>gradle仓库设置</h1>

<p>建议如下设置</p>

<pre>
<code>repositories {
    mavenLocal()
    maven { url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;}
    mavenCentral()
    jcenter()
    maven { url &quot;https://repo.spring.io/snapshot&quot; }
    maven { url &quot;https://repo.spring.io/milestone&quot; }
    maven { url &#39;http://oss.jfrog.org/artifactory/oss-snapshot-local/&#39; }  //转换pdf使用
}</code></pre>

<p>存储库只是文件的集合，按分组，名称和版本来组织构造。 默认情况下，Gradle不定义任何存储库。 这里使用repositories 指定存储库。&nbsp;<br />
mavenLocal()：指定使用maven本地仓库，而本地仓库在配置maven时setting文件指定的仓库位置。如<code>&lt;localRepository&gt;D:/repository&lt;/localRepository&gt;</code>，同时将<code>setting</code>文件拷贝到<code>C:\Users\Administrator\.m2</code>目录下，一般该目录下是没有<code>setting</code>文件的，gradle查找jar包顺序如下：<code>gradle默认会按以下顺序去查找本地的仓库：USER_HOME/.m2/settings.xml &gt;&gt; M2_HOME/conf/settings.xml &gt;&gt; USER_HOME/.m2/repository。</code>&nbsp;<br />
<code>maven { url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;}</code>：指定阿里云镜像加速地址&nbsp;<br />
mavenCentral()：这是Maven的中央仓库，无需配置，直接声明就可以使用&nbsp;<br />
jcenter():JCenter中央仓库，实际也是是用的maven搭建的，但相比Maven仓库更友好，通过CDN分发，并且支持https访问。&nbsp;<br />
后面的<code>maven { url 地址}</code>，指定maven仓库，一般用私有仓库地址或其它的第三方库&nbsp;<br />
gradle按配置顺序寻找jar文件。如果本地存在就不会再去下载。不存在的再去maven仓库下载，这里注意下载下来的jar文件不在maven仓库里，而是在gradle的主工作目录下，如上面的<code>D:\.gradle</code>目录&nbsp;<br />
参考<a href="http://www.souvc.com/?p=2573" rel="nofollow" target="_blank">《Gradle实战》如何配置利用Maven本地仓库</a></p>

<hr />
<h1>构建命令</h1>

<p>清理命令</p>

<pre>
<code>gradle clean</code>
</pre>

<p>构建打包命令</p>

<pre>
<code>gradle clean build</code>
</pre>

<p>编译时跳过测试，使用<code>-x</code>,<code>-x</code>参数用来排除不需要执行的任务</p>

<pre>
<code>gradle clean build -x test</code>
</pre>

<hr />
<h1>创建缓存依赖</h1>

<p>执行命令<code>gradle clean build --refresh-dependencies</code>或删除.gradle/caches目录，构建的时候它会下载所有依赖并加入到缓存中。</p>

<hr />
<h1>阿里云镜像</h1>

<pre>
<code>buildscript {
    repositories {
        maven { url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39; }
        maven{ url &#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;}
    }</code></pre>

<h2><a href="https://blog.csdn.net/lj402159806/article/details/78422953" rel="nofollow" target="_blank">参考gradle配置国内镜像</a></h2>

<h1>gradle.build构建脚本</h1>

<p>build.gradle是Gradle默认的构建脚本文件，执行Gradle命令的时候，会默认加载当前目录下的build.gradle脚本文件。&nbsp;<br />
gradle.build脚本如下：</p>

<pre>
<code>buildScript {
    repositories {
         mavenCentral()
    }
}

repositories {
     mavenCentral()
}</code></pre>

<p>buildScript里的repositories是这个脚本需要的依赖库，与项目无关，在执行脚本时，会从这个库里download对应的jar和插件。第二个repositories是项目里需要依赖的jar的库。</p>

<hr />
<h1>查看项目已定义的所有task以及含义</h1>

<p>命令</p>

<pre>
<code>gradle tasks</code></pre>

<p>比如结果如下</p>

<ul>
	<li>assemble: 编译</li>
	<li>build：编译并执行测试</li>
	<li>clean：删除build目录</li>
	<li>jar： 生成jar包</li>
	<li>test：执行单元测试</li>
</ul>

<hr />
<h1>maven项目转换为gradle项目</h1>

<p>根目录执行</p>

<pre>
<code>gradle init --type pom</code></pre>

<ul>
	<li>1</li>
</ul>

<p>上面的命令会根据pom文件自动生成gradle项目所需的文件和配置，然后以gradle项目重新导入即可。</p>

<hr />
<h1>settings.gradle配置</h1>

<p>是模块Module配置文件，大多数setting.gradle的作用是为了配置子工程，根目录下的settings.gradle脚本文件是针对module的全局配置，它的作用域所包含的所有module是通过settings.gradle来配置。&nbsp;<br />
settings.gradle用于创建多Project的Gradle项目。Project在IDEA里对应Module模块。&nbsp;<br />
例如配置module名<code>rootProject.name = &#39;DyoonPLM&#39;</code></p>
