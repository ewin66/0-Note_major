<h1>使用Sublime Text 3进行Markdown 编辑+实时预览</h1>

<p>这种做法可能会对你的磁盘IO造成一小部分性能负担，但负面影响足以忽略。</p>

<h4>另外，由于这种频率的读写会被磁盘缓存接管，不必担心磁盘寿命的影响。</h4>

<hr />
<h2>对于刚安装好的Sublime Text，我们需要安装一个软件包管理器：</h2>

<p>同时按下ctrl+`,将会在窗口底部出现一个小控制台：&nbsp;<br />
<img alt="//图片" src="https://img-blog.csdn.net/20161026023151646" style="height:170px; width:800px" title="" /><br />
我们把这段话复制并粘贴到控制台的编辑栏里：</p>

<pre>
<code>import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre>

<p>耐心等待操作完成，之后关闭并重新打开Sublime Text 3.</p>

<h2>安装我们要用到的插件</h2>

<p>按下ctrl+shift+P打开快速菜单，键入&rsquo;pcip&rsquo;：&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20161026023243178" title="" />&nbsp;<br />
回车，等待数据更新，完成后会主动显示软件列表。&nbsp;<br />
在里面输入以下软件名称并回车进行安装：&nbsp;<br />
Markdown Editing // Markdown编辑和语法高亮支持&nbsp;<br />
Markdown Preview// Markdown导出html预览支持&nbsp;<br />
auto-save // 可自定义的自动保存功能&nbsp;<br />
耐心等待操作完成，之后关闭并重新打开Sublime Text 3.</p>

<p>前两个是标准的markdown编辑与预览工具，<strong>第三个是实现实时预览的关键</strong>。&nbsp;<br />
安装结束后我们新建一个md文档试试。</p>

<h2>实现实时预览功能</h2>

<h3>先说最基本的预览，我们基于此实现实时预览</h3>

<p>我们使用Markdown Preview插件来打开浏览器进行预览：&nbsp;<br />
按下ctrl+shift+P打开快速菜单，键入&rsquo;mp&rsquo;&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20161026023550558" title="" />&nbsp;<br />
之后选择markdown即可打开你的默认浏览器来预览刚才的内容。&nbsp;<br />
一定要记得先在磁盘上保存为一个文件，这样才能转化成html。</p>

<h3>开挂！实现浏览器自动刷新</h3>

<p>对于浏览器而言，我们让它自动刷新只需在md文件最下面加入一行：</p>

<pre>
<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code></pre>

<p>0.1负责表示刷新间隔，单位是秒，个人觉得这是一个比较稳妥的设定值。&nbsp;<br />
太快的话我们难以滚动页面，太慢的话有可能体验很差。&nbsp;<br />
为了不让滚动时编辑的新文字触底，我们在最后一行的刷新代码之上打好几个占空间的行即可。&nbsp;<br />
由于空行不会被解析，我们在每一行之前放一个字符#或者打三个以上的减号表示分割线。</p>

<h3>最后一步：实现md文档到html文件的自动更新</h3>

<p>这里我们用到了一个叫做auto-save的插件，它可以针对一个文档实现空闲x秒后自动保存。&nbsp;<br />
我们打开auto-save的默认设置和用户设置文件：&nbsp;<br />
Preference-&gt;Package Settings-&gt;Auto-save-&gt;打开Settings-Defualt和Settings-User&nbsp;<br />
将Default的内容复制粘贴到User里面，然后修改等待时长：</p>

<pre>
<code>  &quot;auto_save_delay_in_seconds&quot;: 0.15,</code></pre>

<p>经过实测，0.15是一个比较能接受的值，不会对磁盘造成频繁读写的影响，延迟也不大。&nbsp;<br />
最后就是打开本文档的自动保存功能了：&nbsp;<br />
按下ctrl+shift+P打开快速菜单，键入&rsquo;auto&rsquo;&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20161026023931422" title="" />&nbsp;<br />
选择到current file only按下回车&nbsp;<br />
状态栏应该显示<img alt="这里写图片描述" src="https://img-blog.csdn.net/20161026023940829" title="" />。&nbsp;<br />
至此，自动保存将在文档更改0.15秒后触发一次，停止自动保存就将上述步骤再做一次即可。</p>

<hr />
<p>现在我们就能够开双侧窗口一边编辑一边预览了~&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20161026025140638" style="height:433px; width:800px" title="" /></p>
