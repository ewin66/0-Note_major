<h1>手把手教你写Sublime中的Snippet</h1>

<blockquote>
<p><a href="https://link.jianshu.com/?t=https://www.sublimetext.com/" rel="nofollow" target="_blank">Sublime Text</a>号称最性感的编辑器, 并且越来越多人使用, 美观, 高效</p>
</blockquote>

<p>关于如何使用<a href="https://link.jianshu.com/?t=https://www.sublimetext.com/" rel="nofollow" target="_blank">Sublime text</a>可以参考我的另一篇文章, 相信你会喜欢上的..<br />
<a href="https://www.jianshu.com/p/25cdc7d608bb" target="_blank">Sublime Text 2使用心得</a></p>

<blockquote>
<p>现在介绍一下Snippet,&nbsp;<code>Snippets are smart templates that will insert text for you and adapt it to their context</code>. Snippet 是插入到文本中的智能模板并使这段文本适当当前代码环境. 程序员总是会不断的重写一些简单的代码片段, 这种工作乏味/无聊, 而Snippet的出现会让Code更加高效.</p>
</blockquote>

<h1>1. Snippe创建,存储和格式</h1>

<hr />
<blockquote>
<p><strong>(这里snippet称作代码片段)</strong></p>
</blockquote>

<p><code>Snippet</code>可以存储在任何的文件夹中, 并且以<code>.sublime-snippet</code>为文件扩展名, 默认是存储在<code>.sublime-snippet</code>文件夹下.</p>

<blockquote>
<p>Snippet文件是以<code>.sublime-snippet</code>为扩展的XML文件, 可以命名为<code>XXX.sublime-snippet</code>, 创建自己的snippet的方式为菜单栏<code>Tools | New Snippet..</code></p>
</blockquote>

<p>下面看一下新建的文件格式:</p>

<pre>
<code>&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
Hello, ${1:this} is a ${2:snippet}.
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;
&lt;/snippet&gt;
</code></pre>

<p>为了方便理解简化以上代码:</p>

<pre>
<code>&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[Type your snippet here]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Tab trigger to activate the snippet --&gt;
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;
    &lt;!-- Optional: Scope the tab trigger will be active in --&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
    &lt;!-- Optional: Description to show in the menu --&gt;
    &lt;description&gt;My Fancy Snippet&lt;/description&gt;
&lt;/snippet&gt;
</code></pre>

<p>简要介绍一下snippet四个组成部分:</p>

<ul>
	<li><code>content</code>:其中必须包含<code>&lt;![CDATA[&hellip;]]&gt;</code>,否则无法工作,&nbsp;<code>Type your snippet here</code>用来写你自己的代码片段</li>
	<li><code>tabTrigger</code>:用来引发代码片段的字符或者字符串, 比如在以上例子上, 在编辑窗口输入<code>hello</code>然后按下tab就会在编辑器输出<code>Type your snippet here</code>这段代码片段</li>
	<li><code>scope</code>: 表示你的代码片段会在那种语言环境下激活, 比如上面代码定义了<code>source.python</code>, 意思是这段代码片段会在python语言环境下激活.</li>
	<li><code>description</code>&nbsp;:展示代码片段的描述, 如果不写的话, 默认使用代码片段的文件名作为描述</li>
</ul>

<h1>2. snippet环境变量</h1>

<hr />
<p>列举一下可能用到的环境变量, 这些环境变量是在Sublime中已经预定义的.</p>

<table>
	<thead>
		<tr>
			<th>环境变量名</th>
			<th>描述</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>$TM_FILENAME</td>
			<td>用户文件名</td>
		</tr>
		<tr>
			<td>$TM_FILEPATH</td>
			<td>用户文件全路径</td>
		</tr>
		<tr>
			<td>$TM_FULLNAME</td>
			<td>用户的用户名</td>
		</tr>
		<tr>
			<td>$TM_LINE_INDEX</td>
			<td>插入多少列, 默认为0</td>
		</tr>
		<tr>
			<td>$TM_LINE_NUMBER</td>
			<td>一个snippet插入多少行</td>
		</tr>
		<tr>
			<td>$TM_SOFT_TABS</td>
			<td>如果设置translate_tabs_to_spaces : true 则为Yes</td>
		</tr>
		<tr>
			<td>$TM_TAB_SIZE</td>
			<td>每个Tab包含几个空格</td>
		</tr>
	</tbody>
</table>

<p>同一通过下面的代码片段进行验证:</p>

<pre>
<code>&lt;snippet&gt;
   &lt;content&gt;&lt;![CDATA[
=================================
$TM_FILENAME   用户文件名
$TM_FILEPATH   用户文件全路径
$TM_FULLNAME    用户的用户名
$TM_LINE_INDEX   插入多少列, 默认为0
$TM_LINE_NUMBER   一个snippet插入多少行
$TM_SOFT_TABS  如果设置translate_tabs_to_spaces : true 则为Yes
$TM_TAB_SIZE   每个Tab包含几个空格
=================================
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
&lt;/snippet&gt;
</code></pre>

<blockquote>
<p>验证方式 : 保存自定义snippet,在python文件夹下输入hello按下tab</p>
</blockquote>

<h1>3. snippet Fields</h1>

<hr />
<p>设置<code>Fields</code>, 可以通过tab键循环的改变代码片段的一些值</p>

<pre>
<code>&lt;snippet&gt;
   &lt;content&gt;&lt;![CDATA[
=================================
First Name: $1
Second Name: $2
Address: $3
=================================
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
&lt;/snippet&gt;
</code></pre>

<blockquote>
<p>验证方式, 在python文件夹下, 输入hello按下tab, 会出现已经定义的代码片段, 不停的按下tab会发现输入光标在$1, $2, $3的位置跳转, 跳转顺序由数字由小到大决定,&nbsp;<code>Shift+Tab</code>可以进行向上跳转, 可以通过<code>Esc</code>结束跳转</p>
</blockquote>

<h1>4. snippet Mirrored Fields</h1>

<hr />
<p>设置snippet镜像区域,会使相同编号的位置同时进行编辑</p>

<pre>
<code>&lt;snippet&gt;
   &lt;content&gt;&lt;![CDATA[
=================================
First Name: $1
Second Name: $1
Address: $1
=================================
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
&lt;/snippet&gt;
</code></pre>

<blockquote>
<p>验证方法: 在python文件中, 输入hello按下tab,出现代码片段,会出现三行同行编辑的光标, 这时进行编辑可以同时进行三行相同的编辑</p>
</blockquote>

<h1>5. snippet Placeholders</h1>

<hr />
<p>snippet 占位符含义类似于python的默认参数, 通过对Field做出一点修改, 可以定义Field的默认值, 并且可以通过tab键可以对不同的默认值进行修改</p>

<pre>
<code>&lt;snippet&gt;
   &lt;content&gt;&lt;![CDATA[
=================================
First Name: ${1:Guillermo}
Second Name: ${2:L&oacute;pez}
Address: ${3:Main Street 1234}
User name: $1
Environment Variable : ${4:$TM_FILEPATH }  #可以设置默认占位符为环境变量
Test: ${5:Nested ${6:Placeholder}}
=================================
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
&lt;/snippet&gt;
</code></pre>

<blockquote>
<p>验证方式: 在pyton文件中输入hello,然后按下tab, 输入代码片段后, 两个$1的field可以同时修改默认值, 然后继续按下tab键可以修改$2的默认值..., 还可以占位符设置嵌套</p>
</blockquote>

<p>写到这里基本上大家都应该可以根据需求编写简单的snippet了, 恭喜你..</p>

<h1>6. snippet Substitutions</h1>

<hr />
<p>高级应用可以使用<a href="https://link.jianshu.com/?t=http://docs.sublimetext.info/en/latest/extensibility/snippets.html#substitutions" rel="nofollow" target="_blank">Perl的正则表达式</a></p>

<p>最后送上简单的python的snippet</p>

<pre>
<code>&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
&quot;&quot;&quot;

文档注释

Args : 
    ${1}:

Returns : 
    ${2}:

Raises : 
    ${3}:

&quot;&quot;&quot;
]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;&quot;&quot;&quot;&lt;/tabTrigger&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
    &lt;description&gt;Documentation Comments&lt;/description&gt;
&lt;/snippet&gt;

###
&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[def ${1:foo}():
    doc = &quot;${2:The $1 property.}&quot;
    def fget(self):
        ${3:return self._$1}
    def fset(self, value):
        ${4:self._$1 = value}
    def fdel(self):
        ${5:del self._$1}
    return locals()
$1 = property(**$1())$0]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;property&lt;/tabTrigger&gt;
    &lt;scope&gt;source.python&lt;/scope&gt;
    &lt;description&gt;New Property&lt;/description&gt;
&lt;/snippet&gt;
</code></pre>

<h1>7. 拓展阅读和参考链接</h1>

<hr />
<p><a href="https://link.jianshu.com/?t=http://docs.sublimetext.info/en/latest/extensibility/snippets.html" rel="nofollow" target="_blank">Snippets</a><br />
<a href="https://link.jianshu.com/?t=http://docs.sublimetext.info/en/latest/extensibility/syntaxdefs.html#scopes-and-scope-selectors" rel="nofollow" target="_blank">Syntax Definitions</a><br />
<a href="https://link.jianshu.com/?t=http://www.boost.org/doc/libs/1_56_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html" rel="nofollow" target="_blank">Perl Regular Expression Syntax</a><br />
<a href="https://link.jianshu.com/?t=http://www.boost.org/doc/libs/1_56_0/libs/regex/doc/html/boost_regex/format/boost_format_syntax.html" rel="nofollow" target="_blank">Boost-Extended Format String Syntax</a></p>
