<h1><a href="https://www.cnblogs.com/blfshiye/p/4566900.html" id="cb_post_title_url">Emacs，最强的编辑器</a></h1>

<h2><strong>内容简单介绍</strong></h2>

<p>1、Emacs简单介绍</p>

<p>2、Emacs三个平台的安装与配置</p>

<p><strong>3、自己主动补全插件</strong></p>

<p>4、小编的Emacs配置文件</p>

<p><strong>5、经常使用快捷方式</strong></p>

<p><strong>6、和版本号控制系统的配合（以SVN为例）</strong></p>

<h2>【程序猿小助手】系列</h2>

<p>在这个系列文章中（不定期更新）。小编会把这些年（也没几年）的编程学习和工作中使用到的个人感觉很好的软件推荐给大家，希望可以共享美好资源。使大家提高编程和办事效率。</p>

<h2>Emacs，最强编辑器，没有之中的一个</h2>

<p>小编知道。此标题一出，肯定会遭受广大群众&ldquo;诟病&rdquo;。说不好还会被其它编辑器的粉丝暗地里&ldquo;干掉&rdquo;。</p>

<p>比方，Vim编辑器的粉丝可能就会来&ldquo;踢馆&rdquo;，VS或Eclipse的粉丝也后续会&ldquo;群起而攻&rdquo;，可是小编仅仅是表达一下自己的感受。请拍砖的时候轻一点。鸡蛋少扔几个。假设扔的鸡蛋多也请多扔几个番茄过来，这样我能够做番茄炒蛋，谢谢。</p>

<p>有种张无忌在光明顶被6大门派群&ldquo;围剿&rdquo;的架势...</p>

<p>对于非常多人来说，使用Vim和Emacs，不仅是提升&ldquo;逼格&rdquo;的方式，更是上升到&ldquo;信仰&rdquo;的层面，夸张吧。</p>

<p>当然这和宗教信仰不一样，仅仅是一种可爱的&ldquo;偏执&rdquo;而已。感觉自己萌萌哒~</p>

<p>只是。Emacs实在能做非常多事，不要觉得它就仅仅是一个文本编辑器。它能够说是一个整合环境，或可称它为&ldquo;集成开发环境&rdquo;，它还能够做下面事情：</p>

<ol>
	<li>
	<p>上网，浏览网页</p>
	</li>
	<li>
	<p>看视频</p>
	</li>
	<li>
	<p>收发邮件</p>
	</li>
	<li>
	<p>调试程序，结合GDB，EDebug等。支持C/C++，Perl。Python，Lisp等等</p>
	</li>
	<li>
	<p>玩游戏</p>
	</li>
	<li>
	<p>计算器</p>
	</li>
	<li>
	<p>记日记</p>
	</li>
	<li>
	<p>管理日程。Task，ToDo，约会等</p>
	</li>
	<li>
	<p>个人信息管理</p>
	</li>
	<li>
	<p>文件夹管理</p>
	</li>
	<li>
	<p>文件比較</p>
	</li>
	<li>
	<p>阅读info和man文档</p>
	</li>
	<li>
	<p>等等</p>
	</li>
</ol>

<p>小编曾经在Linux下编写代码是使用Vim编辑器的，也很强大，可是自从2014年接触到Emacs之后。就爱上了Emacs（fall in love with Emacs），Vim尽管有时还会用到，可是大部分时间编写代码还是用的Emacs。</p>

<p>一開始我不知道为什么Emacs如此优美又强大，直到后来阅读了《黑客与画家》这部经典著作（硅谷创业教父&nbsp;Paul Graham&nbsp;保罗&bull;格雷厄姆所写，事实上也就是他的一些日志汇编而成），里面讲述了Lisp语言的强大和优美，而Emacs就是用Lisp语言编写的，怪不得。</p>

<p>闲扯一下为什么Lisp语言如此强大，尽管这门语言非常老了，在2015年6月的TIOBE编程语言排行榜也仅仅有第31位。可是：</p>

<p><strong>摘录自 阮一峰 翻译的《黑客与画家》一书，推荐大家一读</strong>：</p>

<p>********************************************</p>

<p>假设我们把流行的编程语言，以这种顺序排列：Java、Perl、Python、Ruby。</p>

<p>你会发现，排在越后面的语言，越像Lisp。</p>

<p>&nbsp;Python模仿Lisp，甚至把很多Lisp黑客觉得属于设计错误的功能，也一起模仿了。至于Ruby，假设回到1975年。你声称它是一种Lisp方言。没有人会反对。</p>

<p>&nbsp;编程语言如今的发展，只是刚刚赶上1958年Lisp语言的水平。</p>

<p>1958年，John McCarthy设计了Lisp语言。</p>

<p>我觉得，当前最新潮的编程语言，仅仅是实现了他在1958年的设想而已。 &nbsp;这怎么可能呢？计算机技术的发展，不是日新月异吗？</p>

<p>1958年的技术。怎么可能超过今天的水平呢？ &nbsp;让我告诉你原因。 &nbsp;这是由于John McCarthy本来没打算把Lisp设计成编程语言。至少不是我们如今意义上的编程语言。</p>

<p>他的原意仅仅是想做一种理论演算，用更简洁的方式定义图灵机。</p>

<p>&nbsp;所以，为什么上个世纪50年代的编程语言。到如今还没有过时？简单说，由于这样的语言本质上不是一种技术。而是数学。数学是不会过时的。</p>

<p>你不应该把Lisp语言与50年代的硬件联系在一起，而是应该把它与高速排序（Quicksort）算法进行类比。</p>

<p>这样的算法是1960年提出的，至今仍然是最快的通用排序方法。</p>

<p><br />
直到今天，最高级的主流语言，也仅仅是刚刚接近Lisp的水平。</p>

<p>尽管已经非常接近了。但还是没有Lisp那样强大。</p>

<p>Lisp语言诞生的时候，就包括了9种新思想。当中一些我们今天已经习以为常，还有一些则刚刚在其它高级语言中出现，至今还有2种是Lisp独有的。依照被大众接受的程度，这9种思想依次是：</p>

<ol>
	<li>
	<p><strong>条件结构（即&quot;if-then-else&quot;结构）</strong>。如今大家都认为这是理所当然的，可是Fortran I就没有这个结构。它仅仅有基于底层机器指令的goto结构。</p>
	</li>
	<li>
	<p><strong>函数也是一种数据类型</strong>。</p>

	<p>在Lisp语言中。函数与整数或字符串一样，也属于数据类型的一种。它有自己的字面表示形式（literal representation）。可以储存在变量中，也能当作參数传递。一种数据类型应该有的功能，它都有。</p>
	</li>
	<li>
	<p><strong>递归</strong>。Lisp是第一种支持递归函数的高级语言。</p>
	</li>
	<li>
	<p><strong>变量的动态类型</strong>。</p>

	<p>在Lisp语言中，全部变量实际上都是指针，所指向的值有类型之分。而变量本身没有。复制变量就相当于复制指针。而不是复制它们指向的数据。</p>
	</li>
	<li>
	<p><strong>垃圾回收机制</strong>。</p>
	</li>
	<li>
	<p><strong>程序由表达式（expression）组成</strong>。Lisp程序是一些表达式区块的集合。每一个表达式都返回一个值。</p>

	<p>这与Fortran和大多数后来的语言都截然不同。它们的程序由表达式和语句（statement）组成。</p>
	</li>
	<li>
	<p><strong>符号（symbol）类型</strong>。</p>

	<p>符号实际上是一种指针。指向储存在哈希表中的字符串。</p>

	<p>所以。比較两个符号是否相等，仅仅要看它们的指针是否一样即可了，不用逐个字符地比較。</p>
	</li>
	<li>
	<p><strong>代码使用符号和常量组成的树形表示法（notation）</strong>。</p>
	</li>
	<li>
	<p>无<strong>论什么时候，整个语言都是可用的</strong>。</p>

	<p>Lisp并不真正区分读取期、编译期和执行期。你能够在读取期编译或执行代码；也能够在编译期读取或执行代码。还能够在执行期读取或者编译代码。&nbsp;</p>
	</li>
</ol>

<p>*******************************************</p>

<p>怎么样。是不是非常有兴趣了解一下如此强大的Lisp语言开发出来的Emacs是怎样优美呢？</p>

<p>当然此文不可能带大家领略全部Emacs的优美之处。说实话，Emacs肯定存在不足之处： 小编还是非常识相的，不敢冒天下之大不韪。</p>

<p>很多其它Emacs的优点仅仅有大家使用了才干慢慢领略。</p>

<p>Emacs简单介绍</p>

<p>Emacs是一种强大的文本编辑器。在程序猿和其它以技术工作为主的计算机用户中广受欢迎。</p>

<p>EMACS。即Editor MACroS（编辑器宏）的缩写。最初由Richard Stallman(理查德&middot;马修&middot;斯托曼)于1975年在MIT协同Guy Steele共同完毕。</p>

<p>（Richard Stallman但是开源运动之父啊，这位可爱的长胡子大叔抵制Apple。抵制Facebook，抵制Amazon，抵制不少公司和机构。</p>

<p>他也是自由软件基金会（Free Software Foundation，简称FSF）的主席，而自由软件基金会主导了包含GNU在内的非常多开源project。GNUproject使得世界各地的程序猿能够为Linux操作系统开发周边软件等。才有了Linux的今天。不然Linus Tovarlds（Linux之父）基本上光是写了一个Linux内核。哪够啊。所以今天的Linux最正确的称谓应该是GNU/Linux ）</p>

<p>自诞生以来，Emacs演化出了众多分支。当中使用最广泛的两种各自是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs。以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。它们都使用了Emacs Lisp这样的有着极强扩展性的编程语言，从而实现了包含编程、编译乃至网络浏览等等功能的扩展。</p>

<p>你能够使用Lisp语言改写Emacs的功能组件。并且能够更改配置，全然自己定义Emacs，全部Emacs是充满无限可能的编辑器。</p>

<p><strong>国际化</strong></p>

<p>Emacs支持对多种文字的文本编辑，包含UTF-8在内的诸多编码系统，加上对多种字符集、文稿、书写系统，以及不同文化的书写习惯都提供了支持，使得世界上大多数语言的使用者都能通过Emacs进行文本处理。</p>

<p>Emacs还能通过调用诸如ispell这种外部程序。实现多种语言的拼写检查。</p>

<p><strong>跨平台性</strong></p>

<p>Emacs是眼下世界上最具可移植性的重要软件之中的一个，可以在当前大多数操作系统上执行，包含类Unix系统（GNU/Linux、各种BSD、Solaris、AIX、IRIX、Mac OS X等等）、MS-DOS、Microsoft Windows以及OpenVMS等。还有移动Android平台以及iOS。</p>

<p><strong>缓冲区的概念</strong></p>

<p>初学Emacs须要理解什么是缓冲区：</p>

<p>Emacs里的一切操作都发生在编辑缓冲区（buffer）里。它一般是某个文件的工作副本。</p>

<p>假设你正在编辑的编辑缓冲区里包括着某个文件的一个副本，那么当你保存自己所做的修改时。Emacs把编辑缓冲区的内容拷贝到文件里。 除了工作在文件副本上的缓冲区外。另一些做暂时工作的缓冲区，它就像一张草稿纸，当然也能够随时使用write-file命令（&quot;C-x C-w&quot;）或save-buffer命令（&ldquo;C-x C-s&rdquo;）保存这类暂时工作缓冲区的内容。</p>

<p>小编一開始也是对缓冲区的概念一知半解。不要怕，用着用着立即就理解了。</p>

<p><strong>能够參考一些高手的Emacs教程和&ldquo;练级&rdquo;系列</strong>：</p>

<p><a href="http://www.cnblogs.com/robertzml/archive/2009/09/10/1564108.html" target="_blank" title="">http://www.cnblogs.com/robertzml/archive/2009/09/10/1564108.html</a></p>

<p><a href="http://blog.csdn.net/redguardtoo/article/details/7222501/" target="_blank" title="">http://blog.csdn.net/redguardtoo/article/details/7222501/</a></p>

<p>&nbsp;</p>

<p><a href="http://blog.sina.com.cn/s/blog_6df127760101ll7a.html" target="_blank" title="">http://blog.sina.com.cn/s/blog_6df127760101ll7a.html</a></p>

<p><a href="http://arch.pconline.com.cn//pcedu/soft/gj/photo/0609/865628_1.html" target="_blank" title="">http://arch.pconline.com.cn//pcedu/soft/gj/photo/0609/865628_1.html</a></p>

<p>&nbsp;</p>

<p><strong>Emacs的官网</strong>：</p>

<p><a href="http://www.gnu.org/software/emacs/" target="_blank" title="">http://www.gnu.org/software/emacs/</a></p>

<p>&nbsp;</p>

<p><strong>Emacs的中文WiKi</strong>：</p>

<p><a href="http://www.emacswiki.org/emacs?interface=zh-cn" target="_blank" title="">http://www.emacswiki.org/emacs?</a></p>

<p><a href="http://www.emacswiki.org/emacs?interface=zh-cn" target="_blank" title="">interface=zh-cn</a></p>

<p>&nbsp;</p>

<p><strong>轻松一下，关于Emacs的一则玩笑</strong></p>

<p>《Emacs 的日子是这个样子的》</p>

<p>1. 听说有 Emacs 这个东西。</p>

<p>试了一下。感觉就像记事本一样。没什么学习曲线。就是&hellip;&hellip;咋也找不到退出的办法&hellip;&hellip;</p>

<p>2. 開始会一些 Emacs 了，開始学习各种 mode，按键绑定，配置方法，開始熟悉 Emacs&hellip;&hellip;</p>

<p>3. 比較熟悉 Emacs了，基本使用 Emacs干活，每天&ldquo;活在&rdquo; Emacs 里面&hellip;&hellip;</p>

<p>4. 很熟悉自己&ldquo;经常使用&rdquo;的 Emacs，能够教别人 Emacs。大量泡 Emacs社区，大量下载、使用和跟踪别人的扩展，已经离不了 Emacs&hellip;&hellip;</p>

<p>5. 渐渐不满 Emacs，渐渐熟悉 Lisp 语言。開始改写&ldquo;自己&rdquo;的Emacs。在这期间，又開始四处碰壁，工作效率总是被一个失败的改动所影响&hellip;&hellip;</p>

<p>6. 常常改动 Emacs，自己手中的 Emacs基本上每周都和上一周有那么一点不太一样&hellip;&hellip; 就是。改的太多了，常常在某天整理代码的时候突然发现&hellip;&hellip;原来还有这么个易用的功能&hellip;&hellip; 忘记好久了&hellip;&hellip;</p>

<p>7. &hellip;&hellip; &hellip;&hellip;</p>

<h2>Emacs三个平台的安装与配置</h2>

<h3><strong>1. Windows下安装Emacs</strong></h3>

<p>请到下面链接下载Windows版的Emacs：</p>

<p><a href="https://ftp.gnu.org/gnu/emacs/windows/" target="_blank" title="">https://ftp.gnu.org/gnu/emacs/windows/</a></p>

<p>请大家下载列表中最新版本号的zip文件，比方眼下最新版的是2015年5月1日公布的24.5版：</p>

<p>emacs-24.5-bin-i686-mingw32.zip</p>

<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYN9Q4rUAwSnvndMzVUNw3tJhzX177cITLdIjHK6SkzypRicnR5DVmpLic4Z4cXagibpy94bz1iakf8QLw/0?%3C/p%3E%3Cp%3Ewx_fmt=jpeg" /></p>

<p>下载后。用Winrar或7-zip解压。会出来一个目录&nbsp;emacs-24.5-bin-i686-mingw32</p>

<p>内含四个子目录：</p>

<p>bin</p>

<p>libexec</p>

<p>share</p>

<p>var</p>

<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYN9Q4rUAwSnvndMzVUNw3tJM0Ju4f1gic2vjBMnaM5wyGCrQZrgklGcVHH25gsbEdM0rVsibiaFYvkEw/0?wx_fmt=jpeg" /></p>

<p>&nbsp;</p>

<p>打开bin目录，执行当中的&nbsp;emacs.exe&nbsp;文件就可以开启Emacs。不须要安装：</p>

<p>&nbsp;</p>

<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYN9Q4rUAwSnvndMzVUNw3tJBBCwod8brR5Dz4Xtl3slXsUfias4P9XPJQDJjXXwTkVXPtFHdZCRTXA/0?%3C/p%3E%3Cp%3Ewx_fmt=jpeg" /></p>

<p>&nbsp;</p>

<p>你能够把emacs.exe这个文件锁定到<strong>任务栏</strong>，就非常方便了，按一下图标就启动了。</p>

<p>&nbsp;</p>

<h3><strong>2. Linux下安装Emacs</strong></h3>

<p>Debian一族（包含Ubuntu）下安装Emacs：</p>

<p>sudo apt-get install emacs</p>

<p>Redhat一族（包含Fedora）下安装Emacs：</p>

<p>sudo yum install emacs</p>

<p>其它的能够搜索怎样安装，或者下载Emacs的源码来编译安装。</p>

<p>以下演示Linux怎样下载Emacs的代码来编译安装（逼格最高的方式）：</p>

<ol>
	<li>
	<p>首先去</p>

	<p><a href="ftp://ftp.gnu.org/pub/gnu/emacs" target="_blank" title="">ftp://ftp.gnu.org/pub/gnu/emacs</a></p>

	<p>上面有Emacs的差点儿全部版本号的源码包。下载最新版的（用老版的也能够），如：&nbsp;emacs-24.5.tar.gz</p>
	</li>
	<li>
	<p>解压&nbsp;emacs-24.5.tar.gz&nbsp;并编译。安装，在终端（Terminal）中依次执行下面命令（假设是其它版本号，则将例如以下命令中的24.5替换为对应版本号就可以）：</p>

	<p>tar -zxvf emacs-24.5.tar.gz （解压文件） cd emacs-24.5 （进入文件夹） ./configure （配置） make （编译） sudo make install （安装，会提示你输入管理员password）</p>

	<p>&nbsp;</p>
	</li>
</ol>

<p>安装完之后要启动Emacs非常easy，开一个终端（Terminal），输入emacs，回车。就能够了。</p>

<p>只是小编嫌这样太麻烦。能够用更简单的方式来打开Emacs，我这里用一个键就能够了（演示环境是Fedora 21。只是其它系统如Ubuntu类似）：</p>

<ol>
	<li>
	<p>打开Fedora的&ldquo;设置&rdquo; （肯定知道设置在哪里吧）</p>
	</li>
	<li>
	<p>选择&ldquo;键盘&rdquo;</p>
	</li>
	<li>
	<p>选择列表中的&ldquo;自己定义快捷方式&rdquo;。然后点击加号&ldquo;+&rdquo;，用于加入新的快捷方式</p>
	</li>
	<li>
	<p>选择快捷方式的按键，小编这里选的是F2这个键，然后填写命令，就是&ldquo;emacs&rdquo;。再填写快捷方式的名称，这个随便填，我填的是&ldquo;Emacs&rdquo;，确定</p>

	<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHNWDT48iaGxtsL3JAq5VSibmuIosjmTUTU3oGd5d4VicDbYwgOl6aich7HQ/0?wx_fmt=jpeg" /><br />
	&nbsp;</p>
	</li>
	<li>
	<p>按F2键试试。是不是就启动Emacs啦？这酸爽不言而喻！</p>
	</li>
</ol>

<h3><strong>3. Mac OS下安装Emacs</strong></h3>

<p>Mac下安装Emacs。网上有不少文章。实用Git弄下来Emacs的源代码然后编译安装的。 也实用一些包管理软件来安装的，可是小编推荐一个更方便的方式，和Mac下安装QQ，迅雷那样方便：</p>

<p><a href="http://emacsformacosx.com/" target="_blank" title="">http://emacsformacosx.com/</a></p>

<p>上这个网。然后下载那个dmg包。Mac用户肯定懂的，就是Mac下安装软件的最经常使用方式。然后就没有然后了... 假设这样你都不会装Emacs，那真心不是必需用Emacs了...&nbsp;</p>

<h2>自己主动补全插件</h2>

<p>安装完Emacs之后，还须要安装一个自己主动补全（能够自己主动补全keyword，文本等）的扩展，很强大。名叫company-mode，官网：</p>

<p><a href="http://company-mode.github.io/" target="_blank" title="">http://company-mode.github.io/</a></p>

<p>幸好。这个扩展并不须要我们依照传统的方式从官网下载、安装到Emacs里面，由于Emacs里有个安装扩展的列表，有点类似 Debian系列的 apt-get 和 Redhat系列的yum 这种包管理工具，所以我们仅仅须要按步骤安装：</p>

<p>&nbsp;</p>

<ol>
	<li>
	<p>按下&nbsp;M-x&nbsp;来调出命令输入</p>
	</li>
	<li>
	<p>输入&nbsp;list-packages，回车</p>

	<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHtZCMBSTiccTicibp49CazibhuxsH5MXgYxogGR01QkGpibbHtcGf9yvxxPg/0?wx_fmt=jpeg" /><br />
	&nbsp;</p>
	</li>
	<li>
	<p>在出现的列表里，点击&nbsp;company</p>
	</li>
	<li>
	<p>在右边出现的新缓冲区里点击&nbsp;Install（英文： 安装）</p>

	<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHGvDAvkOTmicAzfIJ5Vnb4pbO3YLA6yw6xZZkCnCUZBvQ78BU2KhiaHMA/0?wx_fmt=jpeg" /><br />
	&nbsp;</p>
	</li>
	<li>
	<p>点击&nbsp;Yes</p>

	<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHOSb2KZpmIrRiaMicFrQAOib6UTJibqal4hqJqibP7ISgSiaH1lMZ9kWic79Og/0?wx_fmt=jpeg" /><br />
	&nbsp;</p>
	</li>
	<li>
	<p>開始感受自己主动补全的乐趣吧</p>
	</li>
</ol>

<p>&nbsp;</p>

<p>用此方法（list-packages命令）也能够安装非常多其它的Emacs的插件（扩展），大家也看到列表里有非常多插件了吧，所以说Emacs都有点像一个小型的操作系统。</p>

<h2>小编的Emacs配置文件</h2>

<p>请点击&ldquo;<strong><a href="http://pan.baidu.com/s/1bn74FhH" target="_blank">阅读原文</a></strong>&rdquo;来下载小编打包好的压缩文件（.rar格式），内含小编的 Emacs配置文件.emacs&nbsp;（前面有一个点的，不要忘啦）和三个实用的模块。供 .emacs 文件调用。</p>

<p>当然大家能够从网上下载一些大牛的Emacs配置文件。看一下他们的Emacs快捷键（除了主要的一些通用快捷键以外，用户能够自己定义非常多快捷键，能够定义在 .emacs 文件里）。</p>

<p>假设你&ldquo;不幸&rdquo;选择使用小编的Emacs配置文件，那么承蒙看得起：</p>

<ol>
	<li>
	<p>请用小编的 .emacs 文件替换你的家文件夹的.emacs文件 （安装完Emacs，你的家文件夹，也就是 ~ 下就会有一个 .emacs 文件）。</p>
	</li>
	<li>
	<p>把压缩文件中的其它三个模块文件放置到 .emacs.d 这个目录下的modules目录 （.emacs.d 目录是安装完Emacs就会有的，也在家目录里，只是modules目录须要你自己创建）：</p>

	<pre>
cd ~/.emacs.d/
mkdir modules
cp php-mode.el psvn.el saved-places modules/     （或者手动直接把三个模块文件拷贝到modules目录里）
</pre>
	</li>
</ol>

<h2>经常使用快捷方式</h2>

<p>Emacs的快捷键都是绑定于Ctrl和Alt(或称Meta。 在Mac下就是Cmd键)上的。比如C-x就是Ctrl+x。M-x就是Alt+x （在Mac下就是Cmd键）。</p>

<p>当然全部的按键都能够自己定义。</p>

<p>所以以下我在讲述快捷键的组合表示方式时：</p>

<ol>
	<li>
	<p>C 代表Ctrl键</p>
	</li>
	<li>
	<p>M 代表Alt键或者在苹果的Mac系统下是Cmd键</p>
	</li>
	<li>
	<p>C-x C-c &nbsp;代表着,先按C-x，再按C-c</p>
	</li>
	<li>
	<p>C-x k &nbsp;代表着,先按C-x，松开手，再按k</p>
	</li>
</ol>

<p><strong>小编平时最经常使用的是这些快捷键组合</strong></p>

<ol>
	<li>
	<p>M-s&nbsp;&nbsp;： 新建一个buffer（缓冲区）</p>
	</li>
	<li>
	<p>C-x O&nbsp;： 注意是大写的O，不是零，所以须要按住shift键再按o键。</p>

	<p>用于在缓冲区之间切换</p>
	</li>
	<li>
	<p>C-g&nbsp;： 取消当前操作</p>
	</li>
	<li>
	<p>C-x u&nbsp;： &nbsp;回到上一步。相当于Undo</p>
	</li>
	<li>
	<p>C-x C-3&nbsp;： 把缓冲区（buffer）分为左右两个。新的一个缓冲区是复制当前的缓冲区 （能够运行多次。来切割出非常多小窗体）</p>
	</li>
	<li>
	<p>C-x&nbsp;C-2&nbsp;： 把缓冲区（buffer）分为上下两个。新的一个缓冲区是复制当前的缓冲区 （能够运行多次，来切割出非常多小窗体）</p>
	</li>
	<li>
	<p>M-w&nbsp;： 选中文字的情况是复制文字。而假设没有选中文字则是复制当前的一行</p>
	</li>
	<li>
	<p>C-w&nbsp;： 选中文字的情况是剪切文字，而假设没有选中文字则是剪切当前的一行</p>
	</li>
	<li>
	<p>M-x&nbsp;： 调出命令输入，能够在后面接命令。比方man。svn-status。等</p>
	</li>
	<li>
	<p>C-y&nbsp;： 黏贴</p>
	</li>
	<li>
	<p>C-x&nbsp;C-s&nbsp;： 保存文本</p>
	</li>
	<li>
	<p>C-x&nbsp;C-f&nbsp;： 打开文件，假设文件不存在，则新建文件</p>
	</li>
	<li>
	<p>C-x&nbsp;C-v&nbsp;： 打开一个文件，代替当前缓冲区</p>
	</li>
	<li>
	<p>C-x k&nbsp;： 关闭当前缓冲区（buffer）</p>
	</li>
	<li>
	<p>C-s&nbsp;： 向前搜索</p>
	</li>
	<li>
	<p>C-r&nbsp;： 向后搜索</p>
	</li>
	<li>
	<p>C-x h&nbsp;： 全选</p>
	</li>
	<li>
	<p>C-v&nbsp;： 向下翻页</p>
	</li>
	<li>
	<p>M-v&nbsp;： 向上翻页</p>
	</li>
	<li>
	<p>C-f&nbsp;： 前进一个字符</p>
	</li>
	<li>
	<p>C-b&nbsp;： 后退一个字符</p>
	</li>
	<li>
	<p>M-f&nbsp;： 前进一个单词</p>
	</li>
	<li>
	<p>M-b&nbsp;： 后退一个单词</p>
	</li>
	<li>
	<p>C-@&nbsp;： 标记開始区域</p>
	</li>
	<li>
	<p>C-a&nbsp;： 移到行首</p>
	</li>
	<li>
	<p>C-e&nbsp;： 移到行尾</p>
	</li>
	<li>
	<p>M-a&nbsp;： 移到句首</p>
	</li>
	<li>
	<p>M-e&nbsp;： 移到句尾</p>
	</li>
	<li>
	<p>M-&lt;&nbsp;： 缓冲区头部</p>
	</li>
	<li>
	<p>M-&gt;&nbsp;： 缓冲区尾部</p>
	</li>
	<li>
	<p>M-g&nbsp;M-g，再输入数字&nbsp;： 跳转到文本的第几行</p>
	</li>
	<li>
	<p>C-x 0&nbsp;： 关闭当前缓冲区</p>
	</li>
	<li>
	<p>C-x C-c&nbsp;： 退出Emacs</p>
	</li>
	<li>
	<p>临时仅仅能记起来这么多啦，还有非常多快捷键就要你自己去发掘啦！小编平时也不会全部的快捷键都用上，上述的快捷键组合是最经常使用的。</p>

	<p>&nbsp;</p>
	</li>
</ol>

<p><strong>注意</strong>： 千万不要死记这些快捷键组合，随着你使用Emacs，非常快就能记住的，相信我！</p>

<p>Emacs另一个非常大的优点就是差点儿全部的快捷键按键都在键盘的左下角。用左手就能单独完毕大部分操作。而右手则能够玩游戏（哦，不正确，是操作鼠标），提高效率。或者说，你用好了Emacs的快捷键组合。编辑代码时甚至不须要鼠标啦，两个手在键盘上就够了！</p>

<p>另一个平时经常使用的功能就是查询函数，能够方便查询已定义的函数：</p>

<ol>
	<li>
	<p>按下&nbsp;M-x&nbsp;来调出命令输入</p>
	</li>
	<li>
	<p>输入&nbsp;man&nbsp;。也就是Linux或Unix系统的man命令，是manuall的缩写，也就是&quot;手冊&quot;的意思</p>
	</li>
	<li>
	<p>然后输入你要查询的函数名，回车</p>
	</li>
	<li>
	<p>就出来啦。比方小编查询fprintf函数，就会弹出下图右边的缓冲区：</p>

	<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHX83XtTHVOvCicHMgE9A7HCtOTur2M2YvEy2pDTiaxic63v3OQyTQ9BzibA/0?wx_fmt=jpeg" /><br />
	&nbsp;</p>
	</li>
</ol>

<p>&nbsp;</p>

<hr />
<p>给出小编的 .emacs 配置文件的内容吧。免得万一下载链接失效了(至于那三个模块。能够在网上找到下载的： php-mode.el &nbsp; psvn.el &nbsp; &nbsp;saved-places)：</p>

<p>&nbsp;</p>

<pre>
;;
;; ADDITIONAL REPOSITORY FOR MODULES TO LOAD
;;
(add-to-list &#39;load-path &quot;~/.emacs.d/modules&quot;)

;;
;; ADDITIONNALS MODULES
;;
;;(require &#39;dsvn)
(require &#39;psvn)
(require &#39;php-mode)
(require &#39;saveplace)
;;(require &#39;unxls)
;; display the path to the file in the sidebar.
;;(require &#39;uniquify)

;;
;; KEYBOARD SHORTCUT
;;
(global-set-key [f9] &#39;compile)
(global-set-key [(control z)] &#39;undo)
;; We could use &#39;dabbrev-completion or &#39;dabbrev-expand
(global-set-key [(control return)] &#39;dabbrev-completion)
;;(global-set-key &quot;\C-)&quot; &#39;dabbrev-completion)
;;(global-set-key &quot;\C-=&quot; &#39;dabbrev-expand)
(global-set-key &quot;\C-n&quot; &#39;imenu)
(defun try-to-add-imenu ()
(condition-case nil (imenu-add-to-menubar &quot;imenu&quot;) (error nil)))
(add-hook &#39;font-lock-mode-hook &#39;try-to-add-imenu)

;; Company mode in all buffers
(add-hook &#39;after-init-hook &#39;global-company-mode)

(global-set-key &quot;\M-s&quot; &#39;new-shell)
(global-set-key (kbd &quot;C-x t&quot;) &#39;todo-show)

;;
;; Copy or Cut one line if no content selected
;;
;; copy region or whole line
(global-set-key &quot;\M-w&quot;
(lambda ()
 (interactive)
 (if mark-active
     (kill-ring-save (region-beginning)
     (region-end))
   (progn
    (kill-ring-save (line-beginning-position)
    (line-end-position))
    (message &quot;copied line&quot;)))))
    
;; kill region or whole line
(global-set-key &quot;\C-w&quot;
(lambda ()
 (interactive)
 (if mark-active
     (kill-region (region-beginning)
  (region-end))
   (progn
    (kill-region (line-beginning-position)
 (line-end-position))
    (message &quot;killed line&quot;)))))     

;;
;; FUNCTION DEFINITION
;;
(defun new-shell ()
 (interactive)
 (let (
       (currentbuf (get-buffer-window (current-buffer)))
       (newbuf     (generate-new-buffer-name &quot;*shell*&quot;))
      )
  (generate-new-buffer newbuf)
  (set-window-dedicated-p currentbuf nil)
  (set-window-buffer currentbuf newbuf)
  (shell newbuf)
 )
)

;;
;; resolving compilation problems. This force the environment variables
;; to be set before compiling.
;;
(let ((path (shell-command-to-string &quot;. ~/.bashrc; echo -n $PATH&quot;)))
 (setenv &quot;PATH&quot; path)
 (setq exec-path 
       (append
        (split-string-and-unquote path &quot;:&quot;)
        exec-path)))

;;
;; Ugly code for READING XLS (but works)
;; Requires: xlhtml &amp; w3m
;;
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.xls\\&#39;&quot; . no-xls))
 
(defun no-xls (&amp;optional filename)
 &quot;Run xlhtml and w3m -dump on the entire buffer.
  Optional FILENAME says what filename to use.
  This is only necessary for buffers without
  proper `buffer-file-name&#39;.  FILENAME should
  be a real filename, not a path.&quot;
 (interactive &quot;fExcel File: &quot;)
   (when (and filename
     (not (buffer-file-name)))
     (write-file (make-temp-file filename)))
     (erase-buffer)
     (shell-command
     (format &quot;xlhtml -nc -te %s | w3m -dump -T text/html&quot; (buffer-file-name))
     (current-buffer))
     (setq buffer-file-name nil)
     (set-buffer-modified-p nil))

;;
;; START
;;
(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won&#39;t work right.
&#39;(c-block-comment-prefix &quot;//&quot;)
&#39;(case-fold-search nil)
&#39;(column-number-mode t)
&#39;(comint-completion-autolist t)
&#39;(comint-completion-recexact t)
&#39;(compilation-always-kill t)
&#39;(compilation-auto-jump-to-first-error nil)
&#39;(compilation-environment PATH=/home/griffon/trunk/indus/bin:/home/fox/components/gnutools/ecos-3\.0/arm-eabi/bin:/home/fox/components/ecos-3\.0/tools/bin:/home/avrdev/bin:/home/thomas/mes_fonctions:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin)
&#39;(compilation-scroll-output (quote first-error))
&#39;(compile-command &quot;./makemake 5010 clean &amp;&amp; ./makemake 5010 all -j 8 &amp;&amp; ./makemake 5010 program&quot;)
&#39;(completion-show-help t)
&#39;(dabbrev-case-distinction t)
&#39;(dabbrev-case-replace t)
&#39;(doc-view-continuous t)
&#39;(doc-view-image-width 850)
&#39;(doc-view-resolution 200)
&#39;(dynamic-completion-mode t)
&#39;(grep-command &quot;grep --exclude-dir=.svn --exclude=\\TAGS --exclude=\\*.{lst,lss,sym,list,o,elf,xml,json,sta,map,deps,d,sx,hex,doc,txt,pdf,tex} -inHr \&quot;&quot;)
&#39;(gud-gdb-command-name &quot;arm-eabi-gdb -i=mi main.elf&quot;)
&#39;(initial-scratch-message &quot;;; This buffer is for notes you don&#39;t want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file&#39;s own buffer.
;; M-s: Open a new shell
&quot;)
&#39;(safe-local-variable-values (quote ((todo-categories &quot;Todo&quot;) (todo-categories &quot;barracuda&quot; &quot;alligator&quot; &quot;Todo&quot;) (todo-categories &quot;alligator&quot; &quot;Todo&quot;))))
&#39;(send-mail-function (quote mailclient-send-it))
&#39;(svn-status-hide-unknown t)
&#39;(svn-status-hide-unmodified t))

;;
;; EDITING/IDE
;;
(global-font-lock-mode 1)

(setq auto-mode-alist
     (append &#39;((&quot;\.php$&quot; . php-mode)
       (&quot;\.module$&quot; . php-mode))
             auto-mode-alist))

;; saving position in files opened with emacsclient
;;(setq server-visit-hook (quote (save-place-find-file-hook)))
(setq-default save-place t)
(setq save-place-file &quot;~/.emacs.d/saved-places&quot;)

;; Code completion case-insensitive, seems not working
;;(setq pcomplete-ignore-case t)
;;(setq case-fold-search t)
;;(setq read-buffer-completion-ignore-case t)
;;(setq read-file-name-completion-ignore-case t)

;; display the path to the buffer file using uniquify (required).
;;(setq uniquify-buffer-name-style &#39;reverse)
;; SHOW FILE PATH IN FRAME TITLE
;;(setq-default frame-title-format &quot;%b (%f)&quot;)

;; Affiche le num&eacute;ro de ligne et de colonne
(column-number-mode t)
(line-number-mode t)

;;
;; FORMATAGE
;;
;; Suppression des espaces en fin de ligne a l&#39;enregistrement
(add-hook &#39;c++-mode-hook &#39;(lambda ()
 (add-hook &#39;write-contents-hooks &#39;delete-trailing-whitespace nil t)))
(add-hook   &#39;c-mode-hook &#39;(lambda ()
 (add-hook &#39;write-contents-hooks &#39;delete-trailing-whitespace nil t)))
;;(defun set-newline-and-indent ()
;;  (local-set-key (kbd &quot;RET&quot;) &#39;newline-and-indent))
;;(add-hook &#39;lisp-mode-hook &#39;set-newline-and-indent)

;;
;; COLORS
;; 
(custom-set-faces
;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won&#39;t work right.
&#39;(default ((t (:inherit nil :stipple nil :background &quot;white&quot; :foreground &quot;black&quot; :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 135 :width normal :foundry &quot;unknown&quot; :family &quot;DejaVu Sans Mono&quot;))))
&#39;(compilation-warning ((t (:inherit warning))))
&#39;(font-lock-comment-face ((t (:foreground &quot;darkorange4&quot;))))
&#39;(font-lock-function-name-face ((t (:foreground &quot;navy&quot;))))
&#39;(font-lock-keyword-face ((t (:foreground &quot;red4&quot;))))
&#39;(font-lock-type-face ((t (:foreground &quot;black&quot;))))
&#39;(linum ((t (:inherit shadow :background &quot;gray95&quot;))))
&#39;(mode-line ((t (nil nil nil nil :background &quot;grey90&quot; (:line-width -1 :color nil :style released-button) &quot;black&quot; :box nil :width condensed :foundry  &quot;unknown&quot; :family &quot;DejaVu Sans Mono&quot;))))
&#39;(svn-status-directory-face ((t (:foreground &quot;tomato&quot;)))))


;; sort of fullscreen
(add-to-list &#39;default-frame-alist &#39;(left . 0))

(add-to-list &#39;default-frame-alist &#39;(top . 0))

(add-to-list &#39;default-frame-alist &#39;(height . 100))

(add-to-list &#39;default-frame-alist &#39;(width . 200))</pre>

<p><br />
&nbsp;</p>

<p>&nbsp;</p>

<hr />
<p>和版本号控制系统的配合（以SVN为例）</p>

<p>&nbsp;</p>

<p>由于有导入Emacs的SVN模块（psvn.el），所以假设你使用了小编的Emacs配置文件。还能够和SVN（当然你要先安装SVN， Fedora下是&nbsp;sudo yum install subversion&nbsp;； Ubuntu下是&nbsp;sudo apt-get install subversion&nbsp;）配合使用。超级方便，比方你改动了几个文件。那么在包括&nbsp;.svn&nbsp;这个文件的那个目录里按下： &nbsp;M-x。然后输入：&nbsp;svn-status。回车。确认，就会显示一个列表啦，就是SVN的svn status命令所显示的状态列表。</p>

<p>&nbsp;</p>

<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHbfbUwXxr23n6hyJgSPENdwiaqqvJ7RZa82b4ValdBTicEj89icV9K8L7A/0?wx_fmt=jpeg" /></p>

<p>&nbsp;</p>

<p>然后，选中你要提交的文件，按&nbsp;m&nbsp;键，你能够一次选中好几个。取消选中按&nbsp;u&nbsp;键。</p>

<p>按&nbsp;c&nbsp;键開始编辑提交凝视（Comment），例如以下图（绿色的是已经选中（按&nbsp;m&nbsp;键）要提交的文件）：</p>

<p>&nbsp;</p>

<p><img alt="" src="https://mmbiz.qlogo.cn/mmbiz/iaHL5mQLicPYNfWg1EC9icSWPWrvq5EUgLHlm27RdMA1dFrkYjhU0yRotrsqOSgHd6stQfmhKntzD27diaJD1x3Rkw/0?wx_fmt=jpeg" /><br />
&nbsp;</p>

<p>我这里输入了&ldquo;改动了帮助文档&rdquo;这一句凝视，完毕之后。按两次 &ldquo;C-c&rdquo;，就提交（commit）好了，很快捷。</p>

<p>&nbsp;</p>

<p>不知道SVN是什么的读者。能够百度一下，SVN是一个经常使用的版本号控制软件。其它的更先进的版本号控制系统有Git， Mercurial等。眼下所在公司不大。所以用SVN（集中式版本号控制系统）也方便，之前在其它公司用过Git和Mercurial（这两个是分布式版本号控 制系统）。</p>

<p>尝试一下Emacs吧，真的是&ldquo;神器&rdquo;！</p>

<p>谁用谁知道。用过都说好~</p>

<h2>程序猿联盟社区</h2>

<p>眼下有一个<strong>微信群</strong>和一个<strong>QQ群</strong>（微信群130人以上，QQ群460人以上），凡是对编程感兴趣的朋友都能够加，大家能够交流，学习，互动。讨论编写的程序的源码。编程问答等。</p>

<p>&nbsp;</p>

<p>微信群（程序猿联盟），加群请私信我（微信群人数超过100之后，不能通过扫描二维码增加了，仅仅能私信我，谢谢）</p>

<p>&nbsp;</p>

<p>QQ群（程序猿联盟），群号是&nbsp;<strong>413981577</strong></p>

<p>&nbsp;</p>

<p>百度贴吧 【<strong>程序猿联盟</strong>】 欢迎您增加，交流编程，讨论代码，共享资源。已经有非常多话题。</p>

<p>吧主就是小编。</p>

<p><a href="http://tieba.baidu.com/f?kw=%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%94%E7%9B%9F&amp;ie=utf-8" target="_blank" title="">http://tieba.baidu.com/f?kw=%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%94%E7%9B%9F&amp;ie=utf-8</a></p>

<p>点击左下角【<strong>阅读原文</strong>】就可以进入 【程序猿联盟】 百度贴吧</p>
