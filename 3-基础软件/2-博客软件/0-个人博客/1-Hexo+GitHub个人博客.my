<h1>基于Hexo+GitHub Page搭建免费个人博客教程</h1>

<h2>1. Hexo 介绍</h2>

<blockquote>
<p><a href="https://hexo.io/zh-cn/" target="_blank">Hexo</a>&nbsp;是基于<code>NodeJs</code>的静态博客框架，简单、轻量，其生成的静态网页可以托管在<code>Github</code>和<code>Heroku</code>上。</p>

<ul>
	<li>超快速度</li>
	<li>支持Markdown</li>
	<li>一键部署</li>
	<li>丰富的插件</li>
</ul>
</blockquote>

<h2>2. 搭建过程（重点）</h2>

<h2>前言</h2>

<p>在开始之前，可能很多人都是看到别人个人博客网站，追其如何实现才知是基于 Hexo+Github Page 或 jekyll + Github Page 搭建而成。</p>

<p>1、什么是 Github Page？</p>

<blockquote>
<p><strong>Github Pages&nbsp;</strong>是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在<strong>Github</strong>上，你可以选择使用<strong>Github Pages</strong>&nbsp;默认提供的域名<strong>github.io</strong>&nbsp;或者自定义域名来发布站点。</p>
</blockquote>

<p>2、选择jerryII还是Hexo？</p>

<blockquote>
<p>目前主流的静态博客框架是Jekyll和Hexo， Jekyll基于Ruby实现，安装Jekyll需要搭建Ruby环境，Hexo基于Node.Js实现。 这两个静态程序功能基本类似，两个程序都有博文预览功能，可以在本地启动服务，默认都使用Markdown语法，另外Jekyll是Github推荐的管理程序。</p>
</blockquote>

<p>这个教程讲述的是基于&nbsp;<strong>Hexo+Github Page</strong>&nbsp;免费搭建个人博客网站。</p>

<p>使用 github pages 服务搭建博客的好处有：</p>

<blockquote>
<ol>
	<li>全是静态文件，访问速度快；</li>
	<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
	<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
	<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
	<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
	<li>&hellip;&hellip;等等</li>
</ol>
</blockquote>

<p>其搭建过程大致可以分为以下几步：</p>

<ol>
	<li>
	<p>在 Github 创建对应仓库</p>

	<ol>
		<li>配置 Hexo 或 Jekyll 环境</li>
		<li>设置主题，安装评论等插件</li>
	</ol>
	</li>
</ol>

<p><strong>注：</strong>&nbsp;既然使用到 github 上服务，不用说，怎么也得知道 git 基本操作，如果还不会这个，请自行谷歌查找教程看下，也可以参看我写的：<a href="http://blog.csdn.net/u012195214/article/category/6868237" target="_blank">Git和Github 学习笔记</a>. 作为程序员如果不知道 Github 和 Git 操作也实在说不过去了。</p>

<p>好了，接下来开始我们的正式的搭建步骤吧！</p>

<h2>2.1 准备工作</h2>

<p>在开始之前，你必须已经：</p>

<blockquote>
<ul>
	<li>有一个 github 账号，没有的话去注册一个, 注册地址：<a href="https://github.com/" target="_blank">https://github.com/</a>；</li>
	<li>安装了node.js、npm，并了解相关基础知识；</li>
	<li>安装了git for windows（或者其它git客户端）</li>
</ul>
</blockquote>

<p>说明：</p>

<ol>
	<li>安装git （因为要给github上传文章）</li>
	<li>安装Node.js（因为Hexo是基于Node.js开发的）</li>
	<li>github：用来做博客的远程仓库、域名、服务器</li>
</ol>

<h2>2.2 环境搭建</h2>

<ol>
	<li>
	<p>安装 git： git 官网（<a href="https://git-scm.com/" target="_blank">https://git-scm.com/</a>）</p>

	<ul>
		<li>Windows: 直接下载和安装</li>
		<li>Mac：进入git网站下载和安装，或者进入<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank">这里</a>下载</li>
		<li>Ubuntu：打开终端复制粘贴命令&nbsp;<code>sudo apt-get install git-core</code></li>
	</ul>
	</li>
	<li>
	<p>安装 Node.js：进入官网（<a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>）</p>

	<p>下载对应的安装包，直接点击安装就好了。</p>
	</li>
</ol>

<h2>2.3 安装和配置Hexo</h2>

<p>上面的环境配置成功（Node.js和Git都安装好了）以后就可以使用<code>npm</code>安装Hexo了。</p>

<p>1、判断是否 node.js 和 git 安装成功，打开cmd命令行(win+r 输入cmd回车)分别执行：</p>

<pre>
<code>node -v
npm -v
git --version</code></pre>

<p>会得到相对应的版本信息（如图）</p>

<p><img alt="" src="http://upload-images.jianshu.io/upload_images/2858691-f73234814ab46cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" title="" /></p>

<p>如果都可以成功运行出现版本信息证明安装成功。</p>

<p>2、使用 npm 安装Hexo了。</p>

<pre>
<code>npm install -g hexo-cli</code></pre>

<p>然后打开cmd命令行(win+r 输入cmd回车)输入如下命令：等待自动安装完成后，输入：</p>

<blockquote>
<pre>
<code>npm install -g hexo-cli</code></pre>
</blockquote>

<p>等待自动安装完成后，输入：</p>

<pre>
<code>hexo -v</code></pre>

<p>输出了 hexo 版本号即为安装成功。</p>

<p>3、然后在本地目录创建一个文件夹，比如我创建的是一个名称为 &ldquo;Hexo&rdquo; 文件夹，然后cd到 Hexo文件夹，也就是进去这个文件夹，然后依次执行下面的命令：</p>

<pre>
<code>hexo init
npm install
hexo generate 或者 hexo s</code></pre>

<p>如果出现很多串代码的话，没有什么明显的错误就表示安装成功。</p>

<p>结果就是Hexo文件夹下面是这种结构：</p>

<p><img alt="hexo结构" src="http://img.blog.csdn.net/20171026183907021?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>然后启动本地这个服务（相当于开启了一个本地的服务器，会提示你拷贝url到浏览器）：</p>

<pre>
<code>hexo server 或者 hexo s</code></pre>

<ul>
	<li>1</li>
</ul>

<p>然后打开浏览器，输入<a href="http://localhost:4000/:4000/" target="_blank">http://localhost:4000/:4000/</a>&nbsp;出现下图，既证明Hexo安装成功。</p>

<p><img alt="" src="http://img.blog.csdn.net/20171026184647025?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p><strong>好的，显示的网站你可能看着不好看，现在我们更改一下主题。</strong></p>

<p>按<code>ctrl+c</code>关闭server。</p>

<p>比如想要更换为的主题是：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank">https://github.com/litten/hexo-theme-yilia</a></p>

<blockquote>
<p>说明：关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。</p>

<p>可以通过两种方式安装，第一个 git 操作下载压缩包，第二个直接在仓库页面下载压缩包。</p>
</blockquote>

<p>打开终端窗口，输入一下命令<code>cd themes</code>，将目录切换到Hexo文件夹内的themes文件夹内</p>

<p>然后把这个主题从github网站上clone下来</p>

<pre>
<code>git clone https://github.com/litten/hexo-theme-yilia.git</code></pre>

<ul>
	<li>1</li>
</ul>

<p>等待克隆完成，你会在themes文件夹下看到新的主题包，将这个主题包重命名为yilla.</p>

<p>然后打开Hexo文件夹下面的<code>_config.yml</code>文件，修改里面的<code>theme</code>为yilia.</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026185729709?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>重新打开server，浏览器输入<a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a>&nbsp;是不是看到主题已经变了！</p>

<p><strong>好了，到此为止我们已经完成了本地Hexo的安装和配置。</strong></p>

<h2>2.3 配置github仓库</h2>

<h3>2.3.1 创建仓库</h3>

<p>github官网 (<a href="http://www.github.com/" target="_blank">http://www.github.com</a>)，注册账号，然后创建一个的放博客文章的仓库。</p>

<p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就&nbsp;<a href="http://test.github.io/" target="_blank">http://test.github.io</a>&nbsp;了，是不是很方便？</p>

<p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>

<p>几个注意的地方：</p>

<blockquote>
<ol>
	<li>注册的邮箱一定要验证，否则不会成功；</li>
	<li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名；</li>
	<li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久；</li>
</ol>
</blockquote>

<p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p>

<p>注意的地方：</p>

<blockquote>
<ol>
	<li>所有的配置&ldquo;:&rdquo;符号后面都要带空格，否则执行本地测试直接失败。</li>
	<li>language是设置语言。zh-Hans是中文。</li>
	<li>如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。</li>
</ol>
</blockquote>

<h3>2.3.1 配置 SSH</h3>

<p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全</p>

<p>了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>

<blockquote>
<ul>
	<li>
	<p>如果你电脑上以前用过git往github上传过代码，并且配置的用户名和你github账号一致，那么你的</p>

	<p>github就算没有设置SSH，也可以上传成功，只需要把Hexo的配置文件配置为HTTP方式上传文章。</p>
	</li>
	<li>
	<p>如果你配置上传的账号和github账号不同，那么你可以把这个账号添加到你博客仓库的Collaborators上</p>

	<p>面，也可以上传文章。</p>
	</li>
</ul>
</blockquote>

<p>如果你不懂上面说的啥意思，不用管那么多，那就老老实实配置SSH吧！方法如下（照搬了 stormzhang 文章）：</p>

<blockquote>
<ol>
	<li>
	<p>SSH</p>

	<p>你拥有了一个 GitHub 账号之后，就可以自由的 clone 或者下载其他项目，也可以创建自己的项目，但是</p>

	<p>你没法提交代码。仔细想想也知道，肯定不可能随意就能提交代码的，如果随意可以提交代码，那么</p>

	<p>GitHub 上的项目岂不乱了套了，所以提交代码之前一定是需要某种授权的，而 GitHub 上一般都是基于</p>

	<p>SSH 授权的。那么什么是 SSH 呢？ 简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前</p>

	<p>是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在</p>

	<p>GitHub 提交代码的第一步就是要先添加 SSH key 配置。</p>
	</li>
	<li>
	<p>生成SSH</p>

	<p>Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH&nbsp;<br />
	的。大家可以在终端（win下在 Git Bash 里） 输入 ssh 如果出现以下提示证明你本机已经安&nbsp;<br />
	装 SSH， 否则请搜索自行安装下。</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026192540136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

	<p>紧接着输入 ssh-keygen -t rsa ，什么意思呢？就是指定 rsa 算法生成密钥，接着连续三个回车键（不需</p>

	<p>要输入密码） ，然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公</p>

	<p>钥。</p>

	<p>这两文件默认分别在如下目录里生成：Linux/Mac 系统 在 ~/.ssh 下，win系统在 /c/Documents and</p>

	<p>Settings/username/.ssh 下，都是隐藏文件，相信你们有办法查看的。</p>

	<p>接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub</p>

	<p>上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。</p>
	</li>
	<li>
	<p>GitHub 上添加 SSH key</p>

	<p>第一步先在 GitHub 上的设置页面，点击最左侧 SSH and GPG keys ：</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193045227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

	<p>然后点击右上角的 New SSH key 按钮：</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193149594?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

	<p>需要做的只是在 Key 那栏把 id_rsa.pub 公钥文件里的内容复制粘贴进去就可以了（上述示例</p>

	<p>为了安全粘贴的公钥是无效的） ，Title 那栏不需要填写，点击 Add SSH key 按钮就ok了。</p>

	<p>这里提醒下，怎么查看 id_rsa.pub 文件的内容？</p>

	<p>Linux/Mac 用户执行以下命令：</p>

	<pre>
<code>cd ~/.ssh
cat id_rsa.pub</code></pre>

	<ul>
		<li>1</li>
		<li>2</li>
	</ul>

	<p>Windows用户，设置显示隐藏文件，可以使用 EditPlus 或者 Sublime 打开复制就行了。</p>

	<p>SSH key 添加成功之后，输入&nbsp;<code>ssh -T git@github.com</code>&nbsp;进行测试，如果出现以下提示证明添</p>

	<p>加成功了。</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193448307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>
	</li>
</ol>
</blockquote>

<p><strong>SSH配置好了，下面配置你的本地Hexo</strong></p>

<p>打开Hexo目录下的<code>_config.yml</code>，拉倒最下面。配置如下：</p>

<pre>
<code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy: 
  type: git
  repository: https://github.com/test/test.github.io
  branch: master</code></pre>

<blockquote>
<p>备注：在hexo3.x版本下，这里的type应该填git，不是github；另外冒号后面都有一个英文的空格，不然会报错的。</p>
</blockquote>

<p>只要把上图的<code>test</code>改为你自己的 github 用户名就可以了。保存，切换到 hexo 目录，一次执行下面的命令：</p>

<pre>
<code> hexo clean
 hexo g
 hexo deploy 或 hexo d</code></pre>

<p>如果出现下图既证明已经没有出现问题。如果出现失败的提示可以把上面的配置改为下面这种使用SSH方式的提交，把用户名改为你自己的用户名。</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193936602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>第一次上传可能会让你输入git的用户名和密码。如果成功的话在浏览器输入(<a href="http://username.github.io/" target="_blank">http://username.github.io</a>) 就可以访问你的博客了，把 username 替换为你自己的用户名。</p>

<p><strong>到这里为止，你已经完成了自己博客的创建了！</strong></p>

<h3>2.3.2 绑定域名</h3>

<p>你不绑定域名肯定也是可以的，就用默认的&nbsp;<code>xxx.github.io</code>&nbsp;来访问(xxx 为你自己的用户名)，如果你想更个性一点，想拥有一个属于自己的域名，那也是ok的。首先你要注册一个域名，域名注册以前总是推荐去<code>godaddy</code>，现在觉得其实国内的&nbsp;<a href="https://wanwang.aliyun.com/?utm_content=se_980922&amp;gclid=EAIaIQobChMIqM6Gp5yO1wIVBQUqCh0grwHUEAAYASAAEgJzX_D_BwE" target="_blank">阿里云</a>&nbsp;也挺不错的，价格也不贵，毕竟是大公司，放心！我买了一个后缀为<code>.me</code>域名，一年才13块钱。</p>

<p>绑定域名分2种情况：带www和不带www的。</p>

<p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下<code>你的用户名.github.io</code>的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向<code>你的用户名.github.io</code>，这样可以保证无论是否添加www都可以访问，如下：</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026195157662?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p>

<blockquote>
<ul>
	<li>如果你填写的是没有www的，比如 mygit.me，那么无论是访问&nbsp;<a href="http://www.mygit.me/" target="_blank">http://www.mygit.me</a>&nbsp;还是&nbsp;<a href="http://mygit.me/" target="_blank">http://mygit.me</a>&nbsp;，都会自动跳转到&nbsp;<a href="http://mygit.me/" target="_blank">http://mygit.me</a></li>
	<li>如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问&nbsp;<a href="http://www.mygit.me/" target="_blank">http://www.mygit.me</a>&nbsp;还是&nbsp;<a href="http://mygit.me/" target="_blank">http://mygit.me</a>&nbsp;，都会自动跳转到&nbsp;<a href="http://www.mygit.me/" target="_blank">http://www.mygit.me</a></li>
	<li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问&nbsp;<a href="http://abc.mygit.me/" target="_blank">http://abc.mygit.me</a>&nbsp;没问题，但是访问<a href="http://mygit.me/" target="_blank">http://mygit.me</a>，不会自动跳转到&nbsp;<a href="http://abc.mygit.me/" target="_blank">http://abc.mygit.me</a></li>
</ul>
</blockquote>

<p>另外说一句，在你绑定了新域名之后，原来的<code>你的用户名.github.io</code>并没有失效，而是会自动跳转到你的新名。</p>

<h3>2.3.3 使用Hexo写博客</h3>

<p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>

<p>注意事项：</p>

<blockquote>
<ol>
	<li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</li>
	<li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li>
	<li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li>
</ol>
</blockquote>

<p>常用命令：</p>

<pre>
<code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本</code></pre>

<p>缩写：</p>

<pre>
<code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy</code></pre>

<p>组合命令：</p>

<pre>
<code>hexo s -g #生成并本地预览
hexo d -g #生成并上传</code></pre>

<h4>写文章</h4>

<p>定位到我们的hexo根目录，执行命令：</p>

<pre>
<code>hexo new &#39;my-first-blog&#39;</code>hexo会帮我们在<code>_posts</code><span style="font-family:sans-serif,Arial,Verdana,&quot;Trebuchet MS&quot;">下生成相关md文件：</span></pre>

<p>我们只需要打开这个文件就可以开始写博客了，默认生成标题、时间等内容。当然你也可以直接自己新建md文件</p>

<p>件，用这个命令的好处是帮我们自动生成了时间。</p>

<p>一般完整格式如下：</p>

<pre>
<code>---
title: postName #文章页面上的显示名称，一般是中文
date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: 默认分类 #分类
tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格
description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
---

以下是正文</code></pre>

<p>细的资料可以参看这篇文章，我觉得写得非常棒：&nbsp;<br />
<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank">使用hexo+github搭建免费个人博客详细教程</a></p>

<p><strong>其他参考：</strong></p>

<ul>
	<li><a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank">使用hexo+github搭建免费个人博客详细教程</a></li>
	<li><a href="http://blog.csdn.net/working_harder/article/details/52437783" target="_blank">使用github+Hexo人人都能拥有一个美美的博客</a></li>
	<li><a href="http://www.cnblogs.com/binyue/p/6516105.html" target="_blank">使用Github Pages和Hexo构建个人博客</a></li>
	<li><a href="http://www.jianshu.com/p/8ec1b1e5d3b2" target="_blank">使用Hexo+GitHub搭建个人博客</a></li>
	<li><a href="http://www.cnblogs.com/MuYunyun/p/5927491.html" target="_blank">基于hexo+github搭建一个独立博客</a></li>
	<li>
	<p><a href="http://luckykun.com/work/2016-04-23/heoll-hexo.html" target="_blank">hexo搭建属于自己的博客</a></p>
	</li>
	<li>
	<p><a href="http://www.cnblogs.com/jarson-7426/p/5515870.html" target="_blank">hexo博客进阶－相册和独立域名</a></p>
	</li>
	<li><a href="http://alaughing.top/2017/01/22/hexo%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%A2%E5%A4%B1%EF%BC%8C%E5%8F%AA%E5%89%A9GitHub%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E6%95%91/" target="_blank">hexo本地文件丢失，只剩GitHub生成的文章，如何自救?</a></li>
	<li><a href="http://www.cnblogs.com/imapla/p/5533000.html" target="_blank">Hexo 博客部署到 GitHub</a></li>
	<li><a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank">github设置添加SSH</a></li>
</ul>

<h2>3. 主题</h2>

<h2>3.1 主题搜索</h2>

<ul>
	<li><a href="https://hexo.io/themes/" target="_blank">Hexo 官网主题</a></li>
	<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=hexo-theme&amp;type=" target="_blank">GitHub 上搜主题</a></li>
	<li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank">GitHub Hexo 主题仓库</a></li>
</ul>

<h2>3.2 制作主题</h2>

<ul>
	<li><a href="http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/" target="_blank">从零开始制作 Hexo 主题</a></li>
	<li><a href="https://segmentfault.com/a/1190000006057336" target="_blank">写一个自己的Hexo主题</a></li>
</ul>

<h2>3.3 主题收藏</h2>

<p>自己觉得还喜欢的主题，记录在这，下次可以考虑更换使用。</p>

<ul>
	<li>
	<p>BlueLake：&nbsp;<br />
	demo：<a href="http://chaoo.oschina.io/" target="_blank">http://chaoo.oschina.io/</a></p>

	<p>GitHub：<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank">https://github.com/chaooo/hexo-theme-BlueLake</a></p>
	</li>
	<li>
	<p>yilia：&nbsp;<br />
	demo：<a href="http://litten.me/" target="_blank">http://litten.me/</a></p>

	<p>GitHub：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank">https://github.com/litten/hexo-theme-yilia</a></p>
	</li>
	<li>
	<p>material</p>

	<p>demo：<a href="https://blog.viosey.com/" target="_blank">https://blog.viosey.com/</a></p>

	<p>GitHub：<a href="https://github.com/viosey/hexo-theme-material" target="_blank">https://github.com/viosey/hexo-theme-material</a></p>
	</li>
	<li>
	<p>next&nbsp;<br />
	demo：<a href="http://notes.iissnan.com/" target="_blank">http://notes.iissnan.com/</a></p>

	<p>GitHub：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank">https://github.com/iissnan/hexo-theme-next</a></p>
	</li>
	<li>
	<p>believe&nbsp;<br />
	demo：<a href="http://www.tianhao.site/blog/" target="_blank">http://www.tianhao.site/blog/</a></p>

	<p>GitHub：<a href="https://github.com/th720309/hexo-theme-believe" target="_blank">https://github.com/th720309/hexo-theme-believe</a></p>
	</li>
	<li>
	<p>olive</p>

	<p>demo：<a href="http://hktkdy.com/" target="_blank">http://hktkdy.com/</a></p>

	<p>GitHub：<a href="https://github.com/zhangolve/hexo-theme-olive" target="_blank">https://github.com/zhangolve/hexo-theme-olive</a></p>
	</li>
	<li>
	<p>mdui</p>

	<p>demo：<a href="https://blog.halyul.com/" target="_blank">https://blog.halyul.com/</a></p>

	<p>GitHub：<a href="https://github.com/Halyul/hexo-theme-mdui" target="_blank">https://github.com/Halyul/hexo-theme-mdui</a></p>
	</li>
	<li>
	<p>raytaylorism</p>

	<p>demo：<a href="http://raytaylorlin.com/" target="_blank">http://raytaylorlin.com/</a></p>

	<p>GitHub：<a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank">https://github.com/raytaylorlin/hexo-theme-raytaylorism</a></p>
	</li>
	<li>
	<p>ylion</p>

	<p>demo：<a href="http://note.geekaholic.cn/" target="_blank">http://note.geekaholic.cn/</a></p>

	<p>GitHub：<a href="https://github.com/GeekaholicLin/hexo-theme-ylion" target="_blank">https://github.com/GeekaholicLin/hexo-theme-ylion</a></p>
	</li>
</ul>

<h2>4. 问题</h2>

<ol>
	<li>
	<p>如何访问不带www的域名？</p>

	<p>参考：<a href="http://www.jianshu.com/p/d1840c71a57c" target="_blank">如何访问不带www的域名</a></p>
	</li>
	<li>
	<p>Hexo中播放网易云音乐的实践</p>

	<p>参考：<a href="http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/" target="_blank">Hexo中播放网易云音乐的实践</a></p>
	</li>
	<li>
	<p>hexo部署失败 ERROR Deployer not found: git</p>

	<p>参考：<a href="http://blog.sina.com.cn/s/blog_e4c513fe0102w3fg.html" target="_blank">hexo部署失败 ERROR Deployer not found: git</a></p>
	</li>
	<li>
	<p>有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？</p>

	<p>参考：<a href="https://www.zhihu.com/question/38219432" target="_blank">有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错</a></p>
	</li>
</ol>

<h2>5. 关于 Hexo 最常用的几个命令</h2>

<p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>

<ul>
	<li>
	<p>hexo s</p>

	<blockquote>
	<p>启动本地服务器，用于预览主题。默认地址：&nbsp;<a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a></p>

	<p>hexo s 是 hexo server 的缩写，命令效果一致；</p>

	<p>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</p>
	</blockquote>
	</li>
	<li>
	<p>hexo new</p>

	<blockquote>
	<p>hexo new &ldquo;学习笔记 六&rdquo;，新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</p>
	</blockquote>
	</li>
	<li>
	<p>hexo d</p>

	<blockquote>
	<p>自动生成网站静态文件，并部署到设定的仓库。</p>

	<p>hexo d 是 hexo deploy 的缩写，命令效果一致。</p>
	</blockquote>
	</li>
	<li>
	<p>hexo clean</p>

	<blockquote>
	<p>清除缓存文件 db.json 和已生成的静态文件 public 。网站显示异常时可以执行这条命令试试。</p>
	</blockquote>
	</li>
	<li>
	<p>hexo g</p>

	<blockquote>
	<p>hexo g 是 hexo generate 的缩写，命令效果一致。</p>

	<p>生成网站静态文件到默认设置的 public 文件夹。便于查看网站生成的静态文件或者手动部署网站；如果使用自动部署，不需要先执行该命令。</p>
	</blockquote>
	</li>
	<li>
	<p>hexo new page</p>

	<blockquote>
	<p>hexo new page aboutme新建一个标题为 aboutme 的页面，默认链接地址为主页地址/aboutme/</p>
	</blockquote>
	</li>
</ul>

<p><strong>注：</strong>&nbsp;标题可以为中文，但一般习惯用英文；</p>

<p>页面标题和文章一样可以随意修改；</p>

<p>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</p>
