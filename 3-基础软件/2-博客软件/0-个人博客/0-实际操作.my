<h1>实际搭建个人博客</h1>

<h2>必备软件安装：</h2>

<p>git安装 <a href="https://git-scm.com/downloads">官网下载</a></p>

<p>nodejs安装 <a href="https://nodejs.org/en/">官网下载</a></p>

<h2>windows 10 下配置安装node.js</h2>

<p>在去年就自己配置安装过node.js，但是使用npm安装模块时安装成功后调用require(&#39;module-name&#39;)时却一直报错说命令找不到，网上也说都是环境变量没有配置好，我也是同样这样怀疑，可是找了很多教程都没有找到解决方法，后来就放弃配置了。</p>

<p>今天自己又因为学习的需要就重新安装配置了node.js，意外地却成功了。也发现了之前安装配置一直失败的原因，因此写下这篇博客记录一下。</p>

<hr />
<h2>安装NodeJS</h2>

<ol>
	<li>
	<p>登录node英文版官网：<a href="https://nodejs.org/en/" target="_blank">https://nodejs.org/en/</a>&nbsp;中文版官网：<a href="http://nodejs.cn/" target="_blank">http://nodejs.cn/</a>&nbsp;选择你想安装的node版本，一路选择默认安装，最好选择自己比较熟悉和清楚的安装路径（后续环境配置需要用到安装路径），即可。</p>
	</li>
	<li>
	<p>npm的安装：新版的Node已经集成npm，所以在安装node时npm也一并安装了。</p>
	</li>
	<li>
	<p>常规的node的搭建到此已完成，测试node可以在cmd输入<code>node</code>进入node开发模式</p>
	</li>
	<li>
	<p>安装完成检测安装版本：打开命令行cmd，<br />
	检测node输入命令：<code>node -v</code><br />
	检测npm输入命令：<code>npm -v</code></p>
	</li>
	<li>
	<p>退出命令行模式：输入命令&nbsp;<code>.exit</code></p>
	</li>
</ol>

<hr />
<h2>配置NodeJS</h2>

<p>npm作为NodeJS的模块管理，因此我们最好系统地安装配置模块。</p>

<p>1.配置npm的全局模块存放路径以及cache。在nodejs的安装主目录中新建文件夹：node_cache和node_global（此处我的安装路径是D:\a_env\nodejs\installed） 这两个文件夹与原有的 <strong>node_modules</strong> 文件夹并列。</p>

<p>2.在cmd中输入命令：</p>

<blockquote>npm config set prefix &ldquo;D:\a_env\nodejs\installed\node_global&rdquo;<br />
npm config set cache &ldquo;D:\a_env\nodejs\installed\node_cache&rdquo;</blockquote>

<p>3.现在可尝试安装模块：选择安装express模块在命令行中输入：npm install express -g (-g表示全局安装即安装到node_global目录下)</p>

<p>4.查看系统环境变量：鼠标右键单击我的电脑&rarr;属性&rarr;高级系统设置&rarr;环境变量&rarr;在系统变量下新建NODE_PATH并输入&ldquo;D:\a_env\nodejs\installed\node_global\node_modules&rdquo;</p>

<p>5.以上步骤完成则可重新开启cmd，记得是重新开启一个cmd来进行测试，如果在设置环境变量之前你已经开了一个cmd，在原来的cmd内测试结果是不准确的。</p>

<p>测试方法：输入：</p>

<blockquote>node<br />
require(&#39;express&#39;)</blockquote>

<p>测试node模块的全局路径是否配置正确。</p>

<p>如报错则表明环境配置错误，再次核对与以上配置无误，则可尝试在用户环境变量下新建node_path，输入&ldquo;E:\Program Files\nodejs\node_global\node_modules&rdquo;，再重新开启新的cmd进行以上测试步骤</p>

<p>6.至此node的环境配置就完成了，你可以愉快地玩耍node大法了</p>

<h2>安装hexo</h2>

<h3>注意事项</h3>

<p>安装之前先来说几个注意事项：</p>

<ol>
	<li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</li>
	<li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li>
	<li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li>
</ol>

<h3>安装步骤</h3>

<p>直接在cmd 窗口下执行</p>

<blockquote>npm install -g hexo</blockquote>

<p>安装不行的话，试试换安装源</p>

<blockquote>npm config set registry https://registry.npm.taobao.org</blockquote>

<p>注：npm 命令在nodejs安装后及加入了系统命令里了。</p>

<h3>将hexo配置进环境变量path</h3>

<p>注意这里有两个地方都有hexo文件，</p>

<p>D:\a_env\nodejs\installed\node_global 下面有hexo和hexo.cmd</p>

<p>D:\a_env\nodejs\installed\node_global\node_modules\hexo\bin 下面也有 hexo</p>

<p>路径加上第二个无效，要加上第一个！</p>

<h3>初始化</h3>

<p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>D:\tomcat-6\webapps\NoteBook\datas\notes\6-Show_blogs\hexo_blogs</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>

<pre>
<code>$ cd D:\tomcat-6\webapps\NoteBook\datas\notes\6-Show_blogs\hexo_blogs
$ hexo init</code></pre>

<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_115922_773_1148.png" /></p>

<pre>
<code>$ hexo g # 生成
$ hexo s # 启动服务</code></pre>

<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_120700_028_2426.png" /></p>

<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问&nbsp;<a href="http://localhost:4000/">http://localhost:4000</a>&nbsp;即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p>

<p><a href="http://blog.liuxianan.com/windows-port-bind.html">http://blog.liuxianan.com/windows-port-bind.html</a></p>

<p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_132443_202_6848.png" /></p>

<h2>修改主题</h2>

<p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是&nbsp;<a href="https://hexo.io/themes/">官方主题</a>。</p>

<p>个人比较喜欢的2个主题：<a href="https://github.com/pinggod/hexo-theme-jekyll">hexo-theme-jekyll</a>&nbsp;和&nbsp;<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>。</p>

<p>首先下载这个主题：</p>

<pre>
<code>$ cd /f/Workspaces/hexo/
$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre>

<p>下载后的主题都在这里：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_134500_245_0912.png" /></p>

<p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p>

<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p>

<h2>上传之前</h2>

<p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p>

<h2>上传到github</h2>

<p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p>

<h3><strong><code><span style="font-family:sans-serif,Arial,Verdana,Trebuchet MS">一、配置SSH</span></code></strong></h3>

<ol>
	<li>
	<p>SSH</p>

	<p>你拥有了一个 GitHub 账号之后，就可以自由的 clone 或者下载其他项目，也可以创建自己的项目，但是</p>

	<p>你没法提交代码。仔细想想也知道，肯定不可能随意就能提交代码的，如果随意可以提交代码，那么</p>

	<p>GitHub 上的项目岂不乱了套了，所以提交代码之前一定是需要某种授权的，而 GitHub 上一般都是基于</p>

	<p>SSH 授权的。那么什么是 SSH 呢？ 简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前</p>

	<p>是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在</p>

	<p>GitHub 提交代码的第一步就是要先添加 SSH key 配置。</p>
	</li>
	<li>
	<p>生成SSH</p>

	<p>Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH&nbsp;<br />
	的。大家可以在终端（win下在 Git Bash 里） 输入 ssh 如果出现以下提示证明你本机已经安&nbsp;<br />
	装 SSH， 否则请搜索自行安装下。</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026192540136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:149px; width:500px" title="" /></p>

	<p>紧接着输入 ssh-keygen -t rsa ，什么意思呢？就是指定 rsa 算法生成密钥，接着连续三个回车键（不需</p>

	<p>要输入密码） ，然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公</p>

	<p>钥。</p>

	<p>这两文件默认分别在如下目录里生成：Linux/Mac 系统 在 ~/.ssh 下，win系统在 C:\Documents and Settings\thinkpad\.ssh下，都是隐藏文件，相信你们有办法查看的（直接在地址里输入）。</p>

	<p>接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub</p>

	<p>上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。</p>
	</li>
	<li>
	<p>GitHub 上添加 SSH key</p>

	<p>第一步先在 GitHub 上的设置页面，点击最左侧 SSH and GPG keys ：</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193045227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:313px; width:600px" title="" /></p>

	<p>然后点击右上角的 New SSH key 按钮：</p>

	<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193149594?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

	<p>需要做的只是在 Key 那栏把 id_rsa.pub 公钥文件里的内容复制粘贴进去就可以了（上述示例</p>

	<p>为了安全粘贴的公钥是无效的） ，Title 那栏不需要填写，点击 Add SSH key 按钮就ok了。</p>

	<p>这里提醒下，怎么查看 id_rsa.pub 文件的内容？</p>

	<p>Linux/Mac 用户执行以下命令：</p>

	<pre>
<code>cd ~/.ssh
cat id_rsa.pub

</code>Windows用户，设置显示隐藏文件，可以使用 EditPlus 或者 Sublime 打开复制就行了。</pre>

	<p>SSH key 添加成功之后，输入&nbsp;<code>ssh -T git@github.com</code>&nbsp;进行测试，如果出现以下提示证明添</p>

	<p>加成功</p>
	</li>
	<li>
	<p>如果不成功，这里需要注意一点：Are you sure you want to continue connecting (yes/no)? <strong>yes</strong></p>

	<p><strong>后面要输入yes 输入 y 是不行滴。</strong></p>
	<img alt="这里写图片描述" src="http://img.blog.csdn.net/20171026193448307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjE5NTIxNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:64px; width:600px" title="" /></li>
</ol>

<p>&nbsp;</p>

<h3><strong>二、配置<code>_config.yml</code>中有关deploy的部分：</strong></h3>

<p>正确写法：</p>

<pre>
<code>deploy:
  type: git
  repository: git@github.com:liuxianan/liuxianan.github.io.git
  branch: master</code></pre>

<p>错误写法：</p>

<pre>
<code>deploy:
  type: github
  repository: https://github.com/liuxianan/liuxianan.github.io.git
  branch: master</code></pre>

<p>后面一种写法是hexo2.x的写法，现在已经不行了，</p>

<h2>三、执行上传命名</h2>

<p>到博客根目录下，右击 -&gt; git bash here 运行git命令。</p>

<p>无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>

<pre>
<code>Deployer not found: github 或者 Deployer not found: git</code></pre>

<p>原因是还需要安装一个插件：</p>

<pre>
<code>npm install hexo-deployer-git --save</code></pre>

<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>

<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_140441_769_5024.png" /></p>

<h2>保留CNAME、README.md等文件</h2>

<p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p>

<p><img src="http://image.liuxianan.com/201608/20160818_141037_580_8035.png" /></p>

<p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p>

<h2>Yilia 主题 移动端适配</h2>

<p>在hexo根目录安装插件：</p>

<p>npm i hexo-generator-json-content --save</p>

<p>修改_config.yml 文件</p>

<p>添加：</p>

<blockquote>
<p>jsonContent:<br />
&nbsp; meta: false<br />
&nbsp; pages: false<br />
&nbsp; posts:<br />
&nbsp; &nbsp; title: true<br />
&nbsp; &nbsp; date: true<br />
&nbsp; &nbsp; path: true<br />
&nbsp; &nbsp; text: false<br />
&nbsp; &nbsp; raw: false<br />
&nbsp; &nbsp; content: false<br />
&nbsp; &nbsp; slug: false<br />
&nbsp; &nbsp; updated: false<br />
&nbsp; &nbsp; comments: false<br />
&nbsp; &nbsp; link: false<br />
&nbsp; &nbsp; permalink: false<br />
&nbsp; &nbsp; excerpt: false<br />
&nbsp; &nbsp; categories: false<br />
&nbsp; &nbsp; tags: true</p>
</blockquote>

<h2>常用hexo命令</h2>

<p>常见命令</p>

<pre>
<code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本</code></pre>

<p>缩写：</p>

<pre>
<code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy</code></pre>

<p>组合命令：</p>

<pre>
<code>hexo s -g #生成并本地预览
hexo d -g #生成并上传</code></pre>

<h2>_config.yml</h2>

<p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p>

<p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p>

<h2>写博客</h2>

<p>定位到我们的hexo根目录，执行命令：</p>

<pre>
<code>hexo new &#39;my-first-blog&#39;</code></pre>

<p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p>

<p><img src="http://image.liuxianan.com/201608/20160823_183047_352_1475.png" /></p>

<p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p>

<p><img src="http://image.liuxianan.com/201608/20160823_183325_470_9306.png" /></p>

<p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p>

<p>一般完整格式如下：</p>

<pre>
<code>---
title: postName #文章页面上的显示名称，一般是中文
date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: 默认分类 #分类
tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格
description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
---

以下是正文</code></pre>

<p>那么<code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>有什么区别呢？</p>

<pre>
<code>hexo new page &quot;my-second-blog&quot;</code></pre>

<p>生成如下：</p>

<p><img src="http://image.liuxianan.com/201608/20160823_184852_854_6502.png" /></p>

<p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p>

<h3>写博客工具</h3>

<p>那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。</p>

<h3>如何让博文列表不显示全部内容</h3>

<p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>

<p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p>

<pre>
<code># 前言

使用github pages服务搭建博客的好处有：

1. 全是静态文件，访问速度快；
2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；
3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；

&lt;!--more--&gt;

4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；
5. 博客内容可以轻松打包、转移、发布到其它平台；
6. 等等；</code></pre>

<p>最终效果：</p>

<p><img src="http://image.liuxianan.com/201608/20160823_184633_653_1893.png" /></p>

<h1>最终效果</h1>

<p>可以访问我的git博客来查看效果：&nbsp;<a href="http://mygit.me/">http://mygit.me</a></p>

<p>不过呢，其实这个博客我只是拿来玩一玩的，没打算真的把它当博客，因为我已经有一个自己的博客了，哈哈！正因如此，本文仅限入门学习，关于hexo搭建个人博客的更高级玩法大家可以另找教程。</p>

<h1>参考</h1>

<p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html">http://www.cnblogs.com/zhcncn/p/4097881.html</a></p>

<p><a href="http://www.jianshu.com/p/05289a4bc8b2">http://www.jianshu.com/p/05289a4bc8b2</a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>
