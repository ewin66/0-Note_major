<h1>使用 GitHub, Jekyll 打造自己的免费独立博客</h1>

<p><a href="https://github.com/" target="_blank">GitHub</a>是一个代码托管网站，现在很多开源项目都放在GitHub上。 利用GitHub，可以让全球各地的程序员们一起协作开发。GitHub 提供了一种功能，叫&nbsp;<a href="https://help.github.com/categories/20/articles" target="_blank">GitHub Pages</a>, 利用这个功能，我 们可以为项目建立网站，当然，这也意味着我们可以通过 GitHub Pages 建立自己的网站。</p>

<p><a href="http://jekyllrb.com/" target="_blank">Jekyll</a>是一个简单的，针对博客设计的静态网站生成器。使用 GitHub 和 Jekyll，我们可以打造自己的独立博客，你可以自由地定制网站的风格，并且这 一切都是免费的。</p>

<p>这是我在GitHub上自己建立的<a href="http://minixalpha.github.io/" target="_blank">博客</a>&nbsp;及<a href="https://github.com/minixalpha/minixalpha.github.io" target="_blank">源代码</a>&nbsp;（两个分支），在下文的讲解中，你可以随时查看博客的源代码，以便有直观的认识。</p>

<p>网站截图：</p>

<p><img alt="" src="http://img.blog.csdn.net/20140215230442406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>

<h2>入门指引</h2>

<p>GitHub Pages 的&nbsp;<a href="http://pages.github.com/" target="_blank">主页</a>&nbsp;提供了一个简单的入门指引，阅读并 操作一下，会有一个直观简单的认识。</p>

<p>阮一峰的文章《<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank">搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门</a>》是使用 GitHub 和 Jekyll 搭建独立博客非常好的入门文章，强烈建议先阅读并操作一遍。</p>

<h2>建立自己的博客</h2>

<p>在学习完阮一峰同学的文章后，你就已经有能力搭建自己的独立博客了，但是这个博客 只有最基本的功能，并且也不好看。这时候，你面临几个选择:</p>

<ol>
	<li>完全自己定制博客</li>
	<li>找一份框架，修改后使用</li>
	<li>从GitHub上fork别人的博客代码，在其中添加自己的文章</li>
</ol>

<p>如果选择 2, 那么&nbsp;<a href="http://jekyllbootstrap.com/" target="_blank">jekyll-bootstrap</a>是一个选择。&nbsp;</p>

<p>如果选择 3, 那么自己Google一下&nbsp;<code>github.io 博客</code>&nbsp;能找到不少博客,去fork,然后修改一下就好。 最近有一个&nbsp;<a href="https://github.com/barryclark/jekyll-now" target="_blank">jekyll-now</a>，在 GitHub 上已经获取了 1000+ 的fork，可以关注一下。这个项目的特点是，所有操作都是通过网站进行的，不需要懂命令行。另外， 我自己也有一个非常简洁的项目，也不需要懂命令行，直接通过网页操作，就可以有一个自己的博客了。如果只需要这一个简单的博客，可以直接看最后一节:<a href="http://blog.csdn.net/on_1y/article/details/19259435#t8" target="_blank">一个极简风格的博客</a>。</p>

<p>如果选择 1, 那么可以好好看看后文的内容。</p>

<h2>GitHub + Jekyll 工作机制</h2>

<ul>
	<li>机制一&nbsp;</li>
</ul>

<ol>
	<li>&nbsp;&nbsp;简单地说，你在 GitHub 上有一个账号，名为<code>username</code>(任意)， 有一个项目，名为&nbsp;<code>username.github.io</code>(固定格式，username与账号名一致)， 项目分支名为&nbsp;<code>master</code>(固定)，这个分支有着类似下面的 目录结构:</li>
</ol>

<pre>
<code>.
├── index.html
├── _config.yml
├── assets
│&nbsp;&nbsp; ├── blog-images
│&nbsp;&nbsp; ├── css
│&nbsp;&nbsp; ├── fonts
│&nbsp;&nbsp; ├── images
│&nbsp;&nbsp; └── javascripts
├── _includes
├── _layouts
├── _plugins
├── _posts
└── _site
</code></pre>

<p>这样，当你访问&nbsp;<code>http://username.github.io/</code>时，GitHub 会使用 Jekyll 解析 用户&nbsp;<code>username</code>名下的<code>username.github.io</code>项目中，分支为<code>master</code>&nbsp;的源代码，为你构建一个静态网站，并将生成的&nbsp;<code>index.html</code>&nbsp;展示给你。</p>

<p>关于这个目录更多的内容，我们还不需要关心，如果你好奇心比较重，可以先看 后文<code>源代码</code>一节。</p>

<p>看完上面的解释，你可能会有一些疑问，因为按照上面的说法，一个用户只能有一个 网站，那我有很多项目，每个项目都需要一个项目网站，该怎么办呢？另外，在阮一峰 同学的文章中，特别提到，分支名应该为&nbsp;<code>gh-pages</code>，这又是怎么回事呢？</p>

<p>原来，GitHub认为，一个GitHub账号对应一个用户或者一个组织，GitHub会 给这个用户分配一个域名：<code>username.github.io</code>，当用户访问这个域名时， GitHub会去解析<code>username</code>用户下，<code>username.github.io</code>项目的<code>master</code>分支， 这与我们之前的描述一致。</p>

<p><br />
另外，GitHub还为每个项目提供了域名，例如，你有一个项目名为<code>blog</code>， GitHub为这个项目提供的域名为<code>username.github.io/blog</code>， 当你访问这个域名时，GitHub会去解析<code>username</code>用户下，<code>blog</code>项目的<code>gh-pages</code>&nbsp;分支。</p>

<p>所以，要搭建自己的博客，你可以选择建立名为&nbsp;<code>username.github.io</code>的项目， 在<code>master</code>分支下存放网站源代码，也可以选择建立名为&nbsp;<code>blog</code>&nbsp;的项目，在&nbsp;<code>gh-pages</code>分支下存放网站源代码。</p>

<p>GitHub 的 Help 文档中的&nbsp;<a href="https://help.github.com/articles/user-organization-and-project-pages" target="_blank">User, Organization and Project Pages</a>对此有 详细的描述。</p>

<ul>
	<li>机制二</li>
</ul>

<p>Jekyll 提供了插件功能，在网站源代码目录下，有一个名为&nbsp;<code>_plugins</code>的目录， 你可以将一些插件放进去，这样，Jekyll在解析网站源代码时，就会运行你的插件， 这样插件是 Ruby 写成的。可以为Jekyll添加功能，例如，Jekyll默认是不提供分类 页面的，你可以写一个插件，根据文章内容生成分类页面。如果没有插件，你只能每 次写文章，添加分类时，为每个分类手动写 HTML 页面。</p>

<p>在本地运行 Jekyll 时，这些插件会自动被调用，但是GitHub在解析网站源代码时， 出于安全考虑，会开启安全模式，禁用这些插件。我们既想用这些插件，又想用 GitHub，怎么办呢怎么办呢？</p>

<p>GitHub还为我们提供了更一种解析网站的方式，那就是直接上传最终的静态网页， 这样，我们可以在本地使用 Jeklly 把网站解析出来，然后再上传到 GitHub上， 这就使得我们既使用了插件，又使用了 GitHub。在上文的目录结构中，有一个 名为&nbsp;<code>_site</code>&nbsp;的目录，这个就是Jeklly在本地解析时最终生成的静态网站，我们 把其中的内容上传到 GitHub 的项目中就可以了。例如，我在GitHub上的网站， 既解析后的&nbsp;<code>_site</code>&nbsp;目录，大概是这样的:</p>

<pre>
<code>.

├── index.html
├── 2013
├── 2014
├── assets
├── categories
├── page2
├── page3
├── page4
├── 工具
├── 思想
├── 技术
└── 源代码阅读
</code></pre>

<p>其中的&nbsp;<code>categories</code>，<code>2013</code>,&nbsp;<code>2014</code>&nbsp;目录就是分类插件和归档插件帮助我生成的， 我只要把这个目录下的内容上传到 GitHub 相应的项目分支中就可以了。这样，你 访问&nbsp;<code>username.github.io</code>时，GitHub就不解析了，直接把<code>index.html</code>返回给你了。</p>

<h2>工作流</h2>

<p>关于 git 和 jekyll 的安装与基本使用，这里就不多说了。</p>

<ul>
	<li>工作流一</li>
</ul>

<p>如果你不使用插件，那么只需要维护一个分支就好:</p>

<pre>
<code>- username/username.github.io 的 master 分支
- username/blog 的 gh-pages 分支
</code></pre>

<p>其中&nbsp;<code>username</code>&nbsp;是你的 GitHub 帐号。</p>

<p>你需要在本地维护一份网站源代码，添加新文章后，使用 jekyll 在本地测试一下， 没有问题后，commit 到 GitHub 上的相应分支中就可以了。</p>

<ul>
	<li>工作流二</li>
</ul>

<p>如果你需要使用插件，那么需要维护两个分支，一个是网站的源代码分支 ，另一个 是 由Jeklly 解析源代码后生成的静态网站。</p>

<p>例如，如果项目名为 username.github.io，的源代码分支名为&nbsp;<code>source</code>，静态网站分支名为master。平时写博客时， 首先在 source 分支下，添加新文章，然后本地使用 jekyll build 将添加文章后的网站 解析一次，这时&nbsp;<code>_site</code>&nbsp;目录下就有新网站的静态代码了。然后把这个目录下的所有内容 复制到&nbsp;master&nbsp;分支下。这个过程，可以写一个 Makefile，每次添加文章后 make 一下， 就自动将文章发布到 GitHub 上。</p>

<p>Makefile 内容如下：</p>

<p>&nbsp;</p>

<pre>
<code>
deploy:
    git checkout source
    jekyll build
    git add -A
    git commit -m &quot;update source&quot;
    cp -r _site/ /tmp/
    git checkout master
    rm -r ./*
    cp -r /tmp/_site/* ./
    git add -A
    git commit -m &quot;deploy blog&quot;
    git push origin master
    git checkout source
    echo &quot;deploy succeed&quot;
    git push origin source
    echo &quot;push source&quot;</code></pre>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>下面的内容涉及源代码，如果需要进一步学习，或者有问题，可以在&nbsp;<a href="http://jekyllrb.com/" target="_blank">Jeklly 官网</a>上找到更详细的解释，或者在评论中留言。</p>

<h2>源代码</h2>

<p>再来看一下这个目录结构：</p>

<pre>
<code>.
├── _config.yml
├── index.html
├── assets
│&nbsp;&nbsp; ├── blog-images
│&nbsp;&nbsp; ├── css
│&nbsp;&nbsp; ├── fonts
│&nbsp;&nbsp; ├── images
│&nbsp;&nbsp; └── javascripts
├── _includes
├── _layouts
├── _plugins
├── _posts
└── _site
</code></pre>

<ul>
	<li>_config.yml</li>
</ul>

<p>这是针对 Jekyll 的<a href="http://jekyllrb.com/docs/configuration/" target="_blank">配置文件</a>， 决定了 Jekyll 如何解析网站的源代码,下面是一个示例：</p>

<pre>
<code>baseurl: /StrayBirds
markdown: redcarpet
safe: false
pygments: true
excerpt_separator: &quot;\n\n\n&quot;
paginate: 5
</code></pre>

<p>我的网站建立在&nbsp;<code>StrayBirds</code>&nbsp;项目中，所以&nbsp;<code>baseurl</code>&nbsp;设置成&nbsp;<code>StrayBirds</code>， 我的文章采用 Markdown 格式写成，可以指定 Markdown 的解析器&nbsp;<code>redcarpet</code>。 另外，安全模式需要关闭，以便 Jekyll 解析时会运行插件。&nbsp;<code>pygments</code>&nbsp;可以使得Jekyll解析文章中源代码时加入特殊标记，例如指定代码类型， 这可以被很多 javascript 代码高度库使用。&nbsp;<code>excerpt_separator</code>&nbsp;指定了一个摘要分割符号，这样 Jekyll 可以在解析文章时， 将文章的提要提取出来。 paginate 指定了一页有几篇文章，页数太多时，我们可以将文章列表分页，我们在 后文还会提到。</p>

<ul>
	<li>_layouts</li>
</ul>

<p>这个目录存放着一些网页模板文件，为网站所有网页提供一个基本模板，这样 每个网页只需要关心自己的内容就好，其它的都由模板决定。例如，这个目录下的 default.html 文件：</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&#39;utf-8&#39;&gt;
    &lt;title&gt;{{ page.title }}&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header&gt;
    &lt;/header&gt;

    &lt;aside&gt;
    &lt;/aside&gt;

    &lt;article&gt;
{{ content }}
    &lt;/article&gt;

    &lt;footer&gt;
    &lt;/footer&gt;
  &lt;/body&gt;
&lt;/html&gt;


</pre>

<p>可以看出，这个文件就是所有页面共有的东西，每个页面的具体内容会被填充在&nbsp;<code>{{ content }}</code>&nbsp;中，注意这个 content 两边的标记，这是一种叫&nbsp;<a href="https://github.com/Shopify/liquid" target="_blank">liquid</a>&nbsp;的标记语言。 另外，还有那个&nbsp;<code>{{ page.title }}</code>&nbsp;，其中&nbsp;<code>page</code>&nbsp;表示引用&nbsp;<code>default.html</code>的 那个页面，这个页面的&nbsp;<code>title</code>&nbsp;值会在&nbsp;<code>page</code>&nbsp;相应页面中被设置，例如 下面的&nbsp;<code>index.html</code>&nbsp;文件，开头部分就设置了&nbsp;<code>title</code>值。</p>

<ul>
	<li>index.html</li>
</ul>

<p>这是网站的首页，访问&nbsp;<code>http://username.github.io</code>&nbsp;时，会指向&nbsp;<code>http://username.github.io/index.html</code>，我们看一下基本内容：</p>

<pre>
---
layout: default
title: 首页
---

&lt;ul class=&quot;post-list&quot;&gt;
    {% for post in site.posts %}
        &lt;a href=&quot;{{site.baseurl}}{{post.url}}&quot;&gt; {{ post.title }}  &lt;/a&gt; &lt;br&gt;
        {{ post.date | date: &quot;%F&quot; }} &lt;br&gt;
        {{ post.category }} &lt;br&gt;
        {{ post.excerpt }} 
    {% endfor %}
&lt;/ul&gt;
</pre>

<p>注意，文件开头的描述，我们称之为&nbsp;<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank">front-matter</a>， 是对当前文件的一种描述，这里 设置的变量可以在解析时被引用，例如这里的&nbsp;<code>layout</code>就会告诉 Jekyll, 生成&nbsp;<code>index.html</code>&nbsp;文件时，去&nbsp;<code>_layouts</code>&nbsp;目录下找&nbsp;<code>default.html</code>&nbsp;文件，然后把当前文件解析后，添加到&nbsp;<code>default.html</code>&nbsp;的&nbsp;<code>content</code>&nbsp;部分，组成最终的&nbsp;<code>index.html</code>&nbsp;文件。还有<code>title</code>&nbsp;设置好的 值，会在&nbsp;<code>default.html</code>&nbsp;中通过&nbsp;<code>page.title</code>&nbsp;被引用。</p>

<p>文件的主体部分遍历了站点的所有文章，并将他们显示出来，这些语法都是&nbsp;<code>liquid</code>&nbsp;语法， 其中的变量，例如&nbsp;<code>site</code>, 由 Jekyll 设置我们只需要引用就可以了。而&nbsp;<code>post</code>&nbsp;中的变量， 如&nbsp;<code>post.title</code>,&nbsp;<code>post.category</code>&nbsp;是由&nbsp;<code>post</code>&nbsp;文件中的 front-matter 决定，后面马上就会看到。</p>

<ul>
	<li>_posts</li>
</ul>

<p>这个目录存放我们的所有博客文章，他们的名字有统一的格式：</p>

<pre>
<code>YEAR-MONTH-DAY-title.MARKUP
</code></pre>

<p>例如，2014-02-15-github-jeklly.md，这个文件名会被解析，前面的&nbsp;<code>index.html</code>&nbsp;中，&nbsp;<code>post.date</code>&nbsp;的值就由这里文件名中的日期而来。下面，我们看看一篇文章的内容示例：</p>

<pre>
<code>---
layout: default
title: 使用 Markdown
category: 工具
comments: true
---

# 为什么使用 Markdown

* 看上去不错  
* 既然看上去不错，为什么不试试呢  


# 如何使用 Markdown
</code></pre>

<p>可以看出，文章的 front-matter 部分设置了多项值，以后可以通过类似&nbsp;<code>post.title</code>,&nbsp;<code>post.category</code>&nbsp;的方式引用这些些，另外，<code>layout</code>部分的值和之前解释的一样， 文件的内容会被填充到&nbsp;<code>_layouts/default.html</code>&nbsp;文件的&nbsp;<code>content</code>&nbsp;变量中。</p>

<p>另外，文章中&nbsp;<code>为什么不试试呢</code>之后的有三个不可见的&nbsp;<code>\n</code>，它决定了这三个&nbsp;<code>\n</code>&nbsp;之前的内容会被放在&nbsp;<code>post.excerpt</code>&nbsp;变量中，供其它文件使用。</p>

<ul>
	<li>_includes</li>
</ul>

<p>这个文件中，存放着一些模块文件，例如&nbsp;<code>categories.ext</code>，其它文件可以通过</p>

<pre>
<code>{% raw %}
{% include categories.ext %}
{% endraw %}
</code></pre>

<p>来引用这个文件的内容，方便代码模块化和重用。我的博客&nbsp;<a href="http://minixalpha.github.io/StrayBirds/" target="_blank">主页</a>上的 分类，归档，这些模块的代码都是通过这种方式引用的。</p>

<ul>
	<li>_plugins</li>
</ul>

<p>这个文件中存放一些Ruby插件, 例如&nbsp;<code>gen_categories.rb</code>，这些文件会在 Jekyll 解析网站源代码时被执行。下一节讲述的就是插件。</p>

<ul>
	<li>_site</li>
</ul>

<p>Jekyll 解析整个网站源代码后，会将最终的静态网站源代码放在这里</p>

<h2>插件</h2>

<p>插件使用 Ruby 写成，放在 _plugins 目录下，有些 Jekyll 没有的功能，又不能 手动添加，因为页面的内容会随着文章日期类别的不同而不同，例如分类功能和归档功能， 这时，就需要使用插件自动生成一些页面和目录。</p>

<ul>
	<li>分类 我的分类插件使用的是&nbsp;<a href="https://github.com/shigeya/jekyll-category-archive-plugin/tree/master/_plugins" target="_blank">jekyll-category-archive-plugin</a>, 它会根据网站文章的分类信息，为每个类别生成一个页面。</li>
</ul>

<p>使用方法是，把&nbsp;plugins/categoryarchive_plugin.rb 放在&nbsp;plugins 目录下， 把 _layouts/categoryarchive.html 放在&nbsp;layouts 目录下， 这样，这个插件会在Jekyll解析网站时，生成相应categories目录，目录下是各个分类， 每个分类下都有一个&nbsp;<code>index.html</code>&nbsp;文件，这个文件是根据模板文件 categoryarchive.html 生成的，例如：</p>

<pre>
<code>_site/categories/
├── 工具
│&nbsp;&nbsp; └── index.html
├── 思想
│&nbsp;&nbsp; └── index.html
├── 技术
│&nbsp;&nbsp; └── index.html
└── 源代码阅读
    └── index.html
</code></pre>

<p>然后，你就可以通过&nbsp;<code>http://username.github.io/blog/categories/工具/</code>&nbsp;访问&nbsp;<code>工具</code>类下的&nbsp;<code>index.html</code>&nbsp;文件。</p>

<ul>
	<li>归档 我的归档插件使用的是&nbsp;<a href="https://github.com/shigeya/jekyll-monthly-archive-plugin" target="_blank">jekyll-monthly-archive-plugin</a>,它会根据网站 _posts目录下的文章日期，为每个月生成一个页面。</li>
</ul>

<p>使用方法同上。注意，这个插件在 jekyll-1.4.2 中可能会出错，在 jekyll-1.2.0 中没有错误。</p>

<h2>组件</h2>

<ul>
	<li>分页</li>
</ul>

<p>当文章很多时，就需要使用分页功能，在 Jekyll 官网上提供了一种&nbsp;<a href="http://jekyllrb.com/docs/pagination/" target="_blank">实现</a>，把相应代码放在 主页上，然后在&nbsp;<code>_config.yml</code>&nbsp;中设置&nbsp;<code>paginate</code>&nbsp;值就行了。</p>

<ul>
	<li>评论</li>
</ul>

<p>评论功能需要使用外挂，我使用的是&nbsp;<a href="http://disqus.com/" target="_blank">DISQUS</a>, 注册 之后，将评论区的一段代码放在你需要使用评论功能的页面上, 然后，通过在页面的 front-matter 部分使用</p>

<pre>
<code>comments: true
</code></pre>

<p>启用评论。<strong>此外，如果你 fork 了我的项目，需要修改 `_inclusds/</strong><strong>comments.ext`，把里面的 `disqus_shortname ` 修改成你的博客短名，这个在注册的时候会设置。</strong></p>

<p>评论区截图：</p>

<p><img alt="" src="http://img.blog.csdn.net/20140215230506156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>

<p>基本的内容就介绍到这里，任何问题，欢迎留言。</p>

<p>&nbsp;</p>

<p>另外，如果这篇文章对你有用的话，在<a href="https://github.com/minixalpha/minixalpha.github.io" target="_blank">GitHub</a>上帮我点个 star 吧，即是对我的肯定，也可以帮助更多的人。</p>

<p>另外，注意如果你要 fork 我的模板，注意里面有些链接是与我的 GitHub 名 minixalpha 相关的，在使用前最好批量地将这个字符串替换为你的账号名。</p>

<p>&nbsp;</p>

<h1><strong>一个极简风格的博客</strong></h1>

<p>从上面的工作流程可以看出，虽然每次我在本地添加文件后，都只要 make 一下就能发布文章，但我还是觉得麻烦，希望能直接通过浏览器在 GitHub 的网站上添加文章，所以，我又建立了一个非常简洁的博客，没有分类，没有评论，就是一个主页，上面有所有文章链接，添加文章时候，只要在 _post 目录下添加一个 markdown 文件就可以了。</p>

<p>这个博客项目为：&nbsp;<a href="https://github.com/minixalpha/StrayBirds/tree/gh-pages" target="_blank">StrayBirds</a>&nbsp;, 是通过 GitHub 的&nbsp; Automatic page generator生成。完全通过浏览器操作就能建成，不用 git啊，make啊。这个项目目前已经有了 158 个 fork，但是只有 35 个 star 呀，拜托点下 star，这也太不平衡了&hellip;&hellip;</p>

<p>博客首页：<a href="http://minixalpha.github.io/StrayBirds/" target="_blank">飞鸟集</a>。</p>

<p><img alt="" src="http://img.blog.csdn.net/20140920131944468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>

<p>&nbsp;</p>

<p>要使用这个项目，你需要做的是：</p>

<p>1. 注册 GitHub，例如你的用户名为 minixbeta</p>

<p>2. 到&nbsp;<a href="https://github.com/minixalpha/StrayBirds/tree/gh-pages" target="_blank">StrayBirds</a>&nbsp;点右上角的 fork</p>

<p>3. 到你 fork 后的项目中，将 _config.yml 中的 username 修改成你的用户名 minixbeta</p>

<p>4. 得到你自己的博客&nbsp;http://minixbeta.github.io/StrayBirds/</p>

<p>需要注意的是，第一次使用 GitHub Pages 时，可能会有较长时间的缓冲时间，过15min左右，才能正常访问博客，请耐心等待。可以尝试修改项目名称来加快这一进程，如何修改后面有介绍。</p>

<p>另外，我又添加了评论系统，让这个简洁的博客更为完整，你需要到 Disqus 上注册，然后添加一个站点，然后将 _confg.yml 中的 disqusname&nbsp;<strong>修改成你的博客短名，这个在Disqus 的 Add Disqus To Site 的时候会设置，注意这里的对应关系。注意这个名字不是你的 Disqus 用户名，是你的站点名。</strong></p>

<p>如果你的文章想启用评论，在写文章的风格定义部分，加上 `comments: true` 即可。像示例文章中那样就行，如果你不想加评论，就不要加这句。</p>

<p>另外，由于这个项目目前已经有 200 个 fork，因此我又将 GitHub Pages 官方的所有主题及<a href="http://www.zhanxin.info/" target="_blank">掌心</a>做的 Jekyll 主题整合到其中，你可以通过修改 _config.yml 中的 theme 字段，轻松切换主题，不过每次切换都需要等待一段时间才能生效。所以，最好在修改主题之后修改项目名称，可能会回快这一进程。修改方法后面会介绍。</p>

<p>主题包括：</p>

<p>&nbsp;</p>

<ul>
	<li>hack &nbsp;<img alt="" src="http://img.blog.csdn.net/20150423223940345?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>leap-day<img alt="" src="http://img.blog.csdn.net/20150423224008471?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>merlot&nbsp;<img alt="" src="http://img.blog.csdn.net/20150423223913116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>midnight&nbsp;<img alt="" src="http://img.blog.csdn.net/20150423224036380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>minimal&nbsp;<img alt="" src="http://img.blog.csdn.net/20150423224141347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>modernist <img alt="" src="http://img.blog.csdn.net/20150423224230338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>slate <img alt="" src="http://img.blog.csdn.net/20150423224054351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
	<li>time-machine<img alt="" src="http://img.blog.csdn.net/20150423223947467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></li>
</ul>

<p>kunka</p>

<p><img alt="" src="http://img.blog.csdn.net/20150510214858118?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb25fMXk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>

<p>&nbsp;</p>

<p>如果你想把项目的名字改了，例如，将 StrayBirds 修改为 blog</p>

<p>那么，你需要做的是:</p>

<p>1. 在项目的 Setting 中将 Repository name 从 StrayBirds 修改为 blog</p>

<p>2. 将 _config.yml 中的 baseurl 修改为 /blog</p>

<p>3. 通过&nbsp;http://minixbeta.github.io/blog/ 来访问你的新博客。</p>

<p>&nbsp;</p>

<h2>感谢</h2>

<p>&nbsp;</p>

<p>Thanks to authors of the themes:</p>

<ul>
	<li><a href="https://github.com/sundaykofax/baby-legs" target="_blank">hack</a>, Licence: None</li>
	<li><a href="https://github.com/mattgraham/leapday" target="_blank">leap-day</a>, Licence:&nbsp;<a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons Attribution</a></li>
	<li><a href="https://github.com/cameronmcefee/headsmart/tree/gh-pages" target="_blank">merlot</a>, Licence: None</li>
	<li><a href="https://github.com/briandoll/change-inside-surroundings.vim/tree/gh-pages" target="_blank">midnight</a>, Licence: None</li>
	<li><a href="https://github.com/orderedlist/minimal" target="_blank">minimal</a>, Licence:&nbsp;<a href="http://creativecommons.org/licenses/by-sa/3.0/" target="_blank">Creative Commons Attribution-ShareAlike 3.0 Unported License</a></li>
	<li><a href="https://github.com/orderedlist/modernist" target="_blank">modernist</a>, Licence:&nbsp;<a href="http://creativecommons.org/licenses/by-sa/3.0/" target="_blank">Creative Commons Attribution-ShareAlike 3.0 Unported License</a></li>
	<li><a href="https://github.com/jasoncostello/slate" target="_blank">slate</a>, Licence: MIT</li>
	<li><a href="https://github.com/jonrohan/time-machine-theme" target="_blank">time-machine</a>, Licence: None</li>
	<li><a href="https://github.com/pizn/kunka" target="_blank">kunka</a>, Licence: MIT, author:&nbsp;<a href="http://www.zhanxin.info/" target="_blank">zhanxin.info</a></li>
</ul>

<p>All the themes are intergrated in the blog template, with some modifies.</p>

<p>&nbsp;</p>

<p>如果你不太明白，可以看这个<a href="https://github.com/minixalpha/StrayBirds/tree/gh-pages" target="_blank">StrayBirds</a>&nbsp;&nbsp;项目在 GitHub 上的 READEME，里面有如何fork项目，修改项目名，添加文章的 GIF 演示。</p>

<p>如果遇到有bug, 麻烦在GitHub 上提交<a href="https://github.com/minixalpha/minixalpha.github.io/issues" target="_blank">Issues</a>，最好不要在 GitHub 上的博客中评论。</p>

<p>另外， 这篇文章从 2014 年 2 月到现在 (2015年4月) 一直在不断更新，如果对大家有用，希望去 GitHub 上点个 star 支持一下。</p>
