<h1>Sonar代码质量管理平台</h1>

<p>   <img alt="" src="http://img.blog.csdn.net/20150225163501665?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2Fvemhhbmd5aW5nZmVpMDEwOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="height:477px; width:800px" /></p>

<h1>一、基本认识</h1>

<p>       Sonar (SonarQube)是一个开源平台，用于管理源代码的质量。</p>

<p>       Sonar 不只是一个质量数据报告工具，更是代码质量管理平台。通过插件机制，Sonar可以集成不同的测试工具，代码分析工具，以及持续集成工具，比如pmd-cpd、checkstyle、findbugs、Jenkins。通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。</p>

<p>       此外，Sonar 的插件还可以对 Java 以外的其他编程语言（支持的语言包括：Java、PHP、C#、C、Cobol、PL/SQL、Flex等）提供支持，对国际化以及报告文档化也有良好的支持。</p>

<h1>二、主要检测的内容</h1>

<p>通过sonar可以有效检测在程序开发过程中的七大问题。</p>

<h2>1.糟糕的复杂度分布</h2>

<p>        文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员难以理解它们，且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试</p>

<h2>2.重复</h2>

<p>         显然程序中包含大量复制粘贴的代码是质量低下的。sonar可以展示源码中重复严重的地方：</p>

<h2>3.缺乏单元测试</h2>

<p>         sonar可以很方便地统计并展示单元测试覆盖率</p>

<h2>4.没有代码标准</h2>

<p>        sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写</p>

<h2>5.没有足够的或者过多的注释</h2>

<p>        没有注释将使代码可读性变差，特别是当不可避免地出现人员变动时，程序的可读性将大幅下降而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷</p>

<h2>6.潜在的bug</h2>

<p>       sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检测出潜在的bug</p>

<h2>7.糟糕的设计（原文Spaghetti Design，意大利面式设计）</h2>

<p>        通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系可以检测自定义的架构规则；通过sonar可以管理第三方的jar包可以利用LCOM4检测单个任务规则的应用情况；检测耦合。</p>

<p>       关于SpaghettiDesign：http://docs.codehaus.org/display/SONAR/Spaghetti+Design</p>

<h1>三、插件介绍</h1>

<p>         sonar支持多种插件，插件的下载地址为：http://docs.codehaus.org/display/SONAR/Plugin+Library。</p>

<p>将下载后的插件上传到${SONAR_HOME}extensions\plugins目录下，重新启动sonar。</p>

<h2>1.sonar默认插件集合</h2>

<p>        sonar默认集成了Java Ecosystem插件，该插件是一组插件的合集：</p>

<p>1)Java [sonar-java-plugin]：java源代码解析，计算指标等</p>

<p>2)Squid [sonar-squid-java-plugin]：检查违反Sonar定义规则的代码</p>

<p>3)Checkstyle [sonar-checkstyle-plugin]：使用CheckStyle检查违反统一代码编写风格的代码</p>

<p>4)FindBugs [sonar-findbugs-plugin]：使用FindBugs检查违反规则的缺陷代码</p>

<p>5)PMD [sonar-pmd-plugin]：使用pmd检查违反规则的代码</p>

<p>6)Surefire [sonar-surefire-plugin]：使用Surefire执行单元测试</p>

<p>7)Cobertura [sonar-cobertura-plugin]：使用Cobertura获取代码覆盖率</p>

<p>8)JaCoCo [sonar-jacoco-plugin]：使用JaCOCO获取代码覆盖率</p>

<h2>2.下面列出了一些常用的插件：</h2>

<p>1)JavaScript代码检查：http://docs.codehaus.org/display/SONAR/JavaScript+Plugin</p>

<p>2)python代码检查：http://docs.codehaus.org/display/SONAR/Python+Plugin</p>

<p>3)Web页面检查（HTML、JSP、JSF、Ruby、PHP等）：http://docs.codehaus.org/display/SONAR/Web+Plugin</p>

<p>4)xml文件检查：http://docs.codehaus.org/display/SONAR/XML+Plugin</p>

<p>5)scm源码库统计分析：http://docs.codehaus.org/display/SONAR/SCM+Stats+Plugin</p>

<p>6)文件度量：http://docs.codehaus.org/display/SONAR/Tab+Metrics+Plugin</p>

<p>7)中文语言包：http://docs.codehaus.org/display/SONAR/Chinese+Pack</p>

<p>8)时间表显示度量结果：http://docs.codehaus.org/display/SONAR/Timeline+Plugin</p>

<p>9)度量结果演进图：http://docs.codehaus.org/display/SONAR/Motion+Chart+Plugin</p>

<h2>3.插件配置示例</h2>

<p>         具体详见《<a href="http://www.ibm.com/developerworks/cn/java/j-lo-sonar/" target="_blank">使用</a><a href="http://www.ibm.com/developerworks/cn/java/j-lo-sonar/" target="_blank"> Sonar 进行代码质量管理</a>》。</p>

<h1>四、结束语</h1>

<p>        Sonar 的主要特色是对不同工具产生的检查结果进行再加工处理，Sonar 还向用户提供了对数据进行个性化处理的方法。可以说，Sonar是目前最强大的代码质量管理工具之一。</p>
