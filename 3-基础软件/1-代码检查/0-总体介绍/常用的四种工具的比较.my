<h1>常用 Java 静态代码分析工具的分析与比较</h1>

<h2>引言</h2>

<p>在 Java 软件开发过程中，开发团队往往要花费大量的时间和精力发现并修改代码缺陷。Java 静态代码分析（static code analysis）工具能够在代码构建过程中帮助开发人员快速、有效的定位代码缺陷并及时纠正这些问题，从而极大地提高软件可靠性并节省软件开发和测试成本。目前市场上的 Java 静态代码分析工具种类繁多且各有千秋，因此本文将分别介绍现有 4 种主流 Java 静态代码分析工具 (Checkstyle，FindBugs，PMD，Jtest)，并从功能、特性等方面对它们进行分析和比较，希望能够帮助 Java 软件开发人员了解静态代码分析工具，并选择合适的工具应用到软件开发中。</p>

<h2>静态代码分析工具简介</h2>

<h3>什么是静态代码分析</h3>

<p>静态代码分析是指无需运行被测代码，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性，找出代码隐藏的错误和缺陷，如参数不匹配，有歧义的嵌套语句，错误的递归，非法计算，可能出现的空指针引用等等。</p>

<p>在软件开发过程中，静态代码分析往往先于动态测试之前进行，同时也可以作为制定动态测试用例的参考。统计证明，在整个软件开发生命周期中，30% 至 70% 的代码逻辑设计和编码缺陷是可以通过静态代码分析来发现和修复的。</p>

<p>但是，由于静态代码分析往往要求大量的时间消耗和相关知识的积累，因此对于软件开发团队来说，使用静态代码分析工具自动化执行代码检查和分析，能够极大地提高软件可靠性并节省软件开发和测试成本。</p>

<h3>静态代码分析工具的优势</h3>

<p>1. 帮助程序开发人员自动执行静态代码分析，快速定位代码隐藏错误和缺陷。</p>

<p>2. 帮助代码设计人员更专注于分析和解决代码设计缺陷。</p>

<p>3. 显著减少在代码逐行检查上花费的时间，提高软件可靠性并节省软件开发和测试成本。</p>

<h2>Java 静态代码分析理论基础和主要技术</h2>

<ul>
<li>缺陷模式匹配：缺陷模式匹配事先从代码分析经验中收集足够多的共性缺陷模式，将待分析代码与已有的共性缺陷模式进行模式匹配，从而完成软件的安全分析。这种方式的优点是简单方便，但是要求内置足够多缺陷模式，且容易产生误报。</li>
<li>类型推断：类型推断技术是指通过对代码中运算对象类型进行推理，从而保证代码中每条语句都针对正确的类型执行。这种技术首先将预定义一套类型机制，包括类型等价、类型包含等推理规则，而后基于这一规则进行推理计算。类型推断可以检查代码中的类型错误，简单，高效，适合代码缺陷的快速检测。</li>
<li>模型检查：模型检验建立于有限状态自动机的概念基础之上，这一理论将被分析代码抽象为一个自动机系统，并且假设该系统是有限状态的、或者是可以通过抽象归结为有限状态。模型检验过程中，首先将被分析代码中的每条语句产生的影响抽象为一个有限状态自动机的一个状态，而后通过分析有限状态机从而达到代码分析的目的。模型检验主要适合检验程序并发等时序特性，但是对于数据值域数据类型等方面作用较弱。</li>
<li>数据流分析：数据流分析也是一种软件验证技术，这种技术通过收集代码中引用到的变量信息，从而分析变量在程序中的赋值、引用以及传递等情况。对数据流进行分析可以确定变量的定义以及在代码中被引用的情况，同时还能够检查代码数据流异常，如引用在前赋值在后、只赋值无引用等。数据流分析主要适合检验程序中的数据域特性。</li>
</ul>

<h2>现有主流 Java 静态分析工具</h2>

<h3>Checkstyle</h3>

<p>Checkstyle 是 SourceForge 的开源项目，通过检查对代码编码格式，命名约定，Javadoc，类设计等方面进行代码规范和风格的检查，从而有效约束开发人员更好地遵循代码编写规范。</p>

<p>Checkstyle 提供了支持大多数常见 IDE 的插件，文本主要使用 Eclipse 中的 Checkstyle 插件。如下图 1 所示，Checkstyle 对代码进行编码风格检查，并将检查结果显示在 Problems 视图中。图中，代码编辑器中每个放大镜图标表示一个 Checkstyle 找到的代码缺陷。开发人员可通过在 Problems 视图中查看错误或警告详细信息。</p>

<h5>图 1. 使用 Checkstyle 进行编码风格检查</h5>

<p><img alt="图 1. 使用 Checkstyle 进行编码风格检查" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image003.gif" /></p>

<p>此外，Checkstyle 支持用户根据需求自定义代码检查规范，在下图 2 中的配置面板中，用户可以在已有检查规范如命名约定，Javadoc，块，类设计等方面的基础上添加或删除自定义检查规范。</p>

<h5>图 2. 使用 Checkstyle 添加自定义代码检查规范</h5>

<p><img alt="图 2. 使用 Checkstyle 添加自定义代码检查规范" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image005.gif" /></p>

<h3>FindBugs</h3>

<p>FindBugs 是由马里兰大学提供的一款开源 Java 静态代码分析工具。FindBugs 通过检查类文件或 JAR 文件，将字节码与一组缺陷模式进行对比从而发现代码缺陷，完成静态代码分析。FindBugs 既提供可视化 UI 界面，同时也可以作为 Eclipse 插件使用。文本将主要使用将 FindBugs 作为 Eclipse 插件。在安装成功后会在 eclipse 中增加 FindBugs perspective，用户可以对指定 Java 类或 JAR 文件运行 FindBugs，此时 FindBugs 会遍历指定文件，进行静态代码分析，并将代码分析结果显示在 FindBugs perspective 的 bugs explorer 中，如下图 3 所示：</p>

<h5>图 3. 使用 FindBugs 进行静态代码分析</h5>

<p><img alt="图 3. 使用 FindBugs 进行静态代码分析" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image007.gif" /></p>

<p>图中 Bug Explorer 中的灰色图标处为 Bug 类型，每种分类下红色图标表示 bug 较为严重，黄色的图标表示 bug 为警告程度。Propreties 列出了 bug 的描述信息及修改方案。</p>

<p>此外，FindBugs 还为用户提供定制 Bug Pattern 的功能。用户可以根据需求自定义 FindBugs 的代码检查条件，如下图 4 所示：</p>

<h5>图 4. 使用 FindBugs 添加自定义代码检查规范</h5>

<p><img alt="图 4. 使用 FindBugs 添加自定义代码检查规范" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image009.gif" /></p>

<h3>PMD</h3>

<p>PMD 是由 DARPA 在 SourceForge 上发布的开源 Java 代码静态分析工具。PMD 通过其内置的编码规则对 Java 代码进行静态检查，主要包括对潜在的 bug，未使用的代码，重复的代码，循环体创建新对象等问题的检验。PMD 提供了和多种 Java IDE 的集成，例如 Eclipse，IDEA，NetBean 等。本文主要使用 PMD 以插件方式与 Eclipse 集成。如下图 5 所示：在 Violations Overview 视图中，按照代码缺陷严重性集中显示了 PMD 静态代码分析的结果。</p>

<h5>图 5. 使用 PMD 进行静态代码分析</h5>

<p><img alt="图 5. 使用 PMD 进行静态代码分析" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image011.gif" /></p>

<p>PMD 同样也支持开发人员对代码检查规范进行自定义配置。开发人员可以在下图 6 中的面板中添加、删除、导入、导出代码检查规范。</p>

<h5>图 6. 使用 PMD 添加自定义代码检查规范</h5>

<p><img alt="图 6. 使用 PMD 添加自定义代码检查规范" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image013.gif" /></p>

<h3>Jtest</h3>

<p>Jtest 是 Parasoft 公司推出的一款针对 Java 语言的自动化代码优化和测试工具，Jtest 的静态代码分析功能能够按照其内置的超过 800 条的 Java 编码规范自动检查并纠正这些隐蔽且难以修复的编码错误。同时，还支持用户自定义编码规则，帮助用户预防一些特殊用法的错误。Jtest 提供了基于 Eclipse 的插件安装。Jtest 支持开发人员对 Java 代码进行编码规范检查，并在 Jtask 窗口中集中显示检查结果，如下图 7 所示：</p>

<h5>图 7. 使用 Jtest 进行静态代码分析</h5>

<p><img alt="图 7. 使用 Jtest 进行静态代码分析" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image015.gif" /></p>

<p>同时，Jtest 还提供了对用户定制代码检查配置甚至自定义编码规则的支持，这一功能使得开发人员可以基于不同场景定制所需要的编码规范，如图 8 所示：</p>

<h5>图 8. 使用 Jtest 添加自定义代码检查规范</h5>

<p><img alt="图 8. 使用 Jtest 添加自定义代码检查规范" src="https://www.ibm.com/developerworks/cn/java/j-lo-statictest-tools/image017.gif" /></p>

<h2>Java 静态分析工具对比</h2>

<p>本章节将从以下几个方面对上述 Java 静态分析工具进行比较：</p>

<h3>应用技术及分析对象</h3>

<p>下表 1 列出了不同工具的分析对象及应用技术对比：</p>

<h5>表 1. 不同工具的分析对象及应用技术对比</h5>

<table border="0" cellpadding="0" cellspacing="0" summary="不同工具的分析对象及应用技术对比">
<thead>
<tr>
<th>Java 静态分析工具</th>
<th>分析对象</th>
<th>应用技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>Checkstyle</td>
<td>Java 源文件</td>
<td>缺陷模式匹配</td>
</tr>
<tr>
<td>FindBugs</td>
<td>字节码</td>
<td>缺陷模式匹配；数据流分析</td>
</tr>
<tr>
<td>PMD</td>
<td>Java 源代码</td>
<td>缺陷模式匹配</td>
</tr>
<tr>
<td>Jtest</td>
<td>Java 源代码</td>
<td>缺陷模式匹配；数据流分析</td>
</tr>
</tbody>
</table>

<h3>内置编程规范</h3>

<p>Checkstyle：</p>

<ul>
<li>Javadoc 注释：检查类及方法的 Javadoc 注释</li>
<li>命名约定：检查命名是否符合命名规范</li>
<li>标题：检查文件是否以某些行开头</li>
<li>Import 语句：检查 Import 语句是否符合定义规范</li>
<li>代码块大小，即检查类、方法等代码块的行数</li>
<li>空白：检查空白符，如 tab，回车符等</li>
<li>修饰符：修饰符号的检查，如修饰符的定义顺序</li>
<li>块：检查是否有空块或无效块</li>
<li>代码问题：检查重复代码，条件判断，魔数等问题</li>
<li>类设计：检查类的定义是否符合规范，如构造函数的定义等问题</li>
</ul>

<p>FindBugs：</p>

<ul>
<li>Bad practice 坏的实践：常见代码错误，用于静态代码检查时进行缺陷模式匹配</li>
<li>Correctness 可能导致错误的代码，如空指针引用等</li>
<li>国际化相关问题：如错误的字符串转换</li>
<li>可能受到的恶意攻击，如访问权限修饰符的定义等</li>
<li>多线程的正确性：如多线程编程时常见的同步，线程调度问题。</li>
<li>运行时性能问题：如由变量定义，方法调用导致的代码低效问题。</li>
</ul>

<p>PMD：</p>

<ul>
<li>可能的 Bugs：检查潜在代码错误，如空 try/catch/finally/switch 语句</li>
<li>未使用代码（Dead code）：检查未使用的变量，参数，方法</li>
<li>复杂的表达式：检查不必要的 if 语句，可被 while 替代的 for 循环</li>
<li>重复的代码：检查重复的代码</li>
<li>循环体创建新对象：检查在循环体内实例化新对象</li>
<li>资源关闭：检查 Connect，Result，Statement 等资源使用之后是否被关闭掉</li>
</ul>

<p>Jtest</p>

<ul>
<li>可能的错误：如内存破坏、内存泄露、指针错误、库错误、逻辑错误和算法错误等</li>
<li>未使用代码：检查未使用的变量，参数，方法</li>
<li>初始化错误：内存分配错误、变量初始化错误、变量定义冲突</li>
<li>命名约定：检查命名是否符合命名规范</li>
<li>Javadoc 注释：检查类及方法的 Javadoc 注释</li>
<li>线程和同步：检验多线程编程时常见的同步，线程调度问题</li>
<li>国际化问题：</li>
<li>垃圾回收：检查变量及 JDBC 资源是否存在内存泄露隐患</li>
</ul>

<h3>错误检查能力</h3>

<p>为比较上述 Java 静态分析工具的代码缺陷检测能力，本文将使用一段示例代码进行试验，示例代码中将涵盖我们开发中的几类常见错误，如引用操作、对象操作、表达式复杂化、数组使用、未使用变量或代码段、资源回收、方法调用及代码设计几个方面。最后本文将分别记录在默认检查规范设置下，不同工具对该示例代码的分析结果。以下为示例代码 Test.java。其中，代码的注释部分列举了代码中可能存在的缺陷。</p>

<h5>清单 1. Test.java 示例代码</h5>

<pre>
package Test;
import java.io.*;
public class Test {
/**
* Write the bytes from input stream to output stream.
* The input stream and output stream are not closed.
* @param is
* @param os
* @throws IOException
*/
public boolean copy(InputStream is, OutputStream os) throws IOException {
int count = 0;
//缺少空指针判断
byte[] buffer = new byte[1024];
while ((count = is.read(buffer)) >= 0) {
os.write(buffer, 0, count);
}
//未关闭I/O流
return true;
}
/**
* 
* @param a
* @param b
* @param ending
* @return copy the elements from a to b, and stop when meet element ending
*/
public void copy(String[] a, String[] b, String ending)
{
int index;
String temp = null;
//空指针错误
System.out.println(temp.length());
//未使用变量
int length=a.length;
for(index=0; index&a.length; index++)
{
//多余的if语句
if(true)
{
//对象比较 应使用equals
if(temp==ending)
{
break;
}
//缺少 数组下标越界检查
b[index]=temp;
}
}
}
/**
* 
* @param file
* @return file contents as string; null if file does not exist
*/
public void readFile(File file) {
InputStream is = null;
OutputStream os = null;
try {
is = new BufferedInputStream(new FileInputStream(file));
os = new ByteArrayOutputStream();
//未使用方法返回值
copy(is,os);
is.close();
os.close();
} catch (IOException e) {
//可能造成I/O流未关闭
e.printStackTrace();
} 
finally
{
//空的try/catch/finally块
}
}
}</pre>

<p>通过以上测试代码，我们对已有 Java 静态代码分析工具的检验结果做了如下比较，如下表 2 所示。</p>

<h5>表 2. Java 静态代码分析工具对比</h5>

<table border="0" cellpadding="0" cellspacing="0" summary="Java 静态代码分析工具对比">
<thead>
<tr>
<th><strong>代码缺陷分类</strong></th>
<th><strong>示例</strong></th>
<th><strong>Checkstyle</strong></th>
<th><strong>FindBugs</strong></th>
<th><strong>PMD</strong></th>
<th><strong>Jtest</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>引用操作</td>
<td>空指针引用</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>对象操作</td>
<td>对象比较（使用 == 而不是 equals）</td>
<td> </td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>表达式复杂化</td>
<td>多余的 if 语句</td>
<td> </td>
<td> </td>
<td>√</td>
<td> </td>
</tr>
<tr>
<td>数组使用</td>
<td>数组下标越界</td>
<td> </td>
<td> </td>
<td> </td>
<td>√</td>
</tr>
<tr>
<td>未使用变量或代码段</td>
<td>未使用变量</td>
<td> </td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>资源回收</td>
<td>I/O 未关闭</td>
<td> </td>
<td>√</td>
<td> </td>
<td>√</td>
</tr>
<tr>
<td>方法调用</td>
<td>未使用方法返回值</td>
<td> </td>
<td>√</td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>代码设计</td>
<td>空的 try/catch/finally 块</td>
<td> </td>
<td> </td>
<td>√</td>
<td> </td>
</tr>
</tbody>
</table>

<p>由表中可以看出几种工具对于代码检查各有侧重。其中，Checkstyle 更偏重于代码编写格式，及是否符合编码规范的检验，对代码 bug 的发现功能较弱；而 FindBugs，PMD，Jtest 着重于发现代码缺陷。在对代码缺陷检查中，这三种工具在针对的代码缺陷类别也各有不同，且类别之间有重叠。</p>

<h2>总结</h2>

<p>本文分别从功能、特性和内置编程规范等方面详细介绍了包括 Checkstyle，FindBugs，PMD，Jtest 在内的四种主流 Java 静态代码分析工具，并通过一段 Java 代码示例对这四种工具的代码分析能力进行比较。由于这四种工具内置编程规范各有不同，因此它们对不同种类的代码问题的发现能力也有所不同。其中 Checkstyle 更加偏重于代码编写格式检查，而 FindBugs，PMD，Jtest 着重于发现代码缺陷。最后，希望本文能够帮助 Java 软件开发和测试人员进一步了解以上四种主流 Java 静态分析工具，并帮助他们根据需求选择合适的工具。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap01117/index.html" rel="nofollow" target="_blank">让开发自动化 : 用 Eclipse 插件提高代码质量</a>：本文介绍了通过安装、配置和使用 Eclipse 插件帮助开发人员在软件开发生命周期的早期发现代码中潜在的问题。</li>
<li><a href="http://eclipse-cs.sourceforge.net/update" rel="nofollow" target="_blank">Checkstyle Eclipse 插件下载地址</a>：Checkstyle 是 SourceForge 的开源静态代码分析项目，您可以在此处下载 Checkstyle 的 Eclipse 插件。</li>
<li><a href="http://findbugs.cs.umd.edu/eclipse" rel="nofollow" target="_blank">FindBugs Eclipse 插件下载地址</a>：FindBugs 是由马里兰大学提供的一款开源 Java 静态代码分析工具，您可以在此处下载 FindBugs Eclipse 插件。</li>
<li><a href="http://pmd.sourceforge.net/eclipse" rel="nofollow" target="_blank">PMD Eclipse 插件下载地址</a>：PMD 是由 DARPA 在 SourceForge 上发布的开源 Java 代码静态分析工具，它通过内置的编码规则对 Java 代码进行静态检查。</li>
<li><a href="http://www.parasoft.com/jtest" rel="nofollow" target="_blank">Jtest 插件下载地址</a>：Jtest 由 Parasoft 公司推出，主要针对 Java 语言的自动化代码优化和测试。</li>
</ul>
