<h1>Java8新特性（一）-Lambda表达式</h1>

<h2><strong>一，Java8新特性简介</strong></h2>

<p>1，速度更快</p>

<p>2，代码更少（增加了新的语法Lambda表达式）</p>

<p>3，强大的Stream API</p>

<p>4,&nbsp; &nbsp;便于并行</p>

<p>5，最大化减少空指针异常Optional</p>

<h2><strong>二，Lambda表达式</strong></h2>

<h3><strong>1，为什么使用Lambda表达式</strong></h3>

<p><strong>&nbsp;Lambda&nbsp;是一个匿名函数，我们可以把&nbsp;Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。&nbsp;</strong></p>

<h3><strong>2，Lambda表达式的关键：从匿名类到 Lambda 的转换</strong></h3>

<p><strong>示例：</strong></p>

<p><img alt="" src="https://img-blog.csdn.net/20180723154725477?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:253px; width:574px" /></p>

<h3><strong>3，Lambda表达式语法</strong></h3>

<p><strong>Lambda表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 &ldquo;-&gt;&rdquo; ， 该操作符被称&nbsp;为 Lambda 操作符或剪头操作符。它将 Lambda 分为&nbsp;</strong>两个部分：</p>

<p><strong>左侧： 指定了 Lambda 表达式需要的所有参数</strong></p>

<p><strong>右侧： 指定了 Lambda 体，即 Lambda 表达式要执行的功能。</strong></p>

<p>（1）语法格式一：无参，无返回值，<strong>Lambda&nbsp;</strong>体只需一条语句</p>

<p><strong>&nbsp; 示例：</strong><strong>Runnable r1 = () -&gt; System.out.println(&quot;Hello Lambda!&quot;);</strong></p>

<p>（2）语法格式二：<strong>Lambda&nbsp;</strong>需要一个参数&nbsp;</p>

<p>&nbsp;&nbsp;<strong>示例：Consumer&lt;String&gt; con = （x） -&gt; System.out.println(x);</strong></p>

<p>（3）语法格式三：<strong>Lambda&nbsp;</strong>只需要一个参数时，参数的小括号可以省略&nbsp;</p>

<p><strong>&nbsp; 示例：Consumer&lt;String&gt; con = x -&gt; System.out.println(x);</strong></p>

<p>（4）语法格式四：<strong>Lambda&nbsp;</strong>需要两个参数，并且有返回值&nbsp;</p>

<p><strong>&nbsp; 示例：</strong></p>

<p><strong>&nbsp;Comparator&lt;Integer&gt; com = (x, y) -&gt; {</strong></p>

<p><strong>&nbsp; &nbsp;System.out.println(&quot;函数式接口&quot;);</strong></p>

<p><strong>&nbsp; &nbsp;return Integer.compare(x, y);</strong></p>

<p><strong>&nbsp; };</strong></p>

<p>（5）语法格式五：当&nbsp;<strong>Lambda&nbsp;</strong>体只有一条语句时，<strong>return&nbsp;</strong>与大括号可以省略&nbsp;</p>

<p><strong>&nbsp; 示例：</strong><strong>Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</strong></p>

<p>（6）Lambda 表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即&ldquo;类型推断&rdquo;</p>

<p><strong>&nbsp; 示例：</strong></p>

<blockquote><strong><strong>Comparator&lt;Integer&gt; com = (</strong></strong><strong><strong><strong><strong><strong>Integer&nbsp;</strong></strong></strong></strong></strong>

<p><strong><strong><strong><strong><strong><strong>x,</strong></strong></strong></strong></strong></strong></p>
<strong><strong><strong><strong><strong><strong>Integer&nbsp;</strong></strong></strong></strong></strong></strong>

<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>y) -&gt; { &nbsp;//Integer 类型可以省略</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<p><strong><strong>&nbsp; &nbsp;System.out.println(&quot;函数式接口&quot;);</strong></strong></p>

<p><strong><strong>&nbsp; &nbsp;return Integer.compare(x, y);</strong></strong></p>

<p><strong><strong>&nbsp; };</strong></strong></p>
</blockquote>

<p><strong>类型推断：</strong>Lambda 表达式中的参数类型都是由编译器推断&nbsp;得出的。 Lambda 表达式中无需指定类型，程序依然可&nbsp;以编译，这是因为 javac 根据程序的上下文，在后台&nbsp;推断出了参数的类型。 Lambda 表达式的类型依赖于上&nbsp;下文环境，是由编译器推断出来的。这就是所谓的&nbsp;&ldquo;类型推断&rdquo;</p>

<h2><strong>三，函数式接口</strong></h2>

<h3><strong>1，什么是函数式接口</strong></h3>

<p>（1）只包含一个抽象方法的接口，称为函数式接口。</p>

<p>（2）你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda&nbsp;表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方&nbsp;法上进行声明）。&nbsp;</p>

<p>（3）我们可以在任意函数式接口上使用 @FunctionalInterface 注解，&nbsp;这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包&nbsp;含一条声明，说明这个接口是一个函数式接口。</p>

<h3><strong>2，自定义函数接口</strong></h3>

<p><img alt="" src="https://img-blog.csdn.net/20180723154747598?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:319px; width:625px" /></p>

<h3><strong>3，作为参数传递的Lambda表达式</strong></h3>

<p><img alt="" src="https://img-blog.csdn.net/20180723154802696?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:254px; width:685px" /></p>

<p><strong>作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接<br />
收Lambda 表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口<br />
的类型。&nbsp;</strong></p>

<h3><strong>4，Java&nbsp;内置四大核心函数式接口&nbsp;</strong></h3>

<p><img alt="" src="https://img-blog.csdn.net/20180723154828408?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:569px; width:981px" /></p>

<p><strong>（1），Consumer&lt;T&gt; : 消费型接口</strong></p>

<p><strong>&nbsp; void accept(T t);</strong></p>

<p><strong>示例：</strong></p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>//Consumer&lt;T&gt; 消费型接口 :</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test1(){</code></p>
	</li>
	<li>
	<p><code>happy(10000, (m) -&gt; System.out.println(&quot;你们刚哥喜欢大宝剑，每次消费：&quot; + m + &quot;元&quot;));</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>public void happy(double money, Consumer&lt;Double&gt; con){</code></p>
	</li>
	<li>
	<p><code>con.accept(money);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><strong>（2），Supplier&lt;T&gt; : 供给型接口 &nbsp;T get();&nbsp;</strong></p>

<p><strong>示例：</strong></p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>//Supplier&lt;T&gt; 供给型接口 :</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test2(){</code></p>
	</li>
	<li>
	<p><code>List&lt;Integer&gt; numList = getNumList(10, () -&gt; (int)(Math.random() * 100));</code></p>
	</li>
	<li>
	<p><code>for (Integer num : numList) {</code></p>
	</li>
	<li>
	<p><code>System.out.println(num);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>//需求：产生指定个数的整数，并放入集合中</code></p>
	</li>
	<li>
	<p><code>public List&lt;Integer&gt; getNumList(int num, Supplier&lt;Integer&gt; sup){</code></p>
	</li>
	<li>
	<p><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></p>
	</li>
	<li>
	<p><code>for (int i = 0; i &lt; num; i++) {</code></p>
	</li>
	<li>
	<p><code>Integer n = sup.get();</code></p>
	</li>
	<li>
	<p><code>list.add(n);</code></p>
	</li>
	<li>
	<p><code>} </code></p>
	</li>
	<li>
	<p><code>return list;</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><strong>(3)，Function&lt;T, R&gt; : 函数型接口 &nbsp;&nbsp;R apply(T t);</strong></p>

<p><strong>示例：</strong></p>

<ol>
	<li>
	<p><code>//Function&lt;T, R&gt; 函数型接口：</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test3(){</code></p>
	</li>
	<li>
	<p><code>String newStr = strHandler(&quot;\t\t\t 我大尚硅谷威武 &quot;, (str) -&gt; str.trim());</code></p>
	</li>
	<li>
	<p><code>System.out.println(newStr);</code></p>
	</li>
	<li>
	<p><code>String subStr = strHandler(&quot;我大尚硅谷威武&quot;, (str) -&gt; str.substring(2, 5));</code></p>
	</li>
	<li>
	<p><code>System.out.println(subStr);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>//需求：用于处理字符串</code></p>
	</li>
	<li>
	<p><code>public String strHandler(String str, Function&lt;String, String&gt; fun){</code></p>
	</li>
	<li>
	<p><code>return fun.apply(str);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><strong>(4)，Predicate&lt;T&gt; : 断言型接口 &nbsp;boolean test(T t);</strong></p>

<p><strong>示例：</strong></p>

<ol>
	<li>
	<p><code>//Predicate&lt;T&gt; 断言型接口：</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test4(){</code></p>
	</li>
	<li>
	<p><code>List&lt;String&gt; list = Arrays.asList(&quot;Hello&quot;, &quot;atguigu&quot;, &quot;Lambda&quot;, &quot;www&quot;, &quot;ok&quot;);</code></p>
	</li>
	<li>
	<p><code>List&lt;String&gt; strList = filterStr(list, (s) -&gt; s.length() &gt; 3);</code></p>
	</li>
	<li>
	<p><code>for (String str : strList) {</code></p>
	</li>
	<li>
	<p><code>System.out.println(str);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>//需求：将满足条件的字符串，放入集合中</code></p>
	</li>
	<li>
	<p><code>public List&lt;String&gt; filterStr(List&lt;String&gt; list, Predicate&lt;String&gt; pre){</code></p>
	</li>
	<li>
	<p><code>List&lt;String&gt; strList = new ArrayList&lt;&gt;();</code></p>
	</li>
	<li>
	<p><code>for (String str : list) {</code></p>
	</li>
	<li>
	<p><code>if(pre.test(str)){</code></p>
	</li>
	<li>
	<p><code>strList.add(str);</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>return strList;</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<h3><strong>5,其它接口</strong></h3>

<p><img alt="" src="https://img-blog.csdn.net/20180723154856471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:607px; width:978px" /></p>

<h3><strong>6，方法引用和构造器引用</strong></h3>

<p><strong><strong>方法引用：</strong></strong></p>

<p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p>

<p>（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！ ）</p>

<p>方法引用：使用操作符 &ldquo;::&rdquo; 将方法名和对象或类的名字分隔开来。</p>

<p>如下三种主要使用情况：</p>

<p><strong>（1）对象::实例方法</strong></p>

<p><strong>例如：</strong></p>

<pre>

&nbsp;</pre>

<ol>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test1(){</code></p>
	</li>
	<li>
	<p><code>PrintStream ps = System.out;</code></p>
	</li>
	<li>
	<p><code>Consumer&lt;String&gt; con = (str) -&gt; ps.println(str);</code></p>
	</li>
	<li>
	<p><code>con.accept(&quot;Hello World！&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;--------------------------------&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>Consumer&lt;String&gt; con2 = ps::println;</code></p>
	</li>
	<li>
	<p><code>con2.accept(&quot;Hello Java8！&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>Consumer&lt;String&gt; con3 = System.out::println;</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test2(){</code></p>
	</li>
	<li>
	<p><code>Employee emp = new Employee(101, &quot;张三&quot;, 18, 9999.99);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>Supplier&lt;String&gt; sup = () -&gt; emp.getName();</code></p>
	</li>
	<li>
	<p><code>System.out.println(sup.get());</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;----------------------------------&quot;);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>Supplier&lt;String&gt; sup2 = emp::getName;</code></p>
	</li>
	<li>
	<p><code>System.out.println(sup2.get());</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><strong>（2）类::静态方法</strong></p>

<p><strong>例如：</strong></p>

<ol>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test3(){</code></p>
	</li>
	<li>
	<p><code>BiFunction&lt;Double, Double, Double&gt; fun = (x, y) -&gt; Math.max(x, y);</code></p>
	</li>
	<li>
	<p><code>System.out.println(fun.apply(1.5, 22.2));</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;--------------------------------------------------&quot;);</code></p>
	</li>
	<li>
	<p><code>BiFunction&lt;Double, Double, Double&gt; fun2 = Math::max;</code></p>
	</li>
	<li>
	<p><code>System.out.println(fun2.apply(1.2, 1.5));</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test4(){</code></p>
	</li>
	<li>
	<p><code>Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;-------------------------------------&quot;); </code></p>
	</li>
	<li>
	<p><code>Comparator&lt;Integer&gt; com2 = Integer::compare;</code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
	<li>
	<p><code>（3）类::实例方法</code></p>
	</li>
	<li>
	<p><code>例如：</code></p>
	</li>
	<li>
	<p><code>@Test</code></p>
	</li>
	<li>
	<p><code>public void test5(){</code></p>
	</li>
	<li>
	<p><code>BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</code></p>
	</li>
	<li>
	<p><code>System.out.println(bp.test(&quot;abcde&quot;, &quot;abcde&quot;));</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;-----------------------------------------&quot;);</code></p>
	</li>
	<li>
	<p><code>BiPredicate&lt;String, String&gt; bp2 = String::equals;</code></p>
	</li>
	<li>
	<p><code>System.out.println(bp2.test(&quot;abc&quot;, &quot;abc&quot;));</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;-----------------------------------------&quot;);</code></p>
	</li>
	<li>
	<p><code>Function&lt;Employee, String&gt; fun = (e) -&gt; e.show();</code></p>
	</li>
	<li>
	<p><code>System.out.println(fun.apply(new Employee()));</code></p>
	</li>
	<li>&nbsp;</li>
	<li>
	<p><code>System.out.println(&quot;-----------------------------------------&quot;);</code></p>
	</li>
	<li>
	<p><code>Function&lt;Employee, String&gt; fun2 = Employee::show;</code></p>
	</li>
	<li>
	<p><code>System.out.println(fun2.apply(new Employee())); </code></p>
	</li>
	<li>
	<p><code>}</code></p>
	</li>
</ol>

<p><strong>注意：</strong></p>

<p><strong>&nbsp;* ①方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致！</strong></p>

<p><strong>&nbsp;* ②若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数时，格式： ClassName::MethodName</strong></p>

<p><strong><strong>构造器引用：</strong></strong><strong>构造器的参数列表，需要与函数式接口中参数列表保持一致！</strong></p>

<p>格式： ClassName::new</p>

<p>与函数式接口相结合，自动与函数式接口中方法兼容。</p>

<p>可以把构造器引用赋值给定义的方法，与构造器参数</p>

<p>列表要与接口中抽象方法的参数列表一致！</p>

<p><img alt="" src="https://img-blog.csdn.net/20180723155003947?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:227px; width:881px" /></p>

<p><strong>数组引用：</strong></p>

<p><img alt="" src="https://img-blog.csdn.net/2018072315501451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hocTEy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="height:422px; width:889px" /></p>

<p>&nbsp;</p>
