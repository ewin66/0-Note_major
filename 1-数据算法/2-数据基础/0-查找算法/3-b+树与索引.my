<h1>一、B+树</h1>

<h2>B+树的特征</h2>

<ol>
	<li><strong>有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。</strong></li>
	<li><strong>所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</strong></li>
	<li><strong>所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。</strong><br />
	如图（图片来自程序员小灰）</li>
</ol>

<p><img alt="此处输入图片的描述" src="https://hexopic.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/WeChat%20Image_20180812150928.jpg_wm" title="此处输入图片的描述" /></p>

<p>在程序员小灰的公众号里提到了一个概念&mdash;&mdash;卫星数据：索引元素指向的数据记录，比如数据库中的某一行。在B+树中只有叶子节点带卫星数据，其他的中间节点只是索引，没有任何数据关联。</p>

<p>在数据库的聚集索引（Clustered Index）中，叶子节点直接包含卫星数据。在非聚集索引（NonClustered Index）中，叶子节点带有指向卫星数据的指针。 吧?</p>

<h2>B+树的优势</h2>

<ol>
	<li><strong>单一节点存储更多元素</strong>。B+树中间节点没有卫星数据（也就是说只包含索引信息），所以<strong>每个非叶子节点可以包含更多的内容，同样大小的磁盘页可以容纳更多的节点元素</strong>。也就是说B+树会在相同数据量的情况下比B树更加&ldquo;矮胖&rdquo;，查询的IO次数更少。</li>
	<li><strong>查询效率稳定</strong>。B+树的查询必须最终找到叶子节点，而B树如果在中间节点找到匹配的即可（最好情况是只查根节点，最差是查到叶子节点），而B+树每一次都是稳定的。<strong>B-树的好处是，虽然查询性能不稳定，但平均的查询速度快一些</strong>。试想一个数据库的查询，有时候执行10毫秒，有时候执行100毫秒，肯定是不太合适的。还不如每次都执行30毫秒。</li>
	<li><strong>范围查询简便</strong>。B树的范围查询只能依靠繁琐的中序遍历，找到下限和上限。而<strong>B+树的范围查询很简单，只需要在叶子节点那一层的链表上做遍历就行</strong>。</li>
</ol>

<h2>为什么数据库中一定要索引</h2>

<p><strong>二分查找，二叉树查找都依赖特定的数据结构，分别是待查找数据有序、二叉查找树，显然数据本身不能完全满足各种数据结构。</strong><br />
所以，数据库除了维护数据之外，还维护者<strong>满足特定查找算法的数据结构&mdash;&mdash;索引</strong>，索引以某种方式引用数据，这样就可以在索引的基础上实现高级的查找等操作。目前<strong>大部分数据库系统和文件系统都采用B树或者变种的B+树来作为索引结构</strong>。</p>

<h2>为什么MySQL数据库中使用B+树</h2>

<p><strong>1.局部性原理与磁盘预读</strong><br />
由于磁盘的存取速度与内存之间鸿沟,为了提高效率,要尽量减少磁盘I/O.磁盘往往不是严格按需读取，而是每次都会预读,磁盘读取完需要的数据,会顺序向后读一定长度的数据放入内存。而这样做的理论依据是计算机科学中著名的局部性原理：</p>

<blockquote>
<p>当一个数据被用到时，其附近的数据也通常会马上被使用，程序运行期间所需要的数据通常比较集中</p>
</blockquote>

<p><strong>由于磁盘顺序读取的效率很高</strong>(不需要寻道时间，只需很少的旋转时间)，因此对于具有局部性的程序来说，预读可以提高I/O效率.预读的长度一般为页(page)的整倍数。</p>

<p><strong>2.数据库索引采用B+树的主要原因</strong><br />
根据上面的局部性原理和磁盘预读，B树中用了这个技巧：每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个结点只需一次I/O。<br />
B树在提高了IO性能的同时并没有解决元素遍历的效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在<strong>数据库中基于范围的查询是非常频繁</strong>（比如查询某段时间之内的数据）的，而B树不支持这样的操作或者说<strong>效率太低</strong>（前文已经说明效率低的原因）。</p>
