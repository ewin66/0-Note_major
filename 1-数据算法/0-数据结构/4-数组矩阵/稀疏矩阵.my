<h1>如何高效存储稀疏矩阵？</h1>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp; 为了节省存储空间并且加快并行程序处理速度，需要对稀疏矩阵进行压缩存储，压缩存储的原则是：不重复存储相同元素；不存储零值元素。常用的几种矩阵的存储格式如下：COO,CSR,DIA,ELL,HYB等；一般情况下，稀疏矩阵指的是元素大部分是0的矩阵(有些资料定义非零元素不超过5%的矩阵，为稀疏矩阵);所以如何高效存储以及其格式如何确定，往往会影响并行程序的运行效率。</p>

<p>接下来介绍几种存储格式：</p>

<p>（一）Coordinate(COO)</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300488598079.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300495151681.png" style="height:250px; width:477px" title="image" /></a></p>

<p>这种存储格式比较简单易懂，每一个元素需要用一个三元组来表示，分别是（行号，列号，数值），对应上图右边的一列。这种方式简单，但是记录单信息多（行列），每个三元组自己可以定位，因此空间不是最优。</p>

<p>&nbsp;</p>

<p>(二)Compressed Sparse Row (CSR)</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300502345067.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300509215911.png" style="height:253px; width:479px" title="image" /></a></p>

<p>这是经常用的一种，我们会经常在一些标准的线性代数库或者数值运算库中看到此方式存储；CSR是比较标准的一种，也需要三类数据来表达：数值，列号，以及行偏移。CSR不是三元组，而是整体的编码方式。数值和列号与COO一致，表示一个元素以及其列号，行偏移表示某一行的第一个元素在values里面的起始偏移位置。如上图中，第一行元素1是0偏移，第二行元素2是2偏移，第三行元素5是4偏移，第4行元素6是7偏移。在行偏移的最后补上矩阵总的元素个数，本例中是9。</p>

<p>&nbsp;</p>

<p>CSC是和CSR相对应的一种方式，即按列压缩的意思。</p>

<p>以上图中矩阵为例：</p>

<p>Values： &nbsp; &nbsp; &nbsp; &nbsp;[1 5 7 2 6 8 3 9 4]</p>

<p>Row Indices：[0 2 0 1 3 1 2 2 3]</p>

<p>Column Offsets：[0 2 5 7 9]</p>

<p>&nbsp;</p>

<p>再来看一个CSR的例子[4]：</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300515627039.png" target="_blank"><img alt="96202_2458312_1" src="http://images.cnitblog.com/blog/354318/201502/042300522497883.png" style="height:440px; width:297px" title="96202_2458312_1" /></a></p>

<p>&nbsp;</p>

<p>（3）ELLPACK (ELL)</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300529065782.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300536567411.png" style="height:264px; width:514px" title="image" /></a></p>

<p>用两个和原始矩阵相同行数的矩阵来存：第一个矩阵存的是列号，第二个矩阵存的是数值，行号就不存了，用自身所在的行来表示；这两个矩阵每一行都是从头开始放，如果没有元素了就用个标志比如*结束。上图中间矩阵有误，第三行应该是&nbsp; 0 2 3。</p>

<p>&nbsp;</p>

<p>注：这样如果某一行很多元素，那么后面两个矩阵就会很胖，其他行结尾*很多，浪费。可以存成数组，比如上面两个矩阵就是：</p>

<p>0 1 * 1 2 * 0 2 3 * 1 3 *</p>

<p>1 7 * 2 8 * 5 3 9 * 6 4 *</p>

<p>但是这样要取一行就比较不方便了</p>

<p>（4）Diagonal (DIA)</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300543282486.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300550622642.png" style="height:263px; width:509px" title="image" /></a></p>

<p>对角线存储法，按对角线方式存，列代表对角线，行代表行。省略全零的对角线。(从左下往右上开始：第一个对角线是零忽略，第二个对角线是5，6，第三个对角线是零忽略，第四个对角线是1，2，3，4，第五个对角线是7，8，9，第六第七个对角线忽略)。[3]</p>

<p>这里行对应行，所以5和6是分别在第三行第四行的，前面补上无效元素*。如果对角线中间有0，存的时候也需要补0，所以如果原始矩阵就是一个对角性很好的矩阵那压缩率会非常高，比如下图，但是如果是随机的那效率会非常糟糕。</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300555155714.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300558749757.png" style="height:155px; width:156px" title="image" /></a><a href="http://images.cnitblog.com/blog/354318/201502/042300564212858.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300570623986.png" style="height:156px; width:162px" title="image" /></a></p>

<p>&nbsp;</p>

<p>（5）Hybrid (HYB) ELL + COO</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300575465301.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300584844987.png" style="height:301px; width:498px" title="image" /></a></p>

<p>为了解决（3）ELL中提到的，如果某一行特别多，造成其他行的浪费，那么把这些多出来的元素（比如第三行的9，其他每一行最大都是2个元素）用COO单独存储。</p>

<p>&nbsp;</p>

<p>选择稀疏矩阵存储格式的一些经验[2]：</p>

<ol>
	<li>DIA和ELL格式在进行稀疏矩阵-矢量乘积(sparse matrix-vector products)时效率最高，所以它们是应用迭代法(如共轭梯度法)解稀疏线性系统最快的格式；</li>
	<li>COO和CSR格式比起DIA和ELL来，更加灵活，易于操作；</li>
	<li>ELL的优点是快速，而COO优点是灵活，二者结合后的HYB格式是一种不错的稀疏矩阵表示格式；</li>
	<li>根据<a href="http://www.bu.edu/pasi/files/2011/01/NathanBell1-10-1000.pdf" target="_blank">Nathan Bell的工作</a>，CSR格式在存储稀疏矩阵时非零元素平均使用的字节数(Bytes per Nonzero Entry)最为稳定（float类型约为8.5，double类型约为12.5），而DIA格式存储数据的非零元素平均使用的字节数与矩阵类型有较大关系，适合于StructuredMesh结构的稀疏矩阵（float类型约为4.05，double类型约为8.10），对于Unstructured Mesh以及Random Matrix,DIA格式使用的字节数是CSR格式的十几倍；</li>
	<li>从我使用过的一些线性代数计算库来说，COO格式常用于从文件中进行稀疏矩阵的读写，如matrix market即采用COO格式，而CSR格式常用于读入数据后进行稀疏矩阵计算。</li>
</ol>

<p>&nbsp;</p>

<p>一些特殊类型矩阵的存储效率（数值越小说明压缩率越高，即存储效率越高）:</p>

<p>Structured Mesh</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042300591099344.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042300596248903.png" style="height:232px; width:463px" title="image" /></a></p>

<p>Unstructured Mesh</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042301001712004.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042301009531876.png" style="height:236px; width:461px" title="image" /></a></p>

<p>Random matrix</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042301016563789.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042301024373662.png" style="height:240px; width:469px" title="image" /></a></p>

<p>Power-Law Graph</p>

<p><a href="http://images.cnitblog.com/blog/354318/201502/042301029845762.png" target="_blank"><img alt="image" src="http://images.cnitblog.com/blog/354318/201502/042301034843848.png" style="height:241px; width:470px" title="image" /></a></p>
