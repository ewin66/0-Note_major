#include<stdio.h>
#define MAX 10

//用来储存多项式的项。 
typedef  struct node{
	int xi,ci;
	struct node *next;
}   Lnode ,*Linklist;

//用来储存多项式 
typedef  struct {
	int length,highest;
	Linklist head; 
}   Dnode ,*Dinklist;



/*创建项*/
/*入口参数：无，返回值：单链表的头指针，0代表创建失败，非0表示创建成功*/
Linklist Creat_Linklist(void)
	{
	Linklist H;
	H=(Linklist)malloc(sizeof(Lnode));
	if(H)
	H->next=NULL;
	return(H); 
}

/*创建多项式*/
/*入口参数：无，返回值：多项式的头指针，0代表创建失败，非0表示创建成功*/
Dinklist Creat_Dinklist(void)
	{
	Dinklist H;
	H=(Dinklist)malloc(sizeof(Dnode));
	if(H)
	H->head=NULL;
	return(H); 
}


/*销毁单链表*/
/*入口参数：单链表头指针*/
void Destroy_Linklist(Linklist H )
	{
	Linklist p,q;
	p=H;
	while(p)
	{
		q=p;
		p=p->next;
		free(q);
	}
	H=NULL;
}


 

/*多项式的输入*/ 
/*向多项式的单链表表中输入数据，入口参数：多项式中项的头指针，返回标志1表示成功，-1表示表不存在*/
int  Input_Linklist(Dinklist A)
{   Linklist H;
    H=Creat_Linklist();
    H=A->head;
    int xi,ci; 
	if(!H)
	{
		printf("表不存在。");
		return(-1); 
	}
	scanf("%d",&xi);	
	//while(xi!='@') 
	while(xi!=-1) 
	{H->xi=xi;
	 scanf("%d",&ci);	
	 H->ci=ci;
	 scanf("%d",&xi);
	 if(xi!=-1) 	
	 {H->next=Creat_Linklist();
     H=H->next;	}
     }
    H=NULL;
    
	return(1);	
} 



/*多项式的输出*/ 
/*向顺序表中输入数据，入口参数：多项式中项的头指针，返回标志1表示成功,-1表示表不存在*/
 
int  Output_Linklist(Dinklist A)
{   Linklist H;
    H=Creat_Linklist();
    H=A->head;
	if(!H)
	{
		printf("表不存在。");
		return(-1); 
	}
	
    while(H!=NULL)
	{ printf("%5dX^%5d",H->xi,H->ci);
      H=H->next; 
	  printf("+");
	}
	return(1);	
} 



main()
{ 
 Dinklist A,B;
 A=Creat_Dinklist();
 A->head=Creat_Linklist();
 //Dnode he,cha,ji;
 
 printf("请输入需要处理的多项式A,输入‘@’时停止输入\n");
 Input_Linklist(A);
 Output_Linklist(A);
 /*
 printf("请输入需要处理的多项式B,输入‘@’时停止输入\n"); 
 Input_Linklist(B.head);
 
 
 
 he=add_Dnode(A,B);
 printf("多项式的和为：\n"); 
 Output_Linklist(he.head);
 
 cha=cut_Dnode(A,B); 
 printf("多项式的差为：\n"); 
 Output_Linklist(cha.head);
 
 
 
 ji=ride_Dnode(A,B);
 printf("多项式的乘积为：\n"); 
 Output_Linklist(ji.head);  */
 getch();
}

