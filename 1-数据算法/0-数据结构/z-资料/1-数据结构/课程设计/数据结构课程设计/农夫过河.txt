#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 

#define MAX_STEP 20 

/*行下标表示次数，列下标分别表示: 0 - 狼，1－羊，2－菜，3－农夫，值表示：0－本岸，1－对岸*/
int Buzou[MAX_STEP][4];  //4表示都在本岸，初始值为0 
int Cunfang[MAX_STEP];  //用来存放每一步操作的动作对象

char *name[] = 
{ 
       "people", 
       "wolf+people", 
       "goat+people", 
       "cabbage+people" 
}; 

void search(int iStep) 
{ 
 int i; 
 if (Buzou[iStep][0] + Buzou[iStep][1] + Buzou[iStep][2] +Buzou[iStep][3] == 4) 
 //递归的结束条件，最后的结果，即4个都到对岸后，分别输入每一步的操作
 { 
  for (i = 0; i < iStep; i++) 
  { 
   if (Buzou[i][3] == 0)       //a[i][3]表示农夫，因为每次农夫必须动
   { 
    printf("%s到对岸\n", name[Cunfang[i] + 1]); 
   } 
   else          
   { 
    printf("%s回本岸\n", name[Cunfang[i] + 1]); 
   } 
  } 
  printf("\n"); 
  return; 
 }
//下面这个for语句是一个比较的语句，处理的问题是，当第n步移动后，如果跟前面某一步移动后的状态时一样的，那么表示没有意义，结束本次递归，防止进入死循环
 for (i = 0; i < iStep; i++) 
 { 
  if (memcmp(Buzou[i], Buzou[iStep], sizeof(Buzou[i])) == 0) 
  { 
   return; 
  } 
 } 
//下面这个if表示当本次是这种情况：农夫和羊没在一起，而且羊和狼在一起或者羊和菜在一起，那么就会违反规则，则结束本次调用
 if (Buzou[iStep][1] != Buzou[iStep][3] && (Buzou[iStep][2] == Buzou[iStep][1] || Buzou[iStep][0] == Buzou[iStep][1])) 
 { 
  return; 
 } 
//排除了前面的特殊情况，下面进入真正的递归阶段 
 for (i = -1; i <= 2; i++) 
 { 
  Cunfang[iStep] = i;    //将第istep步骤的操作赋值给b[istep],默认为-1
  memcpy(Buzou[iStep + 1], Buzou[iStep], sizeof(Buzou[iStep + 1])); 
  Buzou[iStep + 1][3] = 1 - Buzou[iStep + 1][3];    //由于0表示本岸，1表示对岸，1-值表示交换，即每次农夫是必须动的。
  if (i == -1)
  //如果i==-1就递归下一次，这里表示只有农夫运动      
  { 
   search(iStep + 1); 
  } 
  else if (Buzou[iStep][i] == Buzou[iStep][3])
  //从0到2表示 0 - 狼，1－羊，2－菜，判断是否跟农夫在一边，在一边才可能被带走
  { 
    Buzou[iStep + 1][i] = Buzou[iStep + 1][3]; //表示i被带走了，那么下一次的值因为是跟农夫一样的
    search(iStep + 1); 
  } 
 } 
} 

int main() 
{ 
  printf("\n\n 农夫过河问题的解决方案如下 \n\n");
 search(0); 
 return 0; 
}

