<h1>B-树</h1>

<p><strong>1 .B-树定义</strong></p>

<p>B-树是一种平衡的多路查找树，它在<strong>文件系统中</strong>很有用。</p>

<p>定义：一棵m 阶的B-树，或者为空树，或为满足下列特性的m 叉树：<br />
⑴树中每个结点至多有m 棵子树；<br />
⑵若根结点不是叶子结点，则至少有两棵子树；</p>

<p>⑶除根结点之外的所有非终端结点至少有[m/2] 棵子树；<br />
⑷所有的非终端结点中包含以下信息数据：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（n，A0，K1，A1，K2，&hellip;，Kn，An）<br />
其中：<strong>Ki</strong>（i=1,2,&hellip;,n）为关键码，且Ki&lt;Ki+1，</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;Ai</strong>&nbsp;为指向子树根结点的指针(i=0,1,&hellip;,n)，且指针Ai-1 所指子树中所有结点的关键码均小于Ki (i=1,2,&hellip;,n)，An 所指子树中所有结点的关键码均大于Kn.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;&nbsp;<img alt="" src="http://my.csdn.net/uploads/201207/28/1343441678_6896.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" />&nbsp;为关键码的个数。<br />
⑸所有的叶子结点都出现在同一层次上，并且不带信息（可以看作是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空）。</p>

<p>&nbsp;&nbsp;&nbsp;即所有叶节点具有相同的深度，等于树高度。</p>

<p>&nbsp;如一棵四阶B-树，其深度为4.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="http://my.csdn.net/uploads/201207/28/1343441845_4081.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;</p>

<p>B-树的查找类似二叉排序树的查找，所不同的是B-树每个结点上是多关键码的有序表，在到达某个结点时，先在有序表中查找，若找到，则查找成功；否则，到按照对应的指针信息指向的子树中去查找，当到达叶子结点时，则说明树中没有对应的关键码。</p>

<p>在上图的B-树上查找关键字47的过程如下：</p>

<p>1）首先从更开始，根据根节点指针找到 *节点，因为 *a 节点中只有一个关键字，且给定值47 &gt; 关键字35，则若存在必在指针A1所指的子树内。</p>

<p>2）顺指针找到 *c节点，该节点有两个关键字（43和 78），而43 &lt; 47 &lt; 78,若存在比在指针A1所指的子树中。</p>

<p>3）同样，顺指针找到 *g节点，在该节点找到关键字47,查找成功。</p>

<p><strong>2. 查找算法</strong></p>

<p>&nbsp;</p>

<ol start="1">
	<li>typedef&nbsp;int&nbsp;KeyType&nbsp;;&nbsp;&nbsp;</li>
	<li>#define&nbsp;m&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>typedef&nbsp;struct&nbsp;Node{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;keynum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;Node&nbsp;*parent;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;KeyType&nbsp;key[m+1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;Node&nbsp;*ptr[m+1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;Record&nbsp;*recptr[m+1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}NodeType;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>typedef&nbsp;struct{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;NodeType&nbsp;*pt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;tag;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}Result;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>Result&nbsp;SearchBTree(NodeType&nbsp;*t,KeyType&nbsp;kx)&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;p=t;q=NULL;found=FALSE;i=0;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;while(p&amp;&amp;!found)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;n=p-&gt;keynum;i=Search(p,kx);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i&gt;0&amp;&amp;p-&gt;key[i]=&nbsp;=kx)&nbsp;found=TRUE;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{q=p;p=p-&gt;ptr[i];}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;if(found)&nbsp;return&nbsp;(p,i,1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;return&nbsp;(q,i,0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>B- 树查找算法分析</p>

<p>从查找算法中可以看出， 在B- 树中进行查找包含两种基本操作:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;( 1) 在B- 树中查找结点；</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( 2) 在结点中查找关键字。</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于B- 树通常存储在磁盘上， 则前一查找操作是在磁盘上进行的， 而后一查找操作是在内存中进行的， 即在磁盘上找到指针p 所指结点后， 先将结点中的信息读入内存， 然后再利用顺序查找或折半查找查询等于K 的关键字。显然， 在磁盘上进行一次查找比在内存中进行一次查找的时间消耗多得多.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此， 在磁盘上进行查找的次数、即待查找关键字所在结点在B- 树上的层次树， 是决定B树查找效率的首要因素</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么，对含有n 个关键码的m 阶B-树，最坏情况下达到多深呢？可按二叉平衡树进行类似分析。首先，讨论m 阶B-数各层上的最少结点数。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由B树定义：B树包含n个关键字。因此有n+1个树叶都在第J+1 层。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;1）第一层为根，至少一个结点，根至少有两个孩子，因此在第二层至少有两个结点。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;2）除根和树叶外，其它结点至少有[m/2]个孩子,因此第三层至少有2*[m/2]个结点,在第四层至少有2*[m/2]2 个结点&hellip;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;3）那么在第J+1层至少有2*[m/2]J-1个结点,而J+1层的结点为叶子结点,于是叶子结点的个数n+1。有：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="http://my.csdn.net/uploads/201208/05/1344136805_2674.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说在n个关键字的B树查找，从根节点到关键字所在的节点所涉及的节点数不超过：</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="http://my.csdn.net/uploads/201208/05/1344137015_3085.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p><strong>3.B-树的插入</strong></p>

<p>&nbsp;&nbsp;B<sup>-</sup>树的生成也是从空树起，逐个插入关键字而得。但由于B<sup>-</sup>树结点中的关键字个数必须&ge;ceil(m／2)-1，因此，每次插入一个关键字不是在树中添加一个叶子结点，而是首先在最低层的某个非终端结点中添加一个关键字，若该结点的关键字个数不超过m-1，则插入完成，否则要产生结点的&ldquo;分裂&rdquo;，</p>

<p>如图（a） 为3阶的B<sup>-</sup>树(图中略去F结点(即叶子结点))，假设需依次插入关键字30，26，85。</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343446197_1391.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;</p>

<p>1) 首先通过查找确定插入的位置。由根*a 起进行查找，确定30应插入的在*d 节点中。由于*d 中关键字数目不超过2（即m-1），故第一个关键字插入完成：如（b）</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343446461_4065.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>2) 同样，通过查找确定关键字26亦应插入 *d. 由于*d节点关键字数目超过2，此时需要将 *d分裂成两个节点，关键字26及其前、后两个指针仍保留在 *d 节点中，而关键字37 及其前、后两个指针存储到新的产生的节点 *d` 中。同时将关键字30 和指示节点 *d `的指针插入到其双亲的节点中。由于 *b节点中的关键字数目没有超过2，则插入完成.如（c）(d)</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343446945_6106.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /><img alt="" src="http://my.csdn.net/uploads/201207/28/1343446959_3942.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>3) (e) -(g) 为插入85后;</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343447240_4849.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /><img alt="" src="http://my.csdn.net/uploads/201207/28/1343447259_8845.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /><img alt="" src="http://my.csdn.net/uploads/201207/28/1343447274_2818.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p><strong>插入算法：</strong></p>

<p>&nbsp;</p>

<ol start="1">
	<li>int&nbsp;InserBTree(NodeType&nbsp;**t,KeyType&nbsp;kx,NodeType&nbsp;*q,int&nbsp;i){&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;x=kx;ap=NULL;finished=FALSE;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;while(q&amp;&amp;!finished)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Insert(q,i,x,ap);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(q-&gt;keynum&lt;m)&nbsp;finished=TRUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s=m/2;split(q,ap);x=q-&gt;key[s];&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q=q-&gt;parent;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(q)&nbsp;i=Search(q,kx);&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;if(!finished)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;NewRoot(t,q,x,ap);&nbsp;&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p><strong>4. B-树的删除</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反之，若在B<sup>-</sup>树上删除一个关键字，则首先应找到该关键字所在结点，并从中删除之，若该结点为最下层的非终端结点，且其中的关键字数目不少于ceil(m/2)，则删除完成，否则要进行&ldquo;合并&rdquo;结点的操作。假若所删关键字为非终端结点中的Ki，则可以指针Ai所指子树中的最小关键字Y替代Ki，然后在相应的结点中删去Y。例如，在下图&nbsp;&nbsp;图4.1( a)的B<sup>-</sup>树上删去45，可以*f结点中的50替代45，然后在*f结点中删去50。</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343446197_1391.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图4.1( a)</p>

<p>因此，下面我们可以只需<strong>讨论删除最下层非终端结点中的关键字的情形。有下列三种可能：</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;(1)被删关键字所在结点中的关键字数目不小于ceil(m/2)，则只需从该结点中删去该关键字Ki和相应指针Ai，树的其它部分不变，例如，从图&nbsp;&nbsp;图4.1( a)所示B<sup>-</sup>树中删去关键字12，删除后的B<sup>-</sup>树如图&nbsp;&nbsp;图4.2( a)所示：</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/29/1343529023_5355.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图4.2( a)</p>

<p>&nbsp;&nbsp;&nbsp;(2)被删关键字所在结点中的关键字数目等于ceil(m/2)-1，而与该结点相邻的右兄弟(或左兄弟)结点中的关键字数目大于ceil(m/2)-1，则需将其兄弟结点中的最小(或最大)的关键字上移至双亲结点中，而将双亲结点中小于(或大于)且紧靠该上移关键字的关键字下移至被删关键字所在结点中。</p>

<p><strong>[例如]</strong>，从图图4.2( a)中删去50，需将其右兄弟结点中的61上移至*e结点中，而将*e结点中的53移至*f，从而使*f和*g中关键字数目均不小于ceil(m-1)-1，而双亲结点中的关键字数目不变，如图图4.2(b)所示。</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343447825_3701.gif" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图4.2(b)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(3)被删关键字所在结点和其相邻的兄弟结点中的关键字数目均等于ceil(m/2)-1。假设该结点有右兄弟，且其右兄弟结点地址由双亲结点中的指针Ai所指，则在删去关键字之后，它所在结点中剩余的关键字和指针，加上双亲结点中的关键字Ki一起，合并到 Ai所指兄弟结点中(若没有右兄弟，则合并至左兄弟结点中)。<br />
<br />
<strong>[例如]</strong>，从图4.2(b)所示 B<sup>-</sup>树中删去53，则应删去*f结点，并将*f中的剩余信息(指针&ldquo;空&rdquo;)和双亲*e结点中的 61一起合并到右兄弟结点*g中。删除后的树如图4.2(c)所示。</p>

<p>&nbsp;<img alt="" src="http://my.csdn.net/uploads/201207/28/1343447897_7803.gif" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图4.2(c)</p>

<p>&nbsp;如果因此使双亲结点中的关键字数目小于ceil(m/2)-1，则依次类推。</p>

<p><strong>[例如]</strong>，在&nbsp;图4.2(c)的B-树中删去关键字37之后，双亲b结点中剩余信息(&ldquo;指针c&rdquo;)应和其双亲*a结点中关键字45一起合并至右兄弟结点*e中，删除后的B<sup>-</sup>树如图&nbsp;4.2(d)所示。 &nbsp;<br />
<img alt="" src="http://my.csdn.net/uploads/201207/28/1343447905_1607.gif" title="B-树和B+树的应用：数据搜索和数据库索引【转】" />&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图&nbsp;4.2(d)</p>

<p>&nbsp;</p>

<p><strong>B-树主要应用在文件系统</strong></p>

<p><strong>为了将大型数据库文件存储在硬盘上 以减少访问硬盘次数为目的 在此提出了一种平衡多路查找树&mdash;&mdash;B-树结构 由其性能分析可知它的检索效率是相当高的 为了提高&nbsp;B-树性能&rsquo;还有很多种B-树的变型，力图对B-树进行改进</strong></p>

<h2>B+树</h2>

<p>B+树是应文件系统所需而产生的一种B-树的<strong>变形树</strong>。一棵m 阶的B+树和m 阶的B-<br />
树的差异在于：<br />
⑴有n 棵子树的结点中含有n 个关键码；<br />
⑵所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且<br />
叶子结点本身依关键码的大小自小而大的顺序链接。<br />
⑶所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。</p>

<p>&nbsp;如图一棵3阶的B+树:</p>

<p><img alt="" src="http://my.csdn.net/uploads/201207/28/1343448307_6771.jpg" title="B-树和B+树的应用：数据搜索和数据库索引【转】" /></p>

<p>&nbsp;</p>

<p>通常在B+树上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点。因此可以对B+树进行两种查找运算：一种是从最小关键字起顺序查找，另一种是从根节点开始，进行随机查找。&nbsp;</p>

<p>在B+树上进行随机查找、插入和删除的过程基本上与B-树类似。只是在查找时，若非终端结点上的关键码等于给定值，并不终止，而是继续向下直到叶子结点。因此，在B+<br />
树，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径。</p>
