<h1>二叉堆(一)之 图文解析 和 C语言的实现</h1>

<h3><strong>概要</strong></h3>

<p>本章介绍二叉堆，二叉堆就是通常我们所说的数据结构中&quot;堆&quot;中的一种。和以往一样，本文会先对二叉堆的理论知识进行简单介绍，然后给出C语言的实现。后续再分别给出C++和Java版本的实现；实现的语言虽不同，但是原理如出一辙，选择其中之一进行了解即可。若文章有错误或不足的地方，请不吝指出！</p>

<p><strong>目录</strong><br />
1.&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610187.html#a1">堆和二叉堆的介绍</a><br />
2.&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610187.html#a2">二叉堆的图文解析</a><br />
3.&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610187.html#a3">二叉堆的C实现(完整源码)</a><br />
4.&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610187.html#a4">二叉堆的C测试程序</a></p>

<p>转载请注明出处：<a href="http://www.cnblogs.com/skywang12345/p/3610187.html">http://www.cnblogs.com/skywang12345/p/3610187.html</a></p>

<hr />
<p><strong>更多内容：</strong><a href="http://www.cnblogs.com/skywang12345/p/3603935.html">数据结构与算法系列 目录</a></p>

<p>(01)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610187.html">二叉堆(一)之 图文解析 和 C语言的实现</a><br />
(02)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610382.html">二叉堆(二)之 C++的实现</a><br />
(03)&nbsp;<a href="http://www.cnblogs.com/skywang12345/p/3610390.html">二叉堆(三)之 Java的实</a></p>

<p>&nbsp;</p>

<h3><strong><a name="a1"></a>堆和二叉堆的介绍</strong></h3>

<p><strong>堆的定义</strong></p>

<p>堆(heap)，这里所说的堆是数据结构中的堆，而不是内存模型中的堆。堆通常是一个可以被看做一棵树，它满足下列性质：<br />
[<strong>性质一</strong>] 堆中任意节点的值总是不大于(不小于)其子节点的值；<br />
[<strong>性质二</strong>] 堆总是一棵完全树。<br />
将任意节点不大于其子节点的堆叫做最小堆或小根堆，而将任意节点不小于其子节点的堆叫做最大堆或大根堆。常见的堆有二叉堆、左倾堆、斜堆、二项堆、斐波那契堆等等。</p>

<p>&nbsp;</p>

<p><strong>二叉堆的定义</strong></p>

<p>二叉堆是完全二元树或者是近似完全二元树，它分为两种：最大堆和最小堆。<br />
最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。示意图如下：</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182339209436216.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182339209436216.jpg" style="height:238px; width:800px" /></a></p>

<p>&nbsp;</p>

<p>二叉堆一般都通过&quot;数组&quot;来实现。数组实现的二叉堆，父节点和子节点的位置存在一定的关系。有时候，我们将&quot;二叉堆的第一个元素&quot;放在数组索引0的位置，有时候放在1的位置。当然，它们的本质一样(都是二叉堆)，只是实现上稍微有一丁点区别。<br />
假设&quot;第一个元素&quot;在数组中的索引为 0 的话，则父节点和子节点的位置关系如下：<br />
(01) 索引为i的左孩子的索引是 (2*i+1);<br />
(02) 索引为i的左孩子的索引是 (2*i+2);<br />
(03) 索引为i的父结点的索引是 floor((i-1)/2);</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182342224903953.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182342224903953.jpg" style="height:343px; width:800px" /></a></p>

<p>&nbsp;</p>

<p>假设&quot;第一个元素&quot;在数组中的索引为 1 的话，则父节点和子节点的位置关系如下：<br />
(01) 索引为i的左孩子的索引是 (2*i);<br />
(02) 索引为i的左孩子的索引是 (2*i+1);<br />
(03) 索引为i的父结点的索引是 floor(i/2);</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182343402241540.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182343402241540.jpg" style="height:343px; width:800px" /></a></p>

<p>&nbsp;</p>

<p>注意：本文二叉堆的实现统统都是采用&quot;二叉堆第一个元素在数组索引为0&quot;的方式！</p>

<p>&nbsp;</p>

<h3><strong><a name="a2"></a>二叉堆的图文解析</strong></h3>

<p>在前面，我们已经了解到：&quot;最大堆&quot;和&quot;最小堆&quot;是对称关系。这也意味着，了解其中之一即可。本节的图文解析是以&quot;最大堆&quot;来进行介绍的。</p>

<p>二叉堆的核心是&quot;添加节点&quot;和&quot;删除节点&quot;，理解这两个算法，二叉堆也就基本掌握了。下面对它们进行介绍。</p>

<p>&nbsp;</p>

<p><strong>1. 添加</strong></p>

<p>假设在最大堆[90,80,70,60,40,30,20,10,50]种添加85，需要执行的步骤如下：</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182345301461858.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182345301461858.jpg" style="height:570px; width:800px" /></a></p>

<p><em>如上图所示，当向最大堆中添加数据时：先将数据加入到最大堆的最后，然后尽可能把这个元素往上挪，直到挪不动为止！</em><br />
将85添加到[90,80,70,60,40,30,20,10,50]中后，最大堆变成了[90,85,70,60,80,30,20,10,50,40]。</p>

<p>&nbsp;</p>

<p><strong>最大堆的插入代码(C语言)</strong></p>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<pre>
/*
 * 最大堆的向上调整算法(从start开始向上直到0，调整堆)
 *
 * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 *
 * 参数说明：
 *     start -- 被上调节点的起始位置(一般为数组中最后一个元素的索引)
 */
static void maxheap_filterup(int start)
{
    int c = start;            // 当前节点(current)的位置
    int p = (c-1)/2;        // 父(parent)结点的位置 
    int tmp = m_heap[c];        // 当前节点(current)的大小

    while(c &gt; 0)
    {
        if(m_heap[p] &gt;= tmp)
            break;
        else
        {
            m_heap[c] = m_heap[p];
            c = p;
            p = (p-1)/2;   
        }       
    }
    m_heap[c] = tmp;
}
  
/* 
 * 将data插入到二叉堆中
 *
 * 返回值：
 *     0，表示成功
 *    -1，表示失败
 */
int maxheap_insert(int data)
{
    // 如果&quot;堆&quot;已满，则返回
    if(m_size == m_capacity)
        return -1;
 
    m_heap[m_size] = data;        // 将&quot;数组&quot;插在表尾
    maxheap_filterup(m_size);    // 向上调整堆
    m_size++;                    // 堆的实际容量+1

    return 0;
}</pre>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<p>maxheap_insert(data)的作用：将数据data添加到最大堆中。<br />
当堆已满的时候，添加失败；否则data添加到最大堆的末尾。然后通过上调算法重新调整数组，使之重新成为最大堆。</p>

<p>&nbsp;</p>

<p><strong>2. 删除</strong></p>

<p>假设从最大堆[90,85,70,60,80,30,20,10,50,40]中删除90，需要执行的步骤如下：</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182348387716132.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182348387716132.jpg" style="height:403px; width:800px" /></a></p>

<p>从[90,85,70,60,80,30,20,10,50,40]删除90之后，最大堆变成了[85,80,70,60,40,30,20,10,50]。<br />
<em>如上图所示，当从最大堆中删除数据时：先删除该数据，然后用最大堆中最后一个的元素插入这个空位；接着，把这个&ldquo;空位&rdquo;尽量往上挪，直到剩余的数据变成一个最大堆。</em></p>

<p>注意：考虑从最大堆[90,85,70,60,80,30,20,10,50,40]中删除60，执行的步骤不能单纯的用它的子节点来替换；而必须考虑到&quot;替换后的树仍然要是最大堆&quot;！</p>

<p><a href="http://images.cnitblog.com/i/497634/201403/182350015371912.jpg"><img alt="" src="http://images.cnitblog.com/i/497634/201403/182350015371912.jpg" style="height:453px; width:800px" /></a></p>

<p>&nbsp;</p>

<p><strong>最大堆的删除代码(C语言)</strong></p>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<pre>
/* 
 * 返回data在二叉堆中的索引
 *
 * 返回值：
 *     存在 -- 返回data在数组中的索引
 *     不存在 -- -1
 */
int get_index(int data)
{
    int i=0;

    for(i=0; i&lt;m_size; i++)
        if (data==m_heap[i])
            return i;

    return -1;
}

/* 
 * 最大堆的向下调整算法
 *
 * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 *
 * 参数说明：
 *     start -- 被下调节点的起始位置(一般为0，表示从第1个开始)
 *     end   -- 截至范围(一般为数组中最后一个元素的索引)
 */
static void maxheap_filterdown(int start, int end)
{
    int c = start;          // 当前(current)节点的位置
    int l = 2*c + 1;     // 左(left)孩子的位置
    int tmp = m_heap[c];    // 当前(current)节点的大小

    while(l &lt;= end)
    {
        // &quot;l&quot;是左孩子，&quot;l+1&quot;是右孩子
        if(l &lt; end &amp;&amp; m_heap[l] &lt; m_heap[l+1])
            l++;        // 左右两孩子中选择较大者，即m_heap[l+1]
        if(tmp &gt;= m_heap[l])
            break;        //调整结束
        else
        {
            m_heap[c] = m_heap[l];
            c = l;
            l = 2*l + 1;   
        }       
    }   
    m_heap[c] = tmp;
}

/*
 * 删除最大堆中的data
 *
 * 返回值：
 *      0，成功
 *     -1，失败
 */
int maxheap_remove(int data)
{
    int index;
    // 如果&quot;堆&quot;已空，则返回-1
    if(m_size == 0)
        return -1;

    // 获取data在数组中的索引
    index = get_index(data); 
    if (index==-1)
        return -1;

    m_heap[index] = m_heap[--m_size];        // 用最后元素填补
    maxheap_filterdown(index, m_size-1);    // 从index位置开始自上向下调整为最大堆

    return 0;
}</pre>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<p>maxheap_remove(data)的作用：从最大堆中删除数据data。<br />
当堆已经为空的时候，删除失败；否则查处data在最大堆数组中的位置。找到之后，先用最后的元素来替换被删除元素；然后通过下调算法重新调整数组，使之重新成为最大堆。</p>

<p>该&quot;示例的完整代码&quot;以及&quot;最小堆的相关代码&quot;，请参考下面的二叉堆的实现。</p>

<p>&nbsp;</p>

<h3><strong><a name="a3"></a>二叉堆的C实现(完整源码)</strong></h3>

<p>二叉堆的实现同时包含了&quot;最大堆&quot;和&quot;最小堆&quot;，它们是对称关系；理解一个，另一个就非常容易懂了。</p>

<p>二叉堆(最大堆)的实现文件(max_heap.c)</p>

<p><img alt="" id="code_img_opened_0585f32a-f72e-4482-9910-a7122fc8c442" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" /></p>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<pre>
  1 /**
  2  * 二叉堆(最大堆)
  3  *
  4  * @author skywang
  5  * @date 2014/03/07
  6  */
  7 
  8 #include &lt;stdio.h&gt;
  9 #include &lt;stdlib.h&gt;
 10 
 11 #define LENGTH(a) ( (sizeof(a)) / (sizeof(a[0])) )
 12 
 13 static int m_heap[30];        // 数据
 14 static int m_capacity=30;    // 总的容量
 15 static int m_size=0;        // 实际容量(初始化为0)
 16  
 17 /* 
 18  * 返回data在二叉堆中的索引
 19  *
 20  * 返回值：
 21  *     存在 -- 返回data在数组中的索引
 22  *     不存在 -- -1
 23  */
 24 int get_index(int data)
 25 {
 26     int i=0;
 27 
 28     for(i=0; i&lt;m_size; i++)
 29         if (data==m_heap[i])
 30             return i;
 31 
 32     return -1;
 33 }
 34 
 35 /* 
 36  * 最大堆的向下调整算法
 37  *
 38  * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 39  *
 40  * 参数说明：
 41  *     start -- 被下调节点的起始位置(一般为0，表示从第1个开始)
 42  *     end   -- 截至范围(一般为数组中最后一个元素的索引)
 43  */
 44 static void maxheap_filterdown(int start, int end)
 45 {
 46     int c = start;          // 当前(current)节点的位置
 47     int l = 2*c + 1;     // 左(left)孩子的位置
 48     int tmp = m_heap[c];    // 当前(current)节点的大小
 49 
 50     while(l &lt;= end)
 51     {
 52         // &quot;l&quot;是左孩子，&quot;l+1&quot;是右孩子
 53         if(l &lt; end &amp;&amp; m_heap[l] &lt; m_heap[l+1])
 54             l++;        // 左右两孩子中选择较大者，即m_heap[l+1]
 55         if(tmp &gt;= m_heap[l])
 56             break;        //调整结束
 57         else
 58         {
 59             m_heap[c] = m_heap[l];
 60             c = l;
 61             l = 2*l + 1;   
 62         }       
 63     }   
 64     m_heap[c] = tmp;
 65 }
 66 
 67 /*
 68  * 删除最大堆中的data
 69  *
 70  * 返回值：
 71  *      0，成功
 72  *     -1，失败
 73  */
 74 int maxheap_remove(int data)
 75 {
 76     int index;
 77     // 如果&quot;堆&quot;已空，则返回-1
 78     if(m_size == 0)
 79         return -1;
 80 
 81     // 获取data在数组中的索引
 82     index = get_index(data); 
 83     if (index==-1)
 84         return -1;
 85 
 86     m_heap[index] = m_heap[--m_size];        // 用最后元素填补
 87     maxheap_filterdown(index, m_size-1);    // 从index位置开始自上向下调整为最大堆
 88 
 89     return 0;
 90 }
 91 
 92 /*
 93  * 最大堆的向上调整算法(从start开始向上直到0，调整堆)
 94  *
 95  * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 96  *
 97  * 参数说明：
 98  *     start -- 被上调节点的起始位置(一般为数组中最后一个元素的索引)
 99  */
100 static void maxheap_filterup(int start)
101 {
102     int c = start;            // 当前节点(current)的位置
103     int p = (c-1)/2;        // 父(parent)结点的位置 
104     int tmp = m_heap[c];        // 当前节点(current)的大小
105 
106     while(c &gt; 0)
107     {
108         if(m_heap[p] &gt;= tmp)
109             break;
110         else
111         {
112             m_heap[c] = m_heap[p];
113             c = p;
114             p = (p-1)/2;   
115         }       
116     }
117     m_heap[c] = tmp;
118 }
119   
120 /* 
121  * 将data插入到二叉堆中
122  *
123  * 返回值：
124  *     0，表示成功
125  *    -1，表示失败
126  */
127 int maxheap_insert(int data)
128 {
129     // 如果&quot;堆&quot;已满，则返回
130     if(m_size == m_capacity)
131         return -1;
132  
133     m_heap[m_size] = data;        // 将&quot;数组&quot;插在表尾
134     maxheap_filterup(m_size);    // 向上调整堆
135     m_size++;                    // 堆的实际容量+1
136 
137     return 0;
138 }
139   
140 /* 
141  * 打印二叉堆
142  *
143  * 返回值：
144  *     0，表示成功
145  *    -1，表示失败
146  */
147 void maxheap_print()
148 {
149     int i;
150     for (i=0; i&lt;m_size; i++)
151         printf(&quot;%d &quot;, m_heap[i]);
152 }
153     
154 void main()
155 {
156     int a[] = {10, 40, 30, 60, 90, 70, 20, 50, 80};
157     int i, len=LENGTH(a);
158 
159     printf(&quot;== 依次添加: &quot;);
160     for(i=0; i&lt;len; i++)
161     {
162         printf(&quot;%d &quot;, a[i]);
163         maxheap_insert(a[i]);
164     }
165 
166     printf(&quot;\n== 最 大 堆: &quot;);
167     maxheap_print();
168 
169     i=85;
170     maxheap_insert(i);
171     printf(&quot;\n== 添加元素: %d&quot;, i);
172     printf(&quot;\n== 最 大 堆: &quot;);
173     maxheap_print();
174 
175     i=90;
176     maxheap_remove(i);
177     printf(&quot;\n== 删除元素: %d&quot;, i);
178     printf(&quot;\n== 最 大 堆: &quot;);
179     maxheap_print();
180     printf(&quot;\n&quot;);
181 }</pre>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<p>二叉堆(最小堆)的实现文件(min_heap.c)</p>

<p><img alt="" id="code_img_opened_98cf2c11-835c-4e7c-87c7-40ada2479723" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" /></p>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<pre>
  1 /**
  2  * 二叉堆(最小堆)
  3  *
  4  * @author skywang
  5  * @date 2014/03/07
  6  */
  7 
  8 #include &lt;stdio.h&gt;
  9 #include &lt;stdlib.h&gt;
 10 
 11 #define LENGTH(a) ( (sizeof(a)) / (sizeof(a[0])) )
 12 
 13 static int m_heap[30];
 14 static int m_capacity=30;    // 总的容量
 15 static int m_size=0;        // 实际容量(初始化为0)
 16  
 17 /* 
 18  * 返回data在二叉堆中的索引
 19  *
 20  * 返回值：
 21  *     存在 -- 返回data在数组中的索引
 22  *     不存在 -- -1
 23  */
 24 int get_index(int data)
 25 {
 26     int i=0;
 27 
 28     for(i=0; i&lt;m_size; i++)
 29         if (data==m_heap[i])
 30             return i;
 31 
 32     return -1;
 33 }
 34 
 35 /* 
 36  * 最小堆的向下调整算法
 37  *
 38  * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 39  *
 40  * 参数说明：
 41  *     start -- 被下调节点的起始位置(一般为0，表示从第1个开始)
 42  *     end   -- 截至范围(一般为数组中最后一个元素的索引)
 43  */
 44 static void minheap_filterdown(int start, int end)
 45 {
 46     int c = start;          // 当前(current)节点的位置
 47     int l = 2*c + 1;     // 左(left)孩子的位置
 48     int tmp = m_heap[c];    // 当前(current)节点的大小
 49 
 50     while(l &lt;= end)
 51     {
 52         // &quot;l&quot;是左孩子，&quot;l+1&quot;是右孩子
 53         if(l &lt; end &amp;&amp; m_heap[l] &gt; m_heap[l+1])
 54             l++;        // 左右两孩子中选择较小者，即m_heap[l+1]
 55         if(tmp &lt;= m_heap[l])
 56             break;        //调整结束
 57         else
 58         {
 59             m_heap[c] = m_heap[l];
 60             c = l;
 61             l = 2*l + 1;   
 62         }       
 63     }   
 64     m_heap[c] = tmp;
 65 }
 66  
 67 /*
 68  * 删除最小堆中的data
 69  *
 70  * 返回值：
 71  *      0，成功
 72  *     -1，失败
 73  */
 74 int minheap_remove(int data)
 75 {
 76     int index;
 77     // 如果&quot;堆&quot;已空，则返回-1
 78     if(m_size == 0)
 79         return -1;
 80 
 81     // 获取data在数组中的索引
 82     index = get_index(data); 
 83     if (index==-1)
 84         return -1;
 85 
 86     m_heap[index] = m_heap[--m_size];        // 用最后元素填补
 87     minheap_filterdown(index, m_size-1);    // 从index号位置开始自上向下调整为最小堆
 88 
 89     return 0;
 90 }
 91 
 92 /*
 93  * 最小堆的向上调整算法(从start开始向上直到0，调整堆)
 94  *
 95  * 注：数组实现的堆中，第N个节点的左孩子的索引值是(2N+1)，右孩子的索引是(2N+2)。
 96  *
 97  * 参数说明：
 98  *     start -- 被上调节点的起始位置(一般为数组中最后一个元素的索引)
 99  */
100 static void filter_up(int start)
101 {
102     int c = start;            // 当前节点(current)的位置
103     int p = (c-1)/2;        // 父(parent)结点的位置 
104     int tmp = m_heap[c];        // 当前节点(current)的大小
105 
106     while(c &gt; 0)
107     {
108         if(m_heap[p] &lt;= tmp)
109             break;
110         else
111         {
112             m_heap[c] = m_heap[p];
113             c = p;
114             p = (p-1)/2;   
115         }       
116     }
117     m_heap[c] = tmp;
118 }
119   
120 /* 
121  * 将data插入到二叉堆中
122  *
123  * 返回值：
124  *     0，表示成功
125  *    -1，表示失败
126  */
127 int minheap_insert(int data)
128 {
129     // 如果&quot;堆&quot;已满，则返回
130     if(m_size == m_capacity)
131         return -1;
132  
133     m_heap[m_size] = data;        // 将&quot;数组&quot;插在表尾
134     filter_up(m_size);            // 向上调整堆
135     m_size++;                    // 堆的实际容量+1
136 
137     return 0;
138 }
139   
140 /* 
141  * 打印二叉堆
142  *
143  * 返回值：
144  *     0，表示成功
145  *    -1，表示失败
146  */
147 void minheap_print()
148 {
149     int i;
150     for (i=0; i&lt;m_size; i++)
151         printf(&quot;%d &quot;, m_heap[i]);
152 }
153 
154 void main()
155 {
156     int a[] = {80, 40, 30, 60, 90, 70, 10, 50, 20};
157     int i, len=LENGTH(a);
158 
159     printf(&quot;== 依次添加: &quot;);
160     for(i=0; i&lt;len; i++)
161     {
162         printf(&quot;%d &quot;, a[i]);
163         minheap_insert(a[i]);
164     }
165 
166     printf(&quot;\n== 最 小 堆: &quot;);
167     minheap_print();
168 
169     i=15;
170     minheap_insert(i);
171     printf(&quot;\n== 添加元素: %d&quot;, i);
172     printf(&quot;\n== 最 小 堆: &quot;);
173     minheap_print();
174 
175     i=10;
176     minheap_remove(i);
177     printf(&quot;\n== 删除元素: %d&quot;, i);
178     printf(&quot;\n== 最 小 堆: &quot;);
179     minheap_print();
180     printf(&quot;\n&quot;);
181 }</pre>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h3><strong><a name="a4"></a>二叉堆的C测试程序</strong></h3>

<p>测试程序已经包含在相应的实现文件中了，这里就不再重复说明了。</p>

<p>最大堆(max_heap.c)的运行结果：</p>

<pre>
== 依次添加: 10 40 30 60 90 70 20 50 80 
== 最 大 堆: 90 80 70 60 40 30 20 10 50 
== 添加元素: 85
== 最 大 堆: 90 85 70 60 80 30 20 10 50 40 
== 删除元素: 90
== 最 大 堆: 85 80 70 60 40 30 20 10 50 </pre>

<p>最小堆(min_heap.c)的运行结果：</p>

<pre>
== 依次添加: 80 40 30 60 90 70 10 50 20 
== 最 小 堆: 10 20 30 50 90 70 40 80 60 
== 添加元素: 15
== 最 小 堆: 10 15 30 50 20 70 40 80 60 90 
== 删除元素: 10
== 最 小 堆: 15 20 30 50 90 70 40 80 60 </pre>

<p>&nbsp;</p>

<p>PS.&nbsp;二叉堆是&quot;堆排序&quot;的理论基石。以后讲解算法时会讲解到&quot;堆排序&quot;，理解了&quot;二叉堆&quot;之后，&quot;堆排序&quot;就很简单了。</p>
