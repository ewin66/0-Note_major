<h1>java NIO 的几种通道Channel介绍</h1>
<h2>Java NIO  FileChannel</h2>
<p>Java NIO中的FileChannel是一个连接到文件的通道。可以通过文件通道读写文件。</p>
<p>FileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。</p>
<p>打开FileChannel</p>
<p>在使用FileChannel之前，必须先打开它。但是，我们无法直接打开一个FileChannel，需要通过使用一个InputStream、OutputStream或RandomAccessFile来获取一个FileChannel实例。下面是通过RandomAccessFile打开FileChannel的示例：</p>
<pre>
RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
FileChannel inChannel = aFile.getChannel();
</pre>
<h3>从FileChannel读取数据</h3>
<p>调用多个read()方法之一从FileChannel中读取数据。如：</p>
<pre>
ByteBuffer buf = ByteBuffer.allocate(48);
int bytesRead = inChannel.read(buf);
</pre>
<p>首先，分配一个Buffer。从FileChannel中读取的数据将被读到Buffer中。</p>
<p>然后，调用FileChannel.read()方法。该方法将数据从FileChannel读取到Buffer中。read()方法返回的int值表示了有多少字节被读到了Buffer中。如果返回-1，表示到了文件末尾。</p>
<h3>向FileChannel写数据</h3>
<p>使用FileChannel.write()方法向FileChannel写数据，该方法的参数是一个Buffer。如：</p>
<pre>
String newData = "New String to write to file..." + System.currentTimeMillis();
ByteBuffer buf = ByteBuffer.allocate(48);
buf.clear();
buf.put(newData.getBytes());
buf.flip();
while(buf.hasRemaining()) {
channel.write(buf);
}
</pre>
<p>注意FileChannel.write()是在while循环中调用的。因为无法保证write()方法一次能向FileChannel写入多少字节，因此需要重复调用write()方法，直到Buffer中已经没有尚未写入通道的字节。</p>
<h3>关闭FileChannel</h3>
<p>用完FileChannel后必须将其关闭。如：</p>
<pre>
channel.close();
</pre>
<h3>FileChannel的position方法</h3>
<p>有时可能需要在FileChannel的某个特定位置进行数据的读/写操作。可以通过调用position()方法获取FileChannel的当前位置。</p>
<p>也可以通过调用position(long pos)方法设置FileChannel的当前位置。</p>
<p>这里有两个例子:</p>
<pre>
long pos = channel.position();
channel.position(pos +123);
</pre>
<p>如果将位置设置在文件结束符之后，然后试图从文件通道中读取数据，读方法将返回-1 —— 文件结束标志。</p>
<p>如果将位置设置在文件结束符之后，然后向通道中写数据，文件将撑大到当前位置并写入数据。这可能导致“文件空洞”，磁盘上物理文件中写入的数据间有空隙。</p>
<h3>FileChannel的size方法</h3>
<p>FileChannel实例的size()方法将返回该实例所关联文件的大小。如:</p>
<pre>
long fileSize = channel.size();
</pre>
<h3>FileChannel的truncate方法</h3>
<p>可以使用FileChannel.truncate()方法截取一个文件。截取文件时，文件将中指定长度后面的部分将被删除。如：</p>
<pre>
channel.truncate(1024);
</pre>
<p>这个例子截取文件的前1024个字节。</p>
<h3>FileChannel的force方法</h3>
<p>FileChannel.force()方法将通道里尚未写入磁盘的数据强制写到磁盘上。出于性能方面的考虑，操作系统会将数据缓存在内存中，所以无法保证写入到FileChannel里的数据一定会即时写到磁盘上。要保证这一点，需要调用force()方法。</p>
<p>force()方法有一个boolean类型的参数，指明是否同时将文件元数据（权限信息等）写到磁盘上。</p>
<p>下面的例子同时将文件数据和元数据强制写到磁盘上：</p>
<pre>
channel.force(true);
</pre>
<h2>Java NIO   SocketChannel</h2>
<p>Java NIO中的SocketChannel是一个连接到TCP网络套接字的通道。可以通过以下2种方式创建SocketChannel：</p>
<ol>
<li>打开一个SocketChannel并连接到互联网上的某台服务器。</li>
<li>一个新连接到达ServerSocketChannel时，会创建一个SocketChannel。</li>
</ol>
<p> </p>
<h3>打开 SocketChannel</h3>
<p>下面是SocketChannel的打开方式：</p>
<pre>
SocketChannel socketChannel = SocketChannel.open();
socketChannel.connect(new InetSocketAddress("http://jenkov.com", 80));
</pre>
<h3>关闭 SocketChannel</h3>
<p>当用完SocketChannel之后调用SocketChannel.close()关闭SocketChannel：</p>
<pre>
socketChannel.close();
</pre>
<h3>从 SocketChannel 读取数据</h3>
<p>要从SocketChannel中读取数据，调用一个read()的方法之一。以下是例子：</p>
<pre>
ByteBuffer buf = ByteBuffer.allocate(48);
int bytesRead = socketChannel.read(buf);
</pre>
<p>首先，分配一个Buffer。从SocketChannel读取到的数据将会放到这个Buffer中。</p>
<p>然后，调用SocketChannel.read()。该方法将数据从SocketChannel 读到Buffer中。read()方法返回的int值表示读了多少字节进Buffer里。如果返回的是-1，表示已经读到了流的末尾（连接关闭了）。</p>
<h3>写入 SocketChannel</h3>
<p>写数据到SocketChannel用的是SocketChannel.write()方法，该方法以一个Buffer作为参数。示例如下：</p>
<pre>
String newData = "New String to write to file..." + System.currentTimeMillis();
ByteBuffer buf = ByteBuffer.allocate(48);
buf.clear();
buf.put(newData.getBytes());
buf.flip();
while(buf.hasRemaining()) {
channel.write(buf);
}
</pre>
<p>注意SocketChannel.write()方法的调用是在一个while循环中的。Write()方法无法保证能写多少字节到SocketChannel。所以，我们重复调用write()直到Buffer没有要写的字节为止。</p>
<h3>非阻塞模式</h3>
<p>可以设置 SocketChannel 为非阻塞模式（non-blocking mode）.设置之后，就可以在异步模式下调用connect(), read() 和write()了。</p>
<h4>connect()</h4>
<p>如果SocketChannel在非阻塞模式下，此时调用connect()，该方法可能在连接建立之前就返回了。为了确定连接是否建立，可以调用finishConnect()的方法。像这样：</p>
<pre>
socketChannel.configureBlocking(false);
socketChannel.connect(new InetSocketAddress("http://jenkov.com", 80));
while(! socketChannel.finishConnect() ){
//wait, or do something else...
}
</pre>
<h4>write()</h4>
<p>非阻塞模式下，write()方法在尚未写出任何内容时可能就返回了。所以需要在循环中调用write()。前面已经有例子了，这里就不赘述了。</p>
<h4>read()</h4>
<p>非阻塞模式下,read()方法在尚未读取到任何数据时可能就返回了。所以需要关注它的int返回值，它会告诉你读取了多少字节。</p>
<h3>非阻塞模式与选择器</h3>
<p>非阻塞模式与选择器搭配会工作的更好，通过将一或多个SocketChannel注册到Selector，可以询问选择器哪个通道已经准备好了读取，写入等。Selector与SocketChannel的搭配使用会在后面详讲。</p>
<p> </p>
<h2>Java NIO  ServerSocketChannel</h2>
<p>Java NIO中的 ServerSocketChannel 是一个可以监听新进来的TCP连接的通道, 就像标准IO中的ServerSocket一样。ServerSocketChannel类在 java.nio.channels包中。</p>
<p><br />
这里有个例子：</p>
<table>
<tbody>
<tr>
<td><code>01</code></td>
<td><code>ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>02</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>03</code></td>
<td><code>serverSocketChannel.socket().bind(</code><code>new</code> <code>InetSocketAddress(</code><code>9999</code><code>));</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>04</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>05</code></td>
<td><code>while</code><code>(</code><code>true</code><code>){</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>06</code></td>
<td><code>    </code><code>SocketChannel socketChannel =</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>07</code></td>
<td><code>            </code><code>serverSocketChannel.accept();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>08</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>09</code></td>
<td><code>    </code><code>//do something with socketChannel...</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>10</code></td>
<td><code>}</code></td>
</tr>
</tbody>
</table>
<h3>打开 ServerSocketChannel</h3>
<p>通过调用 ServerSocketChannel.open() 方法来打开ServerSocketChannel.如：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</code></td>
</tr>
</tbody>
</table>
<h3>关闭 ServerSocketChannel</h3>
<p>通过调用ServerSocketChannel.close() 方法来关闭ServerSocketChannel. 如：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>serverSocketChannel.close();</code></td>
</tr>
</tbody>
</table>
<h3>监听新进来的连接</h3>
<p>通过 ServerSocketChannel.accept() 方法监听新进来的连接。当 accept()方法返回的时候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞到有新连接到达。</p>
<p>通常不会仅仅只监听一个连接,在while循环中调用 accept()方法. 如下面的例子：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>while</code><code>(</code><code>true</code><code>){</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>    </code><code>SocketChannel socketChannel =</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>            </code><code>serverSocketChannel.accept();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>    </code><code>//do something with socketChannel...</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>}</code></td>
</tr>
</tbody>
</table>
<p>当然,也可以在while循环中使用除了true以外的其它退出准则。</p>
<h3>非阻塞模式</h3>
<p>ServerSocketChannel可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。 因此，需要检查返回的SocketChannel是否是null.如：</p>
<p> </p>
<table>
<tbody>
<tr>
<td><code>01</code></td>
<td><code>ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>02</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>03</code></td>
<td><code>serverSocketChannel.socket().bind(</code><code>new</code> <code>InetSocketAddress(</code><code>9999</code><code>));</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>04</code></td>
<td><code>serverSocketChannel.configureBlocking(</code><code>false</code><code>);</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>05</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>06</code></td>
<td><code>while</code><code>(</code><code>true</code><code>){</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>07</code></td>
<td><code>    </code><code>SocketChannel socketChannel =</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>08</code></td>
<td><code>            </code><code>serverSocketChannel.accept();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>09</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>10</code></td>
<td><code>    </code><code>if</code><code>(socketChannel != </code><code>null</code><code>){</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>11</code></td>
<td><code>        </code><code>//do something with socketChannel...</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>12</code></td>
<td><code>    </code><code>}</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>13</code></td>
<td><code>}</code></td>
</tr>
</tbody>
</table>
<p> </p>
<h2>Java NIO  DatagramChannel</h2>
<p>Java NIO中的DatagramChannel是一个能收发UDP包的通道。因为UDP是无连接的网络协议，所以不能像其它通道那样读取和写入。它发送和接收的是数据包。</p>
<p>打开 DatagramChannel</p>
<p>下面是 DatagramChannel 的打开方式：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>DatagramChannel channel = DatagramChannel.open();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>channel.socket().bind(</code><code>new</code> <code>InetSocketAddress(</code><code>9999</code><code>));</code></td>
</tr>
</tbody>
</table>
<p>这个例子打开的 DatagramChannel可以在UDP端口9999上接收数据包。</p>
<h3>接收数据</h3>
<p>通过receive()方法从DatagramChannel接收数据，如：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>ByteBuffer buf = ByteBuffer.allocate(</code><code>48</code><code>);</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>buf.clear();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>channel.receive(buf);</code></td>
</tr>
</tbody>
</table>
<p>receive()方法会将接收到的数据包内容复制到指定的Buffer. 如果Buffer容不下收到的数据，多出的数据将被丢弃。</p>
<h3>发送数据</h3>
<p>通过send()方法从DatagramChannel发送数据，如:</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>String newData = </code><code>"New String to write to file..."</code> <code>+ System.currentTimeMillis();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>3</code></td>
<td><code>ByteBuffer buf = ByteBuffer.allocate(</code><code>48</code><code>);</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>4</code></td>
<td><code>buf.clear();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>5</code></td>
<td><code>buf.put(newData.getBytes());</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>6</code></td>
<td><code>buf.flip();</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>7</code></td>
<td> </td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>8</code></td>
<td><code>int</code> <code>bytesSent = channel.send(buf, </code><code>new</code> <code>InetSocketAddress(</code><code>"jenkov.com"</code><code>, </code><code>80</code><code>));</code></td>
</tr>
</tbody>
</table>
<p>这个例子发送一串字符到”jenkov.com”服务器的UDP端口80。 因为服务端并没有监控这个端口，所以什么也不会发生。也不会通知你发出的数据包是否已收到，因为UDP在数据传送方面没有任何保证。</p>
<h3>连接到特定的地址</h3>
<p>可以将DatagramChannel“连接”到网络中的特定地址的。由于UDP是无连接的，连接到特定地址并不会像TCP通道那样创建一个真正的连接。而是锁住DatagramChannel ，让其只能从特定地址收发数据。</p>
<p>这里有个例子:</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>channel.connect(</code><code>new</code> <code>InetSocketAddress(</code><code>"jenkov.com"</code><code>, </code><code>80</code><code>));</code></td>
</tr>
</tbody>
</table>
<p>当连接后，也可以使用read()和write()方法，就像在用传统的通道一样。只是在数据传送方面没有任何保证。这里有几个例子：</p>
<table>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>int</code> <code>bytesRead = channel.read(buf);</code></td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td><code>2</code></td>
<td><code>int</code> <code>bytesWritten = channel.write(but);</code></td>
</tr>
</tbody>
</table>
