<h1>JAVA几种IO工作机制及特点(二)</h1>
<h2><strong>1.什么是IO?</strong></h2>
<h3><strong>1.1 什么是流?</strong></h3>
<p> IO在本质上是单个字节的移动，而<strong>流可以说是字节移动的载体和方式</strong>，它不停的向目标处移动数据，我们要做的就是根据流的方向从流中读取数据或者向流中写入数据。最简单的Java流的例子就是下载电影，肯定不是等电影全部下载在内存中再保存到磁盘上，本质上是下载一个字节就保存一个字节。</p>
<p>　　一个流，必有<strong>源和目标</strong>，它们可以是计算机内存的某些区域，也可以是磁盘文件，甚至可以是Internet上的某个URL。流的方向是重要的，根据流的方向，流可分为两类：输入流和输出流。我们从输入流读取数据，向输出流写入数据。</p>
<p>     Java传统的io是基于流的io即BIO(同步阻塞IO)，从jdk1.4开始提供基于块的io，即nio即同步非阻塞IO，到jdk1.7之后出现aio 异步非阻塞IO。</p>
<h3><strong>1.2 IO分类</strong></h3>
<p>Java对io的支持主要集中在io包下，显然可以分为下面两类：</p>
<ol>
<li>
<p>基于字节操作的io接口：InputStream 和 OutputStream</p>
</li>
<li>
<p>基于字符操作的io接口：Writer 和 Reader</p>
</li>
</ol>
<p>不管磁盘还是网络传输，最小的存储单位都是字节，但是程序中操作的数据大多都是字符形式的，所以Java也提供了字符型的流。流并不等于io，还有很重要的一点,数据的传输方式，也就是数据写到哪里的问题，主要是以下两种：</p>
<ol>
<li>
<p>基于磁盘操作的io接口：File</p>
</li>
<li>
<p>基于网络操作的io接口：Socket</p>
</li>
</ol>
<p>到jdk1.4以后 出现socketChannel 管道，支持 select poll epoll等通讯方式。 </p>
<h3><strong>1.3 磁盘IO和网络IO工作机制</strong></h3>
<h4><strong>1.3.1 磁盘IO-file</strong></h4>
<p>io中数据写到何处也是重要的一点，其中最主要的就是将数据持久化到磁盘。数据在磁盘上最小的描述就是文件，上层应用对磁盘的读和写都是针对文件而言的在java中，以File类来表示文件，如：</p>
<p>File file = new File("D:/test.txt");</p>
<p>　　但是严格来说，File并不表示一个真实的存在于磁盘上的文件。就像上面代码的文件其实并不存在，File做的只是根据你所提供的文件描述符，返回某一路径的虚拟对象，它并不关心文件或路径是否存在，可能存在，也可能是捏造的。就好象一张名片，名片的背后代表的是人。为什么要这么设计？</p>
<p>以FileInputStream读取文件为例，过程是这样的：当传入一个文件路径时，会根据这个路径创建File对象，作为这个文件的一个“名片”。当我们试图通过FileInputStream对象去操作文件的时候，将会真正创建一个关联真实存在的磁盘文件的文件描述符FileDescriptor，通过FileInputStream构造方法可以看出：</p>
<p>fd = new FileDescriptor(); </p>
<p>　　如果说File是文件的名片，那么FileDescriptor就是真正指向了一个打开的文件，可以操作磁盘文件。例如FileDescriptor.sync()方法可以将缓存中的数据强制刷新到磁盘文件中。如果我们需要读取的是字符，还需要通过StreamDecoder类将字节解码成字符。至于如何从物理磁盘上读取数据，那就是操作系统做的事情了。 </p>
<p><img alt="图 7. 从磁盘读取文件" src="http://www.ibm.com/developerworks/cn/java/j-lo-javaio/image015.jpg" /></p>
<h4><strong>1.3.2 网络io-socket</strong></h4>
<p>大部分情况下我们使用的都是基于TCP/IP协议的流Socket，因为它是一种稳定的通信协议。Socket就像一个插座，计算机通过Socket就能和网络或者其他计算机上进行通讯；当有数据通讯的需求时，只需要建立一个Socket“插座”，通过网卡与其他计算机相连获取数据。</p>
<p>　　Socket位于传输层和应用层之间，向应用层统一提供编程接口，应用层不必知道传输层的协议细节。Java中对Socket的支持主要是以下两种：</p>
<p>　　(1)基于TCP的Socket:提供给应用层可靠的流式数据服务，使用TCP的Socket应用程序协议：BGP，HTTP，FTP，TELNET等。优点：基于数据传输的可靠性。</p>
<p>　　(2)基于UDP的Socket：适用于数据传输可靠性要求不高的场合。基于UDP的Socket应用程序协议：RIP，SNMP，L2TP等。</p>
<p>面向连接的套接字的系统调用时序图：</p>
<p>无连接协议的套接字调用时序图</p>
<p><strong>1.4 为什么要使用NIO?</strong></p>
<p>现在互联网提供的在线服务都是走网络I/O，那么对于网络I/O，传统的阻塞式I/O，一个线程对应一个连接，采用线程池的模式在大部分场景下简单高效。当有大量的连接的时候，我们可以为每一个连接建立一个线程来操作。但是这种做法带来的缺陷也是显而易见的：</p>
<ul>
<li>
<p>硬件能够支持大量的并发。</p>
</li>
<li>
<p>并发的数量始终有一个上限。</p>
</li>
<li>
<p>各个线程之间的优先级不好控制。</p>
</li>
<li>
<p>各个Client之间的交互与同步困难。</p>
</li>
</ul>
<p>我们也可以使用一个线程来处理所有的请求，使用不阻塞的IO，轮询查询所有的Client。这种做法同样也有缺陷：无法迅速响应Client端，同时会消耗大量轮询查询的时间。所以，我们需要一种poll的模式来处理这种情况，从大量的网络连接中找出来真正需要服务的Client。这正是NIO诞生的原因：<strong>提供一种Poll的模式，在所有的Client中找到需要服务的Client,现在支持epoll</strong>。JDK中，有一个非常有意思的库：NIO（New I/O）。这个库中有3个重要的类，分别是java.nio.channels中Selector和Channel，以及java.nio中的Buffer。</p>
<p>1.Channel代表一个可以被用于Poll操作的对象（可以是文件流/网络流），Channel能够被注册到一Selector中。</p>
<p>2.通过调用Selector的select方法可以从所有的Channel中找到需要服务的实例（Accept，read ..）。</p>
<p>3.Buffer对象提供读写数据的缓存。对于我们熟悉的Stream对象，Buffer提供更好的性能以及更好的编程透明性（人为控制缓存的大小以及具体的操作）。</p>
<h2><strong>2.BIO NIO AIO是什么，有什么特点?</strong></h2>
<p>这里主要讨论的是网络IO：</p>
<p>1. 首先需要提到BIO中socket，这里面的阻塞点 accept 等待连接 ，read/write数据.</p>
<p>2. 再说说NIO是中socketChannel   accept不会阻塞，而是交给一个线程去接收所有连接，将所有连接放到一个缓存队列上；</p>
<p>最终会通过selector（可以看做是监听器）监听所有客户端的连接数据请求，会调用doselect()方法(阻塞点) 通知分发到（dispatch)到真正操作数据读写的业务线程池里，进行数据处理。</p>
<p>看看dubbo rpc的io处理机制：</p>
<h3><strong>2.1 阻塞blocking和非阻塞non-blocking IO，同步synchronous IO和异步asynchronous IO的区别在哪?</strong></h3>
<p>    下面先说明一下四种io:(前3种属于同步IO,第4种属于异步IO,同步与异步IO最大区别在于进程是否会block)</p>
<p><strong>     blocking IO        阻塞IO </strong><br />
<strong>     nonblocking IO   非阻塞IO</strong><br />
<strong>     IO multiplexing    非阻塞多路复用IO</strong><br />
<strong>     asynchronous IO 异步IO</strong></p>
<p>    对于一个network IO 会经历两个阶段，一个是调用这个IO的process (or thread)，另一个就是系统内核(kernel)：</p>
<p>1 <strong>等待数据准备</strong> (Waiting for the data to be ready) </p>
<p>2 <strong>将数据从内核拷贝到进程中</strong> (Copying the data from the kernel to the process)</p>
<h3><strong>2.2 blocking IO 阻塞IO</strong> </h3>
<p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201007/31/0_1280550787I2K8.gif" />1.当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。(<strong>用户态切换到内核态-准备数据</strong>)</p>
<p>2.对于network io来说，很多时候数据在一开始还没有到达，这个时候kernel就要等待足够的数据到来。而在用户进程这边，整个进程会被阻塞。(<strong>用户态-阻塞，内核态-准备数据中</strong>)</p>
<p>3.当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果(<strong>用户态-阻塞，内核态-拷贝数据到用户进程</strong>)</p>
<p>4.用户进程才解除block的状态，重新运行起来。(<strong>用户态-解除阻塞，内核态-数据返回完毕</strong>)<br />
特点：blocking IO的特点就是在IO执行的两个阶段都被block了。</p>
<h3><strong>2.3 non-blocking IO 非阻塞IO</strong></h3>
<p>linux下，可以通过设置socket使其变为non-blocking。java代码中修改如下：</p>
<p>服务端：</p>
<ol start="1">
<li>// 获得一个ServerSocket通道  </li>
<li>ServerSocketChannel serverChannel = ServerSocketChannel.open();  </li>
<li>// 设置通道为非阻塞  </li>
<li>serverChannel.configureBlocking(false);  </li>
</ol>
<p> 客户端：</p>
<ol start="1">
<li>// 获得一个Socket通道  </li>
<li>SocketChannel channel = SocketChannel.open();  </li>
<li>// 设置通道为非阻塞  </li>
<li>channel.configureBlocking(false);  </li>
</ol>
<p> 详细流程如下：</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201007/31/0_128055089469yL.gif" />1.当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。(<strong>用户态 不阻塞------内核态-准备数据中</strong>)</p>
<p>2.从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是用户进程马上获取结果，如果结果是error，它就知道数据还没有准备好，于是它可以再次发送read操作。(<strong>用户态 不阻塞-------内核态-准备数据中</strong>)</p>
<p>3.一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。(<strong>用户态 进入阻塞-----内核态-拷贝数据回进程</strong>)<br />
特点：用户进程其实是需要不断的主动询问kernel数据好了没有。</p>
<h3><strong>2.4 IO multiplexing 多路复用IO</strong></h3>
<p>IO multiplexing使用select，epoll机制，select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程(通过listener监听)。它的流程如图：</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201007/31/0_1280551028YEeQ.gif" />1.当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。(<strong>用户态-阻塞，内核态-准备数据中并通知</strong>)</p>
<p>2.这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。(<strong>用户态-阻塞，内核态-拷贝数据会用户进程</strong>)</p>
<p>特点：这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p>
<h3><strong>2.5 Asynchronous I/O 异步IO</strong></h3>
<p>linux下的asynchronous IO其实用得很少。先看一下它的流程：</p>
<p><img alt="" src="http://hi.csdn.net/attachment/201007/31/0_1280551287S777.gif" />用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>
<h3><strong>2.6 各个IO Model的比较如图所示：</strong></h3>
<p><img alt="" src="http://hi.csdn.net/attachment/201007/31/0_1280551552NVgW.gif" />经过上面的介绍，会发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p>
<h2><strong>3.阻塞/非阻塞，同步/异步 ?</strong></h2>
<h3><strong>3.1 阻塞（blocking）与非阻塞（non-blocking）IO</strong></h3>
<p>　　IO的阻塞、非阻塞主要表现在一个IO操作过程中，如果有些操作很慢，比如读操作时需要准备数据，那么当前IO进程是否等待操作完成，还是得知暂时不能操作后先去做别的事情？<strong>一直等待下去，什么事也不做直到完成，这就是阻塞。抽空做些别的事情，这是非阻塞。</strong></p>
<p>　　非阻塞IO会在发出IO请求后立即得到回应，即使数据包没有准备好，也会返回一个错误标识，使得操作进程不会阻塞在那里。操作进程会通过多次请求的方式直到数据准备好，返回成功的标识。</p>
<h3><strong>3.2 同步（synchronous）与异步（asynchronous）IO</strong></h3>
<p>　　先来看看正式点的定义，POSIX标准将IO模型分为了两种：同步IO和异步IO，Richard Stevens在《Unix网络编程卷》中也总结道：</p>
<ol start="1">
<li>A synchronous I/O operation causes the requesting process to be blocked until that I/O operationcompletes;An asynchronous I/O operation does not cause the requesting process to be blocked;  </li>
</ol>
<p>　　可以看出，判断同步和异步的标准在于：<strong>一个IO操作直到完成，是否导致程序进程的阻塞</strong>。如果阻塞就是同步的，没有阻塞就是异步的。这里的IO操作指的是真实的IO操作，也就是数据从内核拷贝到系统进程（读）的过程。</p>
