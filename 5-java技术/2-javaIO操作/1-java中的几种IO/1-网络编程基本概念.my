<h1><a href="https://blog.csdn.net/haoyuyang/article/details/53231585">网络编程基本概念</a></h1>
<h2><strong>1.阻塞IO—Socket</strong></h2>
<p>Socket又称“套接字”，应用程序通常通过“套接字”向网络发出请求或应答网络请求。</p>
<p>Socket和ServerSocket类库位于java.net包中。ServerSocket用于服务器端，Socket是建立网络连接时使用的。在连接成功时，应用程序两端都会产生一个Socket实例，操作这个实例，完成所需的会话。对于一个网络连接来说，套接字是平等的，不会因为在服务器端或在客户端而产生不同的级别。不管是ServerSocket还是Socket，它们的工作都是通过SocketImpl类及其子类完成的。</p>
<p>套接字的连接过程可以分为四个步骤：服务器监听、客户端请求服务器、服务器端连接确认、客户端连接确认并进行通信。</p>
<p>（1）服务器监听：服务器端套接字并不定位具体的客户端套接字，而是出于等待连接的状态，实时监控网络状态。</p>
<p>（2）客户端请求：客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述要连接的服务器端的套接字，指出服务器端的套接字的地址和端口号，然后向服务器端套接字提出连接请求。</p>
<p>（3）服务器端连接确认：当服务器端的套接字监听到或者说接收到客户端套接字的连接请求，它就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发送给客户端。</p>
<p>（4）客户端连接确认：一旦客户端确认了此描述，连接就建立好了，双方开始通信。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>
<p>借用一下网上的Socket通信模型图片：</p>
<p><img alt="" src="https://img-blog.csdn.net/20161119184425747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>
<p><img alt="" src="https://blog.csdn.net/haoyuyang/article/details/53231585" /></p>
<p>Socket通信步骤：</p>
<p>①创建ServerSocket和Socket</p>
<p>②打开连接到Socket的输入/输出流</p>
<p>③按照协议对Socket进行读写操作</p>
<p>④关闭输入输出流、关闭Socket</p>
<p>服务器端：</p>
<p>①创建ServerSocket对象，绑定监听端口</p>
<p>②通过accept()方法监听客户端请求</p>
<p>③建立连接后，通过输入流读取客户端发送的请求信息</p>
<p>④通过输出流向客户端发送响应信息</p>
<p>⑤关闭相关资源</p>
<p>客户端：</p>
<p>①创建Socket对象，指明需要连接的服务器的地址和端口号</p>
<p>②连接建立后，通过输出流向服务器端发送请求信息</p>
<p>③通过输入流获取服务器响应信息</p>
<p>④关闭响应资源</p>
<p>下面看一个简单的小例子：</p>
<p>服务器端响应工具类：</p>
<ol start="1">
<li>public class ServerHandler implements Runnable {  </li>
<li>  </li>
<li>    private Socket socket;  </li>
<li>  </li>
<li>    public ServerHandler(Socket socket) {  </li>
<li>        this.socket = socket;  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void run() {  </li>
<li>        BufferedReader bufferedReader = null;  </li>
<li>        PrintWriter printWriter = null;  </li>
<li>        try {  </li>
<li>            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));  </li>
<li>            printWriter = new PrintWriter(socket.getOutputStream(), true);  </li>
<li>  </li>
<li>            while (true) {  </li>
<li>                String info = bufferedReader.readLine();  </li>
<li>                if(info == null)  </li>
<li>                    break;  </li>
<li>                System.out.println("客户端发送的消息：" + info);  </li>
<li>                printWriter.println("服务器端响应了客户端请求....");  </li>
<li>            }  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        } finally {  </li>
<li>            if(bufferedReader != null){  </li>
<li>                try {  </li>
<li>                    bufferedReader.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            if(printWriter != null){  </li>
<li>                try {  </li>
<li>                    printWriter.close();  </li>
<li>                } catch (Exception e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            if(socket != null){  </li>
<li>                try {  </li>
<li>                    socket.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            socket = null;  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>服务器端：</p>
<ol start="1">
<li>public class Server {  </li>
<li>    private static int PORT = 8379;  </li>
<li>    public static void main(String[] args) {  </li>
<li>        ServerSocket serverSocket = null;  </li>
<li>        try {  </li>
<li>            serverSocket = new ServerSocket(PORT);  </li>
<li>            System.out.println("服务器端启动了....");  </li>
<li>            //进行阻塞  </li>
<li>            Socket socket = serverSocket.accept();  </li>
<li>            //启动一个线程来处理客户端请求  </li>
<li>            new Thread(new ServerHandler(socket)).start();  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        } finally {  </li>
<li>            if(serverSocket != null){  </li>
<li>                try {  </li>
<li>                    serverSocket.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            serverSocket = null;  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>客户端：</p>
<ol start="1">
<li>public class Client {  </li>
<li>    private static int PORT = 8379;  </li>
<li>    private static String IP = "127.0.0.1";  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        BufferedReader bufferedReader = null;  </li>
<li>        PrintWriter printWriter = null;  </li>
<li>        Socket socket = null;  </li>
<li>        try {  </li>
<li>            socket = new Socket(IP, PORT);  </li>
<li>            printWriter = new PrintWriter(socket.getOutputStream(), true);  </li>
<li>            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));  </li>
<li>  </li>
<li>            printWriter.println("客户端请求了服务器....");  </li>
<li>            String response = bufferedReader.readLine();  </li>
<li>            System.out.println("Client：" + response);  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        } finally {  </li>
<li>            if(bufferedReader != null){  </li>
<li>                try {  </li>
<li>                    bufferedReader.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            if(printWriter != null){  </li>
<li>                try {  </li>
<li>                    printWriter.close();  </li>
<li>                } catch (Exception e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            if(socket != null){  </li>
<li>                try {  </li>
<li>                    socket.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            } else {  </li>
<li>                socket = null;  </li>
<li>            }  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>运行结果：</p>
<p><img alt="" src="https://img-blog.csdn.net/20161119184542481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" style="height:101px; width:800px" /><br />
<img alt="" src="https://blog.csdn.net/haoyuyang/article/details/53231585" /></p>
<p><img alt="" src="https://img-blog.csdn.net/20161119184602718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>
<p>以上的代码有个问题，就是每次有客户端请求服务器端都会创建一个线程，当线程过多时，服务器端可能会宕机。解决这个问题，可以使用JDK提供的线程池（伪异步）。其它地方都不变，将服务器端的代码修改成如下即可：</p>
<ol start="1">
<li>public class Server {  </li>
<li>    private static int PORT = 8379;  </li>
<li>    public static void main(String[] args) {  </li>
<li>        ServerSocket serverSocket = null;  </li>
<li>        try {  </li>
<li>            serverSocket = new ServerSocket(PORT);  </li>
<li>            System.out.println("服务器端启动了....");  </li>
<li>            //进行阻塞  </li>
<li>            Socket socket = null;  </li>
<li>            //启动一个线程来处理客户端请求  </li>
<li>            //new Thread(new ServerHandler(socket)).start();  </li>
<li>            <span style="color:#ff0000;">HandlerExecutorPool pool = new HandlerExecutorPool(50, 1000);  </li>
<li>            while (true) {  </li>
<li>                socket = serverSocket.accept();  </li>
<li>                pool.execute(new ServerHandler(socket));  </li>
<li>            }</span>  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        } finally {  </li>
<li>            if(serverSocket != null){  </li>
<li>                try {  </li>
<li>                    serverSocket.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>            serverSocket = null;  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>其中HandlerExecutorPool为自定义的线程池，代码如下：</p>
<p> </p>
<ol start="1">
<li>public class HandlerExecutorPool {  </li>
<li>  </li>
<li>    private ExecutorService executor;  </li>
<li>  </li>
<li>    public HandlerExecutorPool(int maxSize, int queueSize) {  </li>
<li>        this.executor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), maxSize, 120L, TimeUnit.SECONDS,  </li>
</ol>
<p> </p>
<ol start="1">
<li><span style="white-space:pre;">                     </span> new ArrayBlockingQueue<>(queueSize));  </li>
<li>    }  </li>
<li>  </li>
<li>    public void execute(Runnable task) {  </li>
<li>        executor.execute(task);  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<h2><strong>2.IO（BIO）与NIO的区别</strong></h2>
<p>其本质就是阻塞和非阻塞的区别。</p>
<p>阻塞概念：应用程序在获取网络数据的时候，如果网络传输数据很慢，那么程序就一直等着，直到传输完毕为止。</p>
<p>非阻塞概念：应用程序直接可以获取已经准备就绪的数据，无需等待。</p>
<p>IO为同步阻塞形式，NIO为同步非阻塞形式。NIO没有实现异步，在JDK1.7之后，升级了NIO库包，支持异步非阻塞通信模型，即NIO2.0(AIO)。</p>
<p>同步和异步：同步和异步一般是面向操作系统与应用程序对IO操作的层面上来区别的。①同步时，应用程序会直接参与IO读写操作，并且应用程序会直接阻塞到某一个方法上，直到数据准备就绪（BIO）；或者采用轮询的策略实时检查数据的就绪状态，如果就绪则获取数据（NIO）。②异步时，则所有的IO读写操作都交给操作系统处理，与应用程序没有直接关系，应用程序并不关心IO读写，当操作系统完成IO读写操作时，会向应用程序发出通知，应用程序直接获取数据即可。</p>
<p>同步说的是Server服务端的执行方式，阻塞说的是具体的技术，接收数据的方式、状态（io、nio）。</p>
<p>3.NIO编程介绍</p>
<p>学习NIO编程，首先需要了解几个概念：</p>
<p>（1）Buffer（缓冲区）</p>
<p>Buffer是一个对象，它包含一些需要写入或者读取的数据。在NIO类库中加入Buffer对象，体现了新类库与原IO的一个重要区别。在面向流的IO中，可以直接将数据写入或读取到Stream对象中。在NIO类库中，所有的数据都是用缓冲区处理的（读写）。 缓冲区实质上是一个数组，通常它是一个字节数组（ByteBuffer），也可以使用其他类型的数组。这个数组为缓冲区提供了访问数据的读写等操作属性，如位置、容量、上限等概念，具体的可以参考API文档。</p>
<p>Buffer类型：最常使用的是ByteBuffer，实际上每一种java基本类型都对应了一种缓存区（除了Boolean类型）。</p>
<p>①ByteBuffer②CharBuffer③ShortBuffer④IntBuffer⑤LongBuffer⑥FloatBuffer⑦DoubleBuffer</p>
<p>（2）Channel（管道、通道）</p>
<p>Channel就像自来水管道一样，网络数据通过Channel读取和写入，通道与流的不同之处在于通道是双向的，而流只能在一个方向上移动（一个流必须是InputStream或者OutputStream的子类），而通道可以用于读、写或者二者同时进行，最关键的是可以和多路复用器集合起来，有多种的状态位，方便多路复用器去识别。通道分为两大类：一类是用于网络读写的SelectableChannel，另一类是用于文件操作的FileChannel，我们使用的SocketChannel和ServerSocketChannel都是SelectableChannel的子类。</p>
<p> </p>
<p>（3）Selector（选择器、多路复用器）</p>
<p>是NIO编程的基础，非常重要。多路复用器提供选择已经就绪的任务的能力。简单说，就是Selector会不断的轮询注册在其上的通道（Channel），如果某个通道发生了读写操作，这个通道就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以取得就绪的Channel集合，从而进行后续的IO操作。一个多路复用器（Selector）可以负责成千上万的通道（Channel），没有上限。这也是JDK使用了epoll代替传统的select实现，获得连接句柄（客户端）没有限制。那也就意味着我们只要一个线程负责Selector的轮询，就可以接入成千上万个客户端，这是JDK NIO库的巨大进步。</p>
<p>Selector线程类似一个管理者（Master），管理了成千上万个管道，然后轮询哪个管道的数据已经准备好了，通知CPU执行IO的读取或写入操作。</p>
<p>Selector模式：当IO事件（管道）注册到选择器以后，Selector会分配给每个管道一个key值，相当于标签。Selector选择器是以轮询的方式进行查找注册的所有IO事件（管道），当IO事件（管道）准备就绪后，Selector就会识别，会通过key值来找到相应的管道，进行相关的数据处理操作（从管道中读取或写入数据，写到缓冲区中）。每个管道都会对选择器进行注册不同的事件状态，以便选择器查找。</p>
<p>事件状态：</p>
<p>SelectionKey.OP_CONNECT</p>
<p>SelectionKey.OP_ACCEPT</p>
<p>SelectionKey.OP_READ</p>
<p>SelectionKey.OP_WRITE</p>
<p>NIO通信模型图解：</p>
<p><img alt="" src="https://img-blog.csdn.net/20161119210915533" style="height:325px; width:800px" /></p>
<p>（虚线表示不直接相关联）</p>
<p>下面用代码来演示一下Buffer、Channel、Selector的使用。</p>
<p>以IntBuffer为例，讲解一下Buffer的常用API：</p>
<p> </p>
<ol start="1">
<li>public class IntBufferTest {  </li>
<li>    public static void main(String[] args) {  </li>
<li>        //1、基本操作  </li>
<li>        //创建指定长度的缓冲区  </li>
<li>        /*IntBuffer buffer = IntBuffer.allocate(10); </li>
<li>        buffer.put(11); //position位置：0->1 </li>
<li>        buffer.put(5); //position位置：1->2 </li>
<li>        buffer.put(32); //position位置：2->3 </li>
<li>        System.out.println("未调用flip复位方法前的buffer：" + buffer); </li>
<li>        //把位置复位为0，也就是position位置由3->0 </li>
<li>        buffer.flip(); </li>
<li>        //比较未调用flip方法和调用之后buffer的limit可以发现，不进行复位操作的话，position的值为3，limit的值为10 </li>
<li>        // 因为缓冲区中已有11、5、32三个元素，也就意味着put()方法会使position向后递增1 </li>
<li>        System.out.println("调用flip复位方法后的buffer：" + buffer); </li>
<li>        System.out.println("buffer容量为：" + buffer.capacity()); </li>
<li>        System.out.println("buffer限制为：" + buffer.limit()); </li>
<li>        System.out.println("获取下标为1的元素：" + buffer.get(1)); </li>
<li>        System.out.println("调用get(index)方法后的buffer：" + buffer); //调用get(index)方法，不会改变position的值 </li>
<li>        buffer.put(1, 4); //将buffer位置为1的值替换为4，调用put(index，value)不会改变position的值 </li>
<li>        System.out.println("调用put(index, value)方法后的buffer：" + buffer); </li>
<li> </li>
<li>        for(int i=0; i<buffer.limit(); i++) { </li>
<li>            //调用get方法会使缓冲区的位置(position)向后递增一位 </li>
<li>            System.out.print(buffer.get() + "\t"); </li>
<li>        } </li>
<li>        System.out.println("\nbuffer对象遍历之后buffer为：" + buffer);*/  </li>
<li>  </li>
<li>  </li>
<li>        //2、wrap方法的使用  </li>
<li>        /*int[] arr = new int[]{1, 2, 3}; </li>
<li>        IntBuffer buffer = IntBuffer.wrap(arr); </li>
<li>        System.out.println("wrap(arr)方法：" + buffer); </li>
<li>        //IntBuffer.wrap(array, postion, length)表示容量为array的长度，但是可操作的元素为位置postion到length的数组元素 </li>
<li>        buffer = IntBuffer.wrap(arr, 0, 2); </li>
<li>        System.out.println("wrap(arr, 0, 2)：" + buffer);*/  </li>
<li>  </li>
<li>        //3、其他方法  </li>
<li>        IntBuffer buffer = IntBuffer.allocate(10);  </li>
<li>        int[] arr = new int[]{1, 2, 3};  </li>
<li>        buffer.put(arr);  </li>
<li>        System.out.println("调用put(arr)方法后的buffer：" + buffer);  </li>
<li>        //一种复制方法，buffer1的pos、lim、cap与buffer的一样  </li>
<li>        IntBuffer buffer1 = buffer.duplicate();  </li>
<li>        System.out.println("buffer1：" + buffer1);  </li>
<li>  </li>
<li>        buffer.position(1); //将buffer的position设置为1，不建议使用。功能相当于flip()方法，但是从运行结果可以看出，lim依然等于10  </li>
<li>        System.out.println("调用position()方法后的buffer：" + buffer);  </li>
<li>        System.out.println("buffer的可读数据量：" + buffer.remaining()); //计算出从pos到lim的长度  </li>
<li>        int[] arr1 = new int[buffer.remaining()];  </li>
<li>        //将缓冲区的数据放入arr1中  </li>
<li>        buffer.get(arr1);  </li>
<li>        for(Integer i : arr1) {  </li>
<li>            System.out.print(Integer.toString(i) + ",");  </li>
<li>        }  </li>
<li>        System.out.println();  </li>
<li>  </li>
<li>        //比较flip()方法和position(index)方法的区别  </li>
<li>        buffer1.flip();  </li>
<li>        System.out.println("buffer1的可读数量：" + buffer1.remaining());  </li>
<li>        arr1 = new int[buffer1.remaining()];  </li>
<li>        buffer1.get(arr1);  </li>
<li>        for(Integer i : arr1) {  </li>
<li>            System.out.print(Integer.toString(i) + ",");  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>运行结果：</p>
<p> </p>
<p><img alt="" src="https://img-blog.csdn.net/20161119230855583" /></p>
<p><img alt="" src="https://img-blog.csdn.net/20161119230903318" /></p>
<p><img alt="" src="https://img-blog.csdn.net/20161119230911174" /></p>
<p>接下来是Buffer、Channel、Selector的一个入门的小例子：</p>
<p>Server端：</p>
<ol start="1">
<li>public class Server implements Runnable {  </li>
<li>  </li>
<li>    private Selector selector;  </li>
<li>    private ByteBuffer buffer = ByteBuffer.allocate(1024);  </li>
<li>  </li>
<li>    public Server(int port) {  </li>
<li>        try {  </li>
<li>            //1 打开多复用器  </li>
<li>            selector = Selector.open();  </li>
<li>            //2 打开服务器通道  </li>
<li>            ServerSocketChannel ssc = ServerSocketChannel.open();  </li>
<li>            //3 设置服务器通道为非阻塞方式  </li>
<li>            ssc.configureBlocking(false);  </li>
<li>            //4 绑定地址  </li>
<li>            ssc.bind(new InetSocketAddress(port));  </li>
<li>            //5 把服务器通道注册到多路复用选择器上，并监听阻塞状态  </li>
<li>            ssc.register(selector, SelectionKey.OP_ACCEPT);  </li>
<li>            System.out.println("Server start, port：" + port);  </li>
<li>        } catch (IOException e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void run() {  </li>
<li>        while (true) {  </li>
<li>            try {  </li>
<li>                //1 必须让多路复用选择器开始监听  </li>
<li>                selector.select();  </li>
<li>                //2 返回所有已经注册到多路复用选择器上的通道的SelectionKey  </li>
<li>                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();  </li>
<li>                //3 遍历keys  </li>
<li>                while (keys.hasNext()) {  </li>
<li>                    SelectionKey key = keys.next();  </li>
<li>                    keys.remove();  </li>
<li>                    if(key.isValid()) { //如果key的状态是有效的  </li>
<li>                        if(key.isAcceptable()) { //如果key是阻塞状态，则调用accept()方法  </li>
<li>                            accept(key);  </li>
<li>                        }  </li>
<li>                        if(key.isReadable()) { //如果key是可读状态，则调用read()方法  </li>
<li>                            read(key);  </li>
<li>                        }  </li>
<li>                    }  </li>
<li>                }  </li>
<li>            } catch (IOException e) {  </li>
<li>                e.printStackTrace();  </li>
<li>            }  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    private void accept(SelectionKey key) {  </li>
<li>        try {  </li>
<li>            //1 获取服务器通道  </li>
<li>            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();  </li>
<li>            //2 执行阻塞方法  </li>
<li>            SocketChannel sc = ssc.accept();  </li>
<li>            //3 设置阻塞模式为非阻塞  </li>
<li>            sc.configureBlocking(false);  </li>
<li>            //4 注册到多路复用选择器上，并设置读取标识  </li>
<li>            sc.register(selector, SelectionKey.OP_READ);  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    private void read(SelectionKey key) {  </li>
<li>        try {  </li>
<li>            //1 清空缓冲区中的旧数据  </li>
<li>            buffer.clear();  </li>
<li>            //2 获取之前注册的SocketChannel通道  </li>
<li>            SocketChannel sc = (SocketChannel) key.channel();  </li>
<li>            //3 将sc中的数据放入buffer中  </li>
<li>            int count = sc.read(buffer);  </li>
<li>            if(count == -1) { // == -1表示通道中没有数据  </li>
<li>                key.channel().close();  </li>
<li>                key.cancel();  </li>
<li>                return;  </li>
<li>            }  </li>
<li>            //读取到了数据，将buffer的position复位到0  </li>
<li>            buffer.flip();  </li>
<li>            byte[] bytes = new byte[buffer.remaining()];  </li>
<li>            //将buffer中的数据写入byte[]中  </li>
<li>            buffer.get(bytes);  </li>
<li>            String body = new String(bytes).trim();  </li>
<li>            System.out.println("Server：" + body);  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        new Thread(new Server(8379)).start();  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>客户端：</p>
<ol start="1">
<li>public class Client {  </li>
<li>    public static void main(String[] args) {  </li>
<li>        InetSocketAddress address = new InetSocketAddress("127.0.0.1", 8379);  </li>
<li>        SocketChannel sc = null;  </li>
<li>        ByteBuffer buffer = ByteBuffer.allocate(1024);  </li>
<li>        try {  </li>
<li>            //打开通道  </li>
<li>            sc = SocketChannel.open();  </li>
<li>            //建立连接  </li>
<li>            sc.connect(address);  </li>
<li>            while (true) {  </li>
<li>                byte[] bytes = new byte[1024];  </li>
<li>                System.in.read(bytes);  </li>
<li>                //把输入的数据放入buffer缓冲区  </li>
<li>                buffer.put(bytes);  </li>
<li>                //复位操作  </li>
<li>                buffer.flip();  </li>
<li>                //将buffer的数据写入通道  </li>
<li>                sc.write(buffer);  </li>
<li>                //清空缓冲区中的数据  </li>
<li>                buffer.clear();  </li>
<li>            }  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        } finally {  </li>
<li>            if(sc != null) {  </li>
<li>                try {  </li>
<li>                    sc.close();  </li>
<li>                } catch (IOException e) {  </li>
<li>                    e.printStackTrace();  </li>
<li>                }  </li>
<li>            }  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>运行结果：</p>
<p> </p>
<p><img alt="" src="https://img-blog.csdn.net/20161120160204869" /></p>
<h2><img alt="" src="https://img-blog.csdn.net/20161120160212885" /><br />
<strong>3、AIO</strong></h2>
<p>在NIO的基础上引入了异步通道的概念，并提供了异步文件和异步套接字通道的实现，从而在真正意义上实现了异步非阻塞，之前的NIO只是非阻塞而并非异步。AIO不需要通过对多路复用器对注册的通道进行轮询操作即可实现异步读写，从而简化NIO编程模型。</p>
<p>①AsynchronousServerSocketChannel</p>
<p>②AsynchronousSocketChannel</p>
<p>下面看代码：</p>
<p>Server端：</p>
<p> </p>
<ol start="1">
<li>public class Server {  </li>
<li>    //线程池  </li>
<li>    private ExecutorService executorService;  </li>
<li>    //线程组  </li>
<li>    private AsynchronousChannelGroup channelGroup;  </li>
<li>    //服务器通道  </li>
<li>    public AsynchronousServerSocketChannel channel;  </li>
<li>  </li>
<li>    public Server(int port) {  </li>
<li>        try {  </li>
<li>            //创建线程池  </li>
<li>            executorService  = Executors.newCachedThreadPool();  </li>
<li>            //创建线程组  </li>
<li>            channelGroup = AsynchronousChannelGroup.withCachedThreadPool(executorService, 1);  </li>
<li>            //创建服务器通道  </li>
<li>            channel = AsynchronousServerSocketChannel.open(channelGroup);  </li>
<li>            //绑定地址  </li>
<li>            channel.bind(new InetSocketAddress(port));  </li>
<li>            System.out.println("server start, port：" + port);  </li>
<li>            channel.accept(this, new ServerCompletionHandler());  </li>
<li>            Thread.sleep(Integer.MAX_VALUE);  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        Server server = new Server(8379);  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>ServerCompletionHandler类：</p>
<ol start="1">
<li>public class ServerCompletionHandler implements CompletionHandler<AsynchronousSocketChannel, Server> {  </li>
<li>    @Override  </li>
<li>    public void completed(AsynchronousSocketChannel channel, Server attachment) {  </li>
<li>        //当有下一个客户端接入的时候，直接调用Server的accept方法，这样反复执行下去，保证多个客户端都可以阻塞  </li>
<li>        attachment.channel.accept(attachment, this);  </li>
<li>        read(channel);  </li>
<li>    }  </li>
<li>  </li>
<li>    private void read(AsynchronousSocketChannel channel) {  </li>
<li>        //读取数据  </li>
<li>        ByteBuffer buffer = ByteBuffer.allocate(1024);  </li>
<li>        channel.read(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {  </li>
<li>            @Override  </li>
<li>            public void completed(Integer resultSize, ByteBuffer attachment) {  </li>
<li>                attachment.flip();  </li>
<li>                System.out.println("Server->" + "收到客户端发送的数据长度为：" + resultSize);  </li>
<li>                String data = new String(buffer.array()).trim();  </li>
<li>                System.out.println("Server->" + "收到客户端发送的数据为：" + data);  </li>
<li>                String response = "服务器端响应了客户端。。。。。。";  </li>
<li>                write(channel, response);  </li>
<li>            }  </li>
<li>  </li>
<li>            @Override  </li>
<li>            public void failed(Throwable exc, ByteBuffer attachment) {  </li>
<li>                exc.printStackTrace();  </li>
<li>            }  </li>
<li>        });  </li>
<li>    }  </li>
<li>  </li>
<li>    private void write(AsynchronousSocketChannel channel, String response) {  </li>
<li>        try {  </li>
<li>            ByteBuffer buffer = ByteBuffer.allocate(1024);  </li>
<li>            buffer.put(response.getBytes());  </li>
<li>            buffer.flip();  </li>
<li>            channel.write(buffer).get();  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void failed(Throwable exc, Server attachment) {  </li>
<li>        exc.printStackTrace();  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>客户端：</p>
<ol start="1">
<li>public class Client implements Runnable {  </li>
<li>  </li>
<li>    private AsynchronousSocketChannel channel;  </li>
<li>  </li>
<li>    public Client() throws IOException {  </li>
<li>        channel = AsynchronousSocketChannel.open();  </li>
<li>    }  </li>
<li>  </li>
<li>    public void connect() {  </li>
<li>        channel.connect(new InetSocketAddress("127.0.0.1", 8379));  </li>
<li>    }  </li>
<li>  </li>
<li>    public void write(String data) {  </li>
<li>        try {  </li>
<li>            channel.write(ByteBuffer.wrap(data.getBytes())).get();  </li>
<li>            read();  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    public void read() {  </li>
<li>        ByteBuffer buffer = ByteBuffer.allocate(1024);  </li>
<li>        try {  </li>
<li>            channel.read(buffer).get();  </li>
<li>            buffer.flip();  </li>
<li>            byte[] bytes = new byte[buffer.remaining()];  </li>
<li>            buffer.get(bytes);  </li>
<li>            String data = new String(bytes, "UTF-8").trim();  </li>
<li>            System.out.println(data);  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void run() {  </li>
<li>        while (true) {  </li>
<li>  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        try {  </li>
<li>            Client c1 = new Client();  </li>
<li>            Client c2 = new Client();  </li>
<li>            Client c3 = new Client();  </li>
<li>  </li>
<li>            c1.connect();  </li>
<li>            c2.connect();  </li>
<li>            c3.connect();  </li>
<li>  </li>
<li>            new Thread(c1).start();  </li>
<li>            new Thread(c2).start();  </li>
<li>            new Thread(c3).start();  </li>
<li>  </li>
<li>            Thread.sleep(1000);  </li>
<li>  </li>
<li>            c1.write("c1 aaa");  </li>
<li>            c2.write("c2 bbbb");  </li>
<li>            c3.write("c3 ccccc");  </li>
<li>        } catch (Exception e) {  </li>
<li>            e.printStackTrace();  </li>
<li>        }  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p>运行结果：</p>
