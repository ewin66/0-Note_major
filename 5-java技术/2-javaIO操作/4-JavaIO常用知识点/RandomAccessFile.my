<h1>Java RandomAccessFile用法</h1>
<p>RandomAccessFile</p>
<p>RandomAccessFile是用来访问那些保存数据记录的文件的，你就可以用seek( )方法来访问记录，并进行读写了。这些记录的大小不必相同；但是其大小和位置必须是可知的。但是该类仅限于操作文件。<br />
<br />
RandomAccessFile不属于InputStream和OutputStream类系的。实际上，除了实现DataInput和DataOutput接口之外(DataInputStream和DataOutputStream也实现了这两个接口)，它和这两个类系毫不相干，甚至不使用InputStream和OutputStream类中已经存在的任何功能；它是一个完全独立的类，所有方法(绝大多数都只属于它自己)都是从零开始写的。这可能是因为RandomAccessFile能在文件里面前后移动，所以它的行为与其它的I/O类有些根本性的不同。总而言之，它是一个直接继承Object的，独立的类。<br />
<br />
基本上，RandomAccessFile的工作方式是，把DataInputStream和DataOutputStream结合起来，再加上它自己的一些方法，比如定位用的getFilePointer( )，在文件里移动用的seek( )，以及判断文件大小的length( )、skipBytes()跳过多少字节数。此外，它的构造函数还要一个表示以只读方式("r")，还是以读写方式("rw")打开文件的参数 (和C的fopen( )一模一样)。它不支持只写文件。<br />
<br />
只有RandomAccessFile才有seek搜寻方法，而这个方法也只适用于文件。BufferedInputStream有一个mark( )方法，你可以用它来设定标记(把结果保存在一个内部变量里)，然后再调用reset( )返回这个位置，但是它的功能太弱了，而且也不怎么实用。<br />
<br />
RandomAccessFile的绝大多数功能，但不是全部，已经被JDK 1.4的nio的"内存映射文件(memory-mapped files)"给取代了，你该考虑一下是不是用"内存映射文件"来代替RandomAccessFile了。</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>
<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>
<ol start="1">
<li>import java.io.IOException;  </li>
<li>import java.io.RandomAccessFile;  </li>
<li>  </li>
<li>public class TestRandomAccessFile {  </li>
<li>    public static void main(String[] args) throws IOException {  </li>
<li>        RandomAccessFile rf = new RandomAccessFile("rtest.dat", "rw");  </li>
<li>        for (int i = 0; i < 10; i++) {  </li>
<li>            //写入基本类型double数据  </li>
<li>            rf.writeDouble(i * 1.414);  </li>
<li>        }  </li>
<li>        rf.close();  </li>
<li>        rf = new RandomAccessFile("rtest.dat", "rw");  </li>
<li>        //直接将文件指针移到第5个double数据后面  </li>
<li>        rf.seek(5 * 8);  </li>
<li>        //覆盖第6个double数据  </li>
<li>        rf.writeDouble(47.0001);  </li>
<li>        rf.close();  </li>
<li>        rf = new RandomAccessFile("rtest.dat", "r");  </li>
<li>        for (int i = 0; i < 10; i++) {  </li>
<li>            System.out.println("Value " + i + ": " + rf.readDouble());  </li>
<li>        }  </li>
<li>        rf.close();  </li>
<li>    }  </li>
<li>}   </li>
</ol>
<p><br />
 </p>
<h2><a name="t1"></a>内存映射文件</h2>
<p>内存映射文件能让你创建和修改那些因为太大而无法放入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问。这种解决办法能大大简化修改文件的代码。<br />
fileChannel.map(FileChannel.MapMode mode, long position, long size)将此通道的文件区域直接映射到内存中。注意，你必须指明，它是从文件的哪个位置开始映射的，映射的范围又有多大；也就是说，它还可以映射一个大文件的某个小片断。</p>
<p><br />
MappedByteBuffer是ByteBuffer的子类，因此它具备了ByteBuffer的所有方法，但新添了force()将缓冲区的内容强制刷新到存储设备中去、load()将存储设备中的数据加载到内存中、isLoaded()位置内存中的数据是否与存储设置上同步。这里只简单地演示了一下put()和get()方法，除此之外，你还可以使用asCharBuffer( )之类的方法得到相应基本类型数据的缓冲视图后，可以方便的读写基本类型数据。</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>
<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>
<ol start="1">
<li>import java.io.RandomAccessFile;  </li>
<li>import java.nio.MappedByteBuffer;  </li>
<li>import java.nio.channels.FileChannel;  </li>
<li>  </li>
<li>public class LargeMappedFiles {  </li>
<li>    static int length = 0x8000000; // 128 Mb  </li>
<li>  </li>
<li>    public static void main(String[] args) throws Exception {  </li>
<li>        // 为了以可读可写的方式打开文件，这里使用RandomAccessFile来创建文件。  </li>
<li>        FileChannel fc = new RandomAccessFile("test.dat", "rw").getChannel();  </li>
<li>        //注意，文件通道的可读可写要建立在文件流本身可读写的基础之上  </li>
<li>        MappedByteBuffer out = fc.map(FileChannel.MapMode.READ_WRITE, 0, length);  </li>
<li>        //写128M的内容  </li>
<li>        for (int i = 0; i < length; i++) {  </li>
<li>            out.put((byte) 'x');  </li>
<li>        }  </li>
<li>        System.out.println("Finished writing");  </li>
<li>        //读取文件中间6个字节内容  </li>
<li>        for (int i = length / 2; i < length / 2 + 6; i++) {  </li>
<li>            System.out.print((char) out.get(i));  </li>
<li>        }  </li>
<li>        fc.close();  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p><br />
 </p>
<p>尽管映射写似乎要用到FileOutputStream，但是映射文件中的所有<strong>输出</strong> 必须使用RandomAccessFile，但如果只需要读时可以使用FileInputStream，写映射文件时一定要使用随机访问文件，可能写时要读的原因吧。</p>
<p> </p>
<p>该程序创建了一个128Mb的文件，如果一次性读到内存可能导致内存溢出，但这里访问好像只是一瞬间的事，这是因为，真正调入内存的只是其中的一小部分，其余部分则被放在交换文件上。这样你就可以很方便地修改超大型的文件了(最大可以到2 GB)。注意，Java是调用操作系统的"文件映射机制"来提升性能的。</p>
<p> </p>
<p>RandomAccessFile类的应用：</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>
<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>
<ol start="1">
<li>/* </li>
<li> * 程序功能：演示了RandomAccessFile类的操作，同时实现了一个文件复制操作。 </li>
<li> */  </li>
<li>package com.lwj.demo;  </li>
<li>  </li>
<li>import java.io.*;  </li>
<li>  </li>
<li>public class RandomAccessFileDemo {  </li>
<li> public static void main(String[] args) throws Exception {  </li>
<li>  RandomAccessFile file = new RandomAccessFile("file", "rw");  </li>
<li>  // 以下向file文件中写数据  </li>
<li>  file.writeInt(20);// 占4个字节  </li>
<li>  file.writeDouble(8.236598);// 占8个字节  </li>
<li>  file.writeUTF("这是一个UTF字符串");// 这个长度写在当前文件指针的前两个字节处，可用readShort()读取  </li>
<li>  file.writeBoolean(true);// 占1个字节  </li>
<li>  file.writeShort(395);// 占2个字节  </li>
<li>  file.writeLong(2325451l);// 占8个字节  </li>
<li>  file.writeUTF("又是一个UTF字符串");  </li>
<li>  file.writeFloat(35.5f);// 占4个字节  </li>
<li>  file.writeChar('a');// 占2个字节  </li>
<li>  </li>
<li>  file.seek(0);// 把文件指针位置设置到文件起始处  </li>
<li>  </li>
<li>  // 以下从file文件中读数据，要注意文件指针的位置  </li>
<li>  System.out.println("——————从file文件指定位置读数据——————");  </li>
<li>  System.out.println(file.readInt());  </li>
<li>  System.out.println(file.readDouble());  </li>
<li>  System.out.println(file.readUTF());  </li>
<li>  </li>
<li>  file.skipBytes(3);// 将文件指针跳过3个字节，本例中即跳过了一个boolean值和short值。  </li>
<li>  System.out.println(file.readLong());  </li>
<li>  </li>
<li>  file.skipBytes(file.readShort()); // 跳过文件中“又是一个UTF字符串”所占字节，注意readShort()方法会移动文件指针，所以不用加2。  </li>
<li>  System.out.println(file.readFloat());  </li>
<li>    </li>
<li>  //以下演示文件复制操作  </li>
<li>  System.out.println("——————文件复制（从file到fileCopy）——————");  </li>
<li>  file.seek(0);  </li>
<li>  RandomAccessFile fileCopy=new RandomAccessFile("fileCopy","rw");  </li>
<li>  int len=(int)file.length();//取得文件长度（字节数）  </li>
<li>  byte[] b=new byte[len];  </li>
<li>  file.readFully(b);  </li>
<li>  fileCopy.write(b);  </li>
<li>  System.out.println("复制完成！");  </li>
<li> }  </li>
<li>}  </li>
</ol>
<p><br />
RandomAccessFile 插入写示例：</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>
<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>
<ol start="1">
<li>/** </li>
<li> *  </li>
<li> * @param skip 跳过多少过字节进行插入数据 </li>
<li> * @param str 要插入的字符串 </li>
<li> * @param fileName 文件路径 </li>
<li> */  </li>
<li>public static void beiju(long skip, String str, String fileName){  </li>
<li>    try {  </li>
<li>        RandomAccessFile raf = new RandomAccessFile(fileName,"rw");  </li>
<li>        if(skip <  0 || skip > raf.length()){  </li>
<li>            System.out.println("跳过字节数无效");  </li>
<li>            return;  </li>
<li>        }  </li>
<li>        byte[] b = str.getBytes();  </li>
<li>        raf.setLength(raf.length() + b.length);  </li>
<li>        for(long i = raf.length() - 1; i > b.length + skip - 1; i--){  </li>
<li>            raf.seek(i - b.length);  </li>
<li>            byte temp = raf.readByte();  </li>
<li>            raf.seek(i);  </li>
<li>            raf.writeByte(temp);  </li>
<li>        }  </li>
<li>        raf.seek(skip);  </li>
<li>        raf.write(b);  </li>
<li>        raf.close();  </li>
<li>    } catch (Exception e) {  </li>
<li>        e.printStackTrace();  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<p><br />
 </p>
<p>利用RandomAccessFile实现文件的多线程下载，即多线程下载一个文件时，将文件分成几块，每块用不同的线程进行下载。下面是一个利用多线程在写文件时的例子，其中预先分配文件所需要的空间，然后在所分配的空间中进行分块，然后写入：</p>
<p><strong>[java]</strong> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" target="_blank" title="view plain">view plain</a> <a href="http://blog.csdn.net/akon_vm/article/details/7429245#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" target="_blank" title="copy">copy</a></p>
<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>
<ol start="1">
<li>import java.io.FileNotFoundException;  </li>
<li>import java.io.IOException;  </li>
<li>import java.io.RandomAccessFile;  </li>
<li>  </li>
<li>/** </li>
<li> * 测试利用多线程进行文件的写操作 </li>
<li> */  </li>
<li>public class Test {  </li>
<li>  </li>
<li>    public static void main(String[] args) throws Exception {  </li>
<li>        // 预分配文件所占的磁盘空间，磁盘中会创建一个指定大小的文件  </li>
<li>        RandomAccessFile raf = new RandomAccessFile("D://abc.txt", "rw");  </li>
<li>        raf.setLength(1024*1024); // 预分配 1M 的文件空间  </li>
<li>        raf.close();  </li>
<li>          </li>
<li>        // 所要写入的文件内容  </li>
<li>        String s1 = "第一个字符串";  </li>
<li>        String s2 = "第二个字符串";  </li>
<li>        String s3 = "第三个字符串";  </li>
<li>        String s4 = "第四个字符串";  </li>
<li>        String s5 = "第五个字符串";  </li>
<li>          </li>
<li>        // 利用多线程同时写入一个文件  </li>
<li>        new FileWriteThread(1024*1,s1.getBytes()).start(); // 从文件的1024字节之后开始写入数据  </li>
<li>        new FileWriteThread(1024*2,s2.getBytes()).start(); // 从文件的2048字节之后开始写入数据  </li>
<li>        new FileWriteThread(1024*3,s3.getBytes()).start(); // 从文件的3072字节之后开始写入数据  </li>
<li>        new FileWriteThread(1024*4,s4.getBytes()).start(); // 从文件的4096字节之后开始写入数据  </li>
<li>        new FileWriteThread(1024*5,s5.getBytes()).start(); // 从文件的5120字节之后开始写入数据  </li>
<li>    }  </li>
<li>      </li>
<li>    // 利用线程在文件的指定位置写入指定数据  </li>
<li>    static class FileWriteThread extends Thread{  </li>
<li>        private int skip;  </li>
<li>        private byte[] content;  </li>
<li>          </li>
<li>        public FileWriteThread(int skip,byte[] content){  </li>
<li>            this.skip = skip;  </li>
<li>            this.content = content;  </li>
<li>        }  </li>
<li>          </li>
<li>        public void run(){  </li>
<li>            RandomAccessFile raf = null;  </li>
<li>            try {  </li>
<li>                raf = new RandomAccessFile("D://abc.txt", "rw");  </li>
<li>                raf.seek(skip);  </li>
<li>                raf.write(content);  </li>
<li>            } catch (FileNotFoundException e) {  </li>
<li>                e.printStackTrace();  </li>
<li>            } catch (IOException e) {  </li>
<li>                // TODO Auto-generated catch block  </li>
<li>                e.printStackTrace();  </li>
<li>            } finally {  </li>
<li>                try {  </li>
<li>                    raf.close();  </li>
<li>                } catch (Exception e) {  </li>
<li>                }  </li>
<li>            }  </li>
<li>        }  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>
