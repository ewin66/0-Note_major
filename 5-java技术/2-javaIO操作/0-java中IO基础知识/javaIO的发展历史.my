<h1>java IO的发展历史</h1>
<p>对白酿成语言的设计者来说，创建一个好的输入/输出(I/O)系统是一项更艰难的任务。</p>
<p>现有的大量不同方案已经说明了这一点。挑战似乎来自于要涵盖所有的可能性。不仅存在各种用于通信的 I/O 源端和接收端（文件、控制台、网络链接等），而且还需要以多种不同的方式与它们进行通信（顺序、随机存取、缓冲、二进制、按字符、按行、按字等）。</p>
<p>Java 类库的设计者是通过创建大量的类来解决这个难题的。一开始，可能会对 Java I/O系统提供了如此多的类而感到不知所措（具有讽刺意味的是， Java I/O 设计的初衷是为了避免过多的类）。自从 Java 1.0 版本以来， Java 的 I/O 类库发生了明显改变，在原来面向字节的类中添加了面向字符和基于 Unicode 的类。在 JDK1.4 中，添加了 nio 类（对于“新 I/O”这个称呼，从现在这个名字我们仍将要用若干年）用于改进性能及功能。因此，在充分理解 java I/O 系统以便正确地运用之前，我们需要学习相当数量的类。另外，很有必要理解 I/O 类库的演化过程，即使我们的第一反应是“不要用历史打扰我，只需要告诉我怎么用。 ”问题是，如果缺乏历史的眼光，很快我们就会对什么时候该使用某些类，什么时候不该使用它们而感到迷惑。</p>
