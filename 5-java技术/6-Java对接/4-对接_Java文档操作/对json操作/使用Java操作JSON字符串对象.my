<h1>使用Java操作JSON字符串对象</h1>

<p>1、如果我们需要实现一个配置管理的功能，那么为每个配置项目增加一个字段既复杂也不利于扩展，所以我们通常使用一个字符串来保存配置项目信息，这里介绍如何使用json的字符串解析来达到刚才说的目的。引入Json需要的类库：</p>

<p>import org.json.JSONException;   <br />
import org.json.JSONObject;  </p>

<p>2、生成一个json对象(可以添加不同类型的数据)：<br />
JSONObject jsonObject = new JSONObject();<br />
jsonObject.put("a", 1);   jsonObject.put("b", 1.1);<br />
jsonObject.put("c", 1L);<br />
jsonObject.put("d", "test");<br />
jsonObject.put("e", true);<br />
System.out.println(jsonObject);<br />
//{"d":"test","e":true,"b":1.1,"c":1,"a":1}  <br />
<br />
3、解析一个json对象(可以解析不同类型的数据)，getJSONObject(String str)：</p>

<p>jsonObject = getJSONObject("{d:test,e:true,b:1.1,c:1,a:1}");<br />
System.out.println(jsonObject);<br />
//{"d":"test","e":true,"b":1.1,"c":1,"a":1}<br />
System.out.println(jsonObject.getInt("a"));<br />
System.out.println(jsonObject.getDouble("b"));<br />
System.out.println(jsonObject.getLong("c"));<br />
System.out.println(jsonObject.getString("d"));<br />
System.out.println(jsonObject.getBoolean("e"));</p>

<p>public static JSONObject getJSONObject(String str) {<br />
        if (str == null || str.trim().length() == 0) {<br />
            return null;<br />
        }<br />
        JSONObject jsonObject = null;<br />
        try {<br />
            jsonObject = new JSONObject(str);<br />
        } catch (JSONException e) {<br />
            e.printStackTrace(System.err);<br />
        }<br />
        return jsonObject;<br />
    }</p>
