<h1>Future模式</h1>
<p>    多线程开发可以更好的发挥多核cpu性能，常用的多线程设计模式有：Future、Master-Worker、Guard Susperionsion、不变、生产者-消费者 模式；jdk除了定义了若干并发的<a href="http://lib.csdn.net/base/datastructure" target="_blank" title="算法与数据结构知识库">数据结构</a>，也内置了多线程框架和各种线程池；    锁（分为内部锁、重入锁、读写锁）、ThreadLocal、信号量等在并发控制中发挥着巨大的作用。这里重点介绍第一种并发——Future模型。</p>
<h2><strong>一、什么是Future模型：</strong></h2>
<p>    该模型是将异步请求和代理模式联合的模型产物。类似商品订单模型。见下图：</p>
<p><img alt="" src="http://img.blog.csdn.net/20140930160301156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1kY3N6aA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" /></p>
<p>    客户端发送一个长时间的请求，服务端不需等待该数据处理完成便立即返回一个伪造的代理数据（相当于商品订单，不是商品本身），用户也无需等待，先去执行其他的若干操作后，再去调用服务器已经完成组装的真实数据。该模型充分利用了等待的时间片段。</p>
<h2><strong> 二、Future模式的核心结构：</strong></h2>
<p>Main：启动系统，调用Client发出请求；</p>
<p>Client：返回Data对象，理解返回FutureData，并开启ClientThread线程装配RealData；</p>
<p>Data：返回数据的接口；</p>
<p>FutureData：Future数据，构造很快，但是是一个虚拟的数据，需要装配RealData；</p>
<p>RealData：真实数据，构造比较慢。</p>
<p><strong>三、Future模式的代码实现：</strong></p>
<h3>（1）Main函数：</h3>
<ol start="1">
<li>public class Main {  </li>
<li>      </li>
<li>    public static void main(String[] args){  </li>
<li>        Client client = new Client();  </li>
<li>        //理解返回一个FutureData  </li>
<li>        Data data = client.request("name");  </li>
<li>        System.out.println("请求完毕！");  </li>
<li>          </li>
<li>        try{  </li>
<li>              </li>
<li>            //处理其他业务  </li>
<li>            //这个过程中，真是数据RealData组装完成，重复利用等待时间  </li>
<li>            Thread.sleep(2000);           </li>
<li>              </li>
<li>        }catch (Exception e){  </li>
<li>              </li>
<li>        }  </li>
<li>          </li>
<li>        //真实数据  </li>
<li>        System.out.println("数据 = "+ data.getResult());  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<h3>（2）Client的实现：</h3>
<ol start="1">
<li>public class Client {  </li>
<li>  </li>
<li>    public Data request(final String queryStr){  </li>
<li>        final FutureData future = new FutureData();  </li>
<li>        //开启一个新的线程来构造真实数据  </li>
<li>        new Thread(){  </li>
<li>            public void run(){  </li>
<li>                RealData realData = new RealData(queryStr);  </li>
<li>                future.setRealData(realData);           }  </li>
<li>        }.start();  </li>
<li>        return future;  </li>
<li>    }  </li>
<li>}  </li>
<li> </li>
</ol>
<h3>（3）Data的实现：</h3>
<ol start="1">
<li>public interface Data {  </li>
<li>  </li>
<li>    public  String getResult();  </li>
<li>}  </li>
</ol>
<h3>（4）FutureData：</h3>
<ol start="1">
<li><span style="font-size:18px;">package tgb;  </li>
<li> </li>
<li>public class FutureData implements Data {  </li>
<li>  </li>
<li>    protected RealData realData =null;  </li>
<li>    protected boolean isReady = false;  </li>
<li>    public synchronized void setRealData(RealData realData){  </li>
<li>        if(isReady){  </li>
<li>            return;  </li>
<li>        }  </li>
<li>        this.realData=realData;  </li>
<li>        isReady=true;  </li>
<li>        notifyAll();  </li>
<li>          </li>
<li>    }  </li>
<li>      </li>
<li>    @Override  </li>
<li>    public  synchronized  String getResult() {  </li>
<li>        while(!isReady){  </li>
<li>            try{  </li>
<li>                wait();  </li>
<li>            }catch (Exception e){  </li>
<li>                  </li>
<li>            }  </li>
<li>        }  </li>
<li>        return realData.result;  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<h3>（5）RealData实现：</h3>
<ol start="1">
<li>public class RealData implements Data {  </li>
<li>    protected  String  result;  </li>
<li>      </li>
<li>    public RealData(String para){  </li>
<li>         //构造比较慢  </li>
<li>        StringBuffer sb= new StringBuffer();  </li>
<li>        for(int i=0;i<10;i++){  </li>
<li>            sb.append(para);  </li>
<li>            try{  </li>
<li>                Thread.sleep(1000);  </li>
<li>            }catch(Exception e){  </li>
<li>                  </li>
<li>            }  </li>
<li>            result= sb.toString();  </li>
<li>        }  </li>
<li>    }  </li>
<li> </li>
<li>    @Override  </li>
<li>    public String getResult() {  </li>
<li>  </li>
<li>        return result;  </li>
<li>    }  </li>
<li>}  </li>
</ol>
<h2><strong>注意：</strong></h2>
<p>    FutureData是对RealData的包装，是dui真实数据的一个代理，封装了获取真实数据的等待过程。它们都实现了共同的接口，所以，针对客户端程序组是没有区别的；</p>
<p>    客户端在调用的方法中，单独启用一个线程来完成真实数据的组织，这对调用客户端的main函数式封闭的；</p>
<p>    因为咋FutureData中的notifyAll和wait函数，主程序会等待组装完成后再会继续主进程，也就是如果没有组装完成，main函数会一直等待。</p>
