<h1>java中枚举类型的使用</h1>

<p><strong>　　Java 枚举(enum) 详解7种常见的用法</strong></p>

<p>　　JDK1.5引入了新的类型&mdash;&mdash;枚举。在 Java 中它虽然算个&ldquo;小&rdquo;功能，却给我的开发带来了&ldquo;大&rdquo;方便。</p>

<p>&nbsp; web项目里实体类使用枚举类型：</p>

<p>　　一般在该实体类的包下在新建一个enumeration包，把枚举类型的类写在enumeration包下，例如：</p>

<pre>
1 public enum Color {
2      RED,            //红色
3      BLUE,           //蓝色
4      GREEN           //绿色
5     }</pre>

<p>　　然后在实体类里引用这个枚举类。</p>

<pre>
1     @Enumerated(value = EnumType.STRING)
2     @Column(name = &quot;color&quot;)
3     @NotNull
4     private Color color;</pre>

<p>　<strong>　注意：</strong></p>

<p>（1）@Enumerated(value=EnumType.ORDINAL)采用枚举类型的序号值与数据库进行交互，&nbsp;<br />
　　此时数据库的数据类型需要是数值类型，例如在实际操作中&nbsp;</p>

<pre>
CatTest ct = new CatTest(); 
ct.setColor(Color.BLUE); </pre>

<p>　　当我们将对象ct保存到数据库中的时候，数据库中存储的数值是BLUE在Color枚举&nbsp;<br />
　　定义中的序号1(序号从零开始)；</p>

<p><br />
（2）@Enumerated(value=EnumType.STRING)采用枚举类型与数据库进行交互，&nbsp;<br />
　　此时数据库的数据类型需要是NVACHAR2等字符串类型，例如在实际操作中&nbsp;</p>

<pre>
CatTest ct = new CatTest(); 
ct.setColor(Color.BLUR); </pre>

<p>　　数据库中存储的数值是BLUE字符串。</p>

<p>　　枚举类型对象之间的值比较，是可以使用==，直接来比较值，是否相等的，不是必须使用equals方法的哟。</p>

<p><strong>用法一：常量</strong><br />
　　在JDK1.5 之前，我们定义常量都是： public static fianl.... 。现在好了，有了枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。</p>

<pre>
1 public enum Color { 
2     RED, GREEN, BLANK, YELLOW 
3 }
</pre>

<p><strong>用法二：switch</strong></p>

<pre>
 1 enum Signal {  
 2     GREEN, YELLOW, RED  
 3 }  
 4 public class TrafficLight {  
 5     Signal color = Signal.RED;  
 6     public void change() {  
 7         switch (color) {  
 8         case RED:  
 9             color = Signal.GREEN;  
10             break;  
11         case YELLOW:  
12             color = Signal.RED;  
13             break;  
14         case GREEN:  
15             color = Signal.YELLOW;  
16             break;  
17         }  
18     }  
19 } 
</pre>

<p><strong>用法三：向枚举中添加新方法</strong></p>

<pre>
 1 public enum Color {  
 2     RED(&quot;红色&quot;, 1), GREEN(&quot;绿色&quot;, 2), BLANK(&quot;白色&quot;, 3), YELLO(&quot;黄色&quot;, 4);  
 3     // 成员变量  
 4     private String name;  
 5     private int index;  
 6     // 构造方法  
 7     private Color(String name, int index) {  
 8         this.name = name;  
 9         this.index = index;  
10     }  
11     // 普通方法  
12     public static String getName(int index) {  
13         for (Color c : Color.values()) {  
14             if (c.getIndex() == index) {  
15                 return c.name;  
16             }  
17         }  
18         return null;  
19     }  
20     // get set 方法  
21     public String getName() {  
22         return name;  
23     }  
24     public void setName(String name) {  
25         this.name = name;  
26     }  
27     public int getIndex() {  
28         return index;  
29     }  
30     public void setIndex(int index) {  
31         this.index = index;  
32     }  
33 }  
</pre>

<p><strong>用法四：覆盖枚举的方法</strong></p>

<p>　　下面给出一个toString()方法覆盖的例子。&nbsp;</p>

<pre>
 1 public enum Color {  
 2     RED(&quot;红色&quot;, 1), GREEN(&quot;绿色&quot;, 2), BLANK(&quot;白色&quot;, 3), YELLO(&quot;黄色&quot;, 4);  
 3     // 成员变量  
 4     private String name;  
 5     private int index;  
 6     // 构造方法  
 7     private Color(String name, int index) {  
 8         this.name = name;  
 9         this.index = index;  
10     }  
11     //覆盖方法  
12     @Override  
13     public String toString() {  
14         return this.index+&quot;_&quot;+this.name;  
15     }  
16 }  
</pre>

<p>用法五：实现接口</p>

<p>　　所有的枚举都继承自java.lang.Enum类。由于Java 不支持多继承，所以枚举对象不能再继承其他类。</p>

<pre>
 1 public interface Behaviour {  
 2     void print();  
 3     String getInfo();  
 4 }  
 5 public enum Color implements Behaviour{  
 6     RED(&quot;红色&quot;, 1), GREEN(&quot;绿色&quot;, 2), BLANK(&quot;白色&quot;, 3), YELLO(&quot;黄色&quot;, 4);  
 7     // 成员变量  
 8     private String name;  
 9     private int index;  
10     // 构造方法  
11     private Color(String name, int index) {  
12         this.name = name;  
13         this.index = index;  
14     }  
15 //接口方法  
16     @Override  
17     public String getInfo() {  
18         return this.name;  
19     }  
20     //接口方法  
21     @Override  
22     public void print() {  
23         System.out.println(this.index+&quot;:&quot;+this.name);  
24     }  
25 } 
</pre>

<p><strong>用法六：使用接口组织枚举</strong></p>

<pre>
1 public interface Food {  
2     enum Coffee implements Food{  
3         BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  
4     }  
5     enum Dessert implements Food{  
6         FRUIT, CAKE, GELATO  
7     }  
8 }  
</pre>

<p><strong>用法七：关于枚举集合的使用</strong></p>

<p>　　java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。<br />
　　关于枚举的实现细节和原理请参考：<br />
　　参考资料：《ThinkingInJava》第四版 &nbsp;http://softbeta.iteye.com/blog/1185573</p>
