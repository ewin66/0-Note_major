<h1>数组在C++和java中的区别</h1>

<p>      几乎所有的程序设计语言都支持数组。在C和Ｃ＋＋中使用数组是很危险的。因为C和C++中的数组就是内存块。如果一个程序要访问其自身内存块之外的数组，或者在数组初始化之前使用它，都会产生难以预料的后果。</p>

<p>     java的主要目标之一就是安全性。<strong>java确保数组会被初始化，而且不能在它的范围之外被访问</strong>。这种范围检查，是以每个数组上少量的内存开销以及运行时的下标检查为代价的。但是由此换来的安全性和效率的提高，也是值得的。</p>

<p>     当<strong>java创建一个数组对象时，实际上就是创建了一个引用数组，并且每个引用都会被自动初始化一个特殊值。该值拥有自己的关键字null，一旦java看见了null，就知道这个引用还没有指向某个对象。</strong>如果使用某个指向null的引用，就会在运行时报错。</p>

<h2>java数组特征：</h2>

<p>1.Java中的数组是对象。数组保存的仅仅是对象的引用，而不是对象本身。</p>

<p>2、数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</p>

<p> 3、在数组声明中包含数组长度永远是不合法的！</p>

<p>4、数组中保存引用类型时保存的是对象引用，基本数据类型数组保存基本数据的值。</p>

<p>5、数组的length只表示数组能够容纳多少元素，不能保存实际保存的元素个数。</p>

<p>6、多维数组可以使用Arrays.deepToString()将多维数组转换成String。</p>

<p>7、不能使用泛型创建数组，例如：</p>

<p>数组的声明：</p>

<p>c++ <br />
int arr[2]; <br />
a[0]=1; <br />
a[1]=1;<br />
<br />
java <br />
int arr[] = new int[2]; <br />
a[0]=1; <br />
a[1]=1;</p>

<p>C#中定义数组：</p>

<p><code>一维  </code><code>int</code><code>[] i= </code><code>new</code> <code>int</code><code>[12];</code></p>

<p><code>二维  </code><code>int</code><code>[,] i= </code><code>new</code> <code>int</code><code>[5,12];<br><br>一维不能写成 </code><code>int</code> <code>i[] <br>二维不写成   </code><code>int</code><code>[][] i</code></p>

<p>java中数组的静态初始化 <br />
在c++中，数组定义时，已经分配存储空间，并可以使用。 (定义时指定数组大小) <br />
在java中，数组定义时，int arr[]，只字义了数组变量，数组是不可以使用的。 只有数组new以后，才会创建数组，分配存储空间，并可以使用。 (定义时指定数组大小是非法的，创建时指定数组大小)</p>

<p>int[] c = {1,2,3,4}</p>

<p>或者int[] d= new int[]{1,2,3,4}</p>

<p>数组常见异常</p>

<p>超出范围异常ArrayIndexOutOfBoundsException</p>

<p>空指针异常（如果没有为数组变量分配指向的内存空间，就调用其属性int[] a ; a.length）</p>

<p> </p>

<p>数组排序</p>

<pre>
//Java.util.Arrays类的Sort()方法提供数组元素的排序

public static void main(String[] args) {

int[] nums={5,2,6,7,9,5,498,5};
Arrays.sort(nums);
for(int i=0;i<nums.length;i++)
System.out.println(nums[i]);

}
</pre>

<p>二维数组的使用：</p>

<p>使用二维数组打印10行的杨辉三角，杨辉三角实际上是二项式的展开式的系数</p>

<pre>
package com.atguigu.java;
import java.util.Arrays;
public class HelloWorld {
//打印十行的杨辉三角
public static void main(String[] args) {
/**
* 1
* 1 1
* 1 2 1
* 1 3 3 1
* 1 4 6 4 1
* 
* 
* 1.什么是杨辉三角：二项式展开式的系数
* 2.为什么使用二维数组：因为杨辉三角是由行和列组成的。每一行是一个数组
* 3.杨辉三角的特点：
* 3.1第n行有n个元素（n>=1）
* 3.2每一行的第一个元素和最后一个元素都是1
* 3.3不等于1的那些元素的值为上一行的对应列和对应列的前一列的元素的和 * 
*/

//第一步：先声明一个二维数组额，二维数组有10个元素
int[][] yh = new int[10][];
/**
* 杨辉是一个二维数组，二维数组的每个元素是一维数组。而一维数组是引用型，其默认值是null
* 所以现在输出yh的每个元素，得到10个null
*/

//第二步：对二维数组的元素进行初始化：第i个元素（i从0开始）为长度为i+1的一维数组
for(int i=0;i<yh.length;i++){
yh[i]=new int[i+1]; 

//第三步：对具体的每一个元素进行初始化(是一的元素)：
//yh[i][0]=1 , yh[i][i]=1,
yh[i][0] = 1;
yh[i][i] = 1; 

//第四步：不是1的元素
//yh[i][j] = yh[i-1][j]+yh[i-1][j+1](i>1 && j>0 && j<i)
if(i>1){ //从第三行开始
for(int j =1;j<i;j++){
yh[i][j] = yh[i-1][j]+yh[i-1][j-1];
}
}
}

for(int i =0;i<yh.length;i++){
for(int j=0;j<yh[i].length;j++){
System.out.print(yh[i][j]+" ");
}
System.out.println();
}
}

}
</pre>

<p> Length和GetLength（）</p>

<p> Array.GetLength 方法，这个只是C#中的方法</p>

<p>获取一个 32 位整数，该整数表示 <a href="http://msdn.microsoft.com/zh-cn/library/system.array(v=vs.110).aspx">Array</a> 的指定维中的元素数</p>

<pre>
public int GetLength(
int dimension
)

参数
dimension类型：System.Int32
Array 的从零开始的维度，其长度需要确定。

返回值
类型：System.Int32
一个 32 位整数，它表示指定维中的元素数。
</pre>

<p>二维数组 myArray<br />
int k= myArray.Length;             //二维数组的长度<br />
int k= myArray.GetLength(0);   //二维数组的长度<br />
int k= myArray.GetLength(1);   //一维的长度（固定）</p>
