<h1>Java反射机制详解</h1>

<h2>目录</h2>

<p>1反射机制是什么<br />
2反射机制能做什么<br />
3反射机制的相关API<br />
·通过一个对象获得完整的包名和类名<br />
·实例化Class类对象<br />
·获取一个对象的父类与实现的接口<br />
·获取某个类中的全部构造函数 - 详见下例<br />
·通过反射机制实例化一个类的对象<br />
·获取某个类的全部属性<br />
·获取某个类的全部方法<br />
·通过反射机制调用某个类的方法<br />
·通过反射机制操作某个类的属性<br />
·反射机制的动态代理<br />
4反射机制的应用实例<br />
·在泛型为Integer的ArrayList中存放一个String类型的对象。<br />
·通过反射取得并修改数组的信息<br />
·通过反射机制修改数组的大小<br />
·将反射机制应用于工厂模式</p>

<h2>1反射机制是什么</h2>

<p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>

<h2>2反射机制能做什么</h2>

<p>反射机制主要提供了以下功能： </p>

<p>在运行时判断任意一个对象所属的类；</p>

<p>在运行时构造任意一个类的对象；</p>

<p>在运行时判断任意一个类所具有的成员变量和方法；</p>

<p>在运行时调用任意一个对象的方法；</p>

<p>生成动态代理。</p>

<h2>3反射机制的相关API</h2>

<table border="1" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>方法关键字</td>
<td>含义</td>
</tr>
<tr>
<td>getDeclaredMethods()</td>
<td>获取所有的方法</td>
</tr>
<tr>
<td>getReturnType()</td>
<td>获得方法的放回类型</td>
</tr>
<tr>
<td>getParameterTypes()</td>
<td>获得方法的传入参数类型</td>
</tr>
<tr>
<td>getDeclaredMethod("方法名",参数类型.class,……)</td>
<td>获得特定的方法</td>
</tr>
<tr>
<td> </td>
<td> </td>
</tr>
<tr>
<td>构造方法关键字</td>
<td>含义</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>获取所有的构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructor(参数类型.class,……)</td>
<td>获取特定的构造方法</td>
</tr>
<tr>
<td> </td>
<td> </td>
</tr>
<tr>
<td>父类和父接口</td>
<td>含义</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td>获取某类的父类</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>获取某类实现的接口</td>
</tr>
</tbody>
</table>

<p> </p>

<p>通过一个对象获得完整的包名和类名</p>

<p>package net.xsoftlab.baike;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        TestReflect testReflect = new TestReflect();<br />
        System.out.println(testReflect.getClass().getName());<br />
        // 结果 net.xsoftlab.baike.TestReflect<br />
    }<br />
}</p>

<h3>实例化Class类对象</h3>

<p>package net.xsoftlab.baike;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> class1 = null;<br />
        Class<?> class2 = null;<br />
        Class<?> class3 = null;<br />
        // 一般采用这种形式<br />
        class1 = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        class2 = new TestReflect().getClass();<br />
        class3 = TestReflect.class;<br />
        System.out.println("类名称   " + class1.getName());<br />
        System.out.println("类名称   " + class2.getName());<br />
        System.out.println("类名称   " + class3.getName());<br />
    }<br />
}</p>

<h3>一个对象的父类与实现的接口</h3>

<p>package net.xsoftlab.baike;<br />
import java.io.Serializable;<br />
public class TestReflect implements Serializable {<br />
    private static final long serialVersionUID = -2862585049955236662L;<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> clazz = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        // 取得父类<br />
        Class<?> parentClass = clazz.getSuperclass();<br />
        System.out.println("clazz的父类为：" + parentClass.getName());<br />
        // clazz的父类为： java.lang.Object<br />
        // 获取所有的接口<br />
        Class<?> intes[] = clazz.getInterfaces();<br />
        System.out.println("clazz实现的接口有：");<br />
        for (int i = 0; i < intes.length; i++) {<br />
            System.out.println((i + 1) + "：" + intes[i].getName());<br />
        }<br />
        // clazz实现的接口有：<br />
        // 1：java.io.Serializable<br />
    }<br />
}<br />
获取某个类中的全部构造函数 - 详见下例</p>

<h3>通过反射机制实例化一个类的对象</h3>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Constructor;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> class1 = null;<br />
        class1 = Class.forName("net.xsoftlab.baike.User");<br />
        // 第一种方法，实例化默认构造方法，调用set赋值<br />
        User user = (User) class1.newInstance();<br />
        user.setAge(20);<br />
        user.setName("Rollen");<br />
        System.out.println(user);<br />
        // 结果 User [age=20, name=Rollen]<br />
        // 第二种方法 取得全部的构造函数 使用构造函数赋值<br />
        Constructor<?> cons[] = class1.getConstructors();<br />
        // 查看每个构造方法需要的参数<br />
        for (int i = 0; i < cons.length; i++) {<br />
            Class<?> clazzs[] = cons[i].getParameterTypes();<br />
            System.out.print("cons[" + i + "] (");<br />
            for (int j = 0; j < clazzs.length; j++) {<br />
                if (j == clazzs.length - 1)<br />
                    System.out.print(clazzs[j].getName());<br />
                else<br />
                    System.out.print(clazzs[j].getName() + ",");<br />
            }<br />
            System.out.println(")");<br />
        }<br />
        // 结果<br />
        // cons[0] (java.lang.String)<br />
        // cons[1] (int,java.lang.String)<br />
        // cons[2] ()<br />
        user = (User) cons[0].newInstance("Rollen");<br />
        System.out.println(user);<br />
        // 结果 User [age=0, name=Rollen]<br />
        user = (User) cons[1].newInstance(20, "Rollen");<br />
        System.out.println(user);<br />
        // 结果 User [age=20, name=Rollen]<br />
    }<br />
}<br />
class User {<br />
    private int age;<br />
    private String name;<br />
    public User() {<br />
        super();<br />
    }<br />
    public User(String name) {<br />
        super();<br />
        this.name = name;<br />
    }<br />
    public User(int age, String name) {<br />
        super();<br />
        this.age = age;<br />
        this.name = name;<br />
    }<br />
    public int getAge() {<br />
        return age;<br />
    }<br />
    public void setAge(int age) {<br />
        this.age = age;<br />
    }<br />
    public String getName() {<br />
        return name;<br />
    }<br />
    public void setName(String name) {<br />
        this.name = name;<br />
    }<br />
    @Override<br />
    public String toString() {<br />
        return "User [age=" + age + ", name=" + name + "]";<br />
    }<br />
}</p>

<h3>获取某个类的全部属性</h3>

<p>package net.xsoftlab.baike;<br />
import java.io.Serializable;<br />
import java.lang.reflect.Field;<br />
import java.lang.reflect.Modifier;<br />
public class TestReflect implements Serializable {<br />
    private static final long serialVersionUID = -2862585049955236662L;<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> clazz = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        System.out.println("===============本类属性===============");<br />
        // 取得本类的全部字段<br />
        Field[] field = clazz.getDeclaredFields();<br />
        for (int i = 0; i < field.length; i++) {<br />
            // 权限修饰符<br />
            int mo = field[i].getModifiers();<br />
            String priv = Modifier.toString(mo);<br />
            // 字段类型<br />
            Class<?> type = field[i].getType();<br />
            System.out.println(priv + " " + type.getName() + " " + field[i].getName() + ";");<br />
        }<br />
         <br />
        System.out.println("==========实现的接口或者父类的属性==========");<br />
        // 取得实现的接口或者父类的字段<br />
        Field[] filed1 = clazz.getFields();<br />
        for (int j = 0; j < filed1.length; j++) {<br />
            // 权限修饰符<br />
            int mo = filed1[j].getModifiers();<br />
            String priv = Modifier.toString(mo);<br />
            // 字段类型<br />
            Class<?> type = filed1[j].getType();<br />
            System.out.println(priv + " " + type.getName() + " " + filed1[j].getName() + ";");<br />
        }<br />
    }<br />
}</p>

<h3>获取某个类的全部方法 </h3>

<p>Method method[] = clazz.getMethods();</p>

<p>package net.xsoftlab.baike;<br />
import java.io.Serializable;<br />
import java.lang.reflect.Method;<br />
import java.lang.reflect.Modifier;<br />
public class TestReflect implements Serializable {<br />
    private static final long serialVersionUID = -2862585049955236662L;<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> clazz = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        Method method[] = clazz.getMethods();<br />
        for (int i = 0; i < method.length; ++i) {<br />
            Class<?> returnType = method[i].getReturnType();<br />
            Class<?> para[] = method[i].getParameterTypes();<br />
            int temp = method[i].getModifiers();<br />
            System.out.print(Modifier.toString(temp) + " ");<br />
            System.out.print(returnType.getName() + "  ");<br />
            System.out.print(method[i].getName() + " ");<br />
            System.out.print("(");<br />
            for (int j = 0; j < para.length; ++j) {<br />
                System.out.print(para[j].getName() + " " + "arg" + j);<br />
                if (j < para.length - 1) {<br />
                    System.out.print(",");<br />
                }<br />
            }<br />
            Class<?> exce[] = method[i].getExceptionTypes();<br />
            if (exce.length > 0) {<br />
                System.out.print(") throws ");<br />
                for (int k = 0; k < exce.length; ++k) {<br />
                    System.out.print(exce[k].getName() + " ");<br />
                    if (k < exce.length - 1) {<br />
                        System.out.print(",");<br />
                    }<br />
                }<br />
            } else {<br />
                System.out.print(")");<br />
            }<br />
            System.out.println();<br />
        }<br />
    }<br />
}</p>

<h3>通过反射机制调用某个类的方法</h3>

<p>Method method = clazz.getMethod("reflect1");</p>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Method;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> clazz = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        // 调用TestReflect类中的reflect1方法<br />
        Method method = clazz.getMethod("reflect1");<br />
        method.invoke(clazz.newInstance());<br />
        // Java 反射机制 - 调用某个类的方法1.<br />
        // 调用TestReflect的reflect2方法<br />
        method = clazz.getMethod("reflect2", int.class, String.class);<br />
        method.invoke(clazz.newInstance(), 20, "张三");<br />
        // Java 反射机制 - 调用某个类的方法2.<br />
        // age -> 20. name -> 张三<br />
    }<br />
    public void reflect1() {<br />
        System.out.println("Java 反射机制 - 调用某个类的方法1.");<br />
    }<br />
    public void reflect2(int age, String name) {<br />
        System.out.println("Java 反射机制 - 调用某个类的方法2.");<br />
        System.out.println("age -> " + age + ". name -> " + name);<br />
    }<br />
}</p>

<h3>通过反射机制操作某个类的属性</h3>

<p>Field field = clazz.getDeclaredField("proprety");</p>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Field;<br />
public class TestReflect {<br />
    private String proprety = null;<br />
    public static void main(String[] args) throws Exception {<br />
        Class<?> clazz = Class.forName("net.xsoftlab.baike.TestReflect");<br />
        Object obj = clazz.newInstance();<br />
        // 可以直接对 private 的属性赋值<br />
        Field field = clazz.getDeclaredField("proprety");<br />
        field.setAccessible(true);<br />
        field.set(obj, "Java反射机制");<br />
        System.out.println(field.get(obj));<br />
    }<br />
}</p>

<h3>反射机制的动态代理</h3>

<p>// 获取类加载器的方法<br />
TestReflect testReflect = new TestReflect();<br />
        System.out.println("类加载器  " + testReflect.getClass().getClassLoader().getClass().getName());<br />
package net.xsoftlab.baike;<br />
import java.lang.reflect.InvocationHandler;<br />
import java.lang.reflect.Method;<br />
import java.lang.reflect.Proxy;<br />
//定义项目接口<br />
interface Subject {<br />
    public String say(String name, int age);<br />
}<br />
// 定义真实项目<br />
class RealSubject implements Subject {<br />
    public String say(String name, int age) {<br />
        return name + "  " + age;<br />
    }<br />
}<br />
class MyInvocationHandler implements InvocationHandler {<br />
    private Object obj = null;<br />
    public Object bind(Object obj) {<br />
        this.obj = obj;<br />
        return Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), this);<br />
    }<br />
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />
        Object temp = method.invoke(this.obj, args);<br />
        return temp;<br />
    }<br />
}<br />
/**<br />
 * 在java中有三种类类加载器。<br />
 * <br />
 * 1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。<br />
 * <br />
 * 2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jrelibext目录中的类<br />
 * <br />
 * 3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。<br />
 * <br />
 * 如果想要完成动态代理，首先需要定义一个InvocationHandler接口的子类，已完成代理的具体操作。<br />
 * <br />
 * @author xsoftlab.net<br />
 * <br />
 */<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        MyInvocationHandler demo = new MyInvocationHandler();<br />
        Subject sub = (Subject) demo.bind(new RealSubject());<br />
        String info = sub.say("Rollen", 20);<br />
        System.out.println(info);<br />
    }<br />
}</p>

<h2>4反射机制的应用实例</h2>

<h3>在泛型为Integer的ArrayList中存放一个String类型的对象。</h3>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Method;<br />
import java.util.ArrayList;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        ArrayList<Integer> list = new ArrayList<Integer>();<br />
        Method method = list.getClass().getMethod("add", Object.class);<br />
        method.invoke(list, "Java反射机制实例。");<br />
        System.out.println(list.get(0));<br />
    }<br />
}</p>

<h3>通过反射取得并修改数组的信息</h3>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Array;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        int[] temp = { 1, 2, 3, 4, 5 };<br />
        Class<?> demo = temp.getClass().getComponentType();<br />
        System.out.println("数组类型： " + demo.getName());<br />
        System.out.println("数组长度  " + Array.getLength(temp));<br />
        System.out.println("数组的第一个元素: " + Array.get(temp, 0));<br />
        Array.set(temp, 0, 100);<br />
        System.out.println("修改之后数组第一个元素为： " + Array.get(temp, 0));<br />
    }<br />
}</p>

<h3>通过反射机制修改数组的大小</h3>

<p>package net.xsoftlab.baike;<br />
import java.lang.reflect.Array;<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        int[] temp = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };<br />
        int[] newTemp = (int[]) arrayInc(temp, 15);<br />
        print(newTemp);<br />
        String[] atr = { "a", "b", "c" };<br />
        String[] str1 = (String[]) arrayInc(atr, 8);<br />
        print(str1);<br />
    }<br />
    // 修改数组大小<br />
    public static Object arrayInc(Object obj, int len) {<br />
        Class<?> arr = obj.getClass().getComponentType();<br />
        Object newArr = Array.newInstance(arr, len);<br />
        int co = Array.getLength(obj);<br />
        System.arraycopy(obj, 0, newArr, 0, co);<br />
        return newArr;<br />
    }<br />
    // 打印<br />
    public static void print(Object obj) {<br />
        Class<?> c = obj.getClass();<br />
        if (!c.isArray()) {<br />
            return;<br />
        }<br />
        System.out.println("数组长度为： " + Array.getLength(obj));<br />
        for (int i = 0; i < Array.getLength(obj); i++) {<br />
            System.out.print(Array.get(obj, i) + " ");<br />
        }<br />
        System.out.println();<br />
    }<br />
}</p>

<h3>将反射机制应用于工厂模式</h3>

<p>package net.xsoftlab.baike;<br />
interface fruit {<br />
    public abstract void eat();<br />
}<br />
class Apple implements fruit {<br />
    public void eat() {<br />
        System.out.println("Apple");<br />
    }<br />
}<br />
class Orange implements fruit {<br />
    public void eat() {<br />
        System.out.println("Orange");<br />
    }<br />
}<br />
class Factory {<br />
    public static fruit getInstance(String ClassName) {<br />
        fruit f = null;<br />
        try {<br />
            f = (fruit) Class.forName(ClassName).newInstance();<br />
        } catch (Exception e) {<br />
            e.printStackTrace();<br />
        }<br />
        return f;<br />
    }<br />
}<br />
/**<br />
 * 对于普通的工厂模式当我们在添加一个子类的时候，就需要对应的修改工厂类。 当我们添加很多的子类的时候，会很麻烦。<br />
 * Java 工厂模式可以参考<br />
 * http://baike.xsoftlab.net/view/java-factory-pattern<br />
 * <br />
 * 现在我们利用反射机制实现工厂模式，可以在不修改工厂类的情况下添加任意多个子类。<br />
 * <br />
 * 但是有一点仍然很麻烦，就是需要知道完整的包名和类名，这里可以使用properties配置文件来完成。<br />
 * <br />
 * java 读取 properties 配置文件 的方法可以参考<br />
 * http://baike.xsoftlab.net/view/java-read-the-properties-configuration-file<br />
 * <br />
 * @author xsoftlab.net<br />
 */<br />
public class TestReflect {<br />
    public static void main(String[] args) throws Exception {<br />
        fruit f = Factory.getInstance("net.xsoftlab.baike.Apple");<br />
        if (f != null) {<br />
            f.eat();<br />
        }<br />
    }<br />
}</p>
