<p>package com.huawei.cloud.uicbb.usermanager.util;</p>

<p>import java.io.UnsupportedEncodingException;<br />
import java.security.MessageDigest;<br />
import java.security.NoSuchAlgorithmException;</p>

<p>/**<br />
 * 默认的密码加密类<br />
 * <br />
 * @author lWX226292<br />
 * <br />
 */<br />
public class DefaultPasswordEncoder<br />
{<br />
    /**<br />
     * 十六进制数<br />
     */<br />
    private final char[] HEX_DIGITS = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};</p>

<p>    /**<br />
     * 加密的方式<br />
     */<br />
    private String encodingAlgorithm;</p>

<p>    /**<br />
     * 默认的密码加密构造方法<br />
     * <br />
     * @param encodingAlgorithm 加密的方式<br />
     */<br />
    public DefaultPasswordEncoder(String encodingAlgorithm)<br />
    {<br />
        this.encodingAlgorithm = encodingAlgorithm;<br />
    }</p>

<p>    /**<br />
     * 加密<br />
     * <br />
     * @param password 加密的内容<br />
     * <br />
     * @return 加密后的内容<br />
     */<br />
    public String encode(String password)<br />
    {<br />
        if (password == null)<br />
        {<br />
            return null;<br />
        }<br />
        try<br />
        {<br />
            MessageDigest messageDigest = MessageDigest.getInstance(this.encodingAlgorithm);<br />
            messageDigest.update(password.getBytes("UTF-8"));<br />
            byte[] digest = messageDigest.digest();</p>

<p>            return getFormattedText(digest);<br />
        }<br />
        catch (NoSuchAlgorithmException e)<br />
        {<br />
            throw new SecurityException(e);<br />
        }<br />
        catch (UnsupportedEncodingException e)<br />
        {<br />
            throw new SecurityException(e);<br />
        }<br />
    }</p>

<p>    /**<br />
     * 格式化<br />
     * <br />
     * @param bytes 字节<br />
     * <br />
     * @return 格式化后的字符<br />
     */<br />
    private String getFormattedText(byte[] bytes)<br />
    {<br />
        StringBuilder buf = new StringBuilder(bytes.length * 2);</p>

<p>        for (int j = 0; j < bytes.length; ++j)<br />
        {<br />
            buf.append(HEX_DIGITS[(bytes[j] >> 4 & 0xF)]);<br />
            buf.append(HEX_DIGITS[(bytes[j] & 0xF)]);<br />
        }<br />
        return buf.toString();<br />
    }</p>

<p>}</p>
