<h1>java 单元测试</h1>

<h2>JUnit介绍</h2>

<p>大大简化了开发人员执行单元测试的难度，特别是JUnit4使用Java5中的注解(annotation)使测试变得更加简单。</p>

<h2>Fixture</h2>

<h3>方法级别的Fixture方法</h3>

<p>执行过程 init -> oneTestMethod -> destory -> init -> anotherTestMethod -> destroy</p>

<blockquote>//方法级别初始化Fixture方法<br />
@Before<br />
public void init(){ ...... }<br />
//方法级别的注销 Fixture 方法<br />
@After<br />
public void destory(){ ...... }</blockquote>

<h3>方法级别的Fixture设置方式，效率低下，特别是在设置fixture非常耗时的情况下(例如设置数据库连接)，Junit4引用了类级别的Fixture。</h3>

<h3>类级别的Fixture方法</h3>

<p>执行过程 classinit -> oneTestMethod -> anotherTestMethod -> classDestroy</p>

<blockquote>
<p>//类级别 Fixture 初始化方法<br />
@BeforeClass<br />
public static void dbInit(){ ...... }</p>

<p>//类级别 Fixture 注销方法<br />
@AfterClass<br />
public static void dbClose(){ ...... }</p>
</blockquote>
<h2>Test Suite</h2>
<p>在实际项目中，随着项目进展的开展，单元测试类会越来越多，为了解决这个问题，JUint提供了一种测试套件的方法，用来批量运行测试类。</p>
<blockquote>
<p>import org.junit.runner.RunWith;<br />
import org.junit.runners.Suite;</p>
<p>//注意，这里的两个标签，必须加在类定义的头上。</p>
<p>@RunWith(Suite.class)<br />
@Suite.SuiteClasses({<br />
    TestJunit1.class,<br />
    TestJunit2.class<br />
})</p>
<pre>
//直接运行这个类就可以了。</pre>
<p>public classJunitTestSuite{}</p>
</blockquote>
<h2>MOCK模拟测试</h2>
<p>EasyMock是mock常用的工具之一。</p>
<p>EasyMock使用步骤：</p>
<h3>第一步：生成Mock对象</h3>
<p>代码生成mock对象，类似于java的new操作。但是首先，必须获取MockControl对象。</p>
<p>control = MockControl.createControl(Object.class);</p>
<p>mock = (Object)control.getMock();</p>
<p>其中Object就是要模拟的接口对象。</p>
<h3>第二步：录制</h3>
<p>获得mock对象后，默认处于录制状态。你可以根据你的预期指出将要调用到的mock对象的哪些方法、传给方法的参数对象是什么，进一步可以指定方法返回值或要求抛出一个异常。</p>
<p>control.exceptAndReturn(mock.voteForRemoval("Document"),-42);</p>
<h3>第三步：回放</h3>
<p>就是将mock对象与被测试单元关联，实施对被测单元的调用。调用到mock对象的预期方法后就按录制时给出的方法返回值返回。</p>
<p>control.replay();</p>
<h3>第四步：验证</h3>
<p>EasyMock能够验证的内容包括：在被测单元执行中是否按录制时列出的方法预期调用到了、传给方法的参数值是否也是预期的。只需要调用以下语句即可：</p>
<p>control.verify();</p>
