<h1>Lambda 表达式</h1>

<p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p>

<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>

<p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p>

<h3>语法</h3>

<p>lambda 表达式的语法格式如下：</p>

<p>(parameters) -&gt; expression 或 (parameters) -&gt;{ statements; }</p>

<p>以下是lambda表达式的重要特征:</p>

<ul>
	<li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li>
	<li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
	<li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li>
	<li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li>
</ul>

<hr />
<h2>Lambda 表达式实例</h2>

<p>Lambda 表达式的简单例子:</p>

<pre>
// 1. 不需要参数,返回值为 5  
() -&gt; 5  
  
// 2. 接收一个参数(数字类型),返回其2倍的值  
x -&gt; 2 * x  
  
// 3. 接受2个参数(数字),并返回他们的差值  
(x, y) -&gt; x &ndash; y  
  
// 4. 接收2个int型整数,返回他们的和  
(int x, int y) -&gt; x + y  
  
// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  
(String s) -&gt; System.out.print(s)</pre>

<p>在 Java8Tester.java 文件输入以下代码：</p>

<h2>Java8Tester.java 文件</h2>

<blockquote>public class Java8Tester {<br />
&nbsp; &nbsp;public static void main(String args[]){<br />
&nbsp; &nbsp; &nbsp; Java8Tester tester = new Java8Tester();<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 类型声明<br />
&nbsp; &nbsp; &nbsp; MathOperation addition = (int a, int b) -&gt; a + b;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 不用类型声明<br />
&nbsp; &nbsp; &nbsp; MathOperation subtraction = (a, b) -&gt; a - b;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 大括号中的返回语句<br />
&nbsp; &nbsp; &nbsp; MathOperation multiplication = (int a, int b) -&gt; { return a * b; };<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 没有大括号及返回语句<br />
&nbsp; &nbsp; &nbsp; MathOperation division = (int a, int b) -&gt; a / b;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;10 + 5 = &quot; + tester.operate(10, 5, addition));<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;10 - 5 = &quot; + tester.operate(10, 5, subtraction));<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;10 x 5 = &quot; + tester.operate(10, 5, multiplication));<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;10 / 5 = &quot; + tester.operate(10, 5, division));<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 不用括号<br />
&nbsp; &nbsp; &nbsp; GreetingService greetService1 = message -&gt;<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;Hello &quot; + message);<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; // 用括号<br />
&nbsp; &nbsp; &nbsp; GreetingService greetService2 = (message) -&gt;<br />
&nbsp; &nbsp; &nbsp; System.out.println(&quot;Hello &quot; + message);<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; greetService1.sayMessage(&quot;Runoob&quot;);<br />
&nbsp; &nbsp; &nbsp; greetService2.sayMessage(&quot;Google&quot;);<br />
&nbsp; &nbsp;}<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;interface MathOperation {<br />
&nbsp; &nbsp; &nbsp; int operation(int a, int b);<br />
&nbsp; &nbsp;}<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;interface GreetingService {<br />
&nbsp; &nbsp; &nbsp; void sayMessage(String message);<br />
&nbsp; &nbsp;}<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;private int operate(int a, int b, MathOperation mathOperation){<br />
&nbsp; &nbsp; &nbsp; return mathOperation.operation(a, b);<br />
&nbsp; &nbsp;}<br />
}</blockquote>

<p>执行以上脚本，输出结果为：</p>

<pre>
$ javac Java8Tester.java 
$ java Java8Tester
10 + 5 = 15
10 - 5 = 5
10 x 5 = 50
10 / 5 = 2
Hello Runoob
Hello Google</pre>

<p>使用 Lambda 表达式需要注意以下两点：</p>

<ul>
	<li>Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。</li>
	<li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。</li>
</ul>

<hr />
<h2>变量作用域</h2>

<p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>

<p>在 Java8Tester.java 文件输入以下代码：</p>

<h2>Java8Tester.java 文件</h2>

<blockquote>public class Java8Tester {<br />
&nbsp;<br />
&nbsp; &nbsp;final static String salutation = &quot;Hello! &quot;;<br />
&nbsp; &nbsp;<br />
&nbsp; &nbsp;public static void main(String args[]){<br />
&nbsp; &nbsp; &nbsp; GreetingService greetService1 = message -&gt;&nbsp;<br />
&nbsp; &nbsp; &nbsp; System.out.println(salutation + message);<br />
&nbsp; &nbsp; &nbsp; greetService1.sayMessage(&quot;Runoob&quot;);<br />
&nbsp; &nbsp;}<br />
&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp;interface GreetingService {<br />
&nbsp; &nbsp; &nbsp; void sayMessage(String message);<br />
&nbsp; &nbsp;}<br />
}</blockquote>

<p>执行以上脚本，输出结果为：</p>

<pre>
$ javac Java8Tester.java 
$ java Java8Tester
Hello! Runoob</pre>

<p>我们也可以直接在 lambda 表达式中访问外层的局部变量：</p>

<h2>Java8Tester.java 文件</h2>

<blockquote>public class Java8Tester {<br />
&nbsp; &nbsp; public static void main(String args[]) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; final int num = 1;<br />
&nbsp; &nbsp; &nbsp; &nbsp; Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));<br />
&nbsp; &nbsp; &nbsp; &nbsp; s.convert(2); &nbsp;// 输出结果为 3<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; public interface Converter&lt;T1, T2&gt; {<br />
&nbsp; &nbsp; &nbsp; &nbsp; void convert(int i);<br />
&nbsp; &nbsp; }<br />
}</blockquote>

<p>lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）</p>

<pre>
int num = 1;  
Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));
s.convert(2);
num = 5;  
//报错信息：Local variable num defined in an enclosing scope must be final or effectively 
 final</pre>

<p>在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</p>

<blockquote>String first = &quot;&quot;; &nbsp;<br />
Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length()); &nbsp;//编译会出错&nbsp;</blockquote>
