<h1><a href="http://blog.csdn.net/wangloveall/article/details/7992448">Java序列化与反序列化</a></h1>

<p>标签：&nbsp;<a href="http://www.csdn.net/tag/java" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">java</a><a href="http://www.csdn.net/tag/string" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">string</a><a href="http://www.csdn.net/tag/file" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">file</a><a href="http://www.csdn.net/tag/date" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">date</a><a href="http://www.csdn.net/tag/jdk" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">jdk</a><a href="http://www.csdn.net/tag/%e7%bd%91%e7%bb%9c" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">网络</a></p>

<p>2012-09-18 16:48&nbsp;95445人阅读&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#comments" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_pinglun'])">评论</a>(15)&nbsp;<a href="javascript:void(0);" onclick="javascript:collectArticle('Java%e5%ba%8f%e5%88%97%e5%8c%96%e4%b8%8e%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96','7992448');return false;" target="_blank" title="收藏">收藏</a>&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#report" onclick="javascript:report(7992448,2);return false;" title="举报">举报</a></p>

<p><img src="http://static.blog.csdn.net/images/category_icon.jpg" />&nbsp;分类：</p>

<p>Java技术<em>（32）</em>&nbsp;<img src="http://static.blog.csdn.net/images/arrow_triangle%20_down.jpg" /></p>

<p>版权声明：本文为博主原创文章，未经博主允许不得转载。</p>

<p>Java序列化与反序列化是什么？为什么需要序列化与反序列化？如何实现Java序列化与反序列化？本文围绕这些问题进行了探讨。</p>

<p>&nbsp;1.<a href="http://lib.csdn.net/base/javase" target="_blank" title="Java SE知识库">Java</a>序列化与反序列化</p>

<p>&nbsp;<strong>Java序列化</strong>是指把Java对象转换为字节序列的过程；而<strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程。</p>

<p>&nbsp;2.为什么需要序列化与反序列化</p>

<p>&nbsp;我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等，&nbsp;而这些数据都会以二进制序列的形式在网络上传送。那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的。如何做到呢？这就需要Java序列化与反序列化了。换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</p>

<p>&nbsp;当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p>

<p>3.如何实现Java序列化与反序列化</p>

<p>1）JDK类库中序列化API</p>

<p>&nbsp;<strong>java.io.ObjectOutputStream：表示对象输出流</strong></p>

<p>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>

<p><strong>java.io.ObjectInputStream：表示对象输入流</strong></p>

<p>它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回。</p>

<p>2）实现序列化的要求</p>

<p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常。</p>

<p>3）实现Java对象序列化与反序列化的方法</p>

<p>假定一个Student类，它的对象需要序列化，可以有如下三种方法：</p>

<p>方法一：若Student类仅仅实现了<strong>Serializable接口</strong>，则可以按照以下方式进行序列化和反序列化</p>

<p>ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化。</p>

<p>ObjcetInputStream采用默认的反序列化方式，对对Student对象的非transient的实例变量进行反序列化。</p>

<p>方法二：若Student类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</p>

<p>ObjectOutputStream调用Student对象的writeObject(ObjectOutputStream out)的方法进行序列化。</p>

<p>ObjectInputStream会调用Student对象的readObject(ObjectInputStream in)的方法进行反序列化。</p>

<p>方法三：若Student类实现了<strong>Externalnalizable接口</strong>，且Student类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</p>

<p>ObjectOutputStream调用Student对象的writeExternal(ObjectOutput out))的方法进行序列化。</p>

<p>ObjectInputStream会调用Student对象的readExternal(ObjectInput in)的方法进行反序列化。</p>

<p>4）JDK类库中序列化的步骤</p>

<p>步骤一：创建一个对象输出流，它可以包装一个其它类型的目标输出流，如文件输出流：</p>

<p>ObjectOutputStream out = new ObjectOutputStream(new fileOutputStream(&ldquo;D:\\objectfile.obj&rdquo;));</p>

<p>步骤二：通过对象输出流的writeObject()方法写对象：</p>

<p>out.writeObject(&ldquo;Hello&rdquo;);</p>

<p>out.writeObject(new Date());</p>

<p>5）JDK类库中反序列化的步骤</p>

<p>步骤一：创建一个对象输入流，它可以包装一个其它类型输入流，如文件输入流：</p>

<p>ObjectInputStream in = new ObjectInputStream(new fileInputStream(&ldquo;D:\\objectfile.obj&rdquo;));</p>

<p>步骤二：通过对象输出流的readObject()方法读取对象：</p>

<p>String obj1 = (String)in.readObject();</p>

<p>Date obj2 = (Date)in.readObject();</p>

<p>说明：为了正确读取数据，完成反序列化，必须保证向对象输出流写对象的顺序与从对象输入流中读对象的顺序一致。</p>

<p>为了更好地理解Java序列化与反序列化，选择方法一编码实现。</p>

<p>Student类定义如下：</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>package&nbsp;com.jieke.io;&nbsp;&nbsp;</li>
	<li>import&nbsp;java.io.Serializable;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>/**&nbsp;</li>
	<li>&nbsp;*Title:学生类&nbsp;</li>
	<li>&nbsp;*Description:实现序列化接口的学生类&nbsp;</li>
	<li>&nbsp;*Copyright:&nbsp;copyright(c)&nbsp;2012&nbsp;</li>
	<li>&nbsp;*Filename:&nbsp;Student.java&nbsp;</li>
	<li>&nbsp;*@author&nbsp;Wang&nbsp;Luqing&nbsp;</li>
	<li>&nbsp;*@version&nbsp;1.0&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;Student&nbsp;implements&nbsp;Serializable&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;</li>
	<li>&nbsp;private&nbsp;String&nbsp;name;&nbsp;&nbsp;</li>
	<li>&nbsp;private&nbsp;char&nbsp;sex;&nbsp;&nbsp;</li>
	<li>&nbsp;private&nbsp;int&nbsp;year;&nbsp;&nbsp;</li>
	<li>&nbsp;private&nbsp;double&nbsp;gpa;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;Student()&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;Student(String&nbsp;name,char&nbsp;sex,int&nbsp;year,double&nbsp;gpa)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.sex&nbsp;=&nbsp;sex;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.year&nbsp;=&nbsp;year;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.gpa&nbsp;=&nbsp;gpa;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;void&nbsp;setName(String&nbsp;name)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;void&nbsp;setSex(char&nbsp;sex)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.sex&nbsp;=&nbsp;sex;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;void&nbsp;setYear(int&nbsp;year)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.year&nbsp;=&nbsp;year;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;void&nbsp;setGpa(double&nbsp;gpa)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;this.gpa&nbsp;=&nbsp;gpa;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;String&nbsp;getName()&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;this.name;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;char&nbsp;getSex()&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;this.sex;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;int&nbsp;getYear()&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;this.year;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;double&nbsp;getGpa()&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;return&nbsp;this.gpa;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>把Student类的对象序列化到文件O:\\Java\\com\\jieke\\io\\student.txt，并从该文件中反序列化，向console显示结果。代码如下：</p>

<p><strong>[java]</strong>&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" title="view plain">view plain</a>&nbsp;<a href="http://blog.csdn.net/wangloveall/article/details/7992448#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="18" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="18" wmode="transparent"></embed></p>

<ol start="1">
	<li>import&nbsp;java.io.*;&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>/**&nbsp;</li>
	<li>&nbsp;*Title:应用学生类&nbsp;</li>
	<li>&nbsp;*Description:实现学生类实例的序列化与反序列化&nbsp;</li>
	<li>&nbsp;*Copyright:&nbsp;copyright(c)&nbsp;2012&nbsp;</li>
	<li>&nbsp;*Filename:&nbsp;UseStudent.java&nbsp;</li>
	<li>&nbsp;*@author&nbsp;Wang&nbsp;Luqing&nbsp;</li>
	<li>&nbsp;*@version&nbsp;1.0&nbsp;</li>
	<li>&nbsp;*/&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>public&nbsp;class&nbsp;UseStudent&nbsp;&nbsp;</li>
	<li>{&nbsp;&nbsp;</li>
	<li>&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;&nbsp;</li>
	<li>&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;Student&nbsp;st&nbsp;=&nbsp;new&nbsp;Student(&quot;Tom&quot;,&#39;M&#39;,20,3.6);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;new&nbsp;File(&quot;O:\\Java\\com\\jieke\\io\\student.txt&quot;);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;try&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;file.createNewFile();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;catch(IOException&nbsp;e)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;try&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;//Student对象序列化过程&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;FileOutputStream&nbsp;fos&nbsp;=&nbsp;new&nbsp;FileOutputStream(file);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;new&nbsp;ObjectOutputStream(fos);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;oos.writeObject(st);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;oos.flush();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;oos.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;fos.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;//Student对象反序列化过程&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;FileInputStream&nbsp;fis&nbsp;=&nbsp;new&nbsp;FileInputStream(file);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;ois&nbsp;=&nbsp;new&nbsp;ObjectInputStream(fis);&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;Student&nbsp;st1&nbsp;=&nbsp;(Student)&nbsp;ois.readObject();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;System.out.println(&quot;name&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;st1.getName());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;System.out.println(&quot;sex&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;st1.getSex());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;System.out.println(&quot;year&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;st1.getYear());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;System.out.println(&quot;gpa&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;st1.getGpa());&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;ois.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;fis.close();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;catch(ClassNotFoundException&nbsp;e)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;{&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</li>
	<li>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
	<li>&nbsp;}&nbsp;&nbsp;</li>
	<li>}&nbsp;&nbsp;</li>
</ol>

<p>结果如下所示：</p>

<p><strong>name = Tom</strong></p>

<p><strong>sex = M</strong></p>

<p><strong>year = 20</strong></p>

<p><strong>gpa = 3.6</strong></p>

<p><strong>总结：</strong></p>

<p>1）Java序列化就是把对象转换成字节序列，而Java反序列化就是把字节序列还原成Java对象。</p>

<p>2）采用Java序列化与反序列化技术，一是可以实现数据的持久化，在MVC模式中很是有用；二是可以对象数据的远程通信。</p>
