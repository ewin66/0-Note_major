<h1>java注解以及自定义注解</h1>

<p>Java注解提供了关于代码的一些信息，但并不直接作用于它所注解的代码内容。在这个教程当中，我们将学习Java的注解，如何定制注解，注解的使用以及如何<strong>通过反射解析注解</strong>。</p>

<p>Java1.5引入了注解，当前许多java框架中大量使用注解，如Hibernate、Jersey、Spring。注解作为程序的元数据嵌入到程序当中。注解可以被一些解析工具或者是编译工具进行解析。我们也可以声明注解在编译过程或执行时产生作用。</p>

<p>在使用注解之前，程序源数据只是通过java注释和javadoc，但是注解提供的功能要远远超过这些。注解不仅包含了元数据，它还可以作用于程序运行过程中、注解解释器可以通过注解决定程序的执行顺序。例如，在Jersey webservice 我们为方法添加URI字符串的形式的**PATH**注解，那么在程序运行过程中jerser解释程序将决定该方法去调用所给的URI。</p>

<h2>创建Java自定义注解</h2>

<p>创建自定义注解和创建一个接口相似，但是注解的interface关键字需要以@符号开头。我们可以为注解声明方法。我们先来看看注解的例子，然后我们将讨论他的一些特性。</p>

<p>package com.journaldev.annotations;</p>

<p>import java.lang.annotation.Documented;</p>

<p>import java.lang.annotation.ElementType;</p>

<p>import java.lang.annotation.Inherited;</p>

<p>import java.lang.annotation.Retention;</p>

<p>import java.lang.annotation.RetentionPolicy;</p>

<p>import java.lang.annotation.Target;</p>

<p>@Documented</p>

<p>@Target(ElementType.METHOD)</p>

<p>@Inherited</p>

<p>@Retention(RetentionPolicy.RUNTIME)</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;public @interface MethodInfo{</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;String author() default &#39;Pankaj&#39;;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;String date();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;int revision() default 1;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;String comments();</p>

<p>}</p>

<p>注解方法不能带有参数；<br />
注解方法返回值类型限定为：基本类型、String、Enums、Annotation或者是这些类型的数组；<br />
注解方法可以有默认值；<br />
注解本身能够包含元注解，元注解被用来注解其它注解。</p>

<h2>这里有四种类型的元注解：</h2>

<p>J2SE5.0版本在 java.lang.annotation提供了四种元注解，专门注解其他的注解：</p>

<p>1.&nbsp;@Documented&nbsp;&mdash;&mdash; 指明拥有这个注解的元素可以被javadoc此类的工具文档化。这种类型应该用于注解那些影响客户使用带注释的元素声明的类型。如果一种声明使用Documented进行注解，这种类型的注解被作为被标注的程序成员的公共API。</p>

<p>2.&nbsp;@Target&mdash;&mdash;指明该类型的注解可以注解的程序元素的范围。该元注解的取值可以为TYPE,METHOD,CONSTRUCTOR,FIELD等。如果Target元注解没有出现，那么定义的注解可以应用于程序的任何元素。</p>

<p>3.&nbsp;@Inherited&mdash;&mdash;指明该注解类型被自动继承。如果用户在当前类中查询这个元注解类型并且当前类的声明中不包含这个元注解类型，那么也将自动查询当前类的父类是否存在Inherited元注解，这个动作将被重复执行知道这个标注类型被找到，或者是查询到顶层的父类。</p>

<p>4.@Retention&mdash;&mdash;指明了该Annotation被保留的时间长短。RetentionPolicy取值为SOURCE,CLASS,RUNTIME。</p>

<h3>具体解释：</h3>

<p>@Documented&ndash;一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</p>

<p>@Retention&ndash; 定义该注解的生命周期。</p>

<p>RetentionPolicy.SOURCE &ndash; 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</p>

<p>RetentionPolicy.CLASS &ndash; 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式。</p>

<p>RetentionPolicy.RUNTIME&ndash; 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</p>

<p>@Target &ndash; 表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。以下是一些可用的参数。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，那么你需要在定义target包含所有的属性。</p>

<p>ElementType.TYPE:用于描述类、接口或enum声明<br />
ElementType.FIELD:用于描述实例变量<br />
ElementType.METHOD<br />
ElementType.PARAMETER<br />
ElementType.CONSTRUCTOR<br />
ElementType.LOCAL_VARIABLE<br />
ElementType.ANNOTATION_TYPE 另一个注释<br />
ElementType.PACKAGE 用于记录java文件的package信息</p>

<p>@Inherited &ndash; 定义该注释和子类的关系</p>

<p>那么，注解的内部到底是如何定义的呢？Annotations只支持基本类型、String及枚举类型。注释中所有的属性被定义成方法，并允许提供默认值。</p>

<p>@Target(ElementType.METHOD)<br />
@Retention(RetentionPolicy.RUNTIME)<br />
@interface Todo {<br />
public enum Priority {LOW, MEDIUM, HIGH}<br />
public enum Status {STARTED, NOT_STARTED}<br />
String author() default &quot;Yash&quot;;<br />
Priority priority() default Priority.LOW;<br />
Status status() default Status.NOT_STARTED;<br />
}<br />
下面的例子演示了如何使用上面的注解。</p>

<p>@Todo(priority = Todo.Priority.MEDIUM, author = &quot;Yashwant&quot;, status = Todo.Status.STARTED)<br />
public void incompleteMethod1() {<br />
//Some business logic is written<br />
//But it&rsquo;s not complete yet<br />
}<br />
如果注解中只有一个属性，可以直接命名为&ldquo;value&rdquo;，使用时无需再标明属性名。</p>

<p>@interface Author{<br />
String value();<br />
}<br />
@Author(&quot;Yashwant&quot;)<br />
public void someMethod() {<br />
}<br />
但目前为止一切看起来都还不错。我们定义了自己的注解并将其应用在业务逻辑的方法上。现在我们需要写一个用户程序调用我们的注解。这里我们需要使用反射机制。如果你熟悉反射代码，就会知道反射可以提供类名、方法和实例变量对象。所有这些对象都有getAnnotation()这个方法用来返回注解信息。我们需要把这个对象转换为我们自定义的注释(使用 instanceOf()检查之后)，同时也可以调用自定义注释里面的方法。看看以下的实例代码，使用了上面的注解:</p>

<p>Class businessLogicClass = BusinessLogic.class;<br />
for(Method method : businessLogicClass.getMethods()) {<br />
Todo todoAnnotation = (Todo)method.getAnnotation(Todo.class);<br />
if(todoAnnotation != null) {<br />
System.out.println(&quot; Method Name : &quot; + method.getName());<br />
System.out.println(&quot; Author : &quot; + todoAnnotation.author());<br />
System.out.println(&quot; Priority : &quot; + todoAnnotation.priority());<br />
System.out.println(&quot; Status : &quot; + todoAnnotation.status());<br />
}<br />
}</p>

<h2>Java内建注解</h2>

<h2>Java提供了三种内建注解。</h2>

<p>1.&nbsp;@Override&mdash;&mdash;当我们想要复写父类中的方法时，我们需要使用该注解去告知编译器我们想要复写这个方法。这样一来当父类中的方法移除或者发生更改时编译器将提示错误信息。</p>

<p>2.&nbsp;@Deprecated&mdash;&mdash;当我们希望编译器知道某一方法不建议使用时，我们应该使用这个注解。Java在javadoc 中推荐使用该注解，我们应该提供为什么该方法不推荐使用以及替代的方法。</p>

<p>3.&nbsp;@SuppressWarnings&mdash;&mdash;这个仅仅是告诉编译器忽略特定的警告信息，例如在泛型中使用原生数据类型。它的保留策略是SOURCE（译者注：在源文件中有效）并且被编译器丢弃。</p>

<p>我们来看一个java内建注解的例子参照上边提到的自定义注解。</p>

<p>package com.journaldev.annotations;</p>

<p>import java.io.FileNotFoundException;</p>

<p>import java.util.ArrayList;</p>

<p>import java.util.List;</p>

<p>public class AnnotationExample {</p>

<p>public static void main(String[] args) {</p>

<p>}</p>

<p>@Override</p>

<p>@MethodInfo(author = &#39;Pankaj&#39;, comments = &#39;Main method&#39;, date = &#39;Nov 17 2012&#39;, revision = 1)</p>

<p>public String toString() {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;return &#39;Overriden toString method&#39;;</p>

<p>}</p>

<p>@Deprecated</p>

<p>@MethodInfo(comments = &#39;deprecated method&#39;, date = &#39;Nov 17 2012&#39;)</p>

<p>public static void oldMethod() {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&#39;old method, don&#39;t use it.&#39;);</p>

<p>}</p>

<p>@SuppressWarnings({ &#39;unchecked&#39;, &#39;deprecation&#39; })</p>

<p>@MethodInfo(author = &#39;Pankaj&#39;, comments = &#39;Main method&#39;, date = &#39;Nov 17 2012&#39;, revision = 10)</p>

<p>public static void genericsTest() throws FileNotFoundException {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;List l = new ArrayList();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;l.add(&#39;abc&#39;);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;oldMethod();</p>

<p>}</p>

<p>}</p>

<p>相信这个例子可以不言自明并能展示在不同场景下的应用。</p>

<h2>Java注解解析</h2>

<p>我们将使用反射技术来解析java类的注解。那么注解的RetentionPolicy应该设置为RUNTIME否则java类的注解信息在执行过程中将不可用那么我们也不能从中得到任何和注解有关的数据。</p>

<p>package com.journaldev.annotations;</p>

<p>import java.lang.annotation.Annotation;</p>

<p>import java.lang.reflect.Method;</p>

<p>public class AnnotationParsing {</p>

<p>public static void main(String[] args) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;try {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;for (Method method : AnnotationParsing.class</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getClassLoader()</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.loadClass((&#39;com.journaldev.annotations.AnnotationExample&#39;))</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getMethods()) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// checks if MethodInfo annotation is present for the method</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (method.isAnnotationPresent(com.journaldev.annotations.MethodInfo.class)) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// iterates all the annotations available in the method</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Annotation anno : method.getDeclaredAnnotations()) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&#39;Annotation in Method &#39;&#39;+ method + &#39;&#39; : &#39; + anno);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodInfo methodAnno = method.getAnnotation(MethodInfo.class);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (methodAnno.revision() == 1) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&#39;Method with revision no 1 = &#39;+ method);</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Throwable ex) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex.printStackTrace();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;} catch (SecurityException | ClassNotFoundException e) {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>

<p>}</p>

<p>运行上面程序将输出：</p>

<p><br />
Annotation in Method &#39;public java.lang.String com.journaldev.annotations.AnnotationExample.toString()&#39; : @com.journaldev.annotations.MethodInfo(author=Pankaj, revision=1, comments=Main method, date=Nov 17 2012)</p>

<p>Method with revision no 1 = public java.lang.String com.journaldev.annotations.AnnotationExample.toString()</p>

<p>Annotation in Method &#39;public static void com.journaldev.annotations.AnnotationExample.oldMethod()&#39; : @java.lang.Deprecated()</p>

<p>Annotation in Method &#39;public static void com.journaldev.annotations.AnnotationExample.oldMethod()&#39; : @com.journaldev.annotations.MethodInfo(author=Pankaj, revision=1, comments=deprecated method, date=Nov 17 2012)</p>

<p>Method with revision no 1 = public static void com.journaldev.annotations.AnnotationExample.oldMethod()</p>

<p>Annotation in Method &#39;public static void com.journaldev.annotations.AnnotationExample.genericsTest() throws java.io.FileNotFoundException&#39; : @com.journaldev.annotations.MethodInfo(author=Pankaj, revision=10, comments=Main method, date=Nov 17 2012)</p>

<p>这就是该教程的全部内容，希望你可以从中学到些东西。</p>
