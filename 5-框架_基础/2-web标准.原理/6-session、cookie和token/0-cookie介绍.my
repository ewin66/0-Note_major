<h1>理解 Cookie</h1>

<p>        Cookie的作用我想大家都知道，通俗地说就是当一个用户通过HTTP访问一个服务器时，这个<strong>服务器会将一些Key/Value键值对返回给客户端浏览器，并给这些数据加上一些 限制条件，在条件符合时这个用户下次访问这个服务器时，数据又被完整地带回给服务器。</strong><br />
        这个作用就像你去超市购物时，第一次给你办张购物卡，在这个购物卡里存放了一些 你的个人信息，下次你再来这个连锁超市时，超市会识别你的购物卡，下次直接购物就好了。<br />
当初W3 C在设计Cookie时实际上考虑的是为了记录用户在一段时间内访问Web应用 的行为路径。由于HTTP是一种无状态协议，当用户的一次访问请求结束后，后端服务器 就无法知道下一次来访问的还是不是上次访问的用户。在设计应用程序时，我们很容易想 到两次访问是同一人访问与不同的两个人访问对程序设计和性能来说有很大的不同。例 如，在一个很短的时间内，如果与用户相关的数据被频繁访问，可以针对这个数据做缓存, 这样可以大大提高数据的访问性能》Cookie的作用正是如此，由于是同一个客户端发出的 请求，每次发出的请求都会带有第一次访问时服务端设置的信息，这样服务端就可以根据 Cookie值来划分访问的用户了。</p>

<h3>10.1.1 Cookie 属性项</h3>

<p>当前 Cookie 有两个版本：Version 0 和 Version 1。通过它们有两种设置响应头的标识，分别是 “Set-Cookie”和“Set-Cookie2”。这两个版本的属性项有些不同，表 10-1 和表 10-2 是两个版本的属性介绍。</p>

<h5>表 10-1.Version 0 属性项介绍</h5>

<table cellpadding="0" cellspacing="0">
<tbody>
<tr>
<th>属性项</th>
<th>属性项介绍</th>
</tr>
</tbody>
<tbody>
<tr>
<td>NAME=VALUE</td>
<td>键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>
</tr>
<tr>
<td>Expires</td>
<td>过期时间，在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday, 09-Nov-99 23:12:40 GMT</td>
</tr>
<tr>
<td>Domain</td>
<td>生成该 Cookie 的域名，如 domain="xulingbo.net"</td>
</tr>
<tr>
<td>Path</td>
<td>该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>
</tr>
<tr>
<td>Secure</td>
<td>如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>
</tr>
<tr>
<td>NAME=VALUE</td>
<td>与 Version 0 相同</td>
</tr>
<tr>
<td>Version</td>
<td>通过 Set-Cookie2 设置的响应头创建必须符合 RFC2965 规范，如果通过 Set-Cookie 响应头设置，默认值为 0，如果要设置为 1，则该 Cookie 要遵循 RFC 2109 规范</td>
</tr>
<tr>
<td>Comment</td>
<td>注释项，用户说明该 Cookie 有何用途</td>
</tr>
<tr>
<td>CommentURL</td>
<td>服务器为此  <a href="http://msdn.microsoft.com/zh-cn/library/system.net.cookie(v=VS.95).aspx" target="_blank">Cookie</a> 提供的 URI 注释</td>
</tr>
<tr>
<td>Discard</td>
<td>是否在会话结束后丢弃该 Cookie 项，默认为 fasle</td>
</tr>
<tr>
<td>Domain</td>
<td>类似于 Version 0</td>
</tr>
<tr>
<td>Max-Age</td>
<td>最大失效时间，与 Version 0 不同的是这里设置的是在多少秒后失效</td>
</tr>
<tr>
<td>Path</td>
<td>类似于 Version 0</td>
</tr>
<tr>
<td>Port</td>
<td>该 Cookie 在什么端口下可以回传服务端，如果有多个端口，以逗号隔开，如 Port="80,81,8080"</td>
</tr>
<tr>
<td>Secure</td>
<td>类似于 Version 0</td>
</tr>
</tbody>
</table>

<p>以上两个版本的 Cookie 中设置的 Header 头的标识符是不同的，我们常用的是 Set-Cookie：userName=“junshan”; Domain=“xulingbo.net”，这是 Version 0 的形式。针对 Set-Cookie2 是这样设置的：Set-Cookie2：userName=“junshan”; Domain=“xulingbo.net”; Max-Age=1000。但是在 Java Web 的 Servlet 规范中并不支持 Set-Cookie2 响应头，在实际应用中 Set-Cookie2 的一些属性项却可以设置在 Set-Cookie 中，如这样设置：Set-Cookie：userName=“junshan”; Version=“1”;Domain=“xulingbo.net”;Max-Age=1000。</p>

<h3>10.1.2 Cookie 如何工作</h3>

<p>当我们用如下方式创建 Cookie 时：</p>

<pre>
 String getCookie(Cookie[] cookies, String key) { 
        if (cookies != null) { 
            for (Cookie cookie : cookies) { 
                if (cookie.getName().equals(key)) { 
                    return cookie.getValue(); 
                } 
            } 
        } 
        return null; 
    } 

    @Override 
    public void doGet(HttpServletRequest request, 
                      HttpServletResponse response) 
            throws IOException, ServletException { 
        Cookie[] cookies = request.getCookies(); 
        String userName = getCookie(cookies, "userName"); 
        String userAge = getCookie(cookies, "userAge"); 
        if (userName == null) { 
            response.addCookie(new Cookie("userName", "junshan")); 
        } 
        if (userAge == null) { 
            response.addCookie(new Cookie("userAge", "28")); 
        } 
        response.getHeaders("Set-Cookie"); 
 }</pre>

<p> </p>

<p>Cookie 是如何加到 HTTP 的 Header 中的？当我们用 Servlet 3.0 规范来创建一个 Cookie 对象时，该 Cookie 既支持 Version 0 又支持 Version 1，如果您设置了 Version 1 中的配置项，即使您没有设置版本号，Tomcat 在最后构建 HTTP 响应头时也会自动将 Version 的版本设置为 1。下面看一下 Tomcat 是如何调用 addCookie 方法，图 10-1 是 Tomcat 创建 Set-Cookie 响应头的时序图。</p>

<h5>图 10-1.Tomcat 创建 Set-Cookie 响应头的时序图</h5>

<p>从图 10-1 中可以看出，真正构建 Cookie 是在 org.apache.catalina.connector. Response 类中完成的，调用 generateCookieString 方法将 Cookie 对象构造成一个字符串，构造的字符串的格式如 userName=“junshan”;Version=“1”; Domain=“xulingbo.net”; Max-Age=1000。然后将这个字符串命名为 Set-Cookie 添加到 MimeHeaders 中。</p>

<p>在这里有几点需要注意：</p>

<ul>
<li>
<p>创建的 Cookie 的 NAME 不能和 Set-Cookie 或者 Set-Cookie2 的属性项值一样，如果一样会抛 IllegalArgumentException 异常。</p>
</li>
<li>
<p>创建 Cookie 的 NAME 和 VALUE 的值不能设置成非 ASSIC 字符，如果要使用中文，可以通过 URLEncoder 将其编码，否则将会抛 IllegalArgumentException 异常。</p>
</li>
<li>
<p>当 NAME 和 VALUE 的值出现一些 TOKEN 字符（如“\”、“,”等）时，构建返回头会将该 Cookie 的 Version 自动设置为 1。</p>
</li>
<li>
<p>当该 Cookie 的属性项中出现 Version 为 1 的属性项时，构建 HTTP 响应头同样会将 Version 设置为 1。</p>
</li>
</ul>

<p>不知道您有没有注意一个问题，就是当我们通过 response.addCookie 创建多个 Cookie 时，这些 Cookie 最终是在一个 Header 项中还是以独立的 Header 存在的，通俗地说也就是我们每次创建 Cookie 时是否都是创建一个以 NAME 为 Set-Cookie 的 MimeHeaders ？答案是肯定的。从上面的时序图中可以看出每次调用 addCookie 的时候，最终都会创建一个 Header，但是我们还不知道最终在请求返回时构造 HTTP 响应头是否将相同 Header 标识的 Set-Cookie 值进行合并。</p>

<p>我们找到 Tomcat 最终构造 HTTP 响应头的代码，这段代码位于 org.apache.coyote.http11. Http11Processor 类的 prepareResponse 方法中，如下所示：</p>

<pre>
 int size = headers.size(); 
 for (int i = 0; i < size; i++) { 
    outputBuffer.sendHeader(headers.getName(i), headers.getValue(i)); 
 }</pre>

<p> </p>

<p>这段代码清楚地表示，在构建 HTTP 返回字节流时是将 Header 中所有的项顺序地写出，而没有进行任何修改。所以可以想象浏览器在接收 HTTP 协议返回的数据时是分别解析每一个 Header 项的。</p>

<p>另外，目前很多工具都可以观察甚至可以修改浏览器中的 Cookie 数据。例如，在 Firefox 中可以通过 HttpFox 插件来查看返回的 Cookie 数据，如图 10-2 所示。</p>

<h5>图 10-2.HttpFox 插件展示的 Header 数据</h5>

<p>在 cookie 项中可以详细查看 Cookie 属性项，如图 10-3 所示。</p>

<h5>图 10-3.HttpFox 插件展示的 Cookie 数据</h5>

<p>前面主要介绍了服务端如何创建 Cookie，下面看一下如何从客户端获取 Cookie。</p>

<p>当我们请求某个 URL 路径时，浏览器会根据这个 URL 路径将符合条件的 Cookie 放在 Request 请求头中传回给服务端，服务端通过 request.getCookies() 来取得所有 Cookie。</p>

<h3>10.1.3 使用 Cookie 的限制</h3>

<p>Cookie 是 HTTP 协议头中的一个字段，虽然 HTTP 协议本身对这个字段并没有多少限制，但是 Cookie 最终还是存储在浏览器里，所以不同的浏览器对 Cookie 的存储都有一些限制，表 10-3 是一些通常的浏览器对 Cookie 的大小和数量的限制。</p>

<h5>表 10-3.浏览器对 Cookie 的大小和数量的限制</h5>

<table cellpadding="0" cellspacing="0">
<tbody>
<tr>
<th>浏览器版本</th>
<th>Cookie 数限制</th>
<th>Cookie 总大小限制</th>
</tr>
</tbody>
<tbody>
<tr>
<td>IE6</td>
<td>20 个 / 每个域名</td>
<td>4095 个字节</td>
</tr>
<tr>
<td>IE7</td>
<td>50 个 / 每个域名</td>
<td>4095 个字节</td>
</tr>
</tbody>
</table>

<p>续表</p>

<table cellpadding="0" cellspacing="0">
<tbody>
<tr>
<th>浏览器版本</th>
<th>Cookie 数限制</th>
<th>Cookie 总大小限制</th>
</tr>
</tbody>
<tbody>
<tr>
<td>IE8</td>
<td>50 个 / 每个域名</td>
<td>4095 个字节</td>
</tr>
<tr>
<td>IE9</td>
<td>50 个 / 每个域名</td>
<td>4095 个字节</td>
</tr>
<tr>
<td>Chrome</td>
<td>50 个 / 每个域名</td>
<td>大于 80000</td>
</tr>
<tr>
<td>FireFox</td>
<td>50 个 / 每个域名</td>
<td>4097 个字</td>
</tr>
</tbody>
</table>

<p> </p>
