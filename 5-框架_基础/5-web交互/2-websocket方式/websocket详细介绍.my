<h1>WebSocket 详解教程</h1>

<h2>概述</h2>

<h3>WebSocket 是什么？</h3>

<p><a href="http://websocket.org/">WebSocket</a> 是一种网络通信协议。<a href="https://tools.ietf.org/html/rfc6455">RFC6455</a> 定义了它的通信标准。</p>

<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>

<h3>为什么需要 WebSocket ？</h3>

<p>了解计算机网络协议的人，应该都知道：HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。</p>

<p>这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。</p>

<p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数 Web 应用程序将通过频繁的异步JavaScript和XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p>

<p><img alt="ajax-long-polling.png" src="http://oyz7npk35.bkt.clouddn.com/image/spring/web/ajax-long-polling.png" /></p>

<p>因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。WebSocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。WebSocket 只需要建立一次连接，就可以一直保持连接状态。这相比于轮询方式的不停建立连接显然效率要大大提高。</p>

<p><img alt="websockets-flow.png" src="http://oyz7npk35.bkt.clouddn.com/image/spring/web/websockets-flow.png" /></p>

<h3>WebSocket 如何工作？</h3>

<p>Web浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的HTTP连接不同，对服务器有重要的影响。</p>

<p>基于多线程或多进程的服务器无法适用于 WebSockets，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接。任何实际的 WebSockets 服务器端实现都需要一个异步服务器。</p>

<h2>WebSocket 客户端</h2>

<p>在客户端，没有必要为 WebSockets 使用 JavaScript 库。实现 WebSockets 的 Web 浏览器将通过 WebSockets 对象公开所有必需的客户端功能（主要指支持 Html5 的浏览器）。</p>

<h3>客户端 API</h3>

<p>以下 API 用于创建 WebSocket 对象。</p>

<pre>
<code>var Socket = new WebSocket(url, [protocol] );</code></pre>

<p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p>

<h4>WebSocket 属性</h4>

<p>以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：</p>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket.readyState</td>
<td>只读属性 <strong>readyState</strong> 表示连接状态，可以是以下值：0 - 表示连接尚未建立。1 - 表示连接已建立，可以进行通信。2 - 表示连接正在进行关闭。3 - 表示连接已经关闭或者连接不能打开。</td>
</tr>
<tr>
<td>Socket.bufferedAmount</td>
<td>只读属性 <strong>bufferedAmount</strong> 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。</td>
</tr>
</tbody>
</table>

<h4>WebSocket 事件</h4>

<p>以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：</p>

<table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>Socket.onopen</td>
<td>连接建立时触发</td>
</tr>
<tr>
<td>message</td>
<td>Socket.onmessage</td>
<td>客户端接收服务端数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>Socket.onerror</td>
<td>通信发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>Socket.onclose</td>
<td>连接关闭时触发</td>
</tr>
</tbody>
</table>

<h4>WebSocket 方法</h4>

<p>以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：</p>

<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket.send()</td>
<td>使用连接发送数据</td>
</tr>
<tr>
<td>Socket.close()</td>
<td>关闭连接</td>
</tr>
</tbody>
</table>

<p><strong>示例</strong></p>

<pre>
<code>// 初始化一个 WebSocket 对象
var ws = new WebSocket("ws://localhost:9998/echo");

// 建立 web socket 连接成功触发事件
ws.onopen = function () {
// 使用 send() 方法发送数据
ws.send("发送数据");
alert("数据发送中...");
};

// 接收服务端数据时触发事件
ws.onmessage = function (evt) {
var received_msg = evt.data;
alert("数据已接收...");
};

// 断开 web socket 连接成功触发事件
ws.onclose = function () {
alert("连接已关闭...");
};</code></pre>

<h2>WebSocket 服务端</h2>

<p>WebSocket 在服务端的实现非常丰富。Node.js、Java、C++、Python 等多种语言都有自己的解决方案。</p>

<p>以下，介绍我在学习 WebSocket 过程中接触过的 WebSocket 服务端解决方案。</p>

<h3>Node.js</h3>

<p>常用的 Node 实现有以下三种。</p>

<ul>
<li><a href="https://github.com/uWebSockets/uWebSockets">µWebSockets</a></li>
<li><a href="http://socket.io/">Socket.IO</a></li>
<li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a></li>
</ul>

<h3>Java</h3>

<p>Java 的 web 一般都依托于 servlet 容器。</p>

<p>我使用过的 servlet 容器有：Tomcat、Jetty、Resin。其中Tomcat7、Jetty7及以上版本均开始支持 WebSocket（推荐较新的版本，因为随着版本的更迭，对 WebSocket 的支持可能有变更）。</p>

<p>此外，Spring 框架对 WebSocket 也提供了支持。</p>

<p>虽然，以上应用对于 WebSocket 都有各自的实现。但是，它们都遵循<a href="https://tools.ietf.org/html/rfc6455">RFC6455</a> 的通信标准，并且 Java API 统一遵循 <a href="http://www.jcp.org/en/jsr/detail?id=356">JSR 356 - JavaTM API for WebSocket</a> 规范。所以，在实际编码中，API 差异不大。</p>

<h4>Spring</h4>

<p>Spring 对于 WebSocket 的支持基于下面的 jar 包：</p>

<pre>
<code><dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-websocket</artifactId>
<version>${spring.version}</version>
</dependency></code></pre>

<p>在 Spring 实现 WebSocket 服务器大概分为以下几步：</p>

<p><strong>创建 WebSocket 处理器</strong></p>

<p>扩展 <code>TextWebSocketHandler</code> 或 <code>BinaryWebSocketHandler</code> ，你可以覆写指定的方法。Spring 在收到 WebSocket 事件时，会自动调用事件对应的方法。</p>

<pre>
<code>import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.TextMessage;

public class MyHandler extends TextWebSocketHandler {

@Override
public void handleTextMessage(WebSocketSession session, TextMessage message) {
// ...
}

}</code></pre>

<p><code>WebSocketHandler</code> 源码如下，这意味着你的处理器大概可以处理哪些 WebSocket 事件：</p>

<pre>
<code>public interface WebSocketHandler {

/**
* 建立连接后触发的回调
*/
void afterConnectionEstablished(WebSocketSession session) throws Exception;

/**
* 收到消息时触发的回调
*/
void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;

/**
* 传输消息出错时触发的回调
*/
void handleTransportError(WebSocketSession session, Throwable exception) throws Exception;

/**
* 断开连接后触发的回调
*/
void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception;

/**
* 是否处理分片消息
*/
boolean supportsPartialMessages();

}</code></pre>

<p><strong>配置 WebSocket</strong></p>

<p>配置有两种方式：注解和 xml 。其作用就是将 WebSocket 处理器添加到注册中心。</p>

<ol>
<li>实现 <code>WebSocketConfigurer</code></li>
</ol>

<pre>
<code>import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

@Override
public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
registry.addHandler(myHandler(), "/myHandler");
}

@Bean
public WebSocketHandler myHandler() {
return new MyHandler();
}

}</code></pre>

<ol>
<li>xml 方式</li>
</ol>

<pre>
<code><beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:websocket="http://www.springframework.org/schema/websocket"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/websocket
http://www.springframework.org/schema/websocket/spring-websocket.xsd">

<websocket:handlers>
<websocket:mapping path="/myHandler" handler="myHandler"/>
</websocket:handlers>

<bean id="myHandler" class="org.springframework.samples.MyHandler"/>

</beans></code></pre>

<blockquote>
<p>更多配置细节可以参考：<a href="https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#websocket">Spring WebSocket 文档</a></p>
</blockquote>

<h4>javax.websocket</h4>

<p>如果不想使用 Spring 框架的 WebSocket API，你也可以选择基本的 javax.websocket。</p>

<p>首先，需要引入 API jar 包。</p>

<pre>
<code><!-- To write basic javax.websocket against -->
<dependency>
<groupId>javax.websocket</groupId>
<artifactId>javax.websocket-api</artifactId>
<version>1.0</version>
</dependency></code></pre>

<p>如果使用嵌入式 jetty，你还需要引入它的实现包：</p>

<pre>
<code><!-- To run javax.websocket in embedded server -->
<dependency>
<groupId>org.eclipse.jetty.websocket</groupId>
<artifactId>javax-websocket-server-impl</artifactId>
<version>${jetty-version}</version>
</dependency>
<!-- To run javax.websocket client -->
<dependency>
<groupId>org.eclipse.jetty.websocket</groupId>
<artifactId>javax-websocket-client-impl</artifactId>
<version>${jetty-version}</version>
</dependency></code></pre>

<p><strong>@ServerEndpoint</strong></p>

<p>这个注解用来标记一个类是 WebSocket 的处理器。</p>

<p>然后，你可以在这个类中使用下面的注解来表明所修饰的方法是触发事件的回调</p>

<pre>
<code>// 收到消息触发事件
@OnMessage
public void onMessage(String message, Session session) throws IOException, InterruptedException {
...
}

// 打开连接触发事件
@OnOpen
public void onOpen(Session session, EndpointConfig config, @PathParam("id") String id) {
...
}

// 关闭连接触发事件
@OnClose
public void onClose(Session session, CloseReason closeReason) {
...
}

// 传输消息错误触发事件
@OnError
public void onError(Throwable error) {
...
}</code></pre>

<p><strong>ServerEndpointConfig.Configurator</strong></p>

<p>编写完处理器，你需要扩展 ServerEndpointConfig.Configurator 类完成配置：</p>

<pre>
<code>public class WebSocketServerConfigurator extends ServerEndpointConfig.Configurator {
@Override
public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {
HttpSession httpSession = (HttpSession) request.getHttpSession();
sec.getUserProperties().put(HttpSession.class.getName(), httpSession);
}
}</code></pre>

<p>然后就没有然后了，就是这么简单。</p>

<h2>WebSocket 代理</h2>

<p>如果把 WebSocket 的通信看成是电话连接，Nginx 的角色则像是电话接线员，负责将发起电话连接的电话转接到指定的客服。</p>

<p>Nginx 从 <a href="http://nginx.com/blog/websocket-nginx/">1.3 版</a>开始正式支持 WebSocket 代理。如果你的 web 应用使用了代理服务器 Nginx，那么你还需要为 Nginx 做一些配置，使得它开启 WebSocket 代理功能。</p>

<p>以下为参考配置：</p>

<pre>
<code>server {
# this section is specific to the WebSockets proxying
location /socket.io {
proxy_pass http://app_server_wsgiapp/socket.io;
proxy_redirect off;

proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection "upgrade";
proxy_read_timeout 600;
}
}</code></pre>

<blockquote>
<p>更多配置细节可以参考：<a href="http://nginx.org/en/docs/http/websocket.html">Nginx 官方的 websocket 文档</a></p>
</blockquote>

<h2>FAQ</h2>

<h3>HTTP 和 WebSocket 有什么关系？</h3>

<p>Websocket 其实是一个新协议，跟 HTTP 协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是 HTTP 协议上的一种补充。</p>

<h3>Html 和 HTTP 有什么关系？</h3>

<p>Html 是超文本标记语言，是一种用于创建网页的标准标记语言。它是一种技术标准。Html5 是它的最新版本。</p>

<p>Http 是一种网络通信协议。其本身和 Html 没有直接关系。</p>

<h2>完整示例</h2>

<p>如果需要完整示例代码，可以参考我的 Github 代码：</p>

<ul>
<li>
<p><a href="https://github.com/dunwu/spring-notes/tree/master/codes/web/websocket">Spring 对 WebSocket 支持的示例</a></p>
</li>
<li>
<p><a href="https://github.com/dunwu/javaweb/tree/master/codes/javaee/websocket">嵌入式 Jetty 服务器的 WebSocket 示例</a></p>

<p>spring-websocket 和 jetty 9.3 版本似乎存在兼容性问题，Tomcat则木有问题。</p>

<p>我尝试了好几次，没有找到解决方案，只好使用 Jetty 官方的嵌入式示例在 Jetty 中使用 WebSocket 。</p>
</li>
</ul>

<h2>资料</h2>

<ul>
<li>
<p><a href="https://www.zhihu.com/question/20215561">知乎高票答案——WebSocket是什么原理</a> by <a href="https://www.zhihu.com/people/Ovear"><em>Ovear</em></a></p>

<p>对 WebSocket 原理的阐述简单易懂。</p>
</li>
<li>
<p><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a> <em>by ruanyf</em></p>

<p>阮一峰大神的科普一如既往的浅显易懂。</p>
</li>
<li>
<p><a href="https://www.fullstackpython.com/websockets.html">WebSockets</a> by <em>fullstackpython</em></p>
</li>
<li>
<p><a href="http://nginx.org/en/docs/http/websocket.html">Nginx 官方的 websocket 文档</a></p>
</li>
<li>
<p><a href="https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#websocket">Spring WebSocket 文档</a></p>
</li>
<li>
<p><a href="http://tomcat.apache.org/tomcat-7.0-doc/web-socket-howto.html">Tomcat7 WebSocket 文档</a></p>
</li>
<li>
<p><a href="https://www.eclipse.org/jetty/documentation/9.4.7.v20170914/websocket-intro.html">Jetty WebSocket 文档</a></p>
</li>
</ul>
