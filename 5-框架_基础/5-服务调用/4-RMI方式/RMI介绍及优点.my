<h1>RMI介绍及优点</h1>

<h2>发表文章</h2>

<p>摘要：1、RMI概述RMI(RemoteMethodInvocation)RMI是分布式对象软件包,它简化了在多台计算机上的JAVA应用之间的通信。必须在jdk1.1以上RMI用到的类java.rmi.Remote所有可以被远程调用的对象都必须实现该接口java.rmi.server.UnicastRemoteObject所有可以被远程调用的对象都必须扩展该类什么是RMI远程方法调用是一种计算机之间对象互相调用对方函数,启动对方进程的一种机制,使用这种机制,某一台计算机上的对象在调</p>

<h2>RMI概述</h2>

<p>RMI(Remote Method Invocation)<br />
RMI是分布式对象软件包,它简化了在多台计算机上的JAVA应用之间的通信。<br />
必须在jdk1.1以上<br />
RMI用到的类<br />
java.rmi.Remote<br />
所有可以被远程调用的对象都必须实现该接口<br />
java.rmi.server.UnicastRemoteObject<br />
所有可以被远程调用的对象都必须扩展该类</p>

<h2>什么是RMI</h2>

<p>远程方法调用是一种计算机之间对象互相调用对方函数,启动对方进程的一种机制,<br />
使用这种机制,某一台计算机上的对象在调用另外一台计算机上的方法时,使用的程<br />
序语法规则和在本地机上对象间的方法调用的语法规则一样。</p>

<h2><br />
优点</h2>

<p>这种机制给分布计算的系统设计、编程都带来了极大的方便。<br />
只要按照RMI规则设计程序,可以不必再过问在RMI之下的网络细节了,如:TCP和Socket等等。<br />
任意两台计算机之间的通讯完全由RMI负责。调用远程计算机上的对象就像本地对象一样方便。</p>

<h3>1、面向对象:</h3>

<p>RMI可将完整的对象作为参数和返回值进行传递,而不仅仅是预定义的数据类型。<br />
也就是说,可以将类似Java哈西表这样的复杂类型作为一个参数进行传递。</p>

<h3>2、可移动属性:</h3>

<p>RMI可将属性从客户机移动到服务器,或者从服务器移动到客户机。例如,您可以定义一个检查雇员开支报告的接口,以便察看雇员是否遵守了公司目前实行的政策。在开支报告创建后,客户机就会从服务器端获得实现该接口的对象。假如政策发生变化,服务器端就会开始返回使用了新政策的该接口的另一个实现程序。您不必在用户系统上安装任何新的软件就能在客户端检查限制条件--从而向用户提供烁?快的反馈,并降低服务器的工作量。这样就能具备最大的灵活性,因为政策改变时只需要您编写一个新的Java类,并将其在服务器主机上安装一次即可。 </p>

<p>3、设计方式:</p>

<p>对象传递功能使您可以在分布式计算中充分利用面向对象技术的强大功能,如二层和三层结构系统。<br />
如果用户能够传递属性,那么就可以在自己的解决方案中使用面向对象的设计方式。<br />
所有面向对象的设计方式无不依靠不同的属性来发挥功能,如果不能传递完整的对象——包括实现和类型<br />
——就会失去设计方式上所提供的优点。</p>

<h3>4、安全性:</h3>

<p>RMI使用Java内置的安全机制保证下载执行程序时用户系统的安全。<br />
RMI使用专门为保护系统免遭恶意小程序侵害而设计的安全管理程序。在情况严重时,服务器可拒绝下载任何执行程序。 </p>

<h3>5、便于编写和使用</h3>

<p>RMI使得Java远程服务程序和访问这些服务程序的Java客户程序的编写工作变得轻松、简单。<br />
远程接口实际上就是Java接口。<br />
为了实现RMI的功能必须创建远程对象任何可以被远程调用的对象必须实现远程接口。但远程<br />
接口本身并不包含任何方法。因而需要创建一个新的接口来扩展远程接口。<br />
新接口将包含所有可以远程调用的方法。远程对象必须实现这个新接口,由于新的接口扩展了<br />
远程接口,实现了新接口,就满足了远程对象对实现远程接口的要求,所实现的每个对象都将<br />
作为远程对象引用。</p>

<h3>6、可连接现有/原有的系统</h3>

<p>RMI可通过Java的本机方法接口JNI与现有系统进行进行交互。利用RMI和JNI,您就能用Java语言编写客户端程序,还能使用现有的服务器端程序。在使用RMI/JNI与现有服务器连接时,您可以有选择地用Java重新编写服务程序的任何部分,并使新的程序充分发挥Java的功能。类似地,RMI可利用JDBC、在不修改使用数据库的现有非Java源代码的前提下与现有关系数据库进行交互。 </p>

<h3>7、编写一次,到处运行</h3>

<p>RMI是Java“编写一次,到处运行 ”方法的一部分。任何基于RMI的系统均可100%地移植到任何Java虚拟机上,RMI/JDBC系统也不例外。假如使用RMI/JNI与现有系统进行交互工作,则采用JNI编写的代码可与任何Java虚拟机进行编译、运行。 <br />
分布式垃圾收集:RMI采用其分布式垃圾收集功能收集不再被网络中任何客户程序所引用的远程服务对象。与Java 虚拟机内部的垃圾收集类似,分布式垃圾收集功能答应用户根据自己的需要定义服务器对象,并且明确这些对象在不再被客户机引用时会被删除。 </p>

<h3>8、并行计算</h3>

<p>RMI采用多线程处理方法,可使您的服务器利用这些Java线程更好地并行处理客户端的请求。Java分布式计算解决方案:RMI从JDK 1.1开始就是Java平台的核心部分,因此,它存在于任何一台1.1 Java虚拟机中。所有RMI系统均采用相同的公开协议,所以,所有Java 系统均可直接相互对话,而不必事先对协议进行转换。 </p>

<p>以上是RMI介绍及优点的内容，更多 优点 的内容，请您使用右上方搜索功能获取相关信息。</p>
