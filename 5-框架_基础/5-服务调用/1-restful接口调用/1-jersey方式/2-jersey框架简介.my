<h1>Jersey框架一：Jersey RESTful WebService框架简介</h1>

<p>2015年01月26日 16:27:33 <a href="https://me.csdn.net/a19881029" target="_blank">sean-zou</a> 阅读数：109002 标签： <a href="http://so.csdn.net/so/search/s.do?q=WebService&t=blog" target="_blank">WebService</a><a href="http://so.csdn.net/so/search/s.do?q=RESTful%20WebService&t=blog" target="_blank">RESTful WebService</a><a href="http://so.csdn.net/so/search/s.do?q=Jersey&t=blog" target="_blank">Jersey</a> 更多</p>

<p>个人分类： <a href="https://blog.csdn.net/a19881029/article/category/2169161" target="_blank">WebService</a></p>

<p>所属专栏： <a href="https://blog.csdn.net/column/details/webservice-series.html" target="_blank">Web Service系列</a></p>

<p>版权声明：本文为博主原创文章，未经博主允许不得转载。 https://blog.csdn.net/a19881029/article/details/43056429</p>

<p>Jersey系列文章：</p>

<p><a href="http://blog.csdn.net/a19881029/article/details/43056429" rel="nofollow" target="_blank">Jersey框架一：Jersey RESTful WebService框架简介</a></p>

<p><a href="http://blog.csdn.net/a19881029/article/details/43205457" rel="nofollow" target="_blank">Jersey框架二：Jersey对JSON的支持</a></p>

<p><a href="http://blog.csdn.net/a19881029/article/details/43951573" rel="nofollow" target="_blank">Jersey框架三：Jersey对HTTPS的支持</a></p>

<p> </p>

<p>开发RESTful WebService意味着支持在多种媒体类型以及抽象底层的客户端-服务器通信细节，如果没有一个好的工具包可用，这将是一个困难的任务</p>

<p>为了简化使用JAVA开发RESTful WebService及其客户端，一个轻量级的标准被提出：JAX-RS API</p>

<p>Jersey RESTful WebService框架是一个开源的、产品级别的JAVA框架，支持JAX-RS API并且是一个JAX-RS(JSR 311和 JSR 339)的参考实现</p>

<p>Jersey不仅仅是一个JAX-RS的参考实现，Jersey提供自己的API，其API继承自JAX-RS，提供更多的特性和功能以进一步简化RESTful service和客户端的开发</p>

<p> </p>

<p>Maven版本：3.1.0</p>

<p>Jersey版本：1.18</p>

<p>JDK版本：1.7.0_65</p>

<p><strong>一，服务端</strong></p>

<p>Maven配置如下：</p>

<pre>

 </pre>

<ol>
<li>
<p><code><project xmlns="http://maven.apache.org/POM/4.0.0" </code></p>
</li>
<li>
<p><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </code></p>
</li>
<li>
<p><code>xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 </code></p>
</li>
<li>
<p><code>http://maven.apache.org/xsd/maven-4.0.0.xsd"></code></p>
</li>
<li>
<p><code><modelVersion>4.0.0</modelVersion></code></p>
</li>
<li>
<p><code><groupId>JERSEY_SERVER</groupId></code></p>
</li>
<li>
<p><code><artifactId>JERSEY_SERVER</artifactId></code></p>
</li>
<li>
<p><code><version>1.0</version></code></p>
</li>
<li>
<p><code><dependencies></code></p>
</li>
<li>
<p><code><dependency></code></p>
</li>
<li>
<p><code><groupId>com.sun.jersey</groupId></code></p>
</li>
<li>
<p><code><artifactId>jersey-server</artifactId></code></p>
</li>
<li>
<p><code><version>1.18</version></code></p>
</li>
<li>
<p><code></dependency></code></p>
</li>
<li>
<p><code><dependency></code></p>
</li>
<li>
<p><code><groupId>com.sun.jersey</groupId></code></p>
</li>
<li>
<p><code><artifactId>jersey-grizzly2</artifactId></code></p>
</li>
<li>
<p><code><version>1.18</version></code></p>
</li>
<li>
<p><code></dependency></code></p>
</li>
<li>
<p><code></dependencies></code></p>
</li>
<li>
<p><code></project></code></p>
</li>
</ol>

<p>首先介绍几个注解：</p>

<p><strong>@Path</strong></p>

<p>用来为资源类或方法定义URI，当然除了静态URI也支持动态URI</p>

<pre>

 </pre>

<ol>
<li>
<p><code>@Path("service") </code></p>
</li>
<li>
<p><code>public class MyResource {</code></p>
</li>
<li>
<p><code>@Path("{sub_path}")</code></p>
</li>
<li>
<p><code>@GET</code></p>
</li>
<li>
<p><code>public String getResource(@PathParam("sub_path") String resourceName) {</code></p>
</li>
<li>
<p><code>......</code></p>
</li>
</ol>

<p>如果此时客户端请求的URI为http://127.0.0.1:10000/service/sean，则sub_path的值为sean</p>

<p><strong>@PathParam</strong>用来将请求URI的一部分作为方法参数传入方法中</p>

<p>对URI的动态部分，可以自定义校验正则表达式，如果请求参数校验失败，容器返回404 Not Found</p>

<pre>
<code>@Path("{sub_path:[A-Z]*}")</code></pre>

<p><strong>@GET</strong></p>

<p>表明被注解的方法响应HTTP GET请求，<strong>@POST</strong>、<strong>@PUT</strong>和<strong>@DELETE</strong>同理</p>

<p><strong>@Consumes</strong></p>

<p>定义请求的媒体类型，如果不指定，则容器默认可接受任意媒体类型，容器负责确认被调用的方法可接受HTTP请求的媒体类型，否则返回415 Unsupported Media Type</p>

<p>方法级注解将覆盖类级注解</p>

<p><strong>@Produces</strong></p>

<p>定义响应媒体类型，如果不指定，则容器默认可接受任意媒体类型，容器负责确认被调用的方法可返回HTTP请求可以接受媒体类型，否则返回406 Not Acceptable</p>

<p>方法级注解将覆盖类级注解</p>

<p><strong>@QueryParam</strong></p>

<pre>

 </pre>

<ol>
<li>
<p><code>public String getResource(</code></p>
</li>
<li>
<p><code>@DefaultValue("Just a test!") @QueryParam("desc") String description) {</code></p>
</li>
<li>
<p><code>......</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p>如果请求URI中包含desc参数，例如：http://127.0.0.1:10000/service/sean?desc=123456，则desc参数的值将会赋给方法的参数description，否则方法参数description的值将为<strong>@DefaultValue</strong>注解定义的默认值</p>

<p><strong>@Context</strong></p>

<p>将信息注入请求或响应相关的类，可注入的类有：Application，UriInfo，Request，HttpHeaders和SecurityContext</p>

<p><strong>@Singleton</strong>和<strong>@PerRequest</strong></p>

<p>默认情况下，资源类的生命周期是per-request，也就是系统会为每个匹配资源类URI的请求创建一个实例，这样的效率很低，可以对资源类使用<strong>@Singleton</strong>注解，这样在应用范围内，只会创建资源类的一个实例</p>

<p>服务端程序如下：</p>

<pre>

 </pre>

<ol>
<li>
<p><code>package com.sean;</code></p>
</li>
<li> </li>
<li>
<p><code>import java.io.IOException;</code></p>
</li>
<li>
<p><code>import java.net.URI;</code></p>
</li>
<li>
<p><code>import java.util.Iterator;</code></p>
</li>
<li> </li>
<li>
<p><code>import javax.ws.rs.Consumes;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.DefaultValue;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.GET;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.Path;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.PathParam;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.Produces;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.QueryParam;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.Context;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.HttpHeaders;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.MediaType;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.MultivaluedMap;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.Request;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.UriBuilder;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.UriInfo;</code></p>
</li>
<li> </li>
<li>
<p><code>import org.glassfish.grizzly.http.server.HttpServer;</code></p>
</li>
<li> </li>
<li>
<p><code>import com.sun.jersey.api.container.grizzly2.GrizzlyServerFactory;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.core.PackagesResourceConfig;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.core.ResourceConfig;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.spi.resource.Singleton;</code></p>
</li>
<li> </li>
<li>
<p><code>@Singleton</code></p>
</li>
<li>
<p><code>@Path("service") </code></p>
</li>
<li>
<p><code>public class MyResource {</code></p>
</li>
<li> </li>
<li>
<p><code>@Path("{sub_path:[a-zA-Z0-9]*}")</code></p>
</li>
<li>
<p><code>@GET</code></p>
</li>
<li>
<p><code>@Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})</code></p>
</li>
<li>
<p><code>@Produces(MediaType.TEXT_PLAIN)</code></p>
</li>
<li>
<p><code>public String getResourceName(</code></p>
</li>
<li>
<p><code>@PathParam("sub_path") String resourceName,</code></p>
</li>
<li>
<p><code>@DefaultValue("Just a test!") @QueryParam("desc") String description,</code></p>
</li>
<li>
<p><code>@Context Request request,</code></p>
</li>
<li>
<p><code>@Context UriInfo uriInfo,</code></p>
</li>
<li>
<p><code>@Context HttpHeaders httpHeader) {</code></p>
</li>
<li>
<p><code>System.out.println(this.hashCode());</code></p>
</li>
<li> </li>
<li>
<p><code>// 将HTTP请求打印出来</code></p>
</li>
<li>
<p><code>System.out.println("****** HTTP request ******");</code></p>
</li>
<li>
<p><code>StringBuilder strBuilder = new StringBuilder();</code></p>
</li>
<li>
<p><code>strBuilder.append(request.getMethod() + " ");</code></p>
</li>
<li>
<p><code>strBuilder.append(uriInfo.getRequestUri().toString() + " ");</code></p>
</li>
<li>
<p><code>strBuilder.append("HTTP/1.1[\\r\\n]");</code></p>
</li>
<li>
<p><code>System.out.println(strBuilder.toString());</code></p>
</li>
<li>
<p><code>MultivaluedMap<String, String> headers = httpHeader.getRequestHeaders();</code></p>
</li>
<li>
<p><code>Iterator<String> iterator = headers.keySet().iterator();</code></p>
</li>
<li>
<p><code>while(iterator.hasNext()){</code></p>
</li>
<li>
<p><code>String headName = iterator.next();</code></p>
</li>
<li>
<p><code>System.out.println(headName + ":" + headers.get(headName) + "[\\r\\n]");</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>System.out.println("[\\r\\n]");</code></p>
</li>
<li>
<p><code>String responseStr =resourceName + "[" + description + "]";</code></p>
</li>
<li>
<p><code>return responseStr;</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li> </li>
<li>
<p><code>public static void main(String[] args) {</code></p>
</li>
<li>
<p><code>URI uri = UriBuilder.fromUri("http://127.0.0.1").port(10000).build();</code></p>
</li>
<li>
<p><code>ResourceConfig rc = new PackagesResourceConfig("com.sean");</code></p>
</li>
<li>
<p><code>try {</code></p>
</li>
<li>
<p><code>HttpServer server = GrizzlyServerFactory.createHttpServer(uri, rc);</code></p>
</li>
<li>
<p><code>server.start();</code></p>
</li>
<li>
<p><code>} catch (IllegalArgumentException e) {</code></p>
</li>
<li>
<p><code>e.printStackTrace();</code></p>
</li>
<li>
<p><code>} catch (NullPointerException e) {</code></p>
</li>
<li>
<p><code>e.printStackTrace();</code></p>
</li>
<li>
<p><code>} catch (IOException e) {</code></p>
</li>
<li>
<p><code>e.printStackTrace();</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>try {</code></p>
</li>
<li>
<p><code>Thread.sleep(1000*1000);</code></p>
</li>
<li>
<p><code>} catch (InterruptedException e) {</code></p>
</li>
<li>
<p><code>e.printStackTrace();</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p> </p>

<p><strong>二，客户端</strong></p>

<p>Maven配置如下：</p>

<pre>

 </pre>

<ol>
<li>
<p><code><project xmlns="http://maven.apache.org/POM/4.0.0" </code></p>
</li>
<li>
<p><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </code></p>
</li>
<li>
<p><code>xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 </code></p>
</li>
<li>
<p><code>http://maven.apache.org/xsd/maven-4.0.0.xsd"></code></p>
</li>
<li>
<p><code><modelVersion>4.0.0</modelVersion></code></p>
</li>
<li>
<p><code><groupId>JERSEY_CLIENT</groupId></code></p>
</li>
<li>
<p><code><artifactId>JERSEY_CLIENT</artifactId></code></p>
</li>
<li>
<p><code><version>1.0</version></code></p>
</li>
<li>
<p><code><dependencies> </code></p>
</li>
<li>
<p><code><dependency></code></p>
</li>
<li>
<p><code><groupId>com.sun.jersey</groupId></code></p>
</li>
<li>
<p><code><artifactId>jersey-client</artifactId></code></p>
</li>
<li>
<p><code><version>1.18</version></code></p>
</li>
<li>
<p><code></dependency></code></p>
</li>
<li>
<p><code><dependency></code></p>
</li>
<li>
<p><code><groupId>com.sun.jersey</groupId></code></p>
</li>
<li>
<p><code><artifactId>jersey-grizzly2</artifactId></code></p>
</li>
<li>
<p><code><version>1.18</version></code></p>
</li>
<li>
<p><code></dependency></code></p>
</li>
<li>
<p><code></dependencies></code></p>
</li>
<li>
<p><code></project></code></p>
</li>
</ol>

<p>客户端程序如下：</p>

<pre>

 </pre>

<ol>
<li>
<p><code>package com.sean;</code></p>
</li>
<li> </li>
<li>
<p><code>import java.net.URI;</code></p>
</li>
<li>
<p><code>import java.util.Iterator;</code></p>
</li>
<li> </li>
<li>
<p><code>import javax.ws.rs.core.MediaType;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.MultivaluedMap;</code></p>
</li>
<li>
<p><code>import javax.ws.rs.core.UriBuilder;</code></p>
</li>
<li> </li>
<li>
<p><code>import com.sun.jersey.api.client.Client;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.client.ClientResponse;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.client.WebResource;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.client.config.ClientConfig;</code></p>
</li>
<li>
<p><code>import com.sun.jersey.api.client.config.DefaultClientConfig;</code></p>
</li>
<li> </li>
<li>
<p><code>public class JerseyClient {</code></p>
</li>
<li> </li>
<li>
<p><code>public static void main(String[] args) {</code></p>
</li>
<li>
<p><code>// 要使用Jersey Client API，必须首先创建Client的实例</code></p>
</li>
<li>
<p><code>// 有以下两种创建Client实例的方式</code></p>
</li>
<li> </li>
<li>
<p><code>// 方式一</code></p>
</li>
<li>
<p><code>ClientConfig cc = new DefaultClientConfig();</code></p>
</li>
<li>
<p><code>cc.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, 10*1000);</code></p>
</li>
<li>
<p><code>// Client实例很消耗系统资源，需要重用</code></p>
</li>
<li>
<p><code>// 创建web资源，创建请求，接受响应都是线程安全的</code></p>
</li>
<li>
<p><code>// 所以Client实例和WebResource实例可以在多个线程间安全的共享</code></p>
</li>
<li>
<p><code>Client client = Client.create(cc);</code></p>
</li>
<li> </li>
<li>
<p><code>// 方式二</code></p>
</li>
<li>
<p><code>// Client client = Client.create();</code></p>
</li>
<li>
<p><code>// client.setConnectTimeout(10*1000);</code></p>
</li>
<li>
<p><code>// client.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, 10*1000);</code></p>
</li>
<li> </li>
<li>
<p><code>// WebResource将会继承Client中timeout的配置</code></p>
</li>
<li>
<p><code>WebResource resource = client.resource("http://127.0.0.1:10000/service/sean?desc=description");</code></p>
</li>
<li> </li>
<li>
<p><code>String str = resource</code></p>
</li>
<li>
<p><code>.accept(MediaType.TEXT_PLAIN)</code></p>
</li>
<li>
<p><code>.type(MediaType.TEXT_PLAIN)</code></p>
</li>
<li>
<p><code>.get(String.class);</code></p>
</li>
<li>
<p><code>System.out.println("String:" + str);</code></p>
</li>
<li> </li>
<li>
<p><code>URI uri = UriBuilder.fromUri("http://127.0.0.1/service/sean").port(10000)</code></p>
</li>
<li>
<p><code>.queryParam("desc", "description").build();</code></p>
</li>
<li>
<p><code>resource = client.resource(uri);</code></p>
</li>
<li> </li>
<li>
<p><code>//header方法可用来添加HTTP头</code></p>
</li>
<li>
<p><code>ClientResponse response = resource.header("auth", "123456")</code></p>
</li>
<li>
<p><code>.accept(MediaType.TEXT_PLAIN)</code></p>
</li>
<li>
<p><code>.type(MediaType.TEXT_PLAIN)</code></p>
</li>
<li>
<p><code>.get(ClientResponse.class);</code></p>
</li>
<li>
<p><code>// 将HTTP响应打印出来</code></p>
</li>
<li>
<p><code>System.out.println("****** HTTP response ******");</code></p>
</li>
<li>
<p><code>StringBuilder strBuilder = new StringBuilder();</code></p>
</li>
<li>
<p><code>strBuilder.append("HTTP/1.1 ");</code></p>
</li>
<li>
<p><code>strBuilder.append(response.getStatus() + " ");</code></p>
</li>
<li>
<p><code>strBuilder.append(response.getStatusInfo() + "[\\r\\n]");</code></p>
</li>
<li>
<p><code>System.out.println(strBuilder.toString());</code></p>
</li>
<li>
<p><code>MultivaluedMap<String, String> headers = response.getHeaders();</code></p>
</li>
<li>
<p><code>Iterator<String> iterator = headers.keySet().iterator();</code></p>
</li>
<li>
<p><code>while(iterator.hasNext()){</code></p>
</li>
<li>
<p><code>String headName = iterator.next();</code></p>
</li>
<li>
<p><code>System.out.println(headName + ":" + headers.get(headName) + "[\\r\\n]");</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>System.out.println("[\\r\\n]");</code></p>
</li>
<li>
<p><code>System.out.println(response.getEntity(String.class) + "[\\r\\n]");</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
</ol>

<p> </p>

<p>服务端日志如下：</p>

<pre>
<code>二月 06, 2015 4:33:33 下午 com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Scanning for root resource and provider classes in the packages:
com.sean
二月 06, 2015 4:33:33 下午 com.sun.jersey.api.core.ScanningResourceConfig logClasses
INFO: Root resource classes found:
class com.sean.Test
class com.sean.MyResource
二月 06, 2015 4:33:33 下午 com.sun.jersey.api.core.ScanningResourceConfig init
INFO: No provider classes found.
二月 06, 2015 4:33:33 下午 com.sun.jersey.server.impl.application.WebApplicationImpl _initiate
INFO: Initiating Jersey application, version 'Jersey: 1.18 11/22/2013 01:21 AM'
二月 06, 2015 4:33:34 下午 org.glassfish.grizzly.http.server.NetworkListener start
INFO: Started listener bound to [127.0.0.1:10000]
二月 06, 2015 4:33:34 下午 org.glassfish.grizzly.http.server.HttpServer start
INFO: [HttpServer] Started.
1814260800
****** HTTP request ******
GET http://127.0.0.1:10000/service/sean?desc=description HTTP/1.1[\r\n]
accept:[text/plain][\r\n]
content-type:[text/plain][\r\n]
user-agent:[Java/1.7.0_65][\r\n]
host:[127.0.0.1:10000][\r\n]
connection:[keep-alive][\r\n]
[\r\n]
1814260800
****** HTTP request ******
GET http://127.0.0.1:10000/service/sean?desc=description HTTP/1.1[\r\n]
auth:[123456][\r\n]
accept:[text/plain][\r\n]
content-type:[text/plain][\r\n]
user-agent:[Java/1.7.0_65][\r\n]
host:[127.0.0.1:10000][\r\n]
connection:[keep-alive][\r\n]
[\r\n]</code></pre>

<p>客户端日志如下：</p>

<pre>
<code>String:sean[description]
****** HTTP response ******
HTTP/1.1 200 OK[\r\n]
Transfer-Encoding:[chunked][\r\n]
Date:[Fri, 06 Feb 2015 08:33:38 GMT][\r\n]
Content-Type:[text/plain][\r\n]
[\r\n]
sean[description][\r\n]</code></pre>
