<h1>POJO</h1>

<p>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。</p>

<p>使用POJO名称是为了避免和<a href="http://baike.baidu.com/view/3542.htm" target="_blank">EJB</a>混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为<a href="http://baike.baidu.com/view/1097386.htm" target="_blank">VO</a>(value -object)或<a href="http://baike.baidu.com/view/160599.htm" target="_blank">dto</a>(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。</p>

<h2>自身特点</h2>

<p>POJO是Plain OrdinaryJava Object的缩写不错，但是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。</p>

<p>POJO实质上可以理解为简单的实体类，顾名思义POJO类的作用是方便程序员使用数据库中的数据表，对于广大的程序员，可以很方便的将POJO类当做对象来进行使用，当然也是可以方便的调用其get,set方法。POJO类也给我们在struts框架中的配置带来了很大的方便。</p>

<h2>实例</h2>

<p>POJO有一些private的<a href="http://baike.baidu.com/view/327406.htm" target="_blank">参数</a>作为对象的属性。然后针对每个<a href="http://baike.baidu.com/view/327406.htm" target="_blank">参数</a>定义了get和set方法作为访问的接口。例如：</p>

<p>public class User {</p>

<p>private long id;</p>

<p>private String name;</p>

<p>public void setId(long id) {</p>

<p>this. id = id;</p>

<p>}</p>

<p>public void setName(String name) {</p>

<p>this. name=name;</p>

<p>}</p>

<p>public long getId() {</p>

<p>return id;</p>

<p>}</p>

<p>public String getName() {</p>

<p>return name;</p>

<p>}</p>

<p>}</p>

<p>POJO对象有时也被称为<a href="http://baike.baidu.com/view/68441.htm" target="_blank">Data</a>对象，大量应用于表现现实中的对象。如果项目中使用了Hibernate<a href="http://baike.baidu.com/view/66971.htm" target="_blank">框架</a>，有一个关联的xml文件，使对象与数据库中的表对应，对象的属性与表中的字段相对应。</p>

<h2>POJO与javabean的区别</h2>

<p>POJO 和JavaBean是我们常见的两个关键字，一般容易混淆，POJO全称是Plain Ordinary Java Object / Pure Old Java Object，中文可以翻译成：普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。但通常情况下，由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术，就好像你做了一个扳子，而这个扳子会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳子扳、锤、撬等等)，而这个扳子就是一个组件。一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。理想地讲，一个POJO是一个不受任何限制的Java对象（除了Java语言规范）<sup>[1]</sup> 。</p>

<h3>错误的认识</h3>

<p>POJO是这样的一种“纯粹的”JavaBean，在它里面除了JavaBean规范的方法和属性没有别的东西，即private属性以及对这个属性方法的public的get和set方法。我们会发现这样的JavaBean很“单纯”，它只能装载数据，作为数据存储的载体，而不具有业务逻辑处理的能力。</p>

<h3>真正的意思</h3>

<p>POJO = "Plain Old Java Object"，是MartinFowler等发明的一个术语，用来表示普通的Java对象，不是JavaBean, EntityBean 或者 SessionBean。POJO不担当任何特殊的角色，也不实现任何特殊的Java框架的接口如，<a href="http://baike.baidu.com/view/3542.htm" target="_blank">EJB</a>，<a href="http://baike.baidu.com/view/25611.htm" target="_blank">JDBC</a>等等。</p>

<p>即POJO是一个简单的普通的Java对象，它不包含<a href="http://baike.baidu.com/view/1642754.htm" target="_blank">业务逻辑</a>或持久逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。</p>

<p>下面是摘自Martin Fowler个人网站的一句话：</p>

<p>"We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it's caught on very nicely."－－Martin Fowler</p>

<p>我们疑惑为什么人们不喜欢在他们的系统中使用普通的对象，我们得到的结论是——普通的对象缺少一个响亮的名字，因此我们给它们起了一个，并且取得了很好的效果。——Martin Fowler</p>

<p><img alt="" src="http://img.blog.csdn.net/20130508111808228" /></p>

<h2>POJO几点介绍</h2>

<h3>1.什么是POJO</h3>

<p>POJO的名称有多种，pure old java object 、plain ordinary java object 等。</p>

<p>按照Martin Fowler的解释是“Plain Old Java Object”，从字面上翻译为“纯洁老式的java对象”，但大家都使用“简单java对象”来称呼它。</p>

<p>POJO的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。</p>

<p>POCO的概念是从java的POJO借用而来，而两者的含义是一致的，不同的仅仅是使用的语言不一样。所以POCO的解释就是“Plain Old C# Object”。</p>

<h3>2.为什么会有POJO？</h3>

<p>主要是Java的开发者被EJB的繁杂搞怕了，大家经过反思，又回归“纯洁老式”的JavaBean，即有无参构造函数，每个字段都有getter和setter的java类。</p>

<h3>3.POJO的意义</h3>

<p>POJO让开发者可专注于业务逻辑和脱离框架的单元测试。除此之外， 由于POJO并不须要继承框架的类或实现其接口，开发者能够极其灵活地搭建继承结构和建造应用。</p>

<p>POJO的意义就在于它的简单而灵活性，因为它的简单和灵活，使得POJO能够任意扩展，从而胜任多个场合，也就让一个模型贯穿多个层成为现实。</p>

<p>先写一个核心POJO，然后实现业务逻辑接口和持久化接口，就成了Domain Model； UI需要使用时，就实现数据绑定接口，变成VO（View Object）。</p>

<h3>4.POJO与PO、VO的区别</h3>

<p>POJO是指简单java对象（Plain Old Java Objects、pure old java object 或者 plain ordinary java object）。</p>

<p>PO是指持久对象（persistant object持久对象）。</p>

<p>VO是指值对象或者View对象（Value Object、View Object）。注意，本文的VO特指View Object。</p>

<p>持久对象实际上必须对应数据库中的entity，所以和POJO有所区别。比如说POJO是由new创建，由GC回收。但是持久对象是insert数据库创建，由数据库delete删除的。基本上持久对象生命周期和数据库密切相关。另外持久对象往往只能存在一个数据库Connection之中，Connnection关闭以后，持久对象就不存在了，而POJO只要不被GC回收，总是存在的。</p>

<p>由于存在诸多差别，因此持久对象PO(Persistent Object)在代码上肯定和POJO不同，起码PO相对于POJO会增加一些用来管理数据库entity状态的属性和方法。而ORM追求的目标就是要PO在使用上尽量和POJO一致，对于程序员来说，他们可以把PO当做POJO来用，而感觉不到PO的存在。</p>

<h3>5.POJO的扩展</h3>

<p>POJO仅包含最简单的字段属性，没有多余的东西，它本质上就是一个普通的JavaBean。</p>

<p>但是在POJO的基础上，能够扩展出不同的对象。</p>

<p>为POJO增加了持久化的方法（Insert、Update、Delete……）之后，POJO就变成了PO。</p>

<p>为POJO增加了数据绑定功能之后，POJO就变成了View Object，即UI Model。</p>

<p>为POJO增加业务逻辑的方法（比如单据审核、转帐……）之后，POJO就变成了Domain Model。</p>

<p>POJO还可以当作DTO使用。</p>

<h3>6.POJO正确解释</h3>

<p>POJO一个正规的Java对象（不是JavaBean，EntityBean等），也不担当任何的特殊的角色，也不实现任何Java框架指定的接口。</p>

<p> 　　我觉得上面的解释很准确，POJO应该不是我们开始认为的JavaBean，当然更不是EJB，它不应该依赖于框架即继承或实现某些框架类或接口。例如：Struts1中的Action和ActionForm当然不属于POJO了，而在Struts2中的Action由于可以不继承任何的接口，所以在这种情况下Action是POJO，但是Struts2中的Action也可以继承ActionSupport类就不再属于POJO了。POJO里面是可以包含业务逻辑处理和持久化逻辑，也可以包含类似与JavaBean属性和对属性访问的set和get方法的。</p>

<h3>7.POJO总结</h3>

<p>   最后，我们总结一下给一个定义把，POJO是一个简单的、正规Java对象，它包含业务逻辑处理或持久化逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。 </p>
