<h1>Hibernate中的PO VO 以及pojo详解</h1>

<p>O/R Mapping 是 Object Relational Mapping（对象关系映射）的缩写。通俗点讲，就是将对象与关系数据库绑定，用对象来表示关系数据。在O/R Mapping的世界里，有两个基本的也是重要的东东需要了解，即VO，PO。</p>

<p><strong>Hibernate中的PO VO 以及pojo详解</strong></p>

<p>POJO：Pure Old Java Object，符合Java Bean属性规范的简单Java对象，通常也称为VO（Value Object，值对象）。<br />
PO：Persistent Object，持久化对象。<br />
VO、PO、FormBean之间的区别：VO是独立的Java Object；而PO是Hibernate纳入其实体容器（Entity Map）的对象。它代表了与数据库中某条记录相对应的Hibernata实体，PO的变化在事务提交时将反映到实际的数据库中。FormBean只是HTML中表单的封装，是为了弱化request中存储数据的作用，将request对象的get()方法转化为对象的存取值。<br />
VO和PO在结构上看，没什么区别。但从本质上看是完全不同的。<br />
VO由new关键字创建，由GC回收。PO则是向数据库中添加新数据时创建，删除数据库中数据时删除，并且它只能存活在一个数据库连接中，断开连接即被销毁。<br />
VO是业务对象，由业务逻辑使用，它存活的目的就是为数据提供一个生存的地方。PO则是数据对象的表现，它可以简化对象数据与物理数据的转换。<br />
VO的属性根据当前的业务不同而不同。PO的属性则是跟数据库表的字段一一对应。PO对象需要实现序列化接口。<br />
在Hibernate中，最核心的概念就是对PO的状态管理。一个PO有三种状态： 1.未被持久化的VO，此时就是一个内存对象VO，由JVM管理生命周期。 2.已被持久化的PO，并且在Session生命周期内，此时映射数据库连接，由数据库管理生命周期。 3.曾被持久化过，但现在和Session已经托管（detached）了，以VO的身份在运行。它还可以进入另一个Session，继续PO状态管理。<br />
需要注意的是， PO最好只在持久层使用，如果脱离持久层到处使用，会给Hibernate带来不小的PO对象维护开销。</p>

<pre>
public class AddMasterAction extends Action {

public ActionForward execute(ActionMapping mapping, ActionForm form,
HttpServletRequest request, HttpServletResponse response) throws IOException {
AddMasterForm addMasterForm = (AddMasterForm) form; //使用VO
String name = addMasterForm.getName(); //从表现层获取数据
String pass = addMasterForm.getPass();
Master master = new Master(); //使用PO
master.setName(name);//将表现层数据传递给PO，即VO向PO转化？
master.setPass(pass);
MasterDAO dao = new MasterDAO();
String target = null;
dao.save(master);//保存PO
return mapping.findForward(target);
}
}
</pre>

<p><strong>整理如下：</strong> <br />
PO即 <strong>P</strong>ersistence <strong>O</strong>bject VO即 <strong>V</strong>alue <strong>O</strong>bject PO和VO是Hibernate中两个比较关键的概念。 <br />
首先，何谓VO，很简单，VO就是一个简单的值对象。 如： TUser user = new TUser(); <br />
user.setName("Emma"); 这里的user就是一个VO。VO只是简单携带了对象的一些属性信息。 何谓PO? 即纳入Hibernate管理框架中的VO。看下面两个例子：</p>

<p><strong>Java code</strong></p>

<pre>
TUser user = new TUser();
TUser anotherUser = new TUser();
user.setName("Emma");
anotherUser.setName("Kevin");
//此时user和anotherUser都是VO
Transaction tx = session.beginTransaction();
session.save(user);
//此时的user已经经过Hibernate的处理，成为一个PO
//而anotherUser仍然是个VO
tx.commit();
//事务提交之后，库表中已经插入一条用户”Emma”的记录
//对于anotherUser则无任何操作
Transaction tx = session.beginTransaction();
user.setName("Emma_1"); //PO
anotherUser.setName("Kevin_1");//VO
tx.commit();</pre>

<p><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img alt="复制代码" src="http://common.cnblogs.com/images/copycode.gif" /></a></p>

<p><strong>//</strong><strong>事务提交之后，PO的状态被固化到数据库中 //</strong><strong>也就是说数据库中“Emma”的用户记录已经被更新为“Emma_1” //</strong><strong>此时anotherUser仍然是个普通Java对象，它的属性更改不会 //对数据库产生任何影响</strong></p>

<p><strong>另外，通过Hibernate返回的对象也是PO:</strong></p>

<p><strong>Java code</strong></p>

<p><strong>//由Hibernate返回的PO</strong><strong>TUser user = (TUser)session.load(TUser.class,new Integer(1</strong><strong>));</strong></p>

<p><strong>VO经过Hibernate进行处理，就变成了PO。 </strong><br />
上面的示例代码session.save(user)中，我们把一个VO “user”传递给 <br />
Hibernate的Session.save方法进行保存。 <br />
VO和PO的主要区别在于： Ø VO是独立的Java Object。 <br />
Ø PO是由Hibernate纳入其实体容器（Entity Map）的对象，它代表了与数 <br />
据库中某条记录对应的Hibernate实体，PO的变化在事务提交时将反应到实 际数据库中。 <br />
如果一个PO与Session对应的实体容器中分离（如Session关闭后的PO），那么 此时，它又会变成一个VO。 <br />
<br />
由PO、VO的概念，又引申出一些系统层次设计方面的问题。如在传统的MVC架构中， <br />
位于Model层的PO，是否允许被传递到其他层面。由于PO的更新最终将被映射到实 <br />
际数据库中，如果PO在其他层面（如View层）发生了变动，那么可能会对Model 层造成意想不到的破坏。 <br />
因此，一般而言，应该避免直接PO传递到系统中的其他层面，一种解决办法是，通 <br />
过一个VO，通过属性复制使其具备与PO相同属性值，并以其为传输媒质（实际上， 这个VO被用作Data Transfer Object，即所谓的DTO），将此VO传递给其他层 面以实现必须的数据传送。 属性复制可以通过Apache Jakarta Commons Beanutils （BeanUtils.copyProperties(VO, PO)）组件提供的属性批 <br />
量复制功能，避免繁复的get/set操作。</p>

<p> </p>

<p>在Hibernate中，对象有三种状态：<strong>临时状态、持久状态和游离状态</strong>。 <strong>临时状态：</strong>当new一个实体对象后，这个对象处于临时状态，即这个对象只是一个保存临时数据的内存区域，如果没有变量引用这个对象，则会被jre垃圾回收机制回收。这个对象所保存的数据与数据库没有任何关系，除非通过Session的save或者 SaveOrUpdate把临时对象与数据库关联，并把数据插入或者更新到数据库，这个对象才转换为持久对象。 例如：</p>

<pre>
Emp e=new Emp(); //创建临时对象
e.setEmpno((long) 8888);
e.setEName("mike");
...
EmpDAO d=new EmpDAO();
d.save(e); //持久化
...
</pre>

<p><strong>持久状态:</strong>持久化对象的实例在数据库中有对应的记录，并拥有一个持久化表示（ID）。对持久化对象进行delete操作后，数据库中对应的记录将被删除，那么持久化对象与数据库记录不再存在对应关系，持久化对象变成临时状态。     持久化对象被修改变更后，不会马上同步到数据库，知道数据库事务提交。在同步之前，持久化对象是脏的（Dirty）。 例如：           Emp e=new Emp(); //创建了临时的对象           EmpDAO edao= new empDAO();           e=edao.findbyEmpno((long) 7786);    //使对象与数据库记录对应，从而持久化           e.setEname("新的名字");                     //修改了持久化对象，使之处于 Dirty           ......           edao.saveorupdate(e);                      //保存，但是仍然 Dirty           tran.commit();                                     //提交，实现与数据库同步，不再Dirty           ......<br />
<strong>游离状态：</strong>当Session进行了Close、Clear或者evict后，持久化对象虽然拥有持久化标识符和与数据库对应记录一致的值，但是因为会话已经消失，对象不在持久化管理之内，所以处于游离状态（也叫：脱管状态）。游离状态的对象与临时状态对象是十分相似的，只是它还含有持久化标识。<br />
<strong>其中，持久化状态的对象，简称为：PO 而临时状态和游离状态的对象，简称为： VO</strong></p>

<p> </p>

<p> </p>

<h1>详细介绍VO和PO的区别</h1>

<p>本文介绍的是VO和PO的区别，就是值对象和持久对象的区别，希望对你有帮助，一起来看。</p>

<p>AD：<a href="http://mobile.51cto.com/mobile/mdsa12/" target="_blank">51CTO 网+ 第十二期沙龙：大话数据之美_如何用数据驱动用户体验</a></p>

<p> </p>

<p><strong>VO</strong>，值对象(Value Object)，<strong>PO</strong>，持久对象(Persisent Object)，它们是由一组属性和属性的get和set方法组成。从结构上看，它们并没有什么不同的地方。但从其意义和本质上来看是完全不同的。</p>

<p>１．VO是用new关键字创建，由GC回收的。</p>

<p>PO则是向数据库中添加新数据时创建，删除数据库中数据时削除的。并且它只能存活在一个数据库连接中，断开连接即被销毁。<br />
<br />
２．VO是值对象，精确点讲它是业务对象，是存活在业务层的，是业务逻辑使用的，它存活的目的就是为数据提供一个生存的地方。</p>

<p>PO则是有状态的，每个属性代表其当前的状态。它是物理数据的对象表示。使用它，可以使我们的程序与物理数据解耦，并且可以简化对象数据与物理数据之间的转换。</p>

<p>３．VO的属性是根据当前业务的不同而不同的，也就是说，它的每一个属性都一一对应当前业务逻辑所需要的数据的名称。</p>

<p>PO的属性是跟数据库表的字段一一对应的。</p>

<p>PO对象需要实现序列化接口。</p>

<p>VO是独立的Java Object。</p>

<p>PO是由Hibernate纳入其实体容器（Entity Map）的对象，它代表了与数据库中某条记录对应的Hibernate实体，PO的变化在事务提交时将反应到实际数据库中。如果一个PO与Session对应的实体容器中分离（如Session关闭后的PO），那么此时，它又会变成一个VO。</p>

<p>由Hibernate VO和Hibernate PO的概念，又引申出一些系统层次设计方面的问题。如在传统的MVC架构中，位于Model层的PO，是否允许被传递到其他层面。由于PO的更新最终将被映射到实际数据库中，如果PO在其他层面（如View层）发生了变动，那么可能会对Model 层造成意想不到的破坏。</p>

<p>因此，一般而言，应该避免直接PO传递到系统中的其他层面，一种解决办法是，通过一个VO，通过属性复制使其具备与PO相同属性值，并以其为传输媒质（实际上，这个VO被用作Data Transfer Object，即所谓的DTO），将此VO传递给其他层面以实现必须的数据传送。</p>

<p>VO经过Hibernate进行处理，就变成了PO。</p>

<p>session.save(user)中，我们把一个VO “user”传递给Hibernate的Session.save方法进行保存。在save方法中，Hibernate对其进行如下处理：</p>

<p>1．在当前session所对应的实体容器（Entity Map）中查询是否存在user对象的引用。</p>

<p>2．如果引用存在，则直接返回user对象id，save过程结束. Hibernate中，针对每个Session有一个实体容器（实际上是一个Map对象），如果此容器中已经保存了目标对象的引用，那么hibernate会认为此对象已经 与Session相关联。</p>

<p>对于save操作而言，如果对象已经与Session相关联（即已经被加入Session 的实体容器中），则无需进行具体的操作。因为之后的Session.flush过程中，Hibernate会对此实体容器中的对象进行遍历，查找出发生变化的实体，生成并执行相应的update语句。</p>

<p>3．如果引用不存在，则根据映射关系，执行insert操作。</p>

<p>a) 在我们这里的示例中，采用了native的id生成机制，因此hibernate会从数据库取得insert操作生成的id并赋予user对象的id属性。</p>

<p>b) 将user对象的引用纳入Hibernate的实体容器。</p>

<p>c) save过程结束，返回对象id.</p>

<p>而Session.load方法中，再返回对象之前，Hibernate就已经将此对象纳入其实体容器中。</p>
