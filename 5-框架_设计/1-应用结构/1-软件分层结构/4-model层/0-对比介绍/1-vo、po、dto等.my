<h1>vo、po、dto、bo、pojo、entity、mode如何区分</h1>

<p><strong>Java Bean：一种可重用组件，即“一次编写，任何地方执行，任何地方重用”。满足三个条件</strong></p>

<ul>
<li>类必须是具体的和公共的</li>
<li>具有无参构造器</li>
<li>提供一致性设计模式的公共方法将内部域或暴露成员属性</li>
</ul>

<h4>VO</h4>

<p><code>value object</code>：值对象 <br />
通常用于业务层之间的数据传递，由new创建，由GC回收 <br />
和PO一样也是仅仅包含数据而已，但应是抽象出的业务对象，可以和表对应，也可以不是</p>

<h4>PO</h4>

<p><code>persistant object</code>：持久层对象 <br />
是ORM(Objevt Relational Mapping)框架中Entity，PO属性和数据库中表的字段形成一一对应关系 <br />
VO和PO，都是属性加上属性的get和set方法；表面看没什么不同，但代表的含义是完全不同的</p>

<h4>DTO</h4>

<p><code>data transfer object</code>：数据传输对象 <br />
是一种设计模式之间传输数据的软件应用系统，数据传输目标往往是数据访问对象从数据库中检索数据 <br />
数据传输对象与数据交互对象或数据访问对象之间的差异是一个以不具任何行为除了存储和检索的数据（访问和存取器） <br />
简而言之，就是接口之间传递的数据封装 <br />
表里面有十几个字段：id，name，gender（M/F)，age…… <br />
页面需要展示三个字段：name，gender(男/女)，age <br />
DTO由此产生，一是能提高数据传输的速度(减少了传输字段)，二能隐藏后端表结构 </p>

<h4>BO</h4>

<p><code>business object</code>：业务对象 <br />
BO把业务逻辑封转为一个对象，通过调用DAO方法，结合PO或VO进行业务操作 <br />
PO组合，如投保人是一个PO，被保险人是一个PO，险种信息是一个PO等等，他们组合气来是第一张保单的BO</p>

<h4>POJO</h4>

<p><code>plian ordinary java object</code>：简单无规则java对象 <br />
纯的传统意义的java对象，最基本的Java Bean只有属性加上属性的get和set方法</p>

<p>可以额转化为PO、DTO、VO；比如POJO在传输过程中就是DTO</p>

<h4>DAO</h4>

<p><code>data access object</code>：数据访问对象 <br />
是sun的一个标准j2ee设计模式，这个模式中有个接口就是DAO，负责持久层的操作 <br />
主要用来封装对数据的访问，注意，是对数据的访问，不是对数据库的访问 </p>

<p>其他的还有model/module/domain/entity</p>

<h4>Entity</h4>

<p>实体，和PO的功能类似，和数据表一一对应，一个实体一张表</p>
