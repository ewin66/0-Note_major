<h1>java的几种对象(po,dto,dao等)</h1>

<p>j2ee中，经常提到几种对象(object)，理解他们的含义有助于我们更好的理解面向对象的设计思维。 </p>

<h2>POJO(plain old java object 是一群属性及属性设置的集合)：普通的java对象</h2>

<p>有别于特殊的java对象(含继承约束等)和EJB。POJO一般只有一系列的属性和相应的get、set方法。 </p>

<h2>PO(persistant object):持久化对象 (如hibernate)</h2>

<p>有别于POJO,<strong>必须对应数据库中的实体</strong>。一个PO对应数据库的一条记录。持久化对象的生命周期与数据库密切相关，只能存在于connection之中，连接关闭后，PO就消失了。 PO相对于POJO有诸多不同，比如<strong>PO中会有保存数据库entity状态的属性和方法</strong>。但是ORM(object-relation mapping)追求的目标是PO和POJO的一致，所以在程序员的日常开发中，都是将POJO作为PO使用，而将POJO转化为PO的功能交给hibernate等框架来实现。 </p>

<h2>DAO(data access object):数据访问对象 (如mybatis，是一群方法的集合)</h2>

<p>提供访问数据库的抽象接口，或者持久化机制，而不暴露数据库的内部详细信息。DAO提供从程序调用到持久层的匹配。 </p>

<p>就是项目中***Mapper.java 文件。</p>

<blockquote>
<p>public interface SysRoleResourceMapper {<br />
    int countByExample(SysRoleResourceExample example);</p>

<p>    int deleteByExample(SysRoleResourceExample example);</p>

<p>    int deleteByPrimaryKey(String id);</p>

<p>    int insert(SysRoleResource record);</p>

<p>    int insertSelective(SysRoleResource record);</p>

<p>    List<SysRoleResource> selectByExample(SysRoleResourceExample example);</p>

<p>    SysRoleResource selectByPrimaryKey(String id);</p>

<p>    int updateByExampleSelective(@Param("record") SysRoleResource record, @Param("example") SysRoleResourceExample example);</p>

<p>    int updateByExample(@Param("record") SysRoleResource record, @Param("example") SysRoleResourceExample example);</p>

<p>    int updateByPrimaryKeySelective(SysRoleResource record);</p>

<p>    int updateByPrimaryKey(SysRoleResource record);<br />
}</p>
</blockquote>

<h2>DTO(data transfer object):数据传输对象 (如webservice)</h2>

<p>以前被称为值对象(VO,value object)，作用仅在于在应用程序的各个子系统间传输数据，在表现层展示。与POJO对应一个数据库实体不同，DTO并不对应一个实体，可能仅存储实体的部分属性或加入符合传输需求的其他的属性。 </p>

<h2>BO(business object):业务对象</h2>

<p>主要是将业务逻辑封装为一个对象，该对象可以包含一个或多个其他对象。如，"Principal"(委托人)，有"Name","Age"等属性，同时和"Employee"(雇员)有1对多的关系，这个"Principal"就可以作为一个与业务相关的PO。</p>

<h2>分类介绍</h2>

<p>VO：value object值对象、view object视图对象 <br />
PO：持久对象 <br />
BO则是业务逻辑处理对象，我的理解是它装满了业务逻辑的处理，在业务逻辑复杂的应用中有用。 <br />
QO：查询对象  是把一些与持久性查询操作与语句放入。<br />
DAO：数据访问对象——同时还有DAO模式 <br />
DTO：数据传输对象——同时还有DTO模式</p>

<h3>POJO</h3>

<p>plain ordinary java object 简单java对象 <br />
简单无规则java对象,我个人觉得它和其他不是一个层面上的东西,VO和PO应该都属于它。<br />
个人感觉POJO是最常见最多变的对象，是一个中间对象，也是我们最常打交道的对象。 <br />
一个POJO持久化以后就是PO <br />
直接用它传递、传递过程中就是DTO <br />
直接用来对应表示层就是VO </p>

<h3>PO</h3>

<p><strong>persistant object持久对象，平时最常用的就是这个了。</strong><br />
最形象的理解就是一个PO就是数据库中的一条记录。 <br />
好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。 </p>

<h3>VO</h3>

<p>value object值对象。通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得类似DTO(数据传输对象),在web上传递. <br />
ViewObject表现层对象 <br />
主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。 </p>

<h3>BO</h3>

<p>business object:业务对象 <br />
object业务对象,封装业务逻辑的java对象,通过调用DAO方法,结合PO,VO进行业务操作; <br />
主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 <br />
比如一个简历，有教育经历、工作经历、社会关系等等。 <br />
我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。 <br />
建立一个对应简历的BO对象处理简历，每个BO包含这些PO。 <br />
这样处理业务逻辑时，我们就可以针对BO去处理。 </p>

<h3>DTO</h3>

<p>Data Transfer Object数据传输对象 <br />
主要用于远程调用等需要大量传输对象的地方。 <br />
比如我们一张表有100个字段，那么对应的PO就有100个属性。 <br />
但是我们界面上只要显示10个字段， <br />
<strong>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端， <br />
这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO </strong></p>

<h3>DAO</h3>

<p>data access object数据访问对象 <br />
object数据访问对象，<strong>此对象用于访问数据库。通常和PO结合使用，DAO中包含了各种数据库的操作方法。</strong>通过它的方法,结合PO对数据库进行相关的操作。<br />
这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要. <br />
主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO </p>

<h2>我们为什么需要DTO(数据传输对象)</h2>

<p>DTO即数据传输对象。之前不明白有些框架中为什么要专门定义DTO来绑定表现层中的数据，为什么不能直接用实体模型呢，有了DTO同时还要维护DTO与Model之间的映射关系，多麻烦。</p>

<p>然后看了这篇<a href="http://www.cnblogs.com/daxnet/archive/2010/07/07/1772584.html" target="_blank">文章</a>中的讨论部分才恍然大悟。</p>

<p>摘两个比较有意义的段落。</p>

<p>表现层与应用层之间是通过数据传输对象（DTO）进行交互的，数据传输对象是没有行为的POCO对象，它 的目的只是为了对领域对象进行数据封装，实现层与层之间的数据传递。为何不能直接将领域对象用于 数据传递？因为领域对象更注重领域，而DTO更注重数据。不仅如此，由于“富领域模型”的特点，这样 做会直接将领域对象的行为暴露给表现层。</p>

<p>需要了解的是，数据传输对象DTO本身并不是业务对象。数据传输对象是根据UI的需求进行设计的，而不 是根据领域对象进行设计的。比如，Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信息，那么CustomerDTO中也无需包含这个 Address的数据</p>

<p>简单来说Model面向业务，我们是通过业务来定义Model的。而DTO是面向界面UI，是通过UI的需求来定义的。通过DTO我们实现了表现层与Model之间的解耦，表现层不引用Model，如果开发过程中我们的模型改变了，而界面没变，我们就只需要改Model而不需要去改表现层中的东西。</p>
