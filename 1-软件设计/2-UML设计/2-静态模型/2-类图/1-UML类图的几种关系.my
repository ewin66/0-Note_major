<h1>UML类图几种关系的总结</h1>

<p><br />
    在UML类图中，常见的有以下几种关系: 泛化（Generalization）,  实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p>

<h3><strong>1. </strong><strong>泛化（</strong><strong>Generalization</strong><strong>）</strong></h3>

<p>    【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p>

<p>    【箭头指向】：带三角箭头的实线，箭头指向父类</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092740_578.gif" style="height:315px; width:202px" /> </p>

<h3><strong>2. </strong><strong>实现（</strong><strong>Realization</strong><strong>）</strong></h3>

<p>    【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p>

<p>    【箭头指向】：带三角箭头的虚线，箭头指向接口</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_47.gif" style="height:284px; width:204px" /> </p>

<h3><strong>3.</strong><strong> </strong><strong>组合</strong><strong>(Composition)</strong></h3>

<p>    【组合关系】：是整体与部分的关系，但<strong>部分不能离开整体而单独存在</strong>。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p>

<p>    组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p>

<p>【代码体现】：成员变量</p>

<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_278.gif" style="height:299px; width:218px" /></p>

<h3><strong>4. </strong><strong>聚合（</strong><strong>Aggregation</strong><strong>）</strong></h3>

<p>    【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p>

<p>        聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>

<p>    【代码体现】：成员变量</p>

<p>    【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_681.gif" style="height:319px; width:389px" /> </p>

<h3><strong>5. </strong><strong>关联（</strong><strong>Association)</strong></h3>

<p>    【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>

<p>    【代码体现】：成员变量</p>

<p>    【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_41.gif" style="height:159px; width:558px" /> </p>

<p>    上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 </p>

<p>    下图为自身关联： </p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_335.gif" style="height:180px; width:233px" /></p>

<h3><strong>6. </strong><strong>依赖</strong><strong>(Dependency)</strong></h3>

<p>    【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p>

<p>    【代码表现】：局部变量、方法的参数或者对静态方法的调用</p>

<p>    【箭头及指向】：带箭头的虚线，指向被使用者</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092741_129.gif" style="height:265px; width:196px" /> </p>

<p>各种关系的强弱顺序：</p>

<h3><strong>泛化</strong><strong> = </strong><strong>实现</strong><strong> > </strong><strong>组合</strong><strong> > </strong><strong>聚合</strong><strong> > </strong><strong>关联</strong><strong> > </strong><strong>依赖</strong> </h3>

<p>    下面这张UML图，比较形象地展示了各种类图关系：</p>

<p><img alt="UML类图几种关系的总结" src="http://static.open-open.com/lib/uploadImg/20120201/20120201092742_482.png" /></p>
