<h1>Java设计模式--工厂模式</h1>

<p>标签： <a href="http://www.csdn.net/tag/%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">工厂模式</a><a href="http://www.csdn.net/tag/%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">设计模式</a><a href="http://www.csdn.net/tag/Java" onclick="_gaq.push(['_trackEvent','function', 'onclick', 'blog_articles_tag']);" target="_blank">Java</a></p>

<h1>前言</h1>

<p>  工厂模式是一种比较常见的创建模式。有时，可能你使用了工厂模式而你却还不知道你已经使用了它。至少我感觉下面说的第一种简单工厂模式，你是已经很熟悉了。并且是经常使用的。不信，就继续向下看。</p>

<p> </p>

<h1>版权说明</h1>

<p>著作权归作者所有。<br />
商业转载请联系作者获得授权，非商业转载请注明出处。<br />
本文作者：<a href="http://blog.csdn.net/lemon_tree12138" target="_blank">Coding-Naga</a><br />
发表日期： 2016年4月14日<br />
本文链接：<a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213" target="_blank">http://blog.csdn.net/lemon_tree12138/article/details/46225213</a><br />
来源：CSDN<br />
更多内容：<a href="http://blog.csdn.net/u013761665/article/category/3171981" target="_blank">分类 >> 设计模式</a></p>

<p> </p>

<h1>简单工厂模式(Simple Factory Pattern)</h1>

<p>  从简单的工厂模式开始说起的话，我们要知道工厂模式的目的是什么？工厂模式的目的在于程序的可扩展性。而对于简单工厂模式来说，它是为了让程序有一个更好地封装，降低程序模块之间的耦合程度。</p>

<p>  对于简单的工厂模式，其实也可以将其理解成为一个创建对象的工具类。工具类的形式，可以仿造如下代码编写：</p>

<ol start="1">
<li>public class SimpleFactory {  </li>
<li>  </li>
<li>    public Object create(Class<?> clazz) {  </li>
<li>        if (clazz.getName().equals(Plane.class.getName())) {  </li>
<li>            return createPlane();  </li>
<li>        } else if (clazz.getName().equals(Broom.class.getName())) {  </li>
<li>            return createBroom();  </li>
<li>        }  </li>
<li>          </li>
<li>        return null;  </li>
<li>    }  </li>
<li>      </li>
<li>    private Broom createBroom() {  </li>
<li>        return new Broom();  </li>
<li>    }  </li>
<li>      </li>
<li>    private Plane createPlane() {  </li>
<li>        return new Plane();  </li>
<li>    }  </li>
<li>}  </li>
</ol>

<p>测试代码如下：</p>

<ol start="1">
<li>public class FactoryTest {  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        // 简单工厂模式测试  </li>
<li>        SimpleFactory simpleFactory = new SimpleFactory();  </li>
<li>        Broom broom = (Broom) simpleFactory.create(Broom.class);  </li>
<li>        broom.run();  </li>
<li>    }  </li>
<li>}  </li>
</ol>

<p>正如之前所说的，简单的工厂模式，就是去创建一个创建对象的工具类。在这个工具类里面，我们就可以进行一些其他操作，比如对象的初始化。这样就避免了把对象初始化的大量代码(如果有大量代码的话)放在构造函数里了。</p>

<p> </p>

<h1>工厂方法模式(Factory Method Pattern)</h1>

<p>之前说了简单的工厂模式，在简单的工厂模式里，我们创建了一个类似工具的类来创建相应的具体类对象。正因为其太过简单，有一点不成规范。所以，这里要对其做一些适当地封装。</p>

<p>我们来看一下工厂方法模式的定义吧。工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化哪一个。工厂方法让类把实例化推迟到了子类。（定义摘自《Head First设计模式》）</p>

<p><img alt="" src="http://img.blog.csdn.net/20151209234605088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>图-1 工厂方法模式</p>

<h2>抽象工厂：</h2>

<p>我们的抽象工厂可以是类似这样的：</p>

<ol start="1">
<li>public abstract class VehicleFactory {  </li>
<li>    public abstract Moveable create();  </li>
<li>}  </li>
</ol>

<h2>具体工厂：</h2>

<p>代码就是这样简单而美好。而它有一个具体的实现工厂类：</p>

<ol start="1">
<li>public class BroomFactory extends VehicleFactory {  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public Moveable create() {  </li>
<li>        return new Broom();  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<p>这个具体的实现工厂告诉我们，这里可以通过 create() 方法来创建一个 Broom 对象。</p>

<p>我们可以这样来理解他们的关系：有一个大的工厂它就是 VehicleFactory，VehicleFactory工厂里又有很多生产车间，其中有一个就是 BroomFactory。我们的具体产品都是通过这些生产车间来负责生产的。</p>

<h2>抽象产品接口：</h2>

<p>说到了产品，我们可以先试想一下这些具体的产品都会有什么样的性质。我们可以这样来定义它们：</p>

<ol start="1">
<li>public interface Moveable {  </li>
<li>    public void run();  </li>
<li>}  </li>
</ol>

<h2>具体产品：</h2>

<p>嗯，这是一些可以run(移动)的产品。就 BroomFactory 生产车间而言，它负责生产 Broom。这个 Broom 是具有 Moveable 的属性。那么它的实现可以这样来写：</p>

<ol start="1">
<li>public class Broom implements Moveable {  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void run() {  </li>
<li>        System.out.println("我是Broom.我在飞...");  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<h2>功能测试：</h2>

<p>我们有工厂，并且知道了工厂要生产的产品了。那么我们就来生产一个 Broom 来试试吧：</p>

<ol start="1">
<li>VehicleFactory factory = new BroomFactory();  </li>
<li>Moveable moveable = factory.create();  </li>
<li>moveable.run();  </li>
</ol>

<p>这样我就生产了一个 Broom 了。是不是 so easy？<br />
 </p>

<h1>抽象工厂模式(Abstract Factory Pattern)</h1>

<p>从上面的工厂方法中的结构图中，我们可以看到其中的具体工厂A和B是两个完全独立的。两者除了都是抽象工厂的子类，没有任何其他的交集。</p>

<p>但是，如果我们有这样一个需求：具体工厂A和B需要生产一些同类型的不同产品。那么我们就可以试试抽象工厂模式。</p>

<p>我们来看看抽象工厂模式是怎么定义的：为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。同样在下面的结构图中，我们可以更好地解释这一定义。我们的抽象工厂中包含一系列的去构造一个抽象产品的方法，而具体产品的实现则是放在了具体工厂（图中的A和B）中进行。</p>

<p><img alt="" src="http://img.blog.csdn.net/20151210003019486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>图-2 抽象工厂模式</p>

<p>现在我们看看代码中是如何实现的。</p>

<h2>抽象工厂：</h2>

<ol start="1">
<li>public abstract class AbstractFactory {  </li>
<li>  </li>
<li>    public abstract Flyable createFlyable();  </li>
<li>      </li>
<li>    public abstract Moveable createMoveable();  </li>
<li>      </li>
<li>    public abstract Writeable createWriteable();  </li>
<li>}  </li>
</ol>

<p>具体工厂：</p>

<p>从抽象工厂的代码中也可以看出，抽象工厂只是去“生产”一些抽象的东西。有点类似于底层机制的感觉。现在我们来看看具体工厂的实现。</p>

<ol start="1">
<li>public class Factory1 extends AbstractFactory {  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public Flyable createFlyable() {  </li>
<li>        return new Aircraft();  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public Moveable createMoveable() {  </li>
<li>        return new Car();  </li>
<li>    }  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public Writeable createWriteable() {  </li>
<li>        return new Pen();  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<p> </p>

<h2>抽象产品接口：</h2>

<p>在具体工厂里，我们就可以生产一些具体的产品了。就是这里的Aircraft、Car、Pen。抽象的产品接口如下。</p>

<ol start="1">
<li>public interface Flyable {  </li>
<li>  </li>
<li>    public void fly(int height);  </li>
<li>}  </li>
</ol>

<p> </p>

<h2><a name="t13"></a>具体产品：</h2>

<p>具体的产品则是要去实现这个接口，并实现其中的方法，如下：</p>

<p> </p>

<p><strong>[java]</strong> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" title="view plain">view plain</a> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="20" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="36" wmode="transparent"></embed></p>

<p> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;" title="print">print</a><a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('About',this);return false;" title="?">?</a><a href="https://code.csdn.net/snippets/1647111" target="_blank" title="在CODE上查看代码片"><img alt="在CODE上查看代码片" src="https://code.csdn.net/assets/CODE_ico.png" style="height:12px; width:12px" /></a><a href="https://code.csdn.net/snippets/1647111/fork" target="_blank" title="派生到我的代码片"><img alt="派生到我的代码片" src="https://code.csdn.net/assets/ico_fork.svg" style="height:12px; width:12px" /></a></p>

<ol start="1">
<li>public class Aircraft implements Flyable {  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public void fly(int height) {  </li>
<li>        System.out.println("我是一架客运机，我目前的飞行高度为：" + height + "千米。");  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<p> </p>

<h2><a name="t14"></a>功能测试：</h2>

<p>有了这些东西，那么我们就来好好生产一些产品吧。<br />
<strong>[java]</strong> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;" title="view plain">view plain</a> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;" title="copy">copy</a></p>

<p><embed allowscriptaccess="always" bgcolor="#ffffff" height="20" pluginspage="http://www.macromedia.com/go/getflashplayer" quality="best" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" type="application/x-shockwave-flash" width="36" wmode="transparent"></embed></p>

<p> <a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;" title="print">print</a><a href="http://blog.csdn.net/lemon_tree12138/article/details/46225213#" onclick="dp.sh.Toolbar.Command('About',this);return false;" title="?">?</a><a href="https://code.csdn.net/snippets/1647111" target="_blank" title="在CODE上查看代码片"><img alt="在CODE上查看代码片" src="https://code.csdn.net/assets/CODE_ico.png" style="height:12px; width:12px" /></a><a href="https://code.csdn.net/snippets/1647111/fork" target="_blank" title="派生到我的代码片"><img alt="派生到我的代码片" src="https://code.csdn.net/assets/ico_fork.svg" style="height:12px; width:12px" /></a></p>

<ol start="1">
<li>public class FactoryTest {  </li>
<li>  </li>
<li>    public static void main(String[] args) {  </li>
<li>        AbstractFactory factory = new Factory1();  </li>
<li>        Flyable flyable = factory.createFlyable();  </li>
<li>        flyable.fly(1589);  </li>
<li>          </li>
<li>        Moveable moveable = factory.createMoveable();  </li>
<li>        moveable.run(87.6);  </li>
<li>          </li>
<li>        Writeable writeable = factory.createWriteable();  </li>
<li>        writeable.write("Hello World.");  </li>
<li>    }  </li>
<li>}  </li>
</ol>

<p>  现在让我们来看一下，结果是否跟我们想的一样吧。</p>

<p> </p>

<p> </p>

<p><img alt="" src="http://img.blog.csdn.net/20151210090959961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>图-3 抽象工厂模式运行结果图</p>

<p> </p>

<p> </p>

<h1><a name="t15"></a>总结</h1>

<p>以上就是工厂模式的基本实现和详细说明。包括了简单工厂模式、工厂方法模式、抽象工厂模式。我们可以基于需求来选择合适的工厂模式。下面给出本文的所有代码的GitHub链接。</p>
