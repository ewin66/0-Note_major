<h1>使用thymeleaf</h1>

<h2>配置文件</h2>

<h3><strong>pom包配置</strong></h3>

<p>pom包里面添加jpa和thymeleaf的相关包引用</p>

<pre>
<code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
<strong>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;</strong>
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<h3><strong>在application.properties中添加配置</strong></h3>

<pre>
<code>spring.datasource.url=jdbc:mysql://127.0.0.1/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql= true

<strong>spring.thymeleaf.cache=false
</strong></code></pre>

<p>其中<code>propertiesspring.thymeleaf.cache=false</code>是关闭thymeleaf的缓存，不然在开发过程中修改页面不会立刻生效需要重启，生产可配置为true。</p>

<p>在项目resources目录下会有两个文件夹：static目录用于放置网站的静态内容如css、js、图片；templates目录用于放置项目使用的页面模板。</p>

<h2>启动类</h2>

<p>启动类需要添加Servlet的支持</p>

<pre>
<code>@SpringBootApplication
public class JpaThymeleafApplication <strong>extends SpringBootServletInitializer</strong> {
<strong>    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(JpaThymeleafApplication.class);
    }</strong>

    public static void main(String[] args) throws Exception {
        SpringApplication.run(JpaThymeleafApplication.class, args);
    }
}
</code></pre>

<h2>数据库层代码</h2>

<p>实体类映射数据库表</p>

<pre>
<code>@Entity
public class User {
    @Id
    @GeneratedValue
    private long id;
    @Column(nullable = false, unique = true)
    private String userName;
    @Column(nullable = false)
    private String password;
    @Column(nullable = false)
    private int age;
    ...
}
</code></pre>

<p>继承JpaRepository类会自动实现很多内置的方法，包括增删改查。也可以根据方法名来自动生成相关sql，具体可以参考：<a href="http://www.ityouknow.com/springboot/2016/08/20/springboot(%E4%BA%94)-spring-data-jpa%E7%9A%84%E4%BD%BF%E7%94%A8.html">springboot(五)：spring data jpa的使用</a></p>

<pre>
<code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {
    User findById(long id);
    Long deleteById(Long id);
}
</code></pre>

<h2>业务层处理</h2>

<p>service调用jpa实现相关的增删改查，实际项目中service层处理具体的业务代码。</p>

<pre>
<code>@Service
public class UserServiceImpl implements UserService{

    @Autowired
    private UserRepository userRepository;

    @Override
    public List&lt;User&gt; getUserList() {
        return userRepository.findAll();
    }

    @Override
    public User findUserById(long id) {
        return userRepository.findById(id);
    }

    @Override
    public void save(User user) {
        userRepository.save(user);
    }

    @Override
    public void edit(User user) {
        userRepository.save(user);
    }

    @Override
    public void delete(long id) {
        userRepository.delete(id);
    }
}
</code></pre>

<p>Controller负责接收请求，处理完后将页面内容返回给前端。</p>

<pre>
<code>@Controller
public class UserController {

    @Resource
    UserService userService;


    @RequestMapping(&quot;/&quot;)
    public String index() {
        return &quot;redirect:/list&quot;;
    }

    @RequestMapping(&quot;/list&quot;)
    public String list(Model model) {
        List&lt;User&gt; users=userService.getUserList();
        model.addAttribute(&quot;users&quot;, users);
        return &quot;user/list&quot;;
    }

<strong>    @RequestMapping(&quot;/toAdd&quot;)
    public String toAdd() {
        return &quot;user/userAdd&quot;;
    }</strong>

    @RequestMapping(&quot;/add&quot;)
    public String add(User user) {
        userService.save(user);
        <strong>return &quot;redirect:/list&quot;;</strong>
    }

<strong>    @RequestMapping(&quot;/toEdit&quot;)
    public String toEdit(Model model,Long id) {
        User user=userService.findUserById(id);
        model.addAttribute(&quot;user&quot;, user);
        return &quot;user/userEdit&quot;;
    }</strong>

    @RequestMapping(&quot;/edit&quot;)
    public String edit(User user) {
        userService.edit(user);
        return &quot;redirect:/list&quot;;
    }


    @RequestMapping(&quot;/delete&quot;)
    public String delete(Long id) {
        userService.delete(id);
        return &quot;redirect:/list&quot;;
    }
}
</code></pre>

<ul>
	<li><code>return &quot;user/userEdit&quot;;</code>&nbsp;代表会直接去resources目录下找相关的文件。</li>
	<li><code>return &quot;redirect:/list&quot;;</code>&nbsp;代表转发到对应的controller，这个示例就相当于删除内容之后自动调整到list请求，然后再输出到页面。</li>
</ul>

<h2>页面内容</h2>

<p>list列表</p>

<pre>
<code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;/&gt;
    &lt;title&gt;userList&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.css}&quot;&gt;&lt;/link&gt;
&lt;/head&gt;
&lt;body class=&quot;container&quot;&gt;
&lt;br/&gt;
&lt;h1&gt;用户列表&lt;/h1&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div class=&quot;with:80%&quot;&gt;
    &lt;table class=&quot;table table-hover&quot;&gt;
        &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;#&lt;/th&gt;
            &lt;th&gt;User Name&lt;/th&gt;
            &lt;th&gt;Password&lt;/th&gt;
            &lt;th&gt;Age&lt;/th&gt;
            &lt;th&gt;Edit&lt;/th&gt;
            &lt;th&gt;Delete&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr  th:each=&quot;user : ${users}&quot;&gt;
            &lt;th scope=&quot;row&quot; th:text=&quot;${user.id}&quot;&gt;1&lt;/th&gt;
            &lt;td th:text=&quot;${user.userName}&quot;&gt;neo&lt;/td&gt;
            &lt;td th:text=&quot;${user.password}&quot;&gt;Otto&lt;/td&gt;
            &lt;td th:text=&quot;${user.age}&quot;&gt;6&lt;/td&gt;
            &lt;td&gt;&lt;a th:href=&quot;@{/toEdit(id=${user.id})}&quot;&gt;edit&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;&lt;a th:href=&quot;@{/delete(id=${user.id})}&quot;&gt;delete&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
    &lt;div class=&quot;col-sm-2 control-label&quot;&gt;
        &lt;a href=&quot;/toAdd&quot; th:href=&quot;@{/toAdd}&quot; class=&quot;btn btn-info&quot;&gt;add&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>效果图：</p>

<p><img alt="" src="http://www.itmind.net/assets/images/2017/springboot/list.png" /></p>

<p><code>&lt;tr th:each=&quot;user : ${users}&quot;&gt;</code>&nbsp;这里会从controler层model set的对象去获取相关的内容，<code>th:each</code>表示会循环遍历对象内容。</p>

<p>其实还有其它的写法，具体的语法内容可以参考这篇文章：<a href="http://www.ityouknow.com/springboot/2016/05/01/springboot(%E5%9B%9B)-thymeleaf%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html">springboot(四)：thymeleaf使用详解</a></p>

<p>修改页面：</p>

<pre>
<code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;/&gt;
    &lt;title&gt;user&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.css}&quot;&gt;&lt;/link&gt;
&lt;/head&gt;
&lt;body class=&quot;container&quot;&gt;
&lt;br/&gt;
&lt;h1&gt;修改用户&lt;/h1&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;div class=&quot;with:80%&quot;&gt;
    &lt;form class=&quot;form-horizontal&quot;   th:action=&quot;@{/edit}&quot; th:object=&quot;${user}&quot;  method=&quot;post&quot;&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;id&quot; th:value=&quot;*{id}&quot; /&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label for=&quot;userName&quot; class=&quot;col-sm-2 control-label&quot;&gt;userName&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;userName&quot;  id=&quot;userName&quot; th:value=&quot;*{userName}&quot; placeholder=&quot;userName&quot;/&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label for=&quot;password&quot; class=&quot;col-sm-2 control-label&quot; &gt;Password&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; id=&quot;password&quot;  th:value=&quot;*{password}&quot; placeholder=&quot;Password&quot;/&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label for=&quot;age&quot; class=&quot;col-sm-2 control-label&quot;&gt;age&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;age&quot;  id=&quot;age&quot; th:value=&quot;*{age}&quot; placeholder=&quot;age&quot;/&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;
                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn btn-info&quot; /&gt;
                &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &lt;a href=&quot;/toAdd&quot; th:href=&quot;@{/list}&quot; class=&quot;btn btn-info&quot;&gt;Back&lt;/a&gt;
            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>添加页面和修改类似就不在贴代码了。</p>

<p>效果图：</p>

<p><img alt="" src="http://www.itmind.net/assets/images/2017/springboot/edit.png" /></p>

<p>这样一个使用jpa和thymeleaf的增删改查示例就完成了。</p>

<p>当然所以的示例代码都在这里：</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>
