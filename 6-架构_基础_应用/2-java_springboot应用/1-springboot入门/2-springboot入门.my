<h1>springboot 入门</h1>

<h2>什么是spring boot</h2>

<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（不知道这样比喻是否合适）。</p>

<h2>使用spring boot有什么好处</h2>

<p>其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？</p>

<ul>
	<li>1）配置web.xml，加载spring和spring mvc</li>
	<li>2）配置数据库连接、配置spring事务</li>
	<li>3）配置加载配置文件的读取，开启注解</li>
	<li>4）配置日志文件</li>
	<li>&hellip;</li>
	<li>配置完成之后部署tomcat 调试</li>
	<li>&hellip;</li>
</ul>

<p>现在非常流行微服务，如果我这个项目仅仅只是需要发送一个邮件，如果我的项目仅仅是生产一个积分；我都需要这样折腾一遍!</p>

<p>但是如果使用spring boot呢？<br />
很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务！</p>

<p>使用sping boot到底有多爽，用下面这幅图来表达</p>

<p><img alt="" src="http://www.ityouknow.com/assets/images/2016/dog.jpg" /></p>

<h2>快速入门</h2>

<p>说了那么多，手痒痒的很，马上来一发试试!</p>

<p><strong>maven构建项目</strong></p>

<ul>
	<li>1、访问http://start.spring.io/</li>
	<li>2、选择构建工具Maven Project、Spring Boot版本1.3.6以及一些工程基本信息，点击&ldquo;Switch to the full version.&rdquo;java版本选择1.7，可参考下图所示：</li>
</ul>

<p><img alt="" src="http://www.ityouknow.com/assets/images/2016/springboot1.png" /></p>

<ul>
	<li>3、点击Generate Project下载项目压缩包</li>
	<li>4、解压后，使用eclipse，Import -&gt; Existing Maven Projects -&gt; Next -&gt;选择解压后的文件夹-&gt; Finsh，OK done!</li>
</ul>

<p><strong>项目结构介绍</strong></p>

<p><img alt="" src="http://www.ityouknow.com/assets/images/2016/springboot2.png" /></p>

<p>如上图所示，Spring Boot的基础结构共三个文件:</p>

<ul>
	<li>src/main/java 程序开发以及主程序入口</li>
	<li>src/main/resources 配置文件</li>
	<li>src/test/java 测试程序</li>
</ul>

<p>另外，spingboot建议的目录结果如下：<br />
root package结构：<code>com.example.myproject</code></p>

<pre>
<code>com
  +- example
    +- myproject
      +- Application.java
      |
      +- domain
      |  +- Customer.java
      |  +- CustomerRepository.java
      |
      +- service
      |  +- CustomerService.java
      |
      +- controller
      |  +- CustomerController.java
      |
</code></pre>

<ul>
	<li>1、Application.java 建议放到根目录下面,主要用于做一些框架配置</li>
	<li>2、domain目录主要用于实体（Entity）与数据访问层（Repository）</li>
	<li>3、service 层主要是业务类代码</li>
	<li>4、controller 负责页面访问控制</li>
</ul>

<p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改<br />
最后，启动Application main方法，至此一个java项目搭建好了！</p>

<p><strong>引入web模块</strong></p>

<p>1、pom.xml中添加支持web的模块：</p>

<pre>
<code>&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
 &lt;/dependency&gt;
</code></pre>

<p>pom.xml文件中默认有两个模块：</p>

<p><code>spring-boot-starter</code>&nbsp;：核心模块，包括自动配置支持、日志和YAML；</p>

<p><code>spring-boot-starter-test</code>&nbsp;：测试模块，包括JUnit、Hamcrest、Mockito。</p>

<p>2、编写controller内容：</p>

<pre>
<code>@RestController
public class HelloWorldController {
    @RequestMapping(&quot;/hello&quot;)
    public String index() {
        return &quot;Hello World&quot;;
    }
}
</code></pre>

<p><code>@RestController</code>&nbsp;的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p>

<p>3、启动主程序，打开浏览器访问http://localhost:8080/hello，就可以看到效果了，有木有很简单！</p>

<p><strong>如何做单元测试</strong></p>

<p>打开的src/test/下的测试入口，编写简单的http请求来测试；使用mockmvc进行，利用MockMvcResultHandlers.print()打印出执行结果。</p>

<pre>
<code>@RunWith(SpringRunner.class)
@SpringBootTest
public class HelloTests {

  
    private MockMvc mvc;

    @Before
    public void setUp() throws Exception {
        mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build();
    }

    @Test
    public void getHello() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get(&quot;/hello&quot;).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().string(equalTo(&quot;Hello World&quot;)));
    }

}
</code></pre>

<p><strong>开发环境的调试</strong></p>

<p>热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：</p>

<pre>
<code> &lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
                &lt;fork&gt;true&lt;/fork&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
&lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个&ldquo;生产环境&rdquo;。</p>

<h2>总结</h2>

<p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>
