<h1>Jackson注解</h1>

<p>Jackson类库包含了很多注解，可以让我们快速建立Java类与JSON之间的关系。详细文档可以参考Jackson-Annotations。下面介绍一下常用的。</p>

<p>属性命名<br />
@JsonProperty注解指定一个属性用于JSON映射，默认情况下映射的JSON属性与注解的属性名称相同，不过可以使用该注解的value值修改JSON属性名，该注解还有一个index属性指定生成JSON属性的顺序，如果有必要的话。</p>

<p>属性包含<br />
还有一些注解可以管理在映射JSON的时候包含或排除某些属性，下面介绍一下常用的几个。</p>

<p>@JsonIgnore注解用于排除某个属性，这样该属性就不会被Jackson序列化和反序列化。</p>

<p>@JsonIgnoreProperties注解是类注解。在序列化为JSON的时候，@JsonIgnoreProperties({"prop1", "prop2"})会忽略pro1和pro2两个属性。在从JSON反序列化为Java类的时候，@JsonIgnoreProperties(ignoreUnknown=true)会忽略所有没有Getter和Setter的属性。该注解在Java类和JSON不完全匹配的时候很有用。</p>

<p>@JsonIgnoreType也是类注解，会排除所有指定类型的属性。</p>

<p>序列化相关<br />
@JsonPropertyOrder和@JsonProperty的index属性类似，指定属性序列化时的顺序。</p>

<p>@JsonRootName注解用于指定JSON根属性的名称。</p>

<h2>处理JSON</h2>

<p>简单映射<br />
我们用Lombok设置一个简单的Java类。</p>

<p>@Data<br />
@AllArgsConstructor<br />
@NoArgsConstructor<br />
public class Friend {<br />
    private String nickname;<br />
    private int age;<br />
}<br />
<br />
然后就可以处理JSON数据了。首先需要一个ObjectMapper对象，序列化和反序列化都需要它。</p>

<p>        ObjectMapper mapper = new ObjectMapper();<br />
        Friend friend = new Friend("yitian", 25);</p>

<p>        // 写为字符串<br />
        String text = mapper.writeValueAsString(friend);<br />
        // 写为文件<br />
        mapper.writeValue(new File("friend.json"), friend);<br />
        // 写为字节流<br />
        byte[] bytes = mapper.writeValueAsBytes(friend);<br />
        System.out.println(text);<br />
        // 从字符串中读取<br />
        Friend newFriend = mapper.readValue(text, Friend.class);<br />
        // 从字节流中读取<br />
        newFriend = mapper.readValue(bytes, Friend.class);<br />
        // 从文件中读取<br />
        newFriend = mapper.readValue(new File("friend.json"), Friend.class);<br />
        System.out.println(newFriend);<br />
<br />
程序结果如下。可以看到生成的JSON属性和Java类中定义的一致。</p>

<p>{"nickname":"yitian","age":25}<br />
Friend(nickname=yitian, age=25)<br />
<br />
集合的映射<br />
除了使用Java类进行映射之外，我们还可以直接使用Map和List等Java集合组织JSON数据，在需要的时候可以使用readTree方法直接读取JSON中的某个属性值。需要注意的是从JSON转换为Map对象的时候，由于Java的类型擦除，所以类型需要我们手动用new TypeReference<T>给出。</p>

<p>        ObjectMapper mapper = new ObjectMapper();</p>

<p>        Map<String, Object> map = new HashMap<>();<br />
        map.put("age", 25);<br />
        map.put("name", "yitian");<br />
        map.put("interests", new String[]{"pc games", "music"});</p>

<p>        String text = mapper.writeValueAsString(map);<br />
        System.out.println(text);</p>

<p>        Map<String, Object> map2 = mapper.readValue(text, new TypeReference<Map<String, Object>>() {<br />
        });<br />
        System.out.println(map2);</p>

<p>        JsonNode root = mapper.readTree(text);<br />
        String name = root.get("name").asText();<br />
        int age = root.get("age").asInt();</p>

<p>        System.out.println("name:" + name + " age:" + age);<br />
<br />
程序结果如下。</p>

<p>{"name":"yitian","interests":["pc games","music"],"age":25}<br />
{name=yitian, interests=[pc games, music], age=25}<br />
name:yitian age:25<br />
<br />
Jackson配置<br />
Jackson预定义了一些配置，我们通过启用和禁用某些属性可以修改Jackson运行的某些行为。详细文档参考JacksonFeatures。下面我简单翻译一下Jackson README上列出的一些属性。</p>

<p>// 美化输出<br />
mapper.enable(SerializationFeature.INDENT_OUTPUT);<br />
// 允许序列化空的POJO类<br />
// （否则会抛出异常）<br />
mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);<br />
// 把java.util.Date, Calendar输出为数字（时间戳）<br />
mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</p>

<p>// 在遇到未知属性的时候不抛出异常<br />
mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br />
// 强制JSON 空字符串("")转换为null对象值:<br />
mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);</p>

<p>// 在JSON中允许C/C++ 样式的注释(非标准，默认禁用)<br />
mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);<br />
// 允许没有引号的字段名（非标准）<br />
mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);<br />
// 允许单引号（非标准）<br />
mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);<br />
// 强制转义非ASCII字符<br />
mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);<br />
// 将内容包裹为一个JSON属性，属性名由@JsonRootName注解指定<br />
mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true);<br />
<br />
这里有三个方法，configure方法接受配置名和要设置的值，Jackson 2.5版本新加的enable和disable方法则直接启用和禁用相应属性，我推荐使用后面两个方法。</p>

<p>用注解管理映射<br />
前面介绍了一些Jackson注解，下面来应用一下这些注解。首先来看看使用了注解的Java类。</p>

<p>@Data<br />
@NoArgsConstructor<br />
@AllArgsConstructor<br />
@JsonRootName("FriendDetail")<br />
@JsonIgnoreProperties({"uselessProp1", "uselessProp3"})<br />
public class FriendDetail {<br />
    @JsonProperty("NickName")<br />
    private String name;<br />
    @JsonProperty("Age")<br />
    private int age;<br />
    private String uselessProp1;<br />
    @JsonIgnore<br />
    private int uselessProp2;<br />
    private String uselessProp3;<br />
}<br />
<br />
然后看看代码。需要注意的是，由于设置了排除的属性，所以生成的JSON和Java类并不是完全对应关系，所以禁用DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES是必要的。</p>

<p>        ObjectMapper mapper = new ObjectMapper();<br />
        //mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);<br />
        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br />
        FriendDetail fd = new FriendDetail("yitian", 25, "", 0, "");<br />
        String text = mapper.writeValueAsString(fd);<br />
        System.out.println(text);</p>

<p>        FriendDetail fd2 = mapper.readValue(text, FriendDetail.class);<br />
        System.out.println(fd2);<br />
<br />
运行结果如下。可以看到生成JSON的时候忽略了我们制定的值，而且在转换为Java类的时候对应的属性为空。</p>

<p>{"NickName":"yitian","Age":25}<br />
FriendDetail(name=yitian, age=25, uselessProp1=null, uselessProp2=0, uselessProp3=null)<br />
<br />
然后取消注释代码中的那行，也就是启用WRAP_ROOT_VALUE功能，再运行一下程序，运行结果如下。可以看到生成的JSON结果发生了变化，而且由于JSON结果变化，所以Java类转换失败（所有字段值全为空）。WRAP_ROOT_VALUE这个功能在有些时候比较有用，因为有些JSON文件需要这种结构。</p>

<p>{"FriendDetail":{"NickName":"yitian","Age":25}}<br />
FriendDetail(name=null, age=0, uselessProp1=null, uselessProp2=0, uselessProp3=null)<br />
<br />
Java8日期时间类支持<br />
Java8增加了一套全新的日期时间类，Jackson对此也有支持。这些支持是以Jackson模块形式提供的，所以首先就是注册这些模块。</p>

<p>        ObjectMapper mapper = new ObjectMapper()<br />
                .registerModule(new JavaTimeModule())<br />
                .registerModule(new ParameterNamesModule())<br />
                .registerModule(new Jdk8Module());<br />
<br />
导入类库之后，Jackson也可以自动搜索所有模块，不需要我们手动注册。</p>

<p>        mapper.findAndRegisterModules();<br />
<br />
我们新建一个带有LocalDate字段的Java类。</p>

<p>@Data<br />
@NoArgsConstructor<br />
@AllArgsConstructor<br />
@JsonRootName("Person")<br />
public class Person {<br />
    @JsonProperty("Name")<br />
    private String name;<br />
    @JsonProperty("NickName")<br />
    private String nickname;<br />
    @JsonProperty("Age")<br />
    private int age;<br />
    @JsonProperty("IdentityCode")<br />
    private String identityCode;<br />
    @JsonProperty<br />
    @JsonFormat(pattern = "yyyy-MM-DD")<br />
    private LocalDate birthday;</p>

<p>}<br />
<br />
然后来看看代码。</p>

<p>    static void java8DateTime() throws IOException {<br />
        Person p1 = new Person("yitian", "易天", 25, "10000", LocalDate.of(1994, 1, 1));<br />
        ObjectMapper mapper = new ObjectMapper()<br />
                .registerModule(new JavaTimeModule());<br />
        //mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);<br />
        String text = mapper.writeValueAsString(p1);<br />
        System.out.println(text);</p>

<p>        Person p2 = mapper.readValue(text, Person.class);<br />
        System.out.println(p2);<br />
    }<br />
<br />
运行结果如下。可以看到，生成的JSON日期变成了[1994,1,1]这样的时间戳形式，一般情况下不符合我们的要求。</p>

<p>{"birthday":[1994,1,1],"Name":"yitian","NickName":"易天","Age":25,"IdentityCode":"10000"}<br />
Person(name=yitian, nickname=易天, age=25, identityCode=10000, birthday=1994-01-01)<br />
<br />
取消注释那行代码，程序运行结果如下。这样一来就变成了我们一般使用的形式了。如果有格式需要的话，可以使用@JsonFormat(pattern = "yyyy-MM-DD")注解格式化日期显示。</p>

<p>{"birthday":"1994-01-01","Name":"yitian","NickName":"易天","Age":25,"IdentityCode":"10000"}<br />
Person(name=yitian, nickname=易天, age=25, identityCode=10000, birthday=1994-01-01)<br />
<br />
处理XML<br />
Jackson是一个处理JSON的类库，不过它也通过jackson-dataformat-xml包提供了处理XML的功能。Jackson建议我们在处理XML的时候使用woodstox-core包，它是一个XML的实现，比JDK自带XML实现更加高效，也更加安全。</p>

<p>这里有个注意事项，如果你正在使用Java 9以上的JDK，可能会出现java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException异常，这是因为Java 9实现了JDK的模块化，将原本和JDK打包在一起的JAXB实现分隔出来。所以这时候需要我们手动添加JAXB的实现。在Gradle中添加下面的代码即可。</p>

<p>compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'<br />
<br />
注解<br />
Jackson XML除了使用Jackson JSON和JDK JAXB的一些注解之外，自己也定义了一些注解。下面简单介绍一下几个常用注解。</p>

<p>@JacksonXmlProperty注解有三个属性，namespace和localname属性用于指定XML命名空间的名称，isAttribute指定该属性作为XML的属性（）还是作为子标签（）.</p>

<p>@JacksonXmlRootElement注解有两个属性，namespace和localname属性用于指定XML根元素命名空间的名称。</p>

<p>@JacksonXmlText注解将属性直接作为未被标签包裹的普通文本表现。</p>

<p>@JacksonXmlCData将属性包裹在CDATA标签中。</p>

<p>XML映射<br />
新建如下一个Java类。</p>

<p>@Data<br />
@NoArgsConstructor<br />
@AllArgsConstructor<br />
@JsonRootName("Person")<br />
public class Person {<br />
    @JsonProperty("Name")<br />
    private String name;<br />
    @JsonProperty("NickName")<br />
    //@JacksonXmlText<br />
    private String nickname;<br />
    @JsonProperty("Age")<br />
    private int age;<br />
    @JsonProperty("IdentityCode")<br />
    @JacksonXmlCData<br />
    private String identityCode;<br />
    @JsonProperty("Birthday")<br />
    //@JacksonXmlProperty(isAttribute = true)<br />
    @JsonFormat(pattern = "yyyy/MM/DD")<br />
    private LocalDate birthday;</p>

<p>}<br />
<br />
下面是代码示例，基本上和JSON的API非常相似，XmlMapper实际上就是ObjectMapper的子类。</p>

<p>        Person p1 = new Person("yitian", "易天", 25, "10000", LocalDate.of(1994, 1, 1));<br />
        XmlMapper mapper = new XmlMapper();<br />
        mapper.findAndRegisterModules();<br />
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);<br />
        mapper.enable(SerializationFeature.INDENT_OUTPUT);<br />
        String text = mapper.writeValueAsString(p1);<br />
        System.out.println(text);</p>

<p>        Person p2 = mapper.readValue(text, Person.class);<br />
        System.out.println(p2);<br />
<br />
运行结果如下。</p>

<p><Person><br />
  <Name>yitian</Name><br />
  <NickName>易天</NickName><br />
  <Age>25</Age><br />
  <IdentityCode><![CDATA[10000]]></IdentityCode><br />
  <Birthday>1994/01/01</Birthday><br />
</Person></p>

<p>Person(name=yitian, nickname=易天, age=25, identityCode=10000, birthday=1994-01-01)<br />
<br />
如果取消那两行注释，那么运行结果如下。可以看到Jackson XML注解对生成的XML的控制效果。</p>

<p><Person birthday="1994/01/01"><br />
  <Name>yitian</Name>易天<br />
  <Age>25</Age><br />
  <IdentityCode><![CDATA[10000]]></IdentityCode><br />
</Person></p>

<p>Person(name=yitian, nickname=null, age=25, identityCode=10000, birthday=1994-01-01)<br />
<br />
Spring Boot集成<br />
自动配置<br />
Spring Boot对Jackson的支持非常完善，只要我们引入相应类库，Spring Boot就可以自动配置开箱即用的Bean。Spring自动配置的ObjectMapper（或者XmlMapper）作了如下配置，基本上可以适应大部分情况。</p>

<p>禁用了MapperFeature.DEFAULT_VIEW_INCLUSION<br />
禁用了DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES<br />
禁用了SerializationFeature.WRITE_DATES_AS_TIMESTAMPS<br />
如果需要修改自动配置的ObjectMapper属性也非常简单，Spring Boot提供了一组环境变量，直接在application.properties文件中修改即可。</p>

<p>|Jackson枚举|Spring环境变量| <br />
|—–|—–| <br />
com.fasterxml.jackson.databind.DeserializationFeature|spring.jackson.deserialization.=true|false <br />
com.fasterxml.jackson.core.JsonGenerator.Feature|spring.jackson.generator.=true|false <br />
com.fasterxml.jackson.databind.MapperFeature|spring.jackson.mapper.=true|false <br />
com.fasterxml.jackson.core.JsonParser.Feature|spring.jackson.parser.=true|false <br />
com.fasterxml.jackson.databind.SerializationFeature|spring.jackson.serialization.=true|false <br />
com.fasterxml.jackson.annotation.JsonInclude.Include|spring.jackson.default-property-inclusion=always|non_null|non_absent|non_default|non_empty</p>

<p>由于Spring会同时配置相应的HttpMessageConverters，所以我们其实要做的很简单，用Jackson注解标注好要映射的Java类，然后直接让控制器返回对象即可！下面是一个Java类。</p>

<p>@JsonRootName("person")<br />
public class Person {<br />
    @JsonProperty<br />
    private String name;<br />
    @JsonProperty<br />
    private int id;<br />
    @JsonFormat(pattern = "yyyy-MM-DD")<br />
    private LocalDate birthday;</p>

<p>    public Person(String name, int id, LocalDate birthday) {<br />
        this.name = name;<br />
        this.id = id;<br />
        this.birthday = birthday;<br />
    }<br />
}<br />
<br />
然后是控制器代码。在整个过程中我们只需要引入Jackson类库，然后编写业务代码就好了。关于如何配置Jackson类库，我们完全不需要管，这就是Spring Boot的方便之处。</p>

<p>@Controller<br />
public class MainController {<br />
    private Person person = new Person("yitian", 10000, LocalDate.of(1994, 1, 1));</p>

<p>    @RequestMapping("/")<br />
    public String index() {<br />
        return "index";<br />
    }</p>

<p><br />
    @RequestMapping(value = "/json", produces = "application/json")<br />
    @ResponseBody<br />
    public Person json() {<br />
        return person;<br />
    }<br />
}<br />
<br />
进入localhost:8080/xml就可以看到对应结果了。 </p>

<p><br />
手动配置<br />
Spring Boot自动配置非常方便，但不是万能的。在必要的时候，我们需要手动配置Bean来替代自动配置的Bean。</p>

<p>@Configuration<br />
public class JacksonConfig {<br />
    @Bean<br />
    @Primary<br />
    @Qualifier("xml")<br />
    public XmlMapper xmlMapper(Jackson2ObjectMapperBuilder builder) {<br />
        XmlMapper mapper = builder.createXmlMapper(true)<br />
                .build();<br />
        mapper.enable(SerializationFeature.INDENT_OUTPUT);<br />
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);<br />
        return mapper;<br />
    }</p>

<p>    @Bean<br />
    @Qualifier("json")<br />
    public ObjectMapper jsonMapper(Jackson2ObjectMapperBuilder builder) {<br />
        ObjectMapper mapper = builder.createXmlMapper(false)<br />
                .build();<br />
        mapper.enable(SerializationFeature.INDENT_OUTPUT);<br />
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);<br />
        return mapper;<br />
    }<br />
}<br />
<br />
然后在需要的地方进行依赖注入。需要注意为了区分ObjectMapper和XmlMapper，需要使用@Qualifier注解进行标记。</p>

<p>@Controller<br />
public class MainController {<br />
    private ObjectMapper jsonMapper;<br />
    private XmlMapper xmlMapper;<br />
    private Person person = new Person("yitian", 10000, LocalDate.of(1994, 1, 1));</p>

<p>    public MainController(@Autowired @Qualifier("json") ObjectMapper jsonMapper, @Autowired @Qualifier("xml") XmlMapper xmlMapper) {<br />
        this.jsonMapper = jsonMapper;<br />
        this.xmlMapper = xmlMapper;<br />
    }<br />
<br />
以上就是Jackson类库的一些介绍，希望对大家有所帮助。项目代码在我的Github，感兴趣的同学<br />
 </p>
