<h1>实际集成redis</h1>

<p>集成redis的时候同时使用了eureka和swagger。开始时候最头痛的就是版本不匹配的问题，经过一番折腾。得到pom配置，放问末附件里了。</p>

<h2>第一步：配置依赖 pom.xml</h2>

<pre>
<parent>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version><strong>2.0.6.RELEASE</strong></version>
<relativePath/> <!-- lookup parent from repository -->
</parent></pre>

<pre>
<!-- Redis -->
<dependency>
<groupId>org.springframework.data</groupId>
<artifactId>spring-data-redis</artifactId>
<version><strong>2.0.8.RELEASE</strong></version>
</dependency>

<dependency>
<groupId>redis.clients</groupId>
<artifactId>jedis</artifactId>
<version><strong>2.9.0</strong></version>
</dependency></pre>

<h2>第二步：配置application配置文件</h2>

<pre>
spring:
redis:
database: 0
host: 127.0.0.1
port: 6379
password: password123
timeout: 5000
pool:
max-idle: 8
min-idle: 0
max-active: 8
max-wait: -1</pre>

<h2>第三步：配置类</h2>

<p>其中加错部分会收到版本的影响而写法不同。</p>

<pre>
package com.huawei.na.echo.config;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;

@Configuration
@EnableCaching
public class RedisConfig {
<strong> @Bean
public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
RedisCacheManager redisCacheManager = RedisCacheManager.builder(connectionFactory).build();
return redisCacheManager;
}</strong>

@Bean
public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
RedisTemplate<String, Object> redisTemplate = new RedisTemplate<String, Object>();
redisTemplate.setConnectionFactory(factory);
return redisTemplate;
}
@Bean
public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory factory) {
StringRedisTemplate stringRedisTemplate = new StringRedisTemplate();
stringRedisTemplate.setConnectionFactory(factory);
return stringRedisTemplate;
}
}
</pre>

<h2>第四步：service层</h2>

<pre>
package com.huawei.na.echo.service;

import com.huawei.na.echo.entity.Echo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

import java.util.concurrent.TimeUnit;

@Service
public class EchoService {
@Autowired
private StringRedisTemplate stringRedisTemplate;
@Autowired
private RedisTemplate<String, Object> redisTemplate;
public void set(String key, Echo user) {
redisTemplate.opsForValue().set(key, user);
}
public Echo get(String key) {
return (Echo) redisTemplate.boundValueOps(key).get();
}
public void setCode(String key, String code) {
stringRedisTemplate.opsForValue().set(key, code, 60, TimeUnit.SECONDS);
}
public String getCode(String key) {
return stringRedisTemplate.boundValueOps(key).get();
}
}</pre>

<h2>第五步：controller层</h2>

<pre>
package com.huawei.na.echo.web;

import com.huawei.na.echo.entity.Echo;
import com.huawei.na.echo.service.EchoService;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@RestController
@RequestMapping("rest_redis")
public class RedisController {
@Resource
private EchoService echoService;

@ApiOperation(value = "添加信息", notes = "")
@RequestMapping(value = { "/set" }, method = RequestMethod.GET)
public void set() {
echoService.set("key1", new Echo(1, "meepoguan", 26));
}

@ApiOperation(value = "获取信息", notes = "")
@RequestMapping(value = { "/get" }, method = RequestMethod.GET)
public String get() {
return echoService.get("key1").getName();
}
@GetMapping("stringset")
public void stringset() {
echoService.setCode("stringkey", "meepoguan_coke");
}
@GetMapping("stringget")
public String stringget() {
return echoService.getCode("stringkey");
}
}</pre>

<h2>第六步：数据实体</h2>

<pre>
package com.huawei.na.echo.entity;

import java.io.Serializable;

public class Echo implements Serializable {
private static final long serialVersionUID = 3221700752972709820L;
private int id;
private String name;
private int age;
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public int getAge() {
return age;
}
public void setAge(int age) {
this.age = age;
}
public Echo(int id, String name, int age) {
super();
this.id = id;
this.name = name;
this.age = age;
}
}</pre>

<h2>附件一：pom.xml</h2>

<pre>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>

<groupId>com.huawei.na</groupId>
<artifactId>naportal-echo</artifactId>
<version>0.0.1-SNAPSHOT</version>
<packaging>jar</packaging>

<name>naportal-echo</name>
<description>Demo project for Spring Boot</description>

<parent>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>2.0.6.RELEASE</version>
<relativePath/> <!-- lookup parent from repository -->
</parent>

<properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
<java.version>1.8</java.version>
<spring-cloud.version>Finchley.SR1</spring-cloud.version>
</properties>

<dependencies>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter</artifactId>
</dependency>

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-test</artifactId>
<scope>test</scope>
</dependency>

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Eureka -->
<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-eureka</artifactId>
<version>1.3.2.RELEASE</version>
</dependency>

<!-- Redis -->
<dependency>
<groupId>org.springframework.data</groupId>
<artifactId>spring-data-redis</artifactId>
<version>2.0.8.RELEASE</version>
</dependency>

<dependency>
<groupId>redis.clients</groupId>
<artifactId>jedis</artifactId>
<version>2.9.0</version>
</dependency>

<!-- swagger 配置 -->
<dependency>
<groupId>io.springfox</groupId>
<artifactId>springfox-swagger2</artifactId>
<version>2.5.0</version>
</dependency>
<dependency>
<groupId>io.springfox</groupId>
<artifactId>springfox-swagger-ui</artifactId>
<version>2.5.0</version>
</dependency>

</dependencies>

<dependencyManagement>
<dependencies>
<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-dependencies</artifactId>
<version>${spring-cloud.version}</version>
<type>pom</type>
<scope>import</scope>
</dependency>
</dependencies>
</dependencyManagement>

<build>
<plugins>
<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>
</plugin>
</plugins>
</build>
</project>
</pre>

<p> </p>

<h2>附件二：application.yml</h2>

<pre>
server:
port: 7577
spring:
application:
name: naportal-echo
datasource:
driverClassName: com.mysql.cj.jdbc.Driver
url: jdbc:mysql://localhost:3307/na_data?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8&useSSL=false
username: root
password: root
redis:
database: 0
host: 127.0.0.1
port: 6379
password: password123
timeout: 5000
pool:
max-idle: 8
min-idle: 0
max-active: 8
max-wait: -1

# Spring Cloud Client配置
eureka:
instance:
status-page-url: http://${spring.cloud.client.ip-address}:${server.port}/swagger-ui.html
instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
client:
service-url:
defaultZone: http://10.179.175.9:10001//eureka</pre>

<p> </p>
