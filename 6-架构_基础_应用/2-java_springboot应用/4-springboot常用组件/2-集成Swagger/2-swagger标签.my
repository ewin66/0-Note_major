<h1>swagger注释API详细说明和示例</h1>

<h2><strong>一：Swagger介绍</strong></h2>

<p>Swagger是当前最好用的Restful API文档生成的开源项目，通过swagger-spring项目</p>

<p>实现了与SpingMVC框架的无缝集成功能，方便生成spring restful风格的接口文档，</p>

<p>同时swagger-ui还可以测试spring restful风格的接口功能。</p>

<p>官方网站为：<a href="http://swagger.io/" rel="nofollow" target="_blank">http://swagger.io/</a></p>

<p>中文网站：<a href="http://www.sosoapi.com/" rel="nofollow" target="_blank">http://www.sosoapi.com</a></p>

<h2><strong>二：常见swagger注解一览</strong></h2>

<p>注释汇总</p>

<table>
<thead>
<tr>
<th>作用范围</th>
<th>API</th>
<th>使用位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>协议集描述</td>
<td>@Api</td>
<td>用于controller类上</td>
</tr>
<tr>
<td>协议描述</td>
<td>@ApiOperation</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td>Response集</td>
<td>@ApiResponses</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td>Response</td>
<td>@ApiResponse</td>
<td>用在 @ApiResponses里边</td>
</tr>
<tr>
<td>非对象参数集</td>
<td>@ApiImplicitParams</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td>非对象参数描述</td>
<td>@ApiImplicitParam</td>
<td>用在@ApiImplicitParams的方法里边</td>
</tr>
<tr>
<td>描述返回对象的意义</td>
<td>@ApiModel</td>
<td>用在返回对象类上</td>
</tr>
<tr>
<td>对象属性</td>
<td>@ApiModelProperty</td>
<td>用在出入参数对象的字段上</td>
</tr>
</tbody>
</table>

<p>例子： 例子包括单个字段参数 和对象参数</p>

<h2><strong>三、API详细说明</strong></h2>

<p>@Api：用在请求的类上，表示对类的说明<br />
    tags="说明该类的作用，可以在UI界面上看到的注解"<br />
    value="该参数没什么意义，在UI界面上也看到，所以不需要配置"</p>

<p>@ApiOperation：用在请求的方法上，说明方法的用途、作用<br />
    value="说明方法的用途、作用"<br />
    notes="方法的备注说明"</p>

<p>@ApiParam：单个参数描述<br />
        name：参数名<br />
        value：参数的汉字说明、解释<br />
        required：参数是否必须传 </p>

<p>@ApiImplicitParams：用在请求的方法上，表示一组参数说明<br />
    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<br />
        name：参数名<br />
        value：参数的汉字说明、解释<br />
        required：参数是否必须传<br />
        paramType：参数放在哪个地方<br />
            · header --> 请求参数的获取：@RequestHeader<br />
            · query --> 请求参数的获取：@RequestParam<br />
            · path（用于restful接口）--> 请求参数的获取：@PathVariable<br />
            · body（不常用）<br />
            · form（不常用）    <br />
        dataType：参数类型，默认String，其它值dataType="Integer"       <br />
        defaultValue：参数的默认值<br />
 <br />
@ApiResponses：用在请求的方法上，表示一组响应<br />
    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br />
        code：数字，例如400<br />
        message：信息，例如"请求参数没填好"<br />
        response：抛出异常的类<br />
 <br />
@ApiModel：用于响应类上，表示一个返回响应数据的信息<br />
            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br />
            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br />
    @ApiModelProperty：用在属性上，描述响应类的属性</p>

<p> </p>

<h2><strong>四、关键代码和实际例子</strong></h2>

<h3><strong>示例1：</strong></h3>

<h4>1、@Api：用在请求的类上，说明该类的作用</h4>

<p>@Api：用在请求的类上，说明该类的作用<br />
     tags="说明该类的作用"<br />
     value="该参数没什么意义，所以不需要配置"</p>

<p>示例：</p>

<p>@Api(tags="APP用户注册Controller")</p>

<h4>2、@ApiOperation：用在请求的方法上，说明方法的作用</h4>

<p>@ApiOperation："用在请求的方法上，说明方法的作用"<br />
    value="说明方法的作用"<br />
    notes="方法的备注说明"</p>

<p>示例：</p>

<p>@ApiOperation( value = "编辑公告", notes = "编辑公告", httpMethod = "POST" )<br />
    @RequestMapping( value = "/edit", method = RequestMethod.POST )<br />
    public RequestResult edit(<br />
            @ApiParam(name = "title", value = "公告标题", required = true) @RequestParam("title") String title,<br />
            @ApiParam(name = "content", value = "公告内容", required = true) @RequestParam("content") String content){}</p>

<h4>3、@ApiImplicitParams：用在请求的方法上，包含一组参数说明</h4>

<p>     @ApiImplicitParams：用在请求的方法上，包含一组参数说明<br />
     @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息       <br />
        name：参数名<br />
        value：参数的汉字说明、解释<br />
        required：参数是否必须传<br />
        paramType：参数放在哪个地方<br />
            · header --> 请求参数的获取：@RequestHeader<br />
            · query --> 请求参数的获取：@RequestParam<br />
            · path（用于restful接口）--> 请求参数的获取：@PathVariable<br />
            · body（不常用）<br />
            · form（不常用）    <br />
        dataType：参数类型，默认String，其它值dataType="Integer"       <br />
        defaultValue：参数的默认值</p>

<p>示列：</p>

<p>@ApiImplicitParams({<br />
    @ApiImplicitParam(name="mobile",value="手机号",required=true,paramType="form"),<br />
    @ApiImplicitParam(name="password",value="密码",required=true,paramType="form"),<br />
    @ApiImplicitParam(name="age",value="年龄",required=true,paramType="form",dataType="Integer")<br />
})</p>

<h4>4、@ApiResponses：用于请求的方法上，表示一组响应</h4>

<p>     @ApiResponses：用于请求的方法上，表示一组响应<br />
     @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br />
        code：数字，例如400<br />
        message：信息，例如"请求参数没填好"<br />
        response：抛出异常的类<br />
示例：</p>

<p>@ApiOperation(value = "select1请求",notes = "多个参数，多种的查询参数类型")<br />
@ApiResponses({<br />
    @ApiResponse(code=400,message="请求参数没填好"),<br />
    @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")<br />
})</p>

<h4>5、@ApiModel：用于响应类上，表示一个返回响应数据的信息</h4>

<p>     @ApiModel：用于响应类上，表示一个返回响应数据的信息<br />
            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br />
            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br />
     @ApiModelProperty：用在属性上，描述响应类的属性</p>

<p>示例:</p>

<p>import io.swagger.annotations.ApiModel;<br />
import io.swagger.annotations.ApiModelProperty;<br />
 <br />
import java.io.Serializable;<br />
 <br />
@ApiModel(description= "返回响应数据")<br />
public class RestMessage implements Serializable{<br />
 <br />
    @ApiModelProperty(value = "是否成功")<br />
    private boolean success=true;<br />
    @ApiModelProperty(value = "返回对象")<br />
    private Object data;<br />
    @ApiModelProperty(value = "错误编号")<br />
    private Integer errCode;<br />
    @ApiModelProperty(value = "错误信息")<br />
    private String message;<br />
 <br />
    /* getter/setter */<br />
}</p>

<h3><strong>示例2：</strong></h3>

<pre>
package com.chehejia.vl.api;

import com.chehejia.boot.starter.cache.CacheManager;
import com.chehejia.framework.beans.model.Response;
import com.chehejia.starter.ois.model.response.ResponseModel;
import com.chehejia.starter.ois.service.OisClient;
import com.chehejia.starter.ois.utils.OisUtil;
import com.chehejia.vl.domain.VlTransitionPlan;
import com.chehejia.vl.domain.VlTransitionPlanItem;
import com.chehejia.vl.enums.BillType;
import com.chehejia.vl.enums.VLCacheKey;
import com.chehejia.vl.model.AppLogInfo;
import com.chehejia.vl.model.StatusCode;
import com.chehejia.vl.model.transitionPlan.*;
import com.chehejia.vl.service.TransitionPlanMiniService;
import com.chehejia.vl.utils.EmptyUtil;
import com.chehejia.vl.utils.FastJsonUtils;
import com.chehejia.vl.utils.SequenceUtil;
import com.google.common.collect.Lists;
import io.swagger.annotations.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.OffsetDateTime;
<em>
</em>@Slf4j
@RestController
@RequestMapping("/plan")
public class TransitionPlanApi {

//swagger默认初始化参数,必须定义成常量
class Contants{
private Contants(){};
public static final String <em>planCode </em>= "E10320180525154714001";
public static final String <em>vin1 </em>= "10000000000001999";
public static final String <em>vin2 </em>= "10000000000001998";
public static final String <em>valCode </em>= "1234";
}


@ApiOperation("接口描述：[运输端]校验计划对应的操作码是否正确")
@ApiResponses({
@ApiResponse(code = 0, message = "校验成功"),
@ApiResponse(code = 20001, message = "校验失败"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),})
@ApiImplicitParams({
@ApiImplicitParam(name = "planCode", value = "计划编码", required = true, defaultValue = Contants.<em>planCode</em>),
@ApiImplicitParam(name = "valCode", value = "验证码", required = true, defaultValue = Contants.<em>valCode</em>),
})
@RequestMapping(value = "/validate/{planCode}/{valCode}", method = RequestMethod.<em>POST</em>)
public Response<Boolean> valiOperate(@PathVariable String planCode, @ApiParam("验证码") @PathVariable String valCode) {

}

@ApiOperation("接口描述：扫描车辆定位计划与车辆验车")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"), @ApiResponse(code = 20001, message = "查询不到数据"),
@ApiResponse(code = 40001, message = "参数不合法"), @ApiResponse(code = 50001, message = "系统异常"),
})
@ApiImplicitParams({
@ApiImplicitParam(name = "vin", value = "VIN", required = true, defaultValue = Contants.<em>vin1</em>),
})
@RequestMapping(value = "/scanPlan/{vin}", method = RequestMethod.<em>POST</em>)
public Response<VV3> scanPlan(@PathVariable String vin) {

}

@ApiOperation("接口描述：扫描车辆进行验车")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"),
@ApiResponse(code = 20001, message = "查询不到数据"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),})
@ApiImplicitParams({
@ApiImplicitParam(name = "planCode", value = "计划编码", required = true, defaultValue = Contants.<em>planCode</em>),
@ApiImplicitParam(name = "vin", value = "VIN", required = true, defaultValue = Contants.<em>vin1</em>),
})
@RequestMapping(value = "/scan/{planCode}/{vin}", method = RequestMethod.<em>POST</em>)
public Response<VV3> valiVin(@PathVariable String planCode, @PathVariable String vin) {

}

@ApiOperation("接口描述：单独上传质损图片")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),
})
@ApiImplicitParams({
@ApiImplicitParam(name = "planCode", value = "计划编码", required = true, defaultValue = Contants.<em>planCode</em>),
@ApiImplicitParam(name = "vin", value = "VIN", required = true, defaultValue = Contants.<em>vin1</em>),
})
@RequestMapping(value = "/upload-damage/{planCode}/{vin}", method = RequestMethod.<em>POST</em>)
public Response<String> uploadDamageImg(@PathVariable String planCode, @PathVariable String vin, HttpServletRequest request) {

}

@ApiOperation("接口描述：确认质损（下一步）")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"),
@ApiResponse(code = 20001, message = "执行失败"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),
})
@ApiImplicitParams({
@ApiImplicitParam(name = "planCode", value = "计划编号", required = true, defaultValue = Contants.<em>planCode</em>),
@ApiImplicitParam(name = "vin", value = "vin", required = true, defaultValue = Contants.<em>vin1</em>),
@ApiImplicitParam(name = "eleQuity", value = "电量", defaultValue = "100"),
@ApiImplicitParam(name = "mileage", value = "公里数", defaultValue = "50"),
@ApiImplicitParam(name = "otherDesc", value = "其他备注", defaultValue = "测试备注信息"),
@ApiImplicitParam(name = "damageInfo.veryBad", value = "是否严重事故", defaultValue = "true"),
@ApiImplicitParam(name = "damageInfo.badPoint1", value = "质损部位1", defaultValue = "MLT2/MLB3"),
@ApiImplicitParam(name = "damageInfo.badPoint2", value = "质损部位3", defaultValue = "MLT2/MLB3"),
@ApiImplicitParam(name = "damageInfo.badPoint3", value = "质损部位3", defaultValue = "MLT2/MLB3"),
@ApiImplicitParam(name = "damageInfo.imgs", value = "图片id集合", defaultValue = "imageCode1,imageCode2,imageCode3"),
@ApiImplicitParam(name = "damageInfo.damageDesc", value = "质损描述", defaultValue = "质损测试数据描述"),
})
@RequestMapping(value = "/confirm-damage", method = RequestMethod.<em>POST</em>)
public Response<Boolean> confirmDamageImg( DamageInfoAndDes damageInfoAndDes) {

}

@ApiOperation("接口描述：查询计划列表")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),})
@ApiImplicitParams({
@ApiImplicitParam(name = "planType", value = "计划类型(10提车20交车)", required = true, defaultValue = "10"),
@ApiImplicitParam(name = "date", value = "日期(格式：yyyy-MM-dd)"),
@ApiImplicitParam(name = "dwCode", value = "道位编码"),
@ApiImplicitParam(name = "carNo", value = "车牌号"),
})
@RequestMapping(value = "/query", method = RequestMethod.<em>POST</em>)
public Response<List<TransionPlanInfo>> queryPlan(TransionPlanQuery query) {
}

@ApiOperation("接口描述：查看计划详情")
@ApiResponses({
@ApiResponse(code = 0, message = "执行成功"),
@ApiResponse(code = 40001, message = "参数不合法"),
@ApiResponse(code = 50001, message = "系统异常"),})
@ApiImplicitParams({
@ApiImplicitParam(name = "planCode", value = "计划编码", required = true, defaultValue = Contants.<em>planCode</em>),
})
@RequestMapping(value = "/detail/{planCode}", method = RequestMethod.<em>GET</em>)
public Response<TransionPlanInfoAndVin> lookPlanDetail(@PathVariable String planCode) {
}
}
</pre>

<h2><strong>五、易混淆点</strong></h2>

<h3><a href="https://www.cnblogs.com/xu-lei/p/7803062.html" id="cb_post_title_url">@ApiParam @PathVariable @RequestParam三者区别</a></h3>

<p>1.@ApiParam 顾名思义，是注解api的参数，也就是用于swagger提供开发者文档，文档中生成的注释内容。</p>

<pre>
@ApiOperation( value = "编辑公告", notes = "编辑公告", httpMethod = "POST" )
@RequestMapping( value = "/edit", method = RequestMethod.POST )
public RequestResult edit(
@ApiParam(name = "title", value = "公告标题", required = true) @RequestParam("title") String title,
@ApiParam(name = "content", value = "公告内容", required = true) @RequestParam("content") String content){</pre>

<p>2.@RequestParam,是获取前端传递给后端的参数，可以是get方式，也可以是post方式。其中如果前端传递的参数和后端你接受的参数起的名字字段是一致的可以省略不写，也可以直接写@RequestParam String title,如果不一致一定要完整写，不然获取不到，如下面的bis_key就必须写。</p>

<pre>
@ApiOperation( value = "编辑公告", notes = "编辑公告", httpMethod = "POST" )
@RequestMapping( value = "/edit", method = RequestMethod.POST )
public RequestResult edit(
@ApiParam(name = "bis_key", value = "bis_key", required = true) String bisKey,
@ApiParam(name = "title", value = "公告标题", required = true) @RequestParam String title,
@ApiParam(name = "content", value = "公告内容", required = true) String content）{}</pre>

<p>3.@PathVariable，是获取get方式，url后面参数，进行参数绑定</p>

<pre>
@ApiOperation(value = "删除公告", notes = "删除公告", httpMethod = "POST")
@RequestMapping(value = "/delete/{bisKey}", method = RequestMethod.POST)
public RequestResult remove(@ApiParam(name = "bisKey", value = "需要删除的公告ids", required = true) @PathVariable String bisKey) {</pre>
