<p>看结果</p>

<p>可见在同步日志模式下, Logback的性能是最糟糕的.<br />
而log4j2的性能无论在同步日志模式还是异步日志模式下都是最佳的.<br />
其根本原因在于log4j2使用了LMAX, 一个无锁的线程间通信库代替了, logback和log4j之前的队列. 并发性能大大提升, 下期文章将研究一下LMAX, 到底是什么</p>

<p>实用信息<br />
关于log4j2的新特性<br />
丢数据这种情况少，可以用来做审计功能。而且自身内部报的exception会被发现，但是logback和log4j不会。<br />
log4j2使用了disruptor技术，在多线程环境下，性能高于logback等10倍以上。<br />
(garbage free）之前的版本会产生非常多的临时对象，会造成GC频繁，log4j2则在这方面上做了优化，减少产生临时对象。尽可能少的GC<br />
利用插件系统，使得扩展新的appender,filter,layout等变得容易，log4j不可以扩展 插件？？？？<br />
因为插件系统的简单性，所以在配置的时候，可以不用具体指定所要处理的类型。class<br />
可以自定义level<br />
Java 8 lambda support for lazy logging<br />
Support for Message objects<br />
对filter的功能支持的更强大<br />
系统日志(Syslog)协议supports both TCP and UDP<br />
利用jdk1.5并发的特性，减少了死锁的发生。<br />
Socket LogEvent SerializedLayout<br />
支持kafka queue<br />
 </p>
