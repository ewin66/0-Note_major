<h1>slf4j+log4j2基础教程（拿来即用教程）</h1>

<p>log4j2是apache著名日志框架log4j的升级，参考logback架构，并且修复了logback固有的一些问题。是一个很好的日志框架。我看了网上一些关于log4j2的教程，要么是光讲概念，要么是只贴代码，适合新手入门的教程比较少。本篇教程的目标是给那些初次使用log4j2的人一个快速入门、配置代码拿来就可用的指导。<br />
log4j2官方文档大而全、有很多概念，往往给一个问题提供多种不同的解决方案。我结合自身使用体验，对工作开发中常用的日志配置提供我个人认为最好的那<strong>一种</strong>配置，只介绍<strong>一种</strong>配置，拿来即用，简单方便。</p>

<hr />
<h4><strong>一、maven配置dependency</strong></h4>

<ul>
<li>-log4j2提供了bom，bom配置如下，官方链接：<a href="http://logging.apache.org/log4j/2.x/maven-artifacts.html" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/maven-artifacts.html">http://logging.apache.org/log4j/2.x/maven-artifacts.html</a></li>
</ul>

<pre>
<code><dependencyManagement>
<dependencies>
<dependency>
<groupId>org.apache.logging.log4j</groupId>
<artifactId>log4j-bom</artifactId>
<version>2.11.1</version>
<scope>import</scope>
<type>pom</type>
</dependency>
</dependencies>
</dependencyManagement>
</code></pre>

<ul>
<li>-dependency依赖配置如下</li>
</ul>

<pre>
<code>	<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
<dependency>
<groupId>org.slf4j</groupId>
<artifactId>slf4j-api</artifactId>
<version>1.7.25</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
<dependency>
<groupId>org.apache.logging.log4j</groupId>
<artifactId>log4j-core</artifactId>
<scope>runtime</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl -->
<dependency>
<groupId>org.apache.logging.log4j</groupId>
<artifactId>log4j-slf4j-impl</artifactId>
<scope>runtime</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-web -->
<dependency>
<groupId>org.apache.logging.log4j</groupId>
<artifactId>log4j-web</artifactId>
<scope>runtime</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/com.lmax/disruptor -->
<dependency>
<groupId>com.lmax</groupId>
<artifactId>disruptor</artifactId>
<version>3.4.2</version>
<scope>runtime</scope>
</dependency>
</code></pre>

<blockquote>
<p><strong>注意</strong>：截止2018年11月2日，slf4j的最新版本是“1.8.0-beta2”，但是不能将上述配置中的slf4j版本改成“1.8”大版，因为“1.8”大版的slf4j修改了logger的绑定机制，需要日志框架做修改来适配“1.8”大版的slf4j，但是截止目前即使是最新版“2.11.1”的log4j也还没有做适配。所以如果将上述配置中的slf4j的版本改成“1.8”大版将会在<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" target="_blank">服务器</a>启动时看到如下警告，导致日志无法被正常记录：<br />
SLF4J: No SLF4J providers were found.<br />
SLF4J: Defaulting to no-operation (NOP) logger implementation<br />
SLF4J: See <a href="http://www.slf4j.org/codes.html#noProviders" rel="nofollow" target="_blank">http://www.slf4j.org/codes.html#noProviders</a> for further details.<br />
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions prior to 1.8.<br />
SLF4J: Ignoring binding found at [jar:file:/C:/dev/deploy-dir/app/learn/learn/WEB-INF/lib/log4j-slf4j-impl-2.11.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]<br />
SLF4J: See <a href="http://www.slf4j.org/codes.html#ignoredBindings" rel="nofollow" target="_blank">http://www.slf4j.org/codes.html#ignoredBindings</a> for an explanation.<br />
日后估计log4j会做适配，目前还是用“1.7”大版的slf4j搭配“2.11”大版的log4j吧。</p>
</blockquote>

<p>slf4j不必多说，开发必备，实际工作开发中使用slf4j提供的api进行编码。log4j-core和log4j-slf4j-impl的scope配置为runtime，因为这两个包的代码只在运行时使用，实际编码中不会用到。配置com.lmax.disruptor依赖是因为log4j2异步logger需要，不必深究，只需知道如果使用log4j2的异步logger需要这个包就行了。官方原文：<a href="http://logging.apache.org/log4j/2.x/manual/async.html" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/manual/async.html">LMAX Disruptor technology. Asynchronous Loggers internally use the Disruptor, a lock-free inter-thread communication library, instead of queues, resulting in higher throughput and lower latency.</a>log4j-web包是为了解决web环境下关闭服务器时可能会出现的log4j线程无法及时关闭的warn，估计很多人都碰到过这个警告，但是没在意过，解决方式很简单，导入log4j-web这个依赖就行了。<br />
上面的配置直接粘贴，在pom.xml中复制就行了。</p>

<h4><strong>二、log4j2基础概念</strong></h4>

<ul>
<li>-log4j2的配置文件为log4j2.xml（其实有多个可选的文件名，但是我个人只使用也建议使用这个，这个文件名是固定的，不必深究）。<br />
 </li>
<li>-logger是日志记录器，代码中使用logger来记录日志。log4j2有两种类型的logger，普通的同步logger（这个logger跟log4j基本是一样的）和新型的asyncLogger（异步logger，上面配置的com.lmax.disruptor就是为这个准备的）。官方文档中推荐，如果日志记录代码是正常代码逻辑的一部分或者程序运行在单核单线程cpu上（这种情况使用多线程就是傻），推荐使用普通logger，如果日志记录代码只是为了记录一些不怎么重要的日志，则推荐使用asyncLogger（异步logger，效能可能会有几十倍的提高），官方原文如下：<a href="http://logging.apache.org/log4j/2.x/manual/async.html#Trade-offs" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/manual/async.html#Trade-offs">if logging is part of your business logic, for example if you are using Log4j as an audit logging framework, we would recommend to synchronously log those audit messages.</a><br />
 </li>
<li>-appender是日志输出的目标，也就是你的日志输出到哪里，一般情况下我们把日志输出到console或者文件中，官方文档有很多类型的appender，可以输出到数据库或者其他地方。本教程我们只介绍输出到console（开发时常用）和文本中（生产环境常用）。log4j2官方文档介绍说appender也分普通appender和asyncAppender（异步appender），但是异步appender对效能提升微乎其微，而且可能导致问题，所以可以忽略，官方原文如下：<a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#AsyncAppender" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/manual/appenders.html#AsyncAppender">By default, AsyncAppender uses java.util.concurrent.ArrayBlockingQueue which does not require any external libraries. Note that multi-threaded applications should exercise care when using this appender as such: the blocking queue is susceptible to lock contention and our tests showed performance may become worse when more threads are logging concurrently. </a><br />
 </li>
<li>-pattern是日志输出格式，一般情况下直接去网上找一个别人调整好的，常用的就行了，官方默认的为[%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n](javascript:😉<br />
 </li>
<li>-filter是过滤器，满足过滤器条件的日志被记录，不满足过滤器条件的日志会直接被log4j2忽略掉，这个不好说清楚，建议看文档：<a href="http://logging.apache.org/log4j/2.x/manual/filters.html" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/manual/filters.html">http://logging.apache.org/log4j/2.x/manual/filters.html.</a>这个东西在某些情况下很有用，但是这个某些情况不常见，所以文档稍微看看知道是个什么东西就行了。</li>
</ul>

<h4><strong>三、一个完整的配置的例子</strong></h4>

<pre>
<code><?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN" monitorInterval="5">
<!-- 将一些常用值提取出来，然后在文件的其他部分通过${}的形式引用，这些值可以随便定义 -->
<Properties>
<!-- 定义日志文件根目录 -->
<Property name="logDir" value="logs123" />
<!-- 定义日志的通用格式 -->
<Property name="genericPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
<!-- 定义日志分卷文件通用文件名形式 -->
<Property name="genericFilePattern" value="%d{yyyy-MM-dd}-%i" />
</Properties>
<!-- appender们的定义 -->
<Appenders>
<!-- 定义一个console类型定定义，如果需要，可以以这个为原型粘贴复制修改再定义适合自己的 -->
<Console name="consoleAppender" target="SYSTEM_OUT">
<PatternLayout pattern="${genericPattern}" />
</Console>
<!-- 定义一个文件appender，如果需要，可以以这个为原型粘贴复制修改再定义适合自己的，该appender的详细解释会在教程接下来的部分给出 -->
<RollingRandomAccessFile name="rollingRandomAccessFileAppender" fileName="${logDir}/app.log"
filePattern="${logDir}/app-${genericFilePattern}.log.zip" append="true">
<PatternLayout pattern="${genericPattern}" />
<Policies>
<TimeBasedTriggeringPolicy interval="1" />
<SizeBasedTriggeringPolicy size="100 MB" />
</Policies>
<DefaultRolloverStrategy max="1000000" compressionLevel="9" />
</RollingRandomAccessFile>
</Appenders>
<!-- 定义logger们 -->
<Loggers>
<!-- 定义根logger，根logger是必须的，这里我把根logger定义为异步的，也可为定义为普通的同步的，但是注意在同步根logger和异步根logger中只能存在一个，不能两个都配置 -->
<asyncRoot level="info">
<AppenderRef ref="consoleAppender" />
</asyncRoot>
<!-- 普通的根logger，注意，跟上面的异步跟root同时只能存在一个 -->
<!-- <Root level="trace"> <AppenderRef ref="consoleAppender" /> </Root> -->
<!-- 定义一个普通的logger，这里我定义为异步的 -->
<asyncLogger name="com.foo.Bar" level="info" additivity="false">
<AppenderRef ref="consoleAppender" />
<AppenderRef ref="rollingRandomAccessFileAppender" />
</asyncLogger>
<!-- 定义一个普通的logger -->
<Logger name="com.foo.Bar.common" level="info" additivity="false">
<AppenderRef ref="consoleAppender" />
<AppenderRef ref="rollingRandomAccessFileAppender" />
</Logger>
</Loggers>
</Configuration>
</code></pre>

<p>测试用的java代码</p>

<pre>
<code>package com.szq.learn.log4j2learn;

import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {

/**
* 这里通过logger的名字来获取logger，LoggerFactory和Logger都是slf4j包里的，
* 没有用到log4j2的任何类，这就是把log4j2的scope配置为runtime的原因
*/
private static Logger logger = LoggerFactory.getLogger("com.foo.Bar");

public static void main(String[] args) throws Exception {
System.out.printf("\n-- START %s\n", LocalDateTime.now());
try {
while (true) {
logger.info("show something " + LocalDateTime.now());
}
} finally {
System.out.printf("\n-- DONE %s\n", LocalDateTime.now());
}
}
}
</code></pre>

<h4><strong>四、上述完整配置例子的详解</strong></h4>

<p>log4j2的官网有很多配置可选，但是平常工作开发中大多用不到。开头已经说过，只介绍**"一种"<strong>配置，秉承这种思想，我解释下</strong>“三”<strong>中的配置示例。<br />
<br />
其实</strong>“三”**的配置示例可以当做模板来用，粘贴复制再修改修改就可以满足大部分工作开发中的需求。</p>

<ol>
<li>首先看<<strong>Configuration</strong>>元素，log4j2框架自己也有一系列日志，比如框架初始化日志或者初始化失败日志什么的。<strong>status</strong>表示应该记录哪个等级的log4j2自身的日志，一般情况下<strong>WARN</strong>就行，如果出现了了<strong>WARN</strong>等级的日志，说明你的log4j2框架的用法有问题，就要及时排查排查了。log4j2支持自动更新配置文件，也就是说不用重启服务器，直接改log4j2的配置文件，它就能自动重新加载，起作用，完全碾压log4j，<strong>monitorInterval</strong>表示应该多久检测一次更新，单位：<strong>秒</strong>，默认5秒。</li>
<li>再看<<strong>Properties</strong>>，它里面包含<<strong>Property</strong>>，就是把一些通用的值提出来，在配置的其他地方已${}的形式引用而已。</li>
<li><<strong>Appenders</strong>>元素，官方文档表示有还有一种异步appender，但是效能提升及其有限，而且在多线程情况下有可能出现问题，所以不建议使用，本教程不讨论那个。官方文档有很多种类型的appender，但是平常工作中常用的也就是console类型和file类型的，console类型appender输出到控制台，方便开发调试用，file类型appender类型输出到文件，用在生产环境记录日志。console类型appender没得选，只有这一种，结构很简单，不用多说。file类型appender有多种类型，本教程建议使用<<strong>RollingRandomAccessFile</strong>>类型，因为这种类型的fileAppender有缓存功能，效率比RollingFile高（网上很多教程都是几年前的了，用的还是RollingFile），所以只讨论这种类型。fileName表示日志文件名，filePattern表示日志文件分卷的分卷文件的文件名（日志文件分卷就是某些情况，比如每天生成一个文件，或者单个日志文件超过100MB时自动分成多个日志文件），filePattern如果以.zip结尾表示启用压缩功能，那些分卷好的日志文件会被压缩，某些情况会很有用。如果不想启用压缩功能，就不要以.zip或者其他压缩文件后缀结尾。PatternLayout表示日志格式，不必多说。Policies是触发日志文件分卷的条件。TimeBasedTriggeringPolicy表示按照时间来分卷，interval表示时间间隔，时间单位有点诡异，不是明确设置的，而是从filePattern推导的，是filePattern中最小的时间的单位，比如上述示例中的filePattern为%d{yyyy-MM-dd}，这个日期时间格式必须符合<a href="http://blog.csdn.net/lianjunzongsiling/article/details/78848873" rel="nofollow" target="_blank" title="http://blog.csdn.net/lianjunzongsiling/article/details/78848873">java日期时间规范</a>，其中最小日期单位为dd，也就是天，推导出来也就是1天分一个日志文件出来，如果filePattern的配置为%d{yyyy-MM-dd HH:mm}，最小单位是mm，也就是分钟，那就是1分钟分一个日志文件出来，如果interval为3，那就是3天一个日志文件和3分钟一个日志文件，推导规则就是如此。SizeBasedTriggeringPolicy表示日志文件大小超过多大时对其进行分卷，size表示日志大小，单位推荐写MB，数值为大于0的整数，100 MB中间有个空格，推荐写上。DefaultRolloverStrategy表示分卷策略，只需要记住这个必须要配就行了，不必深究，max表示最多可以有多少个分卷文件，默认为7个，超出7个的日志分卷文件将被删除，也就是说可能导致重要日志丢失，所以该参数配大点，100000应该够了，compressionLevel表示压缩等级，值为0-9，只在filePattern以.zip结尾，也就是说压缩格式为zip时起作用，这也是为什么前面说建议压缩格式为zip。0表示不压缩，只打包为zip格式，9表示最高压缩比（个人测试1MB日志文件某些情况下能压缩到4KB左右）。如果不想启用压缩功能，前面说过，日志filePattern不以.zip结尾就行了，这时compressionLevel是不起作用的。</li>
<li>表示配置各种logger的地方。根logger是必需的，可配置为普通的，也可配置问异步的，但是只能配置一种，不能两种都配置。其他的普通logger配置很简单，不必多说，可根据需要配置为普通logger或者异步logger，至于选择异步的还是普通的，教程前半部分已经说过，如果日志记录代码跟业务逻辑代码是有关系的，最好选普通logger，如果真的只是单纯为了记个日志，建议配置异步logger。根logger没有additivity属性，普通logger和异步logger有additivity属性。additivity设置为false是为了防止当前logger向父logger发送日志，导致日志被重复记录。至于log4j2的logger的父子关系，可以看这里<a href="http://logging.apache.org/log4j/2.x/manual/architecture.html" rel="nofollow" target="_blank" title="http://logging.apache.org/log4j/2.x/manual/architecture.html">http://logging.apache.org/log4j/2.x/manual/architecture.html</a>。总的来说就是类似java体系的父子关系，根logger相当于是java体系中的Object类，是所有logger的父logger，所以所有logger的日志都会被添加到根logger中，所以给每个（除了根logger）添加additivity="false"是很有必要的，可以避免记录大量重复的日志。</li>
</ol>
