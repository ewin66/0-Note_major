<h1><a href="https://www.cnblogs.com/kex1n/p/6933039.html" id="cb_post_title_url">虚拟机与Docker有何不同</a></h1>

<p>译者按:&nbsp;各种虚拟机技术开启了云计算时代；而Docker，作为下一代虚拟化技术，正在改变我们开发、测试、部署应用的方式。那虚拟机与Docker究竟有何不同呢?</p>

<p>为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。</p>

<p>首先，大家需要明确一点，Docker容器不是虚拟机。</p>

<p>2014年，当我第一次接触Docker的时候，我把它比做一种轻量级的虚拟机。这样做无可厚非，因为Docker最初的成功秘诀，正是它比虚拟机更节省内存，启动更快。Docker不停地给大家宣传，&rdquo;<strong>虚拟机需要数分钟启动，而Docker容器只需要50毫秒&rdquo;。</strong></p>

<p>然而，Docker容器并非虚拟机，我们不妨来比较一下它们。</p>

<h2>理解虚拟机</h2>

<p>使用虚拟机运行多个相互隔离的应用时，如下图:</p>

<p><img alt="图0：[外文翻译]虚拟机与Docker有何不同？" src="http://www.techug.com/wordpress/wp-content/uploads/2017/05/vm.jpg" style="height:467px; width:500px" title="图0：[外文翻译]虚拟机与Docker有何不同？" /></p>

<h3>从下到上理解上图:</h3>

<ul>
	<li><strong>基础设施（Infrastructure）</strong>。它可以是你的<strong>个人电脑</strong>，数据中心的<strong>服务器</strong>，或者是<strong>云主机</strong>。</li>
	<li><strong>主操作系统（Host Operating System）</strong>。你的个人电脑之上，运行的可能是<strong>MacOS</strong>，<strong>Windows</strong>或者某个<strong>Linux</strong>发行版。</li>
	<li><strong>虚拟机管理系统（Hypervisor）</strong>。利用Hypervisor，可以在<strong>主操作系统</strong>之上运行多个不同的<strong>从操作系统</strong>。类型1的Hypervisor有支持MacOS的<strong>HyperKit</strong>，支持Windows的<strong>Hyper-V</strong>以及支持Linux的<strong>KVM</strong>。类型2的Hypervisor有VirtualBox和VMWare。</li>
	<li><strong>从操作系统（Guest Operating System）</strong>。假设你需要运行3个相互隔离的应用，则需要使用Hypervisor启动3个<strong>从操作系统</strong>，也就是3个<strong>虚拟机</strong>。这些虚拟机都非常大，也许有700MB，这就意味着它们将占用2.1GB的磁盘空间。更糟糕的是，它们还会消耗很多CPU和内存。</li>
	<li><strong>各种依赖</strong>。每一个<strong>从操作系统</strong>都需要安装许多依赖。如果你的的应用需要连接PostgreSQL的话，则需要安装<strong>libpq-dev</strong>；如果你使用Ruby的话，应该需要安装gems；如果使用其他编程语言，比如Python或者Node.js，都会需要安装对应的依赖库。</li>
	<li><strong>应用</strong>。安装依赖之后，就可以在各个<strong>从操作系统</strong>分别运行应用了，这样各个应用就是相互隔离的。</li>
</ul>

<h2>理解Docker容器</h2>

<p>使用Docker容器运行多个相互隔离的应用时，如下图:</p>

<p><img alt="图1：[外文翻译]虚拟机与Docker有何不同？" src="http://www.techug.com/wordpress/wp-content/uploads/2017/05/docker.jpg" style="height:287px; width:500px" title="图1：[外文翻译]虚拟机与Docker有何不同？" /></p>

<p>不难发现，相比于虚拟机，Docker要简洁很多。因为我们不需要运行一个臃肿的从操作系统了。</p>

<h3>从下到上理解上图:</h3>

<ul>
	<li><strong>基础设施</strong>(Infrastructure)。</li>
	<li><strong>主操作系统（Host Operating System）</strong>。所有主流的Linux发行版都可以运行Docker。对于MacOS和Windows，也有一些办法&quot;运行&quot;Docker。&nbsp;</li>
	<li><strong>Docker守护进程（Docker Daemon）</strong>。Docker守护进程取代了<strong>Hypervisor</strong>，它是运行在操作系统之上的后台进程，负责管理Docker容器。</li>
	<li><strong>各种依赖</strong>。对于Docker，应用的所有依赖都打包在<strong>Docker镜像</strong>中，<strong>Docker容器</strong>是基于<strong>Docker镜像</strong>创建的。</li>
	<li><strong>应用</strong>。应用的源代码与它的依赖都打包在<strong>Docker镜像</strong>中，不同的应用需要不同的<strong>Docker镜像</strong>。不同的应用运行在不同的<strong>Docker容器</strong>中，它们是相互隔离的。</li>
</ul>

<p>&nbsp;</p>

<h2>对比虚拟机与Docker</h2>

<p><strong>Docker守护进程</strong>可以直接与<strong>主操作系统</strong>进行通信，为各个<strong>Docker容器</strong>分配资源；它还可以将容器与<strong>主操作系统</strong>隔离，并将各个容器互相隔离。</p>

<p><strong>虚拟机</strong>启动需要数分钟，而<strong>Docker容器</strong>可以在数毫秒内启动。由于没有臃肿的<strong>从操作系统</strong>，Docker可以节省大量的磁盘空间以及其他系统资源。</p>

<p>说了这么多Docker的优势，大家也没有必要完全否定<strong>虚拟机</strong>技术，因为两者有不同的使用场景。</p>

<p><strong>虚拟机</strong>更擅长于彻底隔离整个<strong>运行环境</strong>。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。</p>

<p><strong>Docker</strong>通常用于隔离<strong>不同的应用</strong>，例如<strong>前端</strong>，<strong>后端</strong>以及<strong>数据库</strong>。</p>

<p><img alt="这里写图片描述" src="https://img-blog.csdn.net/20171201114006776?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd3YW5wZW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:248px; width:600px" title="" /></p>

<p>　　这是docker官网的图,可以看到虚拟化技术通过Hypervisor(虚拟机管理系统)为每个app启动一个Guest OS(客户机操作系统),也就是为每个app启动一个虚拟机。比较直观地说,vm通过Hypervisor对硬件资源进行虚拟化,而docker直接使用硬件资源,利用率上来看docker明显更具有优势。</p>

<p>&nbsp;</p>

<h3>几组简单对比</h3>

<p>&nbsp;</p>

<p>容器使用<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Cgroups" rel="nofollow" target="_blank">cgroup</a>来提供与虚拟机相同级别的资源使用保护机制。容器和虚拟机都可以获取整个网络链接。</p>

<p>容器运行的是不完整的操作系统（尽管它们可以），虚拟机必须运行完整的。</p>

<p>容器比虚拟机使用更少的闲置资源，它们不运行完整的操作系统。</p>

<p>容器在在云硬件（或虚拟机）中可以被复用，就像虚拟机在裸机上可以被复用。</p>

<p>容器需要毫秒分配，虚拟机需要几分钟。所以，你可以另配、重新平衡、释放以及使用容器比虚拟机的迭代更加迅速。</p>

<p>如果每个容器运行的只有一个服务或者数据库，这是比较容易管理的。而且比较容易监控性能，了解故障的影响，并预测成本。</p>

<p>离目标进程越远，隔离会变得更昂贵。虚拟机是伟大的，它通过抽象来增加并行，服务于多操作系统的使用情况以及业界最好的安全性。但对于隔离，它们相当的昂贵，容器提供的隔离就便宜。</p>

<p>&nbsp;</p>

<h3>上一组从知乎上看到的图:&nbsp;</h3>

<p><br />
　　&nbsp;<br />
<img alt="这里写图片描述" src="https://img-blog.csdn.net/20171201114854804?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd3YW5wZW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:676px; width:600px" title="" /></p>

<p><img alt="这里写图片描述" src="https://img-blog.csdn.net/20171201114935985?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd3YW5wZW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:322px; width:600px" title="" /></p>

<p>&nbsp;</p>
