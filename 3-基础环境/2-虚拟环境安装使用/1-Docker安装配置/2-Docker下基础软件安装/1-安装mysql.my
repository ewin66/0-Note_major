<h1>Docker 安装 MySQL</h1>

<h2>方法一、通过 Dockerfile构建</h2>

<p>创建Dockerfile</p>

<p>首先，创建目录mysql,用于存放后面的相关东西。</p>

<pre>
runoob@runoob:~$ mkdir -p ~/mysql/data ~/mysql/logs ~/mysql/conf</pre>

<p>data目录将映射为mysql容器配置的数据文件存放路径</p>

<p>logs目录将映射为mysql容器的日志目录</p>

<p>conf目录里的配置文件将映射为mysql容器的配置文件</p>

<p>进入创建的mysql目录，创建Dockerfile</p>

<pre>
FROM debian:jessie

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql

# add gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates wget &amp;&amp; rm -rf /var/lib/apt/lists/* \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; wget -O /usr/local/bin/gosu.asc &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -r &quot;$GNUPGHOME&quot; /usr/local/bin/gosu.asc \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; chmod +x /usr/local/bin/gosu \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gosu nobody true \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get purge -y --auto-remove ca-certificates wget

RUN mkdir /docker-entrypoint-initdb.d

# FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:
# File::Basename
# File::Copy
# Sys::Hostname
# Data::Dumper
RUN apt-get update &amp;&amp; apt-get install -y perl pwgen --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/*

# gpg: key 5072E1F5: public key &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; imported
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5

ENV MYSQL_MAJOR 5.6
ENV MYSQL_VERSION 5.6.31-1debian8

RUN echo &quot;deb http://repo.mysql.com/apt/debian/ jessie mysql-${MYSQL_MAJOR}&quot; &gt; /etc/apt/sources.list.d/mysql.list

# the &quot;/var/lib/mysql&quot; stuff here is because the mysql-server postinst doesn&#39;t have an explicit way to disable the mysql_install_db codepath besides having a database already &quot;configured&quot; (ie, stuff in /var/lib/mysql/mysql)
# also, we set debconf keys to make APT a little quieter
RUN { \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo mysql-community-server mysql-community-server/data-dir select &#39;&#39;; \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo mysql-community-server mysql-community-server/root-pass password &#39;&#39;; \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo mysql-community-server mysql-community-server/re-root-pass password &#39;&#39;; \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo mysql-community-server mysql-community-server/remove-test-db select false; \
&nbsp;&nbsp;&nbsp;&nbsp;} | debconf-set-selections \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get update &amp;&amp; apt-get install -y mysql-server=&quot;${MYSQL_VERSION}&quot; &amp;&amp; rm -rf /var/lib/apt/lists/* \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql /var/run/mysqld \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \
# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; chmod 777 /var/run/mysqld

# comment out a few problematic configuration values
# don&#39;t reverse lookup hostnames, they are usually another container
RUN sed -Ei &#39;s/^(bind-address|log)/#&amp;/&#39; /etc/mysql/my.cnf \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; echo &#39;skip-host-cache\nskip-name-resolve&#39; | awk &#39;{ print } $1 == &quot;[mysqld]&quot; &amp;&amp; c == 0 { c = 1; system(&quot;cat&quot;) }&#39; /etc/mysql/my.cnf &gt; /tmp/my.cnf \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf

VOLUME /var/lib/mysql

COPY docker-entrypoint.sh /usr/local/bin/
RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat
ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]

EXPOSE 3306
CMD [&quot;mysqld&quot;]</pre>

<p>通过Dockerfile创建一个镜像，替换成你自己的名字</p>

<pre>
runoob@runoob:~/mysql$ docker build -t mysql .</pre>

<p>创建完成后，我们可以在本地的镜像列表里查找到刚刚创建的镜像</p>

<pre>
runoob@runoob:~/mysql$ docker images |grep mysql
mysql               5.6                 2c0964ec182a        3 weeks ago         329 MB</pre>

<h2>方法二、docker pull mysql</h2>

<p>查找Docker Hub上的mysql镜像</p>

<pre>
runoob@runoob:/mysql$ docker search mysql
NAME                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
mysql                    MySQL is a widely used, open-source relati...   2529      [OK]       
mysql/mysql-server       Optimized MySQL Server Docker images. Crea...   161                  [OK]
centurylink/mysql        Image containing mysql. Optimized to be li...   45                   [OK]
sameersbn/mysql                                                          36                   [OK]
google/mysql             MySQL server for Google Compute Engine          16                   [OK]
appcontainers/mysql      Centos/Debian Based Customizable MySQL Con...   8                    [OK]
marvambass/mysql         MySQL Server based on Ubuntu 14.04              6                    [OK]
drupaldocker/mysql       MySQL for Drupal                                2                    [OK]
azukiapp/mysql           Docker image to run MySQL by Azuki - http:...   2                    [OK]
...</pre>

<p>这里我们拉取官方的镜像,标签为5.6</p>

<pre>
runoob@runoob:~/mysql$ docker pull mysql:5.6</pre>

<p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mysql,标签为5.6的镜像。</p>

<hr />
<h2>使用mysql镜像</h2>

<p>首先，创建目录mysql,用于存放后面的相关东西。</p>

<pre>
runoob@runoob:~$ mkdir -p ~/mysql/data ~/mysql/logs ~/mysql/conf</pre>

<h3>运行容器</h3>

<pre>
runoob@runoob:~/mysql$ docker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql -v $PWD/logs:/logs -v $PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6
21cb89213c93d805c5bacf1028a0da7b5c5852761ba81327e6b99bb3ea89930e
runoob@runoob:~/mysql$ </pre>

<p>命令说明：</p>

<ul>
	<li>
	<p><strong>-p 3306:3306：</strong>将容器的3306端口映射到主机的3306端口</p>
	</li>
	<li>
	<p><strong>-v $PWD/conf/my.cnf:/etc/mysql/my.cnf：</strong>将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf</p>
	</li>
	<li>
	<p><strong>-v $PWD/logs:/logs：</strong>将主机当前目录下的logs目录挂载到容器的/logs</p>
	</li>
	<li>
	<p><strong>-v $PWD/data:/mysql_data：</strong>将主机当前目录下的data目录挂载到容器的/mysql_data</p>
	</li>
	<li>
	<p><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化root用户的密码</p>
	</li>
</ul>

<h3>查看容器启动情况</h3>

<pre>
runoob@runoob:~/mysql$ docker ps 
CONTAINER ID    IMAGE         COMMAND                  ...  PORTS                    NAMES
21cb89213c93    mysql:5.6    &quot;docker-entrypoint.sh&quot;    ...  0.0.0.0:3306-&gt;3306/tcp   mymysql</pre>
