<h1>Docker 安装 MongoDB</h1>

<h2>方法一、通过 Dockerfile 构建</h2>

<p>创建Dockerfile</p>

<p>首先，创建目录mongo,用于存放后面的相关东西。</p>

<pre>
runoob@runoob:~$ mkdir -p ~/mongo  ~/mongo/db</pre>

<p>db目录将映射为mongo容器配置的/data/db目录,作为mongo数据的存储目录</p>

<p>进入创建的mongo目录，创建Dockerfile</p>

<pre>
FROM debian:wheezy

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb &amp;&amp; useradd -r -g mongodb mongodb

RUN apt-get update \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get install -y --no-install-recommends \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numactl \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates wget &amp;&amp; rm -rf /var/lib/apt/lists/* \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; wget -O /usr/local/bin/gosu.asc &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -r &quot;$GNUPGHOME&quot; /usr/local/bin/gosu.asc \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; chmod +x /usr/local/bin/gosu \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; gosu nobody true \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get purge -y --auto-remove ca-certificates wget

# gpg: key 7F0CEB10: public key &quot;Richard Kreuter &lt;richard@10gen.com&gt;&quot; imported
RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 492EAFE8CD016A07919F1D2B9ECBEC467F0CEB10

ENV MONGO_MAJOR 3.0
ENV MONGO_VERSION 3.0.12

RUN echo &quot;deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/$MONGO_MAJOR main&quot; &gt; /etc/apt/sources.list.d/mongodb-org.list

RUN set -x \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get update \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; apt-get install -y \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb-org=$MONGO_VERSION \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb-org-server=$MONGO_VERSION \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb-org-shell=$MONGO_VERSION \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb-org-mongos=$MONGO_VERSION \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb-org-tools=$MONGO_VERSION \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -rf /var/lib/apt/lists/* \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; rm -rf /var/lib/mongodb \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; mv /etc/mongod.conf /etc/mongod.conf.orig

RUN mkdir -p /data/db /data/configdb \
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; chown -R mongodb:mongodb /data/db /data/configdb
VOLUME /data/db /data/configdb

COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT [&quot;/entrypoint.sh&quot;]

EXPOSE 27017
CMD [&quot;mongod&quot;]</pre>

<p>通过Dockerfile创建一个镜像，替换成你自己的名字</p>

<pre>
runoob@runoob:~/mongo$ docker build -t mongo:3.2 .</pre>

<p>创建完成后，我们可以在本地的镜像列表里查找到刚刚创建的镜像</p>

<pre>
runoob@runoob:~/mongo$ docker images  mongo:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
mongo               3.2                 282fd552add6        9 days ago          336.1 MB</pre>

<hr />
<h2>方法二、docker pull mongo:3.2</h2>

<p>查找Docker Hub上的mongo镜像</p>

<pre>
runoob@runoob:~/mongo$ docker search mongo
NAME                              DESCRIPTION                      STARS     OFFICIAL   AUTOMATED
mongo                             MongoDB document databases ...   1989      [OK]       
mongo-express                     Web-based MongoDB admin int...   22        [OK]       
mvertes/alpine-mongo              light MongoDB container          19                   [OK]
mongooseim/mongooseim-docker      MongooseIM server the lates...   9                    [OK]
torusware/speedus-mongo           Always updated official Mon...   9                    [OK]
jacksoncage/mongo                 Instant MongoDB sharded cluster  6                    [OK]
mongoclient/mongoclient           Official docker image for M...   4                    [OK]
jadsonlourenco/mongo-rocks        Percona Mongodb with Rocksd...   4                    [OK]
asteris/apache-php-mongo          Apache2.4 + PHP + Mongo + m...   2                    [OK]
19hz/mongo-container              Mongodb replicaset for coreos    1                    [OK]
nitra/mongo                       Mongo3 centos7                   1                    [OK]
ackee/mongo                       MongoDB with fixed Bluemix p...  1                    [OK]
kobotoolbox/mongo                 https://github.com/kobotoolb...  1                    [OK]
valtlfelipe/mongo                 Docker Image based on the la...  1                    [OK]</pre>

<p>这里我们拉取官方的镜像,标签为3.2</p>

<pre>
runoob@runoob:~/mongo$ docker pull mongo:3.2</pre>

<p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mongo,标签为3.2的镜像。</p>

<hr />
<h2>使用mongo镜像</h2>

<h4>运行容器</h4>

<pre>
runoob@runoob:~/mongo$ docker run -p 27017:27017 -v $PWD/db:/data/db -d mongo:3.2
cda8830cad5fe35e9c4aed037bbd5434b69b19bf2075c8626911e6ebb08cad51
runoob@runoob:~/mongo$</pre>

<p>命令说明：</p>

<p><strong>-p 27017:27017 :</strong>将容器的27017 端口映射到主机的27017 端口</p>

<p><strong>-v $PWD/db:/data/db :</strong>将主机中当前目录下的db挂载到容器的/data/db，作为mongo数据存储目录</p>

<h4>查看容器启动情况</h4>

<pre>
runoob@runoob:~/mongo$ docker ps 
CONTAINER ID   IMAGE        COMMAND                   ...    PORTS                      NAMES
cda8830cad5f   mongo:3.2    &quot;/entrypoint.sh mongo&quot;    ...    0.0.0.0:27017-&gt;27017/tcp   suspicious_goodall</pre>

<h4>连接容器</h4>

<p>使用mongo镜像执行mongo 命令连接到刚启动的容器,主机IP为172.17.0.1</p>

<pre>
runoob@runoob:~/mongo$ docker run -it mongo:3.2 mongo --host 172.17.0.1
MongoDB shell version: 3.2.7
connecting to: 172.17.0.1:27017/test
Welcome to the MongoDB shell.
For interactive help, type &quot;help&quot;.
For more comprehensive documentation, see
  http://docs.mongodb.org/
Questions? Try the support group
  http://groups.google.com/group/mongodb-user
&gt;</pre>

<p>&nbsp;</p>

<h2>在docker中使用mongo数据库，在局域网访问</h2>

<p>有了docker，基本上就告别了各种软件、数据库的安装，直接从镜像库pull下来，爽，想想以前那真是一个遭罪啊。</p>

<p>这文章就来看一下如何跑mongo的docker镜像，并且可以在局域网访问，内容相对简单，也是记录我的自学过程。</p>

<p>第一步</p>

<p>获得mongo镜像，命令如下，</p>

<pre>
<code># 拉取mongo镜像
docker pull mongo
# 查看本地库mongo镜像
docker images mongo</code></pre>

<p>第二步</p>

<p>启动mongo镜像，如下</p>

<pre>
<code># 启动mongo镜像
docker run -itd -P --name mongo-server mongo bash
# 查看mongo进程
docker ps -a</code></pre>

<p>第三步</p>

<p>进入容器并启动mongo，如下</p>

<pre>
<code># 进入mongo容器，其中&lsquo;mongo-server&rsquo;是mongo容器别名
docker exec -it mongo-server bash
# 启动mongo服务
mongod &amp;
# 在容器中查看mongo进程
ps -ef | grep mongo</code></pre>

<p>启动以后会看到如下日志（最后几行），</p>

<pre>
<code>2017-06-13T07:25:56.318+0000 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory &#39;/data/db/diagnostic.data&#39;
2017-06-13T07:25:56.328+0000 I INDEX    [initandlisten] build index on: admin.system.version properties: { v: 2, key: { version: 1 }, name: &quot;incompatible_with_version_32&quot;, ns: &quot;admin.system.version&quot; }
2017-06-13T07:25:56.328+0000 I INDEX    [initandlisten]          building index using bulk method; build may temporarily use up to 500 megabytes of RAM
2017-06-13T07:25:56.329+0000 I INDEX    [initandlisten] build index done.  scanned 0 total records. 0 secs
2017-06-13T07:25:56.329+0000 I COMMAND  [initandlisten] setting featureCompatibilityVersion to 3.4
2017-06-13T07:25:56.329+0000 I NETWORK  [thread1] waiting for connections on port 27017</code></pre>

<p>第四步</p>

<p>本地验证测试，输入mongo启动mongo命令行客户端，如下内容</p>

<pre>
<code>root@01ff7ed6377c:/# mongo
MongoDB shell version v3.4.4
connecting to: mongodb://127.0.0.1:27017
2017-06-13T07:34:00.289+0000 I NETWORK  [thread1] connection accepted from 127.0.0.1:55650 #2 (1 connection now open)
2017-06-13T07:34:00.290+0000 I NETWORK  [conn2] received client metadata from 127.0.0.1:55650 conn2: { application: { name: &quot;MongoDB Shell&quot; }, driver: { name: &quot;MongoDB Internal Client&quot;, version: &quot;3.4.4&quot; }, os: { type: &quot;Linux&quot;, name: &quot;PRETTY_NAME=&quot;Debian GNU/Linux 8 (jessie)&quot;&quot;, architecture: &quot;x86_64&quot;, version: &quot;Kernel 3.10.0-327.28.3.el7.x86_64&quot; } }</code></pre>

<p>接着输入测试命令，</p>

<pre>
<code>&gt; show dbs;
admin  0.000GB
local  0.000GB
&gt;</code></pre>

<p>第五步</p>

<p>在局域网访问docker中的mongo，由于启动的时候是使用的随机端口映射，意思是宿主机产生一个随机端口去映射mongo的27017端口，通过&lsquo;docker ps -a&rsquo;命令查看宿主机随机端口，如下，</p>

<pre>
<code>docker ps -a 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES
01ff7ed6377c        mongo               &quot;docker-entrypoint.sh&quot;   15 minutes ago      Up 15 minutes       0.0.0.0:32773-&gt;27017/tcp   mongo-server</code></pre>

<p>如上，宿主机随机端口为32773，通过配置robomongo客户端连接mongo，如下，</p>

<p><img alt="image" src="http://static.xiaoqiangge.com/image/39e17b8c-e293-42af-842b-af6f98e5e3e1.png" /></p>

<p>结果正常。</p>

<p>如果要停止mongo可以使用如下命令，</p>

<pre>
<code># 登入mongo
mongo
# 选择使用admin库，在其他的库不行
use admin
# 关闭mongo
db.shutdownServer()</code></pre>

<p>通过&lsquo;ps -ef | grep momgo&rsquo;查看mongo进程是否存在，如果不存在说明关闭成功。</p>
