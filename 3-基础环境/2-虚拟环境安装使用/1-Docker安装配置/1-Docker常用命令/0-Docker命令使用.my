<h1>Docker常用命令</h1>

<p>安装好Docker后，需要启动它，并进入它的命令界面进行相关操作</p>

<h2>Docker 客户端</h2>

<p>docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。</p>

<pre>
runoob@runoob:~# docker</pre>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker27.png" /></p>

<p>可以通过命令 <strong>docker command --help</strong> 更深入的了解指定的 Docker 命令使用方法。</p>

<p>例如我们要查看 <strong>docker stats</strong> 指令的具体使用方法：</p>

<pre>
runoob@runoob:~# docker stats --help</pre>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker28.png" /></p>

<h2>查看docker信息</h2>

<p>docker version<br />
# 或者<br />
docker info</p>

<h2>权限设置</h2>

<p>sudo su 进入root模式 不然会出现很多问题。</p>

<p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入 Docker 用户组</p>

<pre>
<code>sudo usermod -aG docker $USER</code></pre>

<h2>启动docker 后台服务</h2>

<p>root@ubuntu:~# service docker start</p>

<p>root@ubuntu:~# systemctl start docker</p>

<p>root@ubuntu:~# service docker stop</p>

<p>root@ubuntu:~# systemctl stop docker</p>

<ul>
</ul>

<h2>进入Docker下的shell</h2>

<p>root@ubuntu:~# docker run -it ubuntu bash</p>

<h2>vi等基本命令工具安装</h2>

<p>1、apt-get update，这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。 </p>

<p>2、等更新完毕以后再敲命令：apt-get install vim命令即可。</p>

<p>3、如果是：bash:ping: command not found</p>

<p>apt-get install iputils-ping</p>

<p> </p>

<h2>实例：hello world</h2>

<p>下面，我们通过最简单的 image 文件"<a href="https://hub.docker.com/r/library/hello-world/" target="_blank">hello world"</a>，感受一下 Docker。</p>

<p>需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html" target="_blank">下一篇文章</a>的第一节。有需要的朋友，可以先看一下。</p>

<p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p>

<blockquote>
<pre>
<code>$ docker image pull library/hello-world
</code></pre>
</blockquote>

<p>上面代码中，<code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p>

<p>由于 Docker 官方提供的 image 文件，都放在<a href="https://hub.docker.com/r/library/" target="_blank"><code>library</code></a>组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p>

<blockquote>
<pre>
<code>$ docker image pull hello-world
</code></pre>
</blockquote>

<p>抓取成功以后，就可以在本机看到这个 image 文件了。</p>

<blockquote>
<pre>
<code>$ docker image ls
</code></pre>
</blockquote>

<p>现在，运行这个 image 文件。</p>

<blockquote>
<pre>
<code>$ docker container run hello-world
</code></pre>
</blockquote>

<p><code>docker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p>

<p>注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p>

<p>如果运行成功，你会在屏幕上读到下面的输出。</p>

<blockquote>
<pre>
<code>$ docker container run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.

... ...
</code></pre>
</blockquote>

<p>输出这段提示以后，<code>hello world</code>就会停止运行，容器自动终止。</p>

<p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p>

<blockquote>
<pre>
<code>$ docker container run -it ubuntu bash
</code></pre>
</blockquote>

<p>对于那些不会自动终止的容器，必须使用<a href="https://docs.docker.com/engine/reference/commandline/container_kill/" target="_blank"><code>docker container kill</code></a> 命令手动终止。</p>

<blockquote>
<pre>
<code>$ docker container kill [containID]
</code></pre>
</blockquote>

<h2>容器文件</h2>

<p><strong>image 文件生成的容器实例，本身也是一个文件，称为容器文件。</strong>也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>

<blockquote>
<pre>
<code># 列出本机正在运行的容器
$ docker container ls

# 列出本机所有容器，包括终止运行的容器
$ docker container ls --all
</code></pre>
</blockquote>

<p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的<code>docker container kill</code>命令。</p>

<p>终止运行的容器文件，依然会占据硬盘空间，可以使用<a href="https://docs.docker.com/engine/reference/commandline/container_rm/" target="_blank"><code>docker container rm</code></a>命令删除。</p>

<blockquote>
<pre>
<code>$ docker container rm [containerID]
</code></pre>
</blockquote>

<p>运行上面的命令之后，再使用<code>docker container ls --all</code>命令，就会发现被删除的容器文件已经消失了。</p>

<h2>Dockerfile 文件</h2>

<p>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p>

<p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p>

<p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p>

<h2>实例：制作自己的 Docker 容器</h2>

<p>下面我以 <a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank">koa-demos</a> 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p>

<p>作为准备工作，请先<a href="https://github.com/ruanyf/koa-demos/archive/master.zip" target="_blank">下载源码</a>。</p>

<blockquote>
<pre>
<code>$ git clone https://github.com/ruanyf/koa-demos.git
$ cd koa-demos
</code></pre>
</blockquote>

<h3>10.1 编写 Dockerfile 文件</h3>

<p>首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/.dockerignore" target="_blank">内容</a>。</p>

<blockquote>
<pre>
<code>.git
node_modules
npm-debug.log
</code></pre>
</blockquote>

<p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p>

<p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/Dockerfile" target="_blank">内容</a>。</p>

<blockquote>
<pre>
<code>FROM node:8.4
COPY . /app
WORKDIR /app
RUN npm install --registry=https://registry.npm.taobao.org
EXPOSE 3000
</code></pre>
</blockquote>

<p>上面代码一共五行，含义如下。</p>

<blockquote>
<ul>
<li><code>FROM node:8.4</code>：该 image 文件继承官方的 node image，冒号表示标签，这里标签是<code>8.4</code>，即8.4版本的 node。</li>
<li><code>COPY . /app</code>：将当前目录下的所有文件（除了<code>.dockerignore</code>排除的路径），都拷贝进入 image 文件的<code>/app</code>目录。</li>
<li><code>WORKDIR /app</code>：指定接下来的工作路径为<code>/app</code>。</li>
<li><code>RUN npm install</code>：在<code>/app</code>目录下，运行<code>npm install</code>命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</li>
<li><code>EXPOSE 3000</code>：将容器 3000 端口暴露出来， 允许外部连接这个端口。</li>
</ul>
</blockquote>

<h3>10.2 创建 image 文件</h3>

<p>有了 Dockerfile 文件以后，就可以使用<code>docker image build</code>命令创建 image 文件了。</p>

<blockquote>
<pre>
<code>$ docker image build -t koa-demo .
# 或者
$ docker image build -t koa-demo:0.0.1 .
</code></pre>
</blockquote>

<p>上面代码中，<code>-t</code>参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是<code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p>

<p>如果运行成功，就可以看到新生成的 image 文件<code>koa-demo</code>了。</p>

<blockquote>
<pre>
<code>$ docker image ls
</code></pre>
</blockquote>

<h3>10.3 生成容器</h3>

<p><code>docker container run</code>命令会从 image 文件生成容器。</p>

<blockquote>
<pre>
<code>$ docker container run -p 8000:3000 -it koa-demo /bin/bash
# 或者
$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash
</code></pre>
</blockquote>

<p>上面命令的各个参数含义如下：</p>

<blockquote>
<ul>
<li><code>-p</code>参数：容器的 3000 端口映射到本机的 8000 端口。</li>
<li><code>-it</code>参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</li>
<li><code>koa-demo:0.0.1</code>：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</li>
<li><code>/bin/bash</code>：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</li>
</ul>
</blockquote>

<p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p>

<blockquote>
<pre>
<code><a href="mailto:root@66d80f4aaf">root@66d80f4aaf</a>1e:/app#
</code></pre>
</blockquote>

<p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p>

<blockquote>
<pre>
<code><a href="mailto:root@66d80f4aaf">root@66d80f4aaf</a>1e:/app# node demos/01.js
</code></pre>
</blockquote>

<p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示"Not Found"，这是因为这个 <a href="https://github.com/ruanyf/koa-demos/blob/master/demos/01.js" target="_blank">demo</a> 没有写路由。</p>

<p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p>

<p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用<code>docker container kill</code>终止容器运行。</p>

<blockquote>
<pre>
<code># 在本机的另一个终端窗口，查出容器的 ID
$ docker container ls

# 停止指定的容器运行
$ docker container kill [containerID]
</code></pre>
</blockquote>

<p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p>

<blockquote>
<pre>
<code># 查出容器的 ID
$ docker container ls --all

# 删除指定的容器文件
$ docker container rm [containerID]
</code></pre>
</blockquote>

<p>也可以使用<code>docker container run</code>命令的<code>--rm</code>参数，在容器终止运行后自动删除容器文件。</p>

<blockquote>
<pre>
<code>$ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash
</code></pre>
</blockquote>

<h3>10.4 CMD 命令</h3>

<p>上一节的例子里面，容器启动以后，需要手动输入命令<code>node demos/01.js</code>。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p>

<blockquote>
<pre>
<code>FROM node:8.4
COPY . /app
WORKDIR /app
RUN npm install --registry=https://registry.npm.taobao.org
EXPOSE 3000
CMD node demos/01.js
</code></pre>
</blockquote>

<p>上面的 Dockerfile 里面，多了最后一行<code>CMD node demos/01.js</code>，它表示容器启动后自动执行<code>node demos/01.js</code>。</p>

<p>你可能会问，<code>RUN</code>命令与<code>CMD</code>命令的区别在哪里？简单说，<code>RUN</code>命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；<code>CMD</code>命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个<code>RUN</code>命令，但是只能有一个<code>CMD</code>命令。</p>

<p>注意，指定了<code>CMD</code>命令以后，<code>docker container run</code>命令就不能附加命令了（比如前面的<code>/bin/bash</code>），否则它会覆盖<code>CMD</code>命令。现在，启动容器可以使用下面的命令。</p>

<blockquote>
<pre>
<code>$ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1
</code></pre>
</blockquote>

<h3>10.5 发布 image 文件</h3>

<p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p>

<p>首先，去 <a href="https://hub.docker.com/" target="_blank">hub.docker.com</a> 或 <a href="https://cloud.docker.com/" target="_blank">cloud.docker.com</a> 注册一个账户。然后，用下面的命令登录。</p>

<blockquote>
<pre>
<code>$ docker login
</code></pre>
</blockquote>

<p>接着，为本地的 image 标注用户名和版本。</p>

<blockquote>
<pre>
<code>$ docker image tag [imageName] [username]/[repository]:[tag]
# 实例
$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1
</code></pre>
</blockquote>

<p>也可以不标注用户名，重新构建一下 image 文件。</p>

<blockquote>
<pre>
<code>$ docker image build -t [username]/[repository]:[tag] .
</code></pre>
</blockquote>

<p>最后，发布 image 文件。</p>

<blockquote>
<pre>
<code>$ docker image push [username]/[repository]:[tag]
</code></pre>
</blockquote>

<p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p>
