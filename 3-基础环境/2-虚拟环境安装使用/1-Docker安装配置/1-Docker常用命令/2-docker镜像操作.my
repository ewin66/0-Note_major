<h1>Docker 镜像使用</h1>

<h2>镜像命令</h2>

<h3>镜像仓库</h3>

<table>
<tbody>
<tr>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-login-command.html" rel="noopener noreferrer" target="_blank">login</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-pull-command.html" rel="noopener noreferrer" target="_blank">pull</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-push-command.html" rel="noopener noreferrer" target="_blank">push</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-search-command.html" rel="noopener noreferrer" target="_blank">search</a></td>
</tr>
</tbody>
</table>

<h3>本地镜像管理</h3>

<table>
<tbody>
<tr>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-images-command.html" rel="noopener noreferrer" target="_blank">images</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-rmi-command.html" rel="noopener noreferrer" target="_blank">rmi</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-tag-command.html" rel="noopener noreferrer" target="_blank">tag</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-build-command.html" rel="noopener noreferrer" target="_blank">build</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-history-command.html" rel="noopener noreferrer" target="_blank">history</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-save-command.html" rel="noopener noreferrer" target="_blank">save</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-load-command.html" rel="noopener noreferrer" target="_blank">load</a></td>
<td style="width:80px"><a href="https://www.runoob.com/docker/docker-import-command.html" rel="noopener noreferrer" target="_blank">import</a></td>
</tr>
</tbody>
</table>

<h2>命令详解</h2>

<h3>列出镜像列表 images</h3>

<p>我们可以使用 <strong>docker images</strong> 来列出本地主机上的镜像。</p>

<pre>
runoob@runoob:~$ docker images 
REPOSITORY TAG IMAGE ID CREATED SIZE
ubuntu 14.04 90d5884b1ee0 5 days ago 188 MB
php 5.6 f40e9e0f10c8 9 days ago 444.8 MB
nginx latest 6f8d099c3adc 12 days ago 182.7 MB
mysql 5.6 f2e8d6c772c0 3 weeks ago 324.6 MB
httpd latest 02ef73cf1bc0 3 weeks ago 194.4 MB
ubuntu 15.10 4e3b13c8a266 4 weeks ago 136.3 MB
hello-world latest 690ed74de00f 6 months ago 960 B
training/webapp latest 6fae60ef3446 11 months ago 348.8 MB</pre>

<p>各个选项说明:</p>

<ul>
<li>
<p><strong>REPOSITORY：</strong>表示镜像的仓库源</p>
</li>
<li>
<p><strong>TAG：</strong>镜像的标签</p>
</li>
<li>
<p><strong>IMAGE ID：</strong>镜像ID</p>
</li>
<li>
<p><strong>CREATED：</strong>镜像创建时间</p>
</li>
<li>
<p><strong>SIZE：</strong>镜像大小</p>
</li>
</ul>

<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，有15.10、14.04等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>

<p>所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：</p>

<pre>
runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash 
root@d77ccb2e5cca:/#</pre>

<p>如果要使用版本为14.04的ubuntu系统镜像来运行容器时，命令如下：</p>

<pre>
runoob@runoob:~$ docker run -t -i ubuntu:14.04 /bin/bash 
root@39e968165990:/# </pre>

<p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</p>

<h3>获取新镜像 pull</h3>

<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>

<pre>
Crunoob@runoob:~$ docker pull ubuntu:13.10
13.10: Pulling from library/ubuntu
6599cadaf950: Pull complete 
23eda618d451: Pull complete 
f0be3084efe9: Pull complete 
52de432f084b: Pull complete 
a3ed95caeb02: Pull complete 
Digest: sha256:15b79a6654811c8d992ebacdfbd5152fcf3d165e374e264076aa435214a947a3
Status: Downloaded newer image for ubuntu:13.10</pre>

<p>下载完成后，我们可以直接使用这个镜像来运行容器。</p>

<pre>
runoob@runoob:~$ docker pull httpd
runoob@runoob:~$ docker run httpd</pre>

<h3>查找镜像 search</h3>

<p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <em>https://hub.docker.com/</em></p>

<p>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个httpd的镜像来作为我们的web服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>

<pre>
runoob@runoob:~$ docker search httpd</pre>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker35.png" /></p>

<p><strong>NAME:</strong>镜像仓库源的名称</p>

<p><strong>DESCRIPTION:</strong>镜像的描述</p>

<p><strong>OFFICIAL:</strong>是否docker官方发布</p>

<ul>
</ul>

<h3>更新镜像 commit</h3>

<p>创建镜像</p>

<p>当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>

<ul>
<li>1.从已经创建的容器中更新镜像，并且提交这个镜像</li>
<li>2.使用 Dockerfile 指令来创建一个新的镜像</li>
</ul>

<p>更新镜像之前，我们需要使用镜像来创建一个容器。</p>

<pre>
runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash
root@e218edb10161:/# </pre>

<p>在运行的容器内使用 apt-get update 命令进行更新。</p>

<p>在完成操作之后，输入 exit命令来退出这个容器。</p>

<p>此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本。</p>

<pre>
runoob@runoob:~$ docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2
sha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8</pre>

<p>各个参数说明：</p>

<ul>
<li>
<p><strong>-m:</strong>提交的描述信息</p>
</li>
<li>
<p><strong>-a:</strong>指定镜像作者</p>
</li>
<li>
<p><strong>e218edb10161：</strong>容器ID</p>
</li>
<li>
<p><strong>runoob/ubuntu:v2:</strong>指定要创建的目标镜像名</p>
</li>
</ul>

<p>我们可以使用 <strong>docker images</strong> 命令来查看我们的新镜像 <strong>runoob/ubuntu:v2</strong>：</p>

<pre>
runoob@runoob:~$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
runoob/ubuntu v2 70bf1840fd7c 15 seconds ago 158.5 MB
ubuntu 14.04 90d5884b1ee0 5 days ago 188 MB
php 5.6 f40e9e0f10c8 9 days ago 444.8 MB
nginx latest 6f8d099c3adc 12 days ago 182.7 MB
mysql 5.6 f2e8d6c772c0 3 weeks ago 324.6 MB
httpd latest 02ef73cf1bc0 3 weeks ago 194.4 MB
ubuntu 15.10 4e3b13c8a266 4 weeks ago 136.3 MB
hello-world latest 690ed74de00f 6 months ago 960 B
training/webapp latest 6fae60ef3446 12 months ago 348.8 MB</pre>

<p>使用我们的新镜像 <strong>runoob/ubuntu</strong> 来启动一个容器</p>

<pre>
runoob@runoob:~$ docker run -t -i runoob/ubuntu:v2 /bin/bash 
root@1a9fbdeb5da3:/#</pre>

<h3>构建镜像 <strong>build</strong></h3>

<p>创建镜像</p>

<p>当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>

<ul>
<li>1.从已经创建的容器中更新镜像，并且提交这个镜像</li>
<li>2.使用 Dockerfile 指令来创建一个新的镜像</li>
</ul>

<p>我们使用命令 <strong>docker build</strong> ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>

<pre>
runoob@runoob:~$ cat Dockerfile 
FROM centos:6.7
MAINTAINER Fisher "fisher@sudops.com"

RUN /bin/echo 'root:123456' |chpasswd
RUN useradd runoob
RUN /bin/echo 'runoob:123456' |chpasswd
RUN /bin/echo -e "LANG=\"en_US.UTF-8\"" >/etc/default/local
EXPOSE 22
EXPOSE 80
CMD /usr/sbin/sshd -D</pre>

<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p>

<p>第一条FROM，指定使用哪个镜像源</p>

<p>RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。</p>

<p>然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。</p>

<pre>
runoob@runoob:~$ docker build -t runoob/centos:6.7 .
Sending build context to Docker daemon 17.92 kB
Step 1 : FROM centos:6.7
---&gt; d95b5ca17cc3
Step 2 : MAINTAINER Fisher "fisher@sudops.com"
---&gt; Using cache
---&gt; 0c92299c6f03
Step 3 : RUN /bin/echo 'root:123456' |chpasswd
---&gt; Using cache
---&gt; 0397ce2fbd0a
Step 4 : RUN useradd runoob
......</pre>

<p>参数说明：</p>

<ul>
<li>
<p><strong>-t</strong> ：指定要创建的目标镜像名</p>
</li>
<li>
<p><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</p>
</li>
</ul>

<p>使用docker images 查看创建的镜像已经在列表中存在,镜像ID为860c279d2fec</p>

<pre>
runoob@runoob:~$ docker images 
REPOSITORY TAG IMAGE ID CREATED SIZE
runoob/centos 6.7 860c279d2fec About a minute ago 190.6 MB
runoob/ubuntu v2 70bf1840fd7c 17 hours ago 158.5 MB
ubuntu 14.04 90d5884b1ee0 6 days ago 188 MB
php 5.6 f40e9e0f10c8 10 days ago 444.8 MB
nginx latest 6f8d099c3adc 12 days ago 182.7 MB
mysql 5.6 f2e8d6c772c0 3 weeks ago 324.6 MB
httpd latest 02ef73cf1bc0 3 weeks ago 194.4 MB
ubuntu 15.10 4e3b13c8a266 5 weeks ago 136.3 MB
hello-world latest 690ed74de00f 6 months ago 960 B
centos 6.7 d95b5ca17cc3 6 months ago 190.6 MB
training/webapp latest 6fae60ef3446 12 months ago 348.8 MB</pre>

<p>我们可以使用新的镜像来创建容器</p>

<pre>
runoob@runoob:~$ docker run -t -i runoob/centos:6.7 /bin/bash
[root@41c28d18b5fb /]# id runoob
uid=500(runoob) gid=500(runoob) groups=500(runoob)</pre>

<p>从上面看到新镜像已经包含我们创建的用户runoob</p>

<h3>设置镜像标签 tag </h3>

<p>我们可以使用 docker tag 命令，为镜像添加一个新的标签。</p>

<pre>
runoob@runoob:~$ docker tag 860c279d2fec runoob/centos:dev</pre>

<p>docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签名(tag)。</p>

<p>使用 docker images 命令可以看到，ID为860c279d2fec的镜像多一个标签。</p>

<pre>
runoob@runoob:~$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
runoob/centos 6.7 860c279d2fec 5 hours ago 190.6 MB
runoob/centos dev 860c279d2fec 5 hours ago 190.6 MB
runoob/ubuntu v2 70bf1840fd7c 22 hours ago 158.5 MB
ubuntu 14.04 90d5884b1ee0 6 days ago 188 MB
php 5.6 f40e9e0f10c8 10 days ago 444.8 MB
nginx latest 6f8d099c3adc 13 days ago 182.7 MB
mysql 5.6 f2e8d6c772c0 3 weeks ago 324.6 MB
httpd latest 02ef73cf1bc0 3 weeks ago 194.4 MB
ubuntu 15.10 4e3b13c8a266 5 weeks ago 136.3 MB
hello-world latest 690ed74de00f 6 months ago 960 B
centos 6.7 d95b5ca17cc3 6 months ago 190.6 MB
training/webapp latest 6fae60ef3446 12 months ago 348.8 MB</pre>

<h2>常用操作</h2>

<h3>删除image</h3>

<p>在使用Docker的时候遇到删不掉image的情况，如下：</p>

<pre>
root@ubuntu:/opt/docker# docker images
REPOSITORY     TAG         IMAGE ID      CREATED       SIZE
door/ubuntu-nginx  v2         5e4f2da203e2    5 minutes ago    283.3 MB
              46987ed2da40    33 minutes ago   129 MB
              20248c31e1a2    45 minutes ago   129 MB
door/ubuntu-nginx  v1         0e35a55569f5    About an hour ago  280.8 MB
ubuntu       latest       104bec311bcd    2 weeks ago     129 MB
hello-world     latest       c54a2cc56cbb    6 months ago    1.848 kB
root@ubuntu:/opt/docker# docker rmi 5e4f2da203e2
Error response from daemon: conflict: unable to delete 5e4f2da203e2 (must be forced) - image is being used by stopped container 06622513ce3c
</pre>

<p><strong>解决方法：</strong></p>

<p>1.先查询记录 </p>

<p><code>docker ps -a</code></p>

<p><span style="font-family:monospace">如果该容器，如mysql处于运行之中</span></p>

<p><span style="font-family:monospace">docker kill containId</span></p>

<p>2.把该镜像的记录全部删除掉，如果删除所有镜像的记录，可以使用:</p>

<p>docker rm ( container id )</p>

<p>docker ps -a|awk '{print $1}'|xargs docker rm</p>

<p>3.<code>docker rmi 5e4f2da203e2</code>就可以了</p>

<p>网上还有网友使用service docker restrat 之后再删，本人试了一下不管用，可能是因为环境不一样，哈哈！</p>

<p>以上所述是小编给大家介绍的docker image删不掉的解决办法，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。在此也非常感谢大家对脚本之家网站的支持！</p>

<h3>docker容器的迁移</h3>

<p>docker的备份方式有export和save两种。</p>

<p>export是当前的状态，针对的是容器，docker save 是针对镜像images。</p>

<p><strong>export</strong></p>

<p>找出要备份容器的ID</p>

<pre>
[root@wls12c ~]$ docker ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS NAMES
037b847bf093 centos "/bin/bash" 3 minutes ago Exited (0) 2 minute naughty_davinci 
</pre>

<p>备份</p>

<pre>
[root@wls12c ~]$ docker export 037b847bf093 >centos_demo.tar
[root@wls12c ~]$ du -sh centos_demo.tar 
195M centos_demo.tar</pre>

<p>export是把容器打成一个tar包。</p>

<p>恢复</p>

<p>把刚才备份的centos_demo.tar打包到目标服务器</p>

<pre>
[root@11g ~]$ cat centos_demo.tar |docker import - centos:demo
8962416d1362f289ceb9848e21a95f03dc34eb6f234c8f98f1a6e1ec7fe34a67
查看新生成的镜像</pre>

<pre>
[root@11g ~]$ docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
centos demo 8962416d1362 24 seconds ago 196.7 MB
</pre>

<p><strong>save</strong></p>

<p>得到镜像名称</p>

<pre>
[root@wls12c ~]$ docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
centos latest d83a55af4e75 3 weeks ago 196.7 MB
</pre>

<p>备份镜像</p>

<pre>
[root@wls12c ~]$ docker save centos >centos_save.tar
</pre>

<p>恢复镜像</p>

<pre>
[root@11g ~]$ docker load <centos_save.tar 
</pre>

<p>查看恢复的镜像</p>

<pre>
[root@wls12c ~]$ docker images
REPOSITORY TAG IMAGE ID CREATED 
centos latest d83a55af4e75 3 weeks ago 196.7 MB
</pre>

<p>两者的区别：</p>

<p>导出后再导入(exported-imported)的镜像会丢失所有的历史，而保存后再加载（saveed-loaded）的镜像没有丢失历史和层 (layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回 滚（可以执行docker tag <LAYER ID> <IMAGE NAME>来回滚之前的层）。</p>
