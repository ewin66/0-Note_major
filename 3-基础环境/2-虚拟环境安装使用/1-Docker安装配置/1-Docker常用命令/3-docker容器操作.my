<h1>Docker 容器使用</h1>

<h2>容器命令</h2>

<h3>容器生命周期管理</h3>

<table>
<tbody>
<tr>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-create-command.html" target="_blank">create</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-run-command.html" target="_blank">run</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank">start</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank">stop</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank">restart</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-kill-command.html" target="_blank">kill</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-rm-command.html" target="_blank">rm</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank">pause</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank">unpause</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-exec-command.html" target="_blank">exec</a></td>
</tr>
</tbody>
</table>

<h3>容器操作</h3>

<table>
<tbody>
<tr>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-ps-command.html" target="_blank">ps</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-inspect-command.html" target="_blank">inspect</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-top-command.html" target="_blank">top</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-attach-command.html" target="_blank">attach</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-port-command.html" target="_blank">port</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-logs-command.html" target="_blank">logs</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-events-command.html" target="_blank">events</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-wait-command.html" target="_blank">wait</a></td>
<td style="width:80px"><a href="http://www.runoob.com/docker/docker-export-command.html" target="_blank">export</a></td>
</tr>
</tbody>
</table>

<h2>命令详解</h2>

<h3>创建容器 create</h3>

<p><strong>docker create ：</strong>创建一个新的容器但不启动它</p>

<h3>运行容器 run</h3>

<p>前面我们运行的容器并没有一些什么特别的用处。</p>

<p>接下来让我们尝试使用 docker 构建一个 web 应用程序。</p>

<p>我们将在docker容器中运行一个 Python Flask 应用来运行一个web应用。</p>

<pre>
runoob@runoob:~# docker pull training/webapp # 载入镜像
runoob@runoob:~# docker run -d -P training/webapp python app.py</pre>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker29.png" /></p>

<p>参数说明:</p>

<ul>
<li>
<p><strong>-d:</strong>让容器在后台运行。</p>
</li>
<li>
<p><strong>-P:</strong>将容器内部使用的网络端口映射到我们使用的主机上。</p>
</li>
</ul>

<h3>停止容器 stop</h3>

<pre>
runoob@runoob:~$ docker stop wizardly_chandrasekhar 
wizardly_chandrasekhar</pre>

<h3>启动容器 start</h3>

<p>已经停止的容器，我们可以使用命令 docker start 来启动。</p>

<pre>
runoob@runoob:~$ docker start wizardly_chandrasekhar
wizardly_chandrasekhar</pre>

<p>docker ps -l 查询最后一次创建的容器：</p>

<pre>
# docker ps -l 
CONTAINER ID IMAGE PORTS NAMES
bf08b7f2cd89 training/webapp ... 0.0.0.0:5000->5000/tcp wizardly_chandrasekhar</pre>

<p>正在运行的容器，我们可以使用 docker restart 命令来重启</p>

<h3>移除容器 rm </h3>

<p>我们可以使用 docker rm 命令来删除不需要的容器</p>

<pre>
runoob@runoob:~$ docker rm wizardly_chandrasekhar 
wizardly_chandrasekhar</pre>

<p>删除容器时，容器必须是停止状态，否则会报如下错误</p>

<pre>
runoob@runoob:~$ docker rm wizardly_chandrasekhar
Error response from daemon: You cannot remove a running container bf08b7f2cd897b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85. Stop the container before attempting removal or force remove
</pre>

<h3>查看容器 ps</h3>

<p>使用 docker ps 来查看我们正在运行的容器：</p>

<pre>
runoob@runoob:~# docker ps
CONTAINER ID IMAGE COMMAND ... PORTS 
d3d5e39ed9d3 training/webapp "python app.py" ... 0.0.0.0:32769->5000/tcp</pre>

<p>这里多了端口信息。</p>

<pre>
PORTS
0.0.0.0:32769->5000/tcp</pre>

<p>Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。</p>

<p>这时我们可以通过浏览器访问WEB应用</p>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker31.png" /></p>

<p>我们也可以通过 -p 参数来设置不一样的端口：</p>

<pre>
runoob@runoob:~$ docker run -d -p 5000:5000 training/webapp python app.py</pre>

<p><strong>docker ps</strong>查看正在运行的容器</p>

<pre>
runoob@runoob:~# docker ps
CONTAINER ID IMAGE PORTS NAMES
bf08b7f2cd89 training/webapp ... 0.0.0.0:5000->5000/tcp wizardly_chandrasekhar
d3d5e39ed9d3 training/webapp ... 0.0.0.0:32769->5000/tcp xenodochial_hoov</pre>

<p>容器内部的 5000 端口映射到我们本地主机的 5000 端口上。</p>

<h3>检查容器 inspect </h3>

<p>使用 <strong>docker inspect</strong> 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p>

<pre>
runoob@runoob:~$ docker inspect wizardly_chandrasekhar
[
{
"Id": "bf08b7f2cd897b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85",
"Created": "2018-09-17T01:41:26.174228707Z",
"Path": "python",
"Args": [
"app.py"
],
"State": {
"Status": "running",
"Running": true,
"Paused": false,
"Restarting": false,
"OOMKilled": false,
"Dead": false,
"Pid": 23245,
"ExitCode": 0,
"Error": "",
"StartedAt": "2018-09-17T01:41:26.494185806Z",
"FinishedAt": "0001-01-01T00:00:00Z"
},
......
</pre>

<h3>查看容器日志 logs</h3>

<p>docker logs [ID或者名字] 可以查看容器内部的标准输出。</p>

<pre>
runoob@runoob:~$ docker logs -f bf08b7f2cd89
* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
192.168.239.1 - - [09/May/2016 16:30:37] "GET / HTTP/1.1" 200 -
192.168.239.1 - - [09/May/2016 16:30:37] "GET /favicon.ico HTTP/1.1" 404 -</pre>

<p><strong>-f:</strong> 让 <strong>docker logs</strong> 像使用 <strong>tail -f</strong> 一样来输出容器内部的标准输出。</p>

<p>从上面，我们可以看到应用程序使用的是 5000 端口并且能够查看到应用程序的访问日志。</p>

<h3>查看容器进程 top</h3>

<p>我们还可以使用 docker top 来查看容器内部运行的进程</p>

<pre>
runoob@runoob:~$ docker top wizardly_chandrasekhar
UID PID PPID ... TIME CMD
root 23245 23228 ... 00:00:00 python app.py</pre>

<h3>查看容器端口映射 port</h3>

<p>通过 <strong>docker ps</strong> 命令可以查看到容器的端口映射，<strong>docker</strong> 还提供了另一个快捷方式 <strong>docker port</strong>，使用 <strong>docker port</strong> 可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号。</p>

<p>上面我们创建的 web 应用容器 ID 为 <strong>bf08b7f2cd89</strong> 名字为 <strong>wizardly_chandrasekhar</strong>。</p>

<p>我可以使用 docker port bf08b7f2cd89 或 docker port wizardly_chandrasekhar 来查看容器端口的映射情况。</p>

<pre>
runoob@runoob:~$ docker port bf08b7f2cd89
5000/tcp -> 0.0.0.0:5000</pre>

<pre>
runoob@runoob:~$ docker port wizardly_chandrasekhar
5000/tcp -> 0.0.0.0:5000
</pre>

<h2>容器文件管理</h2>

<h3>容器文件</h3>

<p><strong>image 文件生成的容器实例，本身也是一个文件，称为容器文件。</strong>也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>

<h3>容器文件操作</h3>

<p>查看容器实例</p>

<p>docker ps -a</p>

<p>删除容器实例</p>

<p>docker rm ( comtainer id )</p>

<p># 列出本机正在运行的容器</p>

<p>docker container ls</p>

<p># 列出本机所有容器，包括终止运行的容器</p>

<p>docker container ls --all</p>

<p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的<code>docker container kill</code>命令。</p>

<p>终止容器运行</p>

<p>docker container kill</p>

<p>终止运行的容器文件，依然会占据硬盘空间，可以使用<a href="https://docs.docker.com/engine/reference/commandline/container_rm/" target="_blank"><code>docker container rm</code></a>命令删除。</p>

<p>docker container rm ( comtainer id )</p>

<p>运行上面的命令之后，再使用<code>docker container ls --all</code>命令，就会发现被删除的容器文件已经消失了。</p>
