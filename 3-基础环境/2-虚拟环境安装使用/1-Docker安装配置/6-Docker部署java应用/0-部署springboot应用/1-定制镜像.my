<h1>将项目容器化</h1>

<p>Docker 使用 Dockerfile 文件格式来指定 image 层，</p>

<h2>创建文件 src/main/docker/Dockerfile:</h2>

<pre>
<code>FROM frolvlad/alpine-oraclejdk8:slim
VOLUME /tmp
ADD lidong-spring-boot-demo-1.0-SNAPSHOT.jar app.jar
RUN sh -c &#39;touch /app.jar&#39;
ENV JAVA_OPTS=&quot;&quot;
ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</code></pre>

<h2>解释下这个配置文件</h2>

<p>VOLUME 指定了临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录&nbsp;<br />
项目的 jar 文件作为 &ldquo;app.jar&rdquo; 添加到容器的&nbsp;<br />
ENTRYPOINT 执行项目 app.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 &ldquo;/dev/urandom&rdquo; 作为 Entropy Source&nbsp;<br />
构建 Docker Image</p>

<h2>执行构建成为 docker image:</h2>

<pre>
<code>mvn package docker:build</code>
</pre>

<h2>运行</h2>

<p>运行 Docker Image</p>

<pre>
<code>docker run -p 8081:8081 -t springio/lidong-spring-boot-demo</code>
</pre>

<p><img alt="这里写图片描述" src="https://img-blog.csdn.net/20170220101315389?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDA0NjkwOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" style="height:495px; width:800px" title="" /></p>

<p>看到这个Spring的图标。就以为这我们在docker 上发布Spring boot 程序已经完成。</p>

<p>接下来去访问在浏览器访问&nbsp;<a href="http://localhost:8081/" target="_blank">http://localhost:8081/</a>，可以看到页面 &ldquo;Hello Docker World.&rdquo; 字样。</p>
