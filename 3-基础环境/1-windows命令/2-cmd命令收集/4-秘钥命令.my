<h1>keytool命令总结</h1>

<h1>一、创建数字证书</h1>

<p>交互模式</p>

<p>使用默认的密钥库.keystore(目录是c:&nbsp;Documents&nbsp;and&nbsp;Setting用户名)和算法(DSA)</p>

<p>keytool&nbsp;-genkey</p>

<p>默认的别名mykey</p>

<p>密钥库中可以存放多个条目（公钥/私钥对和证书），它们在密钥库中以别名(alias)区分。</p>

<ol start="1">
	<li>keytool&nbsp;-genkey&nbsp;-alias&nbsp;mytest&nbsp;-keyalg&nbsp;RSA&nbsp;-keysize&nbsp;1024&nbsp;-keystore&nbsp;mykeystore&nbsp;-validity&nbsp;4000&nbsp;&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>其中，　　　</p>

<p>-keyalg参数可以指定密钥的算法，如果需要指定密钥的长度，可以再加上-keysize参数。密钥长度默认为1024位，使用DSA算法时，密钥长度必须在512到1024之间，并且是64的整数倍。</p>

<p>-keystore参数可以指定密钥库的名称。密钥库其实是存放密钥和证书的文件，密钥库对应的文件如果不存在自动创建。</p>

<p>-validity参数可以指定所创建的证书有效期是多少天。</p>

<p>非交互模式：</p>

<p>keytool&nbsp;-genkey&nbsp;-dname&nbsp;&quot;CN=tmp,&nbsp;OU=NC,&nbsp;O=Shanghai&nbsp;University,&nbsp;L=ZB,&nbsp;ST=Shanghai,&nbsp;C=CN&quot;&nbsp;-alias&nbsp;tmp&nbsp;-keyalg&nbsp;RSA&nbsp;-keystore&nbsp;</p>

<h1>二、数字证书的显示（从密钥库中）</h1>

<p>默认密钥库全部证书信息</p>

<p>keytool&nbsp;-list&nbsp;-v(显示详细信息)</p>

<p>显示指定密钥库指定条目证书信息（包含了发照者（签发者）、序号、有效期、MD5和SHA1认证指纹等额外信息）</p>

<p>keytool&nbsp;-list&nbsp;-v&nbsp;-keystore&nbsp;lfkeystore&nbsp;-alias&nbsp;lf&nbsp;&nbsp;</p>

<h1>三、使用Keytool将数字证书导出到文件</h1>

<p>将指定的证书从密钥库导出为没编码过的文件。</p>

<p>keytool&nbsp;-export&nbsp;-alias&nbsp;lf&nbsp;-file&nbsp;lf.cer&nbsp;&nbsp;-keystore&nbsp;lfkeystore&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-export&nbsp;-alias&nbsp;lf&nbsp;-file&nbsp;lf.cer&nbsp;&nbsp;-keystore&nbsp;lfkeystore&nbsp;&nbsp;&nbsp;</li>
</ol>

<h1>四、使用Keytool从文件中显示证书</h1>

<p>&nbsp;</p>

<p>keytool&nbsp;-printcert&nbsp;-file&nbsp;&nbsp;lf.cer&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-printcert&nbsp;-file&nbsp;&nbsp;lf.cer&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<h1>五、在Windows中从文件显示证书</h1>

<p>&nbsp;</p>

<p>只要文件名以.cer为后缀，Windows操作系统就可以直接识别。如在Windows中双击lf.cer图标，将出现证书窗口。其中包含了证书的所有者、颁发者、有效期等信息。</p>

<p>点击&ldquo;详细资料&rdquo;，可以看到证书的版本、序号、签名算法、颁发者、有效期、主题（即全名）、公钥算法、拇印算法、拇印等信息。其中的拇印即认证指纹。</p>

<h1>六、密钥库的维护</h1>

<p>使用Keytool删除指定条目</p>

<p>keytool&nbsp;-delete&nbsp;-alias&nbsp;tmp1&nbsp;-keystore&nbsp;mykeystore&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-delete&nbsp;-alias&nbsp;tmp1&nbsp;-keystore&nbsp;mykeystore&nbsp;&nbsp;</li>
</ol>

<p>使用Keytool修改指定条目的口令</p>

<p>keytool&nbsp;-keypasswd&nbsp;-alias&nbsp;tmp1&nbsp;-keystore&nbsp;mykeystore&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-keypasswd&nbsp;-alias&nbsp;tmp1&nbsp;-keystore&nbsp;mykeystore&nbsp;&nbsp;</li>
</ol>

<p>（非交互模式:keytool&nbsp;-keypasswd&nbsp;-alias&nbsp;tmp1&nbsp;-keystore&nbsp;mykeystore&nbsp;-storepass&nbsp;wshr.ut&nbsp;-keypass&nbsp;123456&nbsp;-new&nbsp;080302,其中080302为原密码，123456为新密码&nbsp;）</p>

<p>证书生成应用实例：</p>

<p>执行命令前先保证文件夹存在。例如：在c盘建立keystore文件夹<br />
第一步：为服务器生成证书&nbsp;</p>

<p>确定域名：本机中域名解析修改文件是C:/WINDOWS/system32/drivers/etc/hosts<br />
使用keytool&nbsp;为&nbsp;Tomcat&nbsp;生成证书和密钥库，假定目标机器的域名是&ldquo;&nbsp;hepengfei&nbsp;&rdquo;，&nbsp;keystore&nbsp;文件存放在&ldquo;&nbsp;C:keystoreserver&nbsp;&rdquo;，口令为&ldquo;&nbsp;080302&nbsp;&rdquo;，命令如下：&nbsp;<br />
keytool&nbsp;-genkey&nbsp;-v&nbsp;-keystore&nbsp;C:/keystore/server&nbsp;-alias&nbsp;serverkey&nbsp;-keyalg&nbsp;RSA&nbsp;-validity&nbsp;3650&nbsp;-dname&nbsp;&quot;CN=hepengfei,OU=cn,O=cn,L=cn,ST=cn,c=cn&quot;&nbsp;-storepass&nbsp;080302&nbsp;-keypass&nbsp;080302&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-genkey&nbsp;-v&nbsp;-keystore&nbsp;C:keystoreserver&nbsp;-alias&nbsp;serverkey&nbsp;-keyalg&nbsp;RSA&nbsp;-validity&nbsp;3650&nbsp;-dname&nbsp;&quot;CN=hepengfei,OU=cn,O=cn,L=cn,ST=cn,c=cn&quot;&nbsp;-storepass&nbsp;080302&nbsp;-keypass&nbsp;080302&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>生成server.cer安装在客户端解决服务器信任问题：</p>

<p>keytool&nbsp;-export&nbsp;-keystore&nbsp;C:/keystore/server&nbsp;-alias&nbsp;serverkey&nbsp;-file&nbsp;c:/keystore/server.cer&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-export&nbsp;-keystore&nbsp;C:keystoreserver&nbsp;-alias&nbsp;serverkey&nbsp;-file&nbsp;c:keystoreserver.cer&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>第二步：为客户端生成证书&nbsp;</p>

<p>（注意：个人证书的生成和使用比较特别，是分开的。先生成p12文件，然后导出cer文件，再将cer文件导入默认类型的keystore（JKS）文件）<br />
这一步是为浏览器生成证书，以便让服务器来验证它。为了能将证书顺利导入至IE&nbsp;和&nbsp;Firefox&nbsp;，证书格式应该是&nbsp;PKCS12&nbsp;，因此，使用如下命令生成：&nbsp;<br />
keytool&nbsp;-genkey&nbsp;-v&nbsp;-keystore&nbsp;C:/keystore/user.p12&nbsp;-alias&nbsp;MyPC&nbsp;-keyalg&nbsp;RSA&nbsp;-storetype&nbsp;PKCS12&nbsp;-validity&nbsp;3650&nbsp;-dname&nbsp;&quot;CN=MyPC,OU=cn,O=cn,L=cn,ST=cn,c=cn&quot;&nbsp;-storepass&nbsp;080302&nbsp;-keypass&nbsp;080302&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-genkey&nbsp;-v&nbsp;-keystore&nbsp;C:keystoreuser.p12&nbsp;-alias&nbsp;MyPC&nbsp;-keyalg&nbsp;RSA&nbsp;-storetype&nbsp;PKCS12&nbsp;-validity&nbsp;3650&nbsp;-dname&nbsp;&quot;CN=MyPC,OU=cn,O=cn,L=cn,ST=cn,c=cn&quot;&nbsp;-storepass&nbsp;080302&nbsp;-keypass&nbsp;080302&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>服务器要信任客户端证书，就必须把客户端证书添加为服务器的信任认证。由于不能直接将&nbsp;PKCS12&nbsp;格式的证书库导入，我们必须先把客户端证书导出为一个单独的&nbsp;CER&nbsp;文件，使用如下命令：&nbsp;<br />
keytool&nbsp;-export&nbsp;-alias&nbsp;MyPC&nbsp;-keystore&nbsp;C:/keystore/user.p12&nbsp;-storetype&nbsp;PKCS12&nbsp;-storepass&nbsp;080302&nbsp;-rfc&nbsp;-file&nbsp;C:/keystore/user.cer&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-export&nbsp;-alias&nbsp;MyPC&nbsp;-keystore&nbsp;C:keystoreuser.p12&nbsp;-storetype&nbsp;PKCS12&nbsp;-storepass&nbsp;080302&nbsp;-rfc&nbsp;-file&nbsp;C:keystoreuser.cer&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>接着，将C:user.cer导入到服务器的证书库，添加为一个信任证书：&nbsp;</p>

<p>keytool&nbsp;-import&nbsp;-v&nbsp;-file&nbsp;C:/keystore/user.cer&nbsp;-keystore&nbsp;c:/keystore/servertrust&nbsp;-alias&nbsp;user&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-import&nbsp;-v&nbsp;-file&nbsp;C:keystoreuser.cer&nbsp;-keystore&nbsp;c:keystoreservertrust&nbsp;-alias&nbsp;user&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;</li>
</ol>

<p>输入&ldquo;是&rdquo;确认完成。<br />
<br />
通过list&nbsp;命令查看：&nbsp;<br />
keytool&nbsp;-list&nbsp;-keystore&nbsp;c:/keystore/servertrust&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-list&nbsp;-keystore&nbsp;c:keystoreservertrust&nbsp;-storepass&nbsp;080302&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>也可以考虑将服务器证书和服务器信任证书放到一个密钥库中</p>

<p>注意点：</p>

<p>keytool&nbsp;-list&nbsp;-v&nbsp;-keystore&nbsp;user</p>

<p>使用的私钥库要privateKeyEntry</p>

<p>信任的库要trustedCertEntry</p>

<p><a href="http://911700.com/index.php?s=articles_373.html" target="_blank">ConvertKeystoreType.java</a>用于转换密钥库类型（PKCS12与JKS格式证书库转换工具）</p>

<p>生成证书请求：</p>

<p>keytool&nbsp;-certreq&nbsp;-alias&nbsp;tomcat_server&nbsp;-sigalg&nbsp;MD5withRSA&nbsp;-file&nbsp;tomcat_server.csr&nbsp;-keypass&nbsp;123456&nbsp;-storepass&nbsp;123456&nbsp;-keystore&nbsp;server_keystore&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-certreq&nbsp;-alias&nbsp;tomcat_server&nbsp;-sigalg&nbsp;MD5withRSA&nbsp;-file&nbsp;tomcat_server.csr&nbsp;-keypass&nbsp;123456&nbsp;-storepass&nbsp;123456&nbsp;-keystore&nbsp;server_keystore&nbsp;&nbsp;&nbsp;</li>
</ol>

<p>PKCS12</p>

<p>使用Keytool列出pkcs12证书的内容<br />
keytool&nbsp;-rfc&nbsp;-list&nbsp;-keystore&nbsp;tomcat_client.p12&nbsp;-storetype&nbsp;pkcs12&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;-rfc&nbsp;-list&nbsp;-keystore&nbsp;tomcat_client.p12&nbsp;-storetype&nbsp;pkcs12&nbsp;&nbsp;</li>
</ol>

<p>使用Keytool导出pkcs12证书的公钥证书</p>

<p>keytool&nbsp;&nbsp;-keystore&nbsp;tomcat_client.p12&nbsp;-storetype&nbsp;pkcs12&nbsp;-export&nbsp;-alias&nbsp;mypc&nbsp;-file&nbsp;mypc.cer&nbsp;&nbsp;</p>

<ol start="1">
	<li>keytool&nbsp;&nbsp;-keystore&nbsp;tomcat_client.p12&nbsp;-storetype&nbsp;pkcs12&nbsp;-export&nbsp;-alias&nbsp;mypc&nbsp;-file&nbsp;mypc.cer&nbsp;&nbsp;</li>
</ol>

<p>&nbsp;</p>

<p>将已经签名的证书导入密钥库（覆盖原来的公钥）</p>
