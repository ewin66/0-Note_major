<h1>centos7安装mysql(yum方式)</h1>

<h2>mysql启停：</h2>

<p><code>systemctl start mysqld</code></p>

<p><code>systemctl stop mysqld</code></p>

<h2>1、配置YUM源</h2>

<p>在MySQL官网中下载YUM源rpm安装包：http://dev.mysql.com/downloads/repo/yum/ <br />
<img alt="MySQL YUM源下载地址" src="https://www.linuxidc.com/upload/2016_09/160918124758191.png" style="width:705px" title="" /></p>

<pre>
<code># 下载mysql源安装包
shell> wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
# 安装mysql源
shell> yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></pre>

<p>检查mysql源是否安装成功</p>

<pre>
<code>shell> yum repolist enabled | grep "mysql.*-community.*"</code></pre>

<p><img alt="检查mysql源安装是否正确" src="https://www.linuxidc.com/upload/2016_09/160918124758192.png" title="" /> <br />
看到上图所示表示安装成功。 <br />
可以修改<code>vim /etc/yum.repos.d/mysql-community.repo</code>源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。改完之后的效果如下所示： <br />
<img alt="这里写图片描述" src="https://www.linuxidc.com/upload/2016_09/160918124758197.jpg" style="width:705px" title="" /></p>

<h2>2、安装MySQL</h2>

<pre>
<code>shell> yum install mysql-community-server</code></pre>

<h2>3、启动MySQL服务</h2>

<pre>
<code>shell> systemctl start mysqld</code></pre>

<p>查看MySQL的启动状态</p>

<pre>
<code>shell> systemctl status mysqld
● mysqld.service - MySQL Server
Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)
Active: active (running) since 五 2016-06-24 04:37:37 CST; 35min ago
Main PID: 2888 (mysqld)
CGroup: /system.slice/mysqld.service
└─2888 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid

6月 24 04:37:36 localhost.localdomain systemd[1]: Starting MySQL Server...
6月 24 04:37:37 localhost.localdomain systemd[1]: Started MySQL Server.</code></pre>

<h2>4、开机启动</h2>

<pre>
<code>shell> systemctl enable mysqld
shell> systemctl daemon-reload</code></pre>

<h2>5、修改root本地登录密码</h2>

<p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>

<pre>
<code>shell> grep 'temporary password' /var/log/mysqld.log</code></pre>

<p><img alt="root默认密码" src="https://www.linuxidc.com/upload/2016_09/160918124758193.png" style="width:705px" title="" /></p>

<pre>
<code>shell> mysql -u root -p
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!'; </code></pre>

<p>或者</p>

<pre>
<code>mysql> set password for 'root'@'localhost'=password('MyNewPass4!'); </code></pre>

<p><code>mysql> set password for 'root'@'localhost'=password('wenhua123')</code></p>

<p>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示： <br />
<img alt="密码策略提示" src="https://www.linuxidc.com/upload/2016_09/160918124758194.png" title="" /></p>

<p>通过msyql环境变量可以查看密码策略的相关信息：</p>

<pre>
<code>mysql> show variables like '%password%';</code></pre>

<p><img alt="mysql密码策略" src="https://www.linuxidc.com/upload/2016_09/160918124758195.png" title="" /> <br />
validate_password_policy：密码策略，默认为MEDIUM策略 <br />
validate_password_dictionary_file：密码策略文件，策略为STRONG才需要 <br />
validate_password_length：密码最少长度 <br />
validate_password_mixed_case_count：大小写字符长度，至少1个 <br />
validate_password_number_count ：数字至少1个 <br />
validate_password_special_char_count：特殊字符至少1个 <br />
<em>上述参数是默认策略MEDIUM的密码检查规则。</em></p>

<p>共有以下几种密码策略：</p>

<table>
<thead>
<tr>
<th>策略</th>
<th>检查规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 or LOW</td>
<td>Length</td>
</tr>
<tr>
<td>1 or MEDIUM</td>
<td>Length; numeric, lowercase/uppercase, and special characters</td>
</tr>
<tr>
<td>2 or STRONG</td>
<td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>
</tr>
</tbody>
</table>

<p>MySQL官网密码策略详细说明：http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</p>

<h4><code>修改密码策略一:</code></h4>

<p><span style="font-family:monospace">对于实际中的安装，只执行下面一句就可以了。。</span></p>

<p>set global validate_password_policy=0;</p>

<p>有时还需设置密码长度限制：</p>

<p>set global validate_password_length=1;</p>

<h4>修改密码策略二：</h4>

<p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略</p>

<pre>
<code># 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件
validate_password_policy=0</code></pre>

<p>如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p>

<pre>
<code>validate_password = off</code></pre>

<p>重新启动mysql服务使配置生效：</p>

<pre>
<code>systemctl restart mysqld</code>
</pre>

<h2>6、添加远程登录用户</h2>

<p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：</p>

<p>方式一：命令</p>

<p><code>GRANT ALL PRIVILEGES ON *.* TO 'yangxin'@'%' IDENTIFIED BY 'Yangxin0917!' WITH GRANT OPTION;</code></p>

<p>方式二：直接改系统库</p>

<p>update user set host='%' where user='<code>yangxin</code>';</p>

<p>最后，记得刷新权限</p>

<p> flush privileges;</p>

<h2>7、配置默认编码为utf8</h2>

<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p>

<pre>
<code>[mysqld]
character_set_server=utf8
init_connect='SET NAMES utf8'</code></pre>

<p>重新启动mysql服务，查看数据库默认编码如下所示：</p>

<p><img alt="mysql默认编码" src="https://www.linuxidc.com/upload/2016_09/160918124758196.png" title="" /></p>

<hr />
<p><strong>默认配置文件路径：</strong> <br />
配置文件：/etc/my.cnf <br />
日志文件：/var/log//var/log/mysqld.log <br />
服务启动脚本：/usr/lib/systemd/system/mysqld.service <br />
socket文件：/var/run/mysqld/mysqld.pid</p>

<p> </p>

<h2>密码规范要求</h2>

<p>为了加强安全性，MySQL5.7为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。</p>

<p>一般可通过log_error设置</p>

<pre>
mysql> select @@log_error;
+---------------------+
| @@log_error |
+---------------------+
| /var/log/mysqld.log |
+---------------------+
1 row in set (0.00 sec)
</pre>

<p>可通过# grep "password" /var/log/mysqld.log 命令获取MySQL的临时密码</p>

<pre>
2016-01-19T05:16:36.218234Z 1 [Note] A temporary password is generated for root@localhost: waQ,qR%be2(5</pre>

<p>用该密码登录到服务端后，必须马上修改密码，不然会报如下错误：</p>

<pre>
mysql> select user();
ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</pre>

<p>如果只是修改为一个简单的密码，会报以下错误：</p>

<pre>
mysql> ALTER USER USER() IDENTIFIED BY '12345678';
ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</pre>

<p>这个其实与validate_password_policy的值有关。</p>

<p>validate_password_policy有以下取值：</p>

<table border="1" summary="This table lists the password policies enforced
by the validate_password plugin and
describes the tests performed for each policy.">
<thead>
<tr>
<th scope="col">Policy</th>
<th scope="col">Tests Performed</th>
</tr>
</thead>
<tbody>
<tr>
<td scope="row"><code>0</code> or <code>LOW</code></td>
<td>Length</td>
</tr>
<tr>
<td scope="row"><code>1</code> or <code>MEDIUM</code></td>
<td>Length; numeric, lowercase/uppercase, and special characters</td>
</tr>
<tr>
<td scope="row"><code>2</code> or <code>STRONG</code></td>
<td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>
</tr>
</tbody>
</table>

<p>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p>

<p>有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。</p>

<p>必须修改两个全局参数：</p>

<p>首先，修改validate_password_policy参数的值</p>

<pre>
mysql> set global validate_password_policy=0;
Query OK, 0 rows affected (0.00 sec)</pre>

<p>这样，判断密码的标准就基于密码的长度了。这个由validate_password_length参数来决定。</p>

<pre>
mysql> select @@validate_password_length;
+----------------------------+
| @@validate_password_length |
+----------------------------+
| 8 |
+----------------------------+
1 row in set (0.00 sec)
</pre>

<p>validate_password_length参数默认为8，它有最小值的限制，最小值为：</p>

<pre>
validate_password_number_count
+ validate_password_special_char_count
+ (2 * validate_password_mixed_case_count)</pre>

<p>其中，validate_password_number_count指定了密码中数据的长度，validate_password_special_char_count指定了密码中特殊字符的长度，validate_password_mixed_case_count指定了密码中大小字母的长度。</p>

<p>这些参数，默认值均为1，所以validate_password_length最小值为4，如果你显性指定validate_password_length的值小于4，尽管不会报错，但validate_password_length的值将设为4。如下所示：</p>

<pre>
mysql> select @@validate_password_length;
+----------------------------+
| @@validate_password_length |
+----------------------------+
| 8 |
+----------------------------+
1 row in set (0.00 sec)

mysql> set global validate_password_length=1;
Query OK, 0 rows affected (0.00 sec)

mysql> select @@validate_password_length;
+----------------------------+
| @@validate_password_length |
+----------------------------+
| 4 |
+----------------------------+
1 row in set (0.00 sec)
</pre>

<p>如果修改了validate_password_number_count，validate_password_special_char_count，validate_password_mixed_case_count中任何一个值，则validate_password_length将进行动态修改。</p>

<pre>
mysql> select @@validate_password_length;
+----------------------------+
| @@validate_password_length |
+----------------------------+
| 4 |
+----------------------------+
1 row in set (0.00 sec)

mysql> select @@validate_password_mixed_case_count;
+--------------------------------------+
| @@validate_password_mixed_case_count |
+--------------------------------------+
| 1 |
+--------------------------------------+
1 row in set (0.00 sec)

mysql> set global validate_password_mixed_case_count=2;
Query OK, 0 rows affected (0.00 sec)

mysql> select @@validate_password_mixed_case_count;
+--------------------------------------+
| @@validate_password_mixed_case_count |
+--------------------------------------+
| 2 |
+--------------------------------------+
1 row in set (0.00 sec)

mysql> select @@validate_password_length;
+----------------------------+
| @@validate_password_length |
+----------------------------+
| 6 |
+----------------------------+
1 row in set (0.00 sec)
</pre>

<p>当然，前提是validate_password插件必须已经安装，MySQL5.7是默认安装的。</p>

<p>那么如何验证validate_password插件是否安装呢？可通过查看以下参数，如果没有安装，则输出将为空。</p>

<pre>
mysql> SHOW VARIABLES LIKE 'validate_password%';
+--------------------------------------+-------+
| Variable_name | Value |
+--------------------------------------+-------+
| validate_password_dictionary_file | |
| validate_password_length | 6 |
| validate_password_mixed_case_count | 2 |
| validate_password_number_count | 1 |
| validate_password_policy | LOW |
| validate_password_special_char_count | 1 |
+--------------------------------------+-------+
6 rows in set (0.00 sec)
</pre>

<p> </p>

<h2>附录：my.cnf</h2>

<p># For advice on how to change settings please see<br />
# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html<br />
[mysql]<br />
default-character-set=utf8</p>

<p>[mysqld]<br />
#<br />
skip-grant-tables=1<br />
# Remove leading # and set to the amount of RAM for the most important data<br />
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.<br />
# innodb_buffer_pool_size = 128M<br />
#<br />
# Remove leading # to turn on a very important data integrity option: logging<br />
# changes to the binary log between backups.<br />
# log_bin<br />
#<br />
# Remove leading # to set options mainly useful for reporting servers.<br />
# The server defaults are faster for transactions and fast SELECTs.<br />
# Adjust sizes as needed, experiment to find the optimal values.<br />
# join_buffer_size = 128M<br />
# sort_buffer_size = 2M<br />
# read_rnd_buffer_size = 2M<br />
character-set-server=utf8<br />
open_files_limit = 65535<br />
max_connections = 2400<br />
max_user_connections =2000<br />
table_open_cache = 2500</p>

<p>log-bin-trust-function-creators=1<br />
lower_case_table_names=1</p>

<p><strong>//一开始这里写的是自己指定的数据存放位置： /database/mysql/data 结果一直不行，甚至一开始的时候mysql启动了，但是这个配置文件直接没生效。</strong></p>

<p><strong>//可能原因分析：datadir与socket最好配置在一起，socket放在datadir下面。 yum安装的程序，是自动有用户组的，mysql相关文件自动在mysql:mysql用户权限下。</strong></p>

<p><strong>datadir=/var/lib/mysql   <br />
socket=/var/lib/mysql/mysql.sock</strong></p>

<p>lower_case_table_names = 1</p>

<p>log-error=/var/log/mysqld.log<br />
slow_query_log = on<br />
slow_query_log_file = /database/mysql/mysql-slow.log<br />
long_query_time = 2</p>

<p>log-bin = mysql-bin<br />
server-id = 1<br />
binlog-ignore-db = information_schema<br />
binlog-ignore-db = cluster<br />
binlog-ignore-db = mysql<br />
#binlog-do-db = test_db<br />
#innodb<br />
default-storage-engine = INNODB<br />
innodb_open_files=60000</p>

<p># Disabling symbolic-links is recommended to prevent assorted security risks<br />
symbolic-links=0</p>

<p># Recommended in standard MySQL setup<br />
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br />
#sql_mode = "STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</p>

<p>group_concat_max_len = 2048000</p>

<p><br />
[mysqld_safe]<br />
log-error=/var/log/mysqld.log<br />
pid-file=/var/run/mysqld/mysqld.pid<br />
 </p>
