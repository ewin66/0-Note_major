<h1>jenkins 发布项目</h1>

<h2>一、安装插件</h2>

<p>Jenkins运行自动部署war包到servlet容器内，要实现这个功能必须安装一个插件 ：&nbsp; <span style="font-size:16px"><strong>Deploy to container Plugin</strong></span>。</p>

<p><strong>注意，安装插件之后，最好将jenkins重启一下。不然可能出现这个那个错。</strong></p>

<h2>二、项目构建设置-Maven风格</h2>

<h3>1&nbsp;新建Maven构建任务</h3>

<p><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E6%9E%84%E5%BB%BAMaven%E9%A3%8E%E6%A0%BC%E7%9A%84Job1.png" style="height:254px; width:600px" /></p>

<p>新建Job界面</p>

<p>这时，需要为新的构建任务指定一个名称。（这里输入的任务名称为：maven_test）这里有几种的任务类型可供选择，鉴于初步介绍，先选择构建一个maven2/3项目。对于其他的类型,经常使用的是拷贝已存在任务;这主要为了能在现有的任务基础上新建任务。点击OK按钮，</p>

<h3>2 构建任务配置</h3>

<p><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E6%9E%84%E5%BB%BAMaven%E9%A3%8E%E6%A0%BC%E7%9A%84Job2.jpg" style="height:450px; width:600px" /></p>

<h3>3&nbsp;源码管理配置</h3>

<p>演示是使用Subversion的链接，在Repository&nbsp;URL中输入你的项目链接，如果没有权限则会提示如下图：</p>

<p><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E6%9E%84%E5%BB%BAMaven%E9%A3%8E%E6%A0%BC%E7%9A%84Job3.png" style="height:345px; width:600px" /></p>

<p>点击&nbsp;enter&nbsp;credential&nbsp;输入用户名和密码(我猜大家一般都是使用的用户名和密码登陆的)</p>

<p><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E6%9E%84%E5%BB%BAMaven%E9%A3%8E%E6%A0%BC%E7%9A%84Job4.png" style="height:180px; width:500px" /></p>

<p>Subversion权限认证界面</p>

<p>Ps：svn的用户名和密码设置了是没有办法在web界面修改的。如果要修改则先去Jenkins目录删除hudson.scm.SubversionSCM.xml文件（点到为止，毕竟这只是入门教程）</p>

<h3>4&nbsp;构建触发器</h3>

<p>在其他项目构建完成后才执行构建：指定的项目完成构建后，触发此项目的构建。</p>

<p>Poll&nbsp;SCM&nbsp;：这是CI&nbsp;系统中常见的选项。当您选择此选项，您可以指定一个定时作业表达式来定义Jenkins每隔多久检查一下您源代码仓库的变化。如果发现变化，就执行一次构建。例如，表达式中填写0,15,30,45&nbsp;*&nbsp;*&nbsp;*&nbsp;*将使Jenkins每隔15分钟就检查一次您源码仓库的变化。</p>

<p>Build&nbsp;periodically&nbsp;：此选项仅仅通知Jenkins按指定的频率对项目进行构建，而不管SCM是否有变化。如果想在这个Job中运行一些测试用例的话，它就很有帮助。</p>

<p>构建触发器指定了触发一次构建的条件。推荐使用最简单的配置&ldquo;Poll SCM&rdquo;，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。</p>

<p>我们在日程表中填入：</p>

<pre>
<code>* * * * *
</code></pre>

<p><img alt="trigger" src="https://cdn.webxueyuan.com/cdn/files/attachments/00146327849499017559f1c3205410e82719c7540b115d8000/l" /></p>

<p>表示每分钟检查一次。如果你觉得太频繁，可以改成&ldquo;每3分钟检查一次&rdquo;：</p>

<h4><code>常用时间设置：</code></h4>

<p>每15分钟构建一次：H/15 * * * * &nbsp; 或 */5 * * * *</p>

<p>每天8点构建一次：0 8 * * *</p>

<p>每天8点~17点，两小时构建一次：0 8-17/2 * * *</p>

<p>周一到周五，8点~17点，两小时构建一次：0 8-17/2 * * 1-5</p>

<p>每月1号、15号各构建一次，除12月：H H 1,15 1-11 *</p>

<p>*/5 * * * * （每5分钟检查一次源码变化）</p>

<p>0 2 * * * （每天2:00 必须build一次源码）</p>

<h3>5 build命令</h3>

<p><img alt="" src="http://img.blog.csdn.net/20160519153958315?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" /></p>

<p>Goals and options ：<strong>clean install &nbsp;-Dmaven.test.skip=true</strong>　　#加入了跳过测试的代码</p>

<p>Root&nbsp;POM:填写你项目的pom.xml文件的位置，注意：是相对位置，如果该文件不存在，会有红色字提示。</p>

<p>&nbsp;</p>

<h3>6 邮件通知设置</h3>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164218-6157f509823e48ae94df91b553a652e3.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A51.png" style="height:69px; width:200px" /></p>

<p>图25 构建后操作界面</p>

<p>选择Add&nbsp;post-build&nbsp;action，然后选择E-mail&nbsp;Notification，如下图：</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164227-190eef801e194e43a594fbe56ae75206.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A52.png" style="height:194px; width:600px" /></p>

<p>收件人列表界面</p>

<p>在Recipients中输入收件人邮件地址，如果用多个收件人用&ldquo;,&rdquo;英文逗号隔开</p>

<h3>7 发布war包到tomcat下</h3>

<p>选择Add&nbsp;post-build&nbsp;action，然后选择Deploy&nbsp;war/ear&nbsp;to&nbsp;a&nbsp;container，如下图：</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201309/04135510-5022a5dc080a4670bf6b9cf1ea9488f6.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/war%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B22.png" style="height:268px; width:600px" /></p>

<h4>远程部署配置界面</h4>

<p>WAR/EAR&nbsp;files：war文件的存放位置，如：target/jxpt-web.war 或者： **/*.war&nbsp;或者 **/jxpt-web.war 注意：相对路径，target前是没有/的。</p>

<p><strong>这里的路径很奇怪，之前用&nbsp;target/jxpt-web.war 是可以的，后来不行了，必须用 **/jxpt-web.war。</strong></p>

<p>Context&nbsp;path：访问时需要输入的内容，如ofCard访问时如下：http://192.168.x.x:8080/ofCard/如果为空，默认是war包的名字。</p>

<p>Container：选择你的web容器，如tomca&nbsp;6.x</p>

<p>Manager&nbsp;user&nbsp;name：填入tomcat-users.xml配置的username内容</p>

<p>Manager&nbsp;password：填入tomcat-users.xml配置的password内容</p>

<p>Tomcat&nbsp;URL：填入http://192.168.x.x:8080/</p>

<p>Deploy&nbsp;on&nbsp;failure：构建失败依然部署，一般不选择</p>

<p>注意：虽然这种部署方法可能会导致tomcat加载时出现卡死的现象。但是也是最简单的部署方式。如果卡死了重启下就好了，将tomcat的java内存参数调高可以解决这个问题。</p>

<p>最后不要忘记点击保存喔。</p>

<p>好了！到此一个项目的获取源码，打包，远程部署，邮件通知就完成了。</p>

<p>&nbsp;</p>

<h2>三 监控</h2>

<p>当任务一旦运行，您将会看到这个任务正在队列中的仪表板和当前工作主页上运行。这两种显示如下。</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164311-d3bba270cef244269a2fab18b74df034.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E7%9B%91%E6%8E%A71.png" style="height:139px; width:500px" /></p>

<p>主页监控（左），项目监控（右）</p>

<p>一旦构建完成后，完成后的任务将会有三个地方进行显示。</p>

<p>你可以在Jenkins的控制面板上看到它，如下图。</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164320-7fa46061ee2147d3a66655ce878609ed.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E7%9B%91%E6%8E%A72.png" style="height:44px; width:600px" /></p>

<p>图30 主页项目界面</p>

<p>在上面展示的截图中，您将注意到有两个图标描述当前作业的状态。S栏目代表着&ldquo;最新构建状态&rdquo;，W栏目代表着&ldquo;构建稳定性&rdquo;。Jenkins使用这两个概念来介绍一个作业的总体状况：</p>

<p>构建状态:下图中分级符号概述了一个Job新近一次构建会产生的四种可能的状态：&nbsp;</p>

<p>Successful:完成构建，且被认为是稳定的。</p>

<p>Unstable:完成构建，但被认为不稳定。</p>

<p>Failed:构建失败。</p>

<p>Disabled:构建已禁用。</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164329-a5349dc8bbce4f3d8a280d3de7eed1c4.jpg" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E7%9B%91%E6%8E%A73.jpg" style="height:55px; width:200px" /></p>

<p>构建状态界面</p>

<p>构建稳定性:&nbsp;当一个Job中构建已完成并生成了一个未发布的目标构件，如果您准备评估此次构建的稳定性，Jenkins会基于一些后处理器任务为构建发布一个稳健指数&nbsp;(从0-100&nbsp;)，这些任务一般以插件的方式实现。它们可能包括单元测试(JUnit)、覆盖率(Cobertura&nbsp;)和静态代码分析(FindBugs)。分数越高，表明构建越稳定。下图中分级符号概述了稳定性的评分范围。任何构建作业的状态(总分100)低于80分就是不稳定的。</p>

<p>&nbsp;<img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E7%9B%91%E6%8E%A74.jpg" style="height:71px; width:212px" /></p>

<p>构建稳定性界面</p>

<p>你也可以在当前Job主界面上看到它，如下图左下部分</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164345-a1764b0dccbc4c4f82035c20bb2bd434.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E7%9B%91%E6%8E%A75.png" style="height:403px; width:800px" /></p>

<p>项目主界面</p>

<p>当前作业主页上还包含了一些有趣的条目。左侧栏的链接主要控制Job的配置、删除作业、构建作业。右边部分的链接指向最新的项目报告和构件。</p>

<p>通过点击构建历史（Build&nbsp;History）中某个具体的构建链接，您就能跳转到Jenkins为这个构建实例而创建的构建主页上。如下图</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164355-b978d2980d68443b80b5d34c2d93852f.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E4%B8%BB%E7%95%8C%E9%9D%A21.png" style="height:303px; width:600px" /></p>

<p>构建历史界面</p>

<p>如果你想通过视图输出界面来监控当前任务的进展情况。你可以单击Console&nbsp;Output（控制台输出）。如果工作已完成，这将显示构建脚本产生的静态输出；如果作业仍然在运行中，Jenkins将不断刷新网页的内容，以便您可以看到它运行时的输出。如下图：</p>

<p>&nbsp;<img alt="" src="http://images.cnitblog.com/blog/529896/201308/12164402-2637ee416604402bb12cad68cd2f4132.png" /><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E4%B8%BB%E7%95%8C%E9%9D%A22.png" style="height:492px; width:600px" /></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>四、遇到的问题</h2>

<h3>1、web.xml 缺失</h3>

<p><img alt="Jenkins+maven+svn+tomcat持续集成环境" src="http://p9.pstatp.com/large/207f00088b94a3b7a0ee" /></p>

<p>$tomcatPath/webapps/manager/WEB-INFO目录下没有web.xml文件，在网上找一个，创建即可。</p>

<p>&nbsp;</p>

<h3>2、java.io.IOException: Expecting Ant GLOB pattern, but saw &#39;/target/uhome.war&#39;. See。。。</h3>

<p>网上很多示例中是用target/uhome.war，但是报上面的错，是在构建后操作中没有配置正确的war/ear files路径，正确配置要按照ant风格，<strong>**/target/uhome.war</strong></p>

<h3>3、发布时报错，提供的用户名密码不对。</h3>

<p>解决，在配置tomcat用户名密码的时候，使用默认的用户tomcat。</p>

<h3>4、Context Path 填写错误。</h3>

<pre>
Caused by: org.codehaus.cargo.container.tomcat.internal.TomcatManagerException: The Tomcat Manager responded &quot;FAIL - Failed to deploy application at context path [/<a href="http://210.28.216.100:8080/jxpt-web/">http://210.28.216.100:8080/jxpt-web/</a>]</pre>

<p>配置发布路径的时候路径写错了。其实这里的Context Path并不是一个完整路径，就是以后要放置在webapps下的war包的名字罢了。</p>

<p><img alt="" src="http://notebook-1255399141.cossh.myqcloud.com/%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0%E5%9B%BE/6-%E6%A1%86%E6%9E%B6_%E5%A4%A7%E5%9E%8B/1-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/1-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/1-jenkins/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/war%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B22.png" style="height:268px; width:600px" /></p>

<p>其中，ofCard就是发布到tomcat的webapps下的包的名字，访问的时候，其实就是hostaddress:port/<strong>【ofCard】</strong>.war</p>

<p>&nbsp;</p>
