<h1><a href="http://www.cnblogs.com/meimeilove/p/Jenkins.html" id="cb_post_title_url">jenkins介绍部署及三种构建方式配置</a></h1>

<p>[隐藏]</p>

<ul>
	<li><a href="http://www.fblinux.com/?p=705#%E5%89%8D%E8%A8%80" title="">1前言</a>

	<ul>
		<li><a href="http://www.fblinux.com/?p=705#jenkins%E4%BB%8B%E7%BB%8D" title="">1.1jenkins介绍</a></li>
		<li><a href="http://www.fblinux.com/?p=705#jenkins%E5%A5%BD%E5%A4%84" title="">1.2jenkins好处</a></li>
		<li><a href="http://www.fblinux.com/?p=705#%E6%88%91%E7%9A%84jenkins%E5%AE%9E%E8%B7%B5" title="">1.3我的jenkins实践</a></li>
		<li><a href="http://www.fblinux.com/?p=705#jenkins%E4%BD%BF%E7%94%A8%E5%89%8D%E6%8F%90" title="">1.4jenkins使用前提</a></li>
	</ul>
	</li>
	<li><a href="http://www.fblinux.com/?p=705#jenkins%E9%83%A8%E7%BD%B2" title="">2jenkins部署</a>
	<ul>
		<li><a href="http://www.fblinux.com/?p=705#%E4%B8%8B%E9%9D%A2%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D" title="">2.1下面内容介绍</a></li>
		<li><a href="http://www.fblinux.com/?p=705#%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D" title="">2.2环境介绍</a></li>
		<li><a href="http://www.fblinux.com/?p=705#jenkins%E5%AE%89%E8%A3%85" title="">2.3jenkins安装</a></li>
	</ul>
	</li>
	<li><a href="http://www.fblinux.com/?p=705#%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85" title="">3插件安装</a>
	<ul>
		<li><a href="http://www.fblinux.com/?p=705#%E6%89%8B%E5%8A%A8%E4%B8%8B%E8%BD%BDjenkins%E6%8F%92%E4%BB%B6" title="">3.1手动下载jenkins插件</a></li>
	</ul>
	</li>
	<li><a href="http://www.fblinux.com/?p=705#Jenkins%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE" title="">4Jenkins密钥配置</a></li>
	<li><a href="http://www.fblinux.com/?p=705#jenkins%E8%A7%A6%E5%8F%91%E5%BC%8F%E6%9E%84%E5%BB%BA" title="">5jenkins触发式构建</a></li>
	<li><a href="http://www.fblinux.com/?p=705#jenkins%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA" title="">6jenkins参数化构建</a></li>
	<li><a href="http://www.fblinux.com/?p=705#jenkins%E5%AE%9A%E6%97%B6%E6%9E%84%E5%BB%BA" title="">7jenkins定时构建</a></li>
	<li><a href="http://www.fblinux.com/?p=705#Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE" title="">8Jenkins用户权限设置</a>
	<ul>
		<li><a href="http://www.fblinux.com/?p=705#%E6%96%B0%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7" title="">8.1新创建一个用户</a></li>
		<li><a href="http://www.fblinux.com/?p=705#%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE" title="">8.2用户权限设置</a></li>
	</ul>
	</li>
</ul>

<p>&nbsp;</p>

<h2>1.前言</h2>

<h3>1.1.jenkins介绍</h3>

<p>jenkins是基于java开发的一种持续集成工具，用于监控持续重复的工作，功能包括。</p>

<p>1、持续的软件版本发布/测试</p>

<p>2、监控外部调用执行项目</p>

<p>Jenkins其实很早之前就有了，最近火起来的原因是，大家都在关注devops，关注如何来做持续集成，持续交付，如何来做CI/CD。Jenkins作为持续集成的工具，他其实只是一个平台或者是一个大的框架，它的工作完全就是依靠插件，也就是说你想使用什么功能，你就找到什么样的插件。</p>

<h3>1.2.jenkins好处</h3>

<p>1、我在工作中部署jenkins的最大好处就是<code>每次在开发、测试环境代码，都无须运维部署</code>，而是相关的开发人员，测试人员登录jenkins传入需要部署的tag即可，整个部署过程无须运维参与，解放运维劳动力。</p>

<p>2、安卓，IOS自动打包：虽然打包和运维关系不大，但是运维实现自动打包，使得产品同学，运营和测试同学可以<code>每日验证产品开发进度以及及时反馈开发功能的方向是否正确</code>，对公司贡献还是不小的。</p>

<h3>1.3.我的jenkins实践</h3>

<p>由于我们在使用jenkins之前，有自动化部署的shell脚本和上线流程，使用jenkins也就是让开发，测试人员可以通过一个web界面来执行脚本，实现部署。</p>

<p>我们公司一个产品线有四个环境，开发环境，测试环境，预上线环境，生产环境。除了生产环境之外都是通过jenkins来部署代码。</p>

<p>我们在生产实践中，jenkins使用到了下面三种部署方式：</p>

<p><strong>jenkins触发式构建：</strong>用于开发环境部署<strong>，</strong>开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。</p>

<p><strong>jenkins参数化构建：</strong>用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。</p>

<p><strong>jenkins定时构建</strong>：用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。</p>

<blockquote>
<p>补充一下：jenkins不光可以用来部署代码，还可以这么玩（虽然我没有这么干过，但是你有兴趣可以试试）：</p>

<p>1、各种服务的备份也可以放到jenkins上面，每天使用jenkins定时备份，还可以在jenkins看每天备份的输出信息。</p>

<p>2、各种开发需要找你的工作，比如同步生产数据库到开发环境，这个也可以放到jenkins上面，开发每次需要同步，就登录jenkins找到数据库同步的job，点击构建，就自动同步了。</p>
</blockquote>

<h3>1.4.jenkins使用前提</h3>

<p>（1）得到领导的支持，我在公司推动jenkins部署APP自动打包，可以说是前段，后端，移动端，测试，产品等人员都需要沟通，这种情况下得到领导的支持在推动好处还是大大的。</p>

<p>（2）你们公司的代码需要一个分支管理规范，代码没有一个好的分支管理规范，自动部署是玩不了的。可以参考<a href="http://www.ibm.com/developerworks/cn/java/j-lo-git-mange/" title="">Git 分支管理最佳实践</a>看看那种方式适合你们公司。</p>

<p>（3）使用jenkins之前，你需要有通过shell实现自动化部署代码的成功经验。</p>

<p>（4）持续集成最好有自动化测试，没有也行，但是最好让开发人员提供一些api的监控脚本，每次构建之后验证部署是否正常。</p>

<h2>2.jenkins部署</h2>

<h3>2.1.下面内容介绍</h3>

<p>（1）jenkins的安装配置</p>

<p>（2）jenkins插件自动/手动安装</p>

<p>（3）jenkins触发式构建配置</p>

<p>（4）jenkins参数化构建配置</p>

<p>（5）jenkins定时构建配置</p>

<p>（6）jenkins用户权限配置</p>

<h3>2.2.环境介绍</h3>

<p>操作系统：Centos 7.2</p>

<p>jenkins版本：2.33</p>

<p>gitlab版本：8.13.6</p>

<p>两台服务器：</p>

<p>192.168.100.10：jenkins Server</p>

<p>192.168.100.11 ：gitlab Server</p>

<h3>2.3.jenkins安装</h3>

<p>（1）jenkins是java编写的，所以需要先安装jdk，这里使用yum安装。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>yum -y&nbsp;</code><code>install</code>&nbsp;<code>java-1.8.0 java-devel-1.8.0</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>jenkins还需要从gitlab拉取代码，所以我们需要安装git命令行客户端</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>[root@node1 ~]</code><code># yum -y install git</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（2）安装jenkins</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>
			</td>
			<td>
			<p><code>cd</code>&nbsp;<code>/etc/yum</code><code>.repos.d/</code></p>

			<p><code>wget http:</code><code>//pkg</code><code>.jenkins.io</code><code>/redhat/jenkins</code><code>.repo</code></p>

			<p><code>rpm --</code><code>import</code>&nbsp;<code>http:</code><code>//pkg</code><code>.jenkins.io</code><code>/redhat/jenkins</code><code>.io.key</code></p>

			<p><code>yum&nbsp;</code><code>install</code>&nbsp;<code>-y jenkins</code></p>

			<p><code>systemctl start jenkins</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（3）访问jenkins<br />
在浏览器打开输入http://IP:8080/访问jenkins。<br />
<a href="http://www.fblinux.com/wp-content/uploads/2016/11/image0014.png" title=""><img alt="image001" src="http://www.fblinux.com/wp-content/uploads/2016/11/image0014.png" style="height:578px; width:604px" /></a><br />
为了安全考虑，需要解锁jenkins，把/var/lib/jenkins/secrets/initialAdminPassword文件内容复制到administrator password下方即可。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p><code>[root@Jenkins ~]</code><code># cat /var/lib/jenkins/secrets/initialAdminPassword</code></p>

			<p><code>2862d2ffc9aa40e1b80039e8ad9810ea</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（4）选择安装的插件：只需要安装gitlab plugin，git plugin，还有ssh plugin插件即可，其他插件无须安装。</p>

<p>gitlab 和 git插件：我们的代码都放在gitlab上面，这两个插件用来做源码管理。</p>

<p>ssh插件：需要使用jenkins来执行shell命令。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image0023.png" title=""><img alt="image002" src="http://www.fblinux.com/wp-content/uploads/2016/11/image0023.png" style="height:896px; width:987px" /></a></p>

<p>创建admin用户：按照提示填写即可</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image0034.png" title=""><img alt="image003" src="http://www.fblinux.com/wp-content/uploads/2016/11/image0034.png" style="height:593px; width:991px" /></a></p>

<p>密码创建完成之后就可以登录jenkins了。</p>

<h2>3.插件安装</h2>

<p>如果在安装jenkins的时候没有安装相关插件，可以按照如下方式安装（已经安装，则不需要）</p>

<p>1、安装gitlab插件，直接在系统管理&gt;插件管理中搜索gitlab相关插件安装即可。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image0042.png" title=""><img alt="image004" src="http://www.fblinux.com/wp-content/uploads/2016/11/image0042.png" style="height:529px; width:1346px" /></a></p>

<p>2、shell插件：还是刚才的位置搜索ssh 选择ssh plugin插件安装即可。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image0061.png" title=""><img alt="image006" src="http://www.fblinux.com/wp-content/uploads/2016/11/image0061.png" style="height:584px; width:1262px" /></a></p>

<h3>3.1.手动下载jenkins插件</h3>

<p>插件下载地址：http://updates.jenkins-ci.org/download/plugins/</p>

<p>如果有插件一直安装失败的情况，可以从jenkins官网下载插件，然后导入到jenkins。</p>

<p>示例：我从官方下载gitlab-plugin插件到本地，然后导入到jenkins中。</p>

<p>在jenkins插件管理-&gt;高级选择上传插件进行安装。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image008.png" title=""><img alt="image008" src="http://www.fblinux.com/wp-content/uploads/2016/11/image008.png" style="height:184px; width:1290px" /></a></p>

<h2>4.Jenkins密钥配置</h2>

<p>（1）jenkins生成密钥对<br />
设置jenkins的shell终端为/bin/bash</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p><code>[root@node1 ~]</code><code># grep jenkins /etc/passwd</code></p>

			<p><code>jenkins:x:993:990:Jenkins Continuous Integration Server:</code><code>/var/lib/jenkins</code><code>:</code><code>/bin/bash</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>登录到jenkins用户生成密钥</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>
			</td>
			<td>
			<p><code>[root@node1 ~]</code><code># su - jenkins</code></p>

			<p><code>bash</code><code>-4.2$&nbsp;</code><code>ssh</code><code>-keygen -t rsa</code></p>

			<p><code>bash</code><code>-4.2$&nbsp;</code><code>cat</code>&nbsp;<code>.</code><code>ssh</code><code>/id_rsa</code><code>.pub</code></p>

			<p><code>ssh</code><code>-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwIdUk3+V8aL2</code><code>/oMfvwCxp5AiyctL4bnYFnsKOcQz8w/MuAehy9/EEeT0HNQCSs0NQ3veFurWlKUB4tntNA7bMcZS/UWBSXh2uAJQCMcXbIWfdngaQwVVP</code><code>+s5WvDbtL5Jk6mQch22aIIw4JaJh4L8dl1oyviwoBgOnscXVC</code><code>/kDWgFM4BrHC4QNyzt6PdtuzX3RkMa4w7bqDvUWMqIyRBScW1fbfJeAwAK1tCQ7ZjfAoTcWpmoBlurH1P6SuWR3rYIPyhGDqjPQnlohqSX/vCrLWoHoYazETHfW2azzzBSGqMeCw3hlbSV/12kRQv0kGfnbhmnHZ1CBgX23N3ktqtzL</code>&nbsp;<code>jenkins@node1.fblinux.com</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>把这个密钥添加到gitlab还有jenkins服务器的root用户</p>

<blockquote>
<p>为什么把jenkins公钥添加到root用户？<br />
因为jenkins执行部署操作，会出现很多权限问题，一个一个解决比较麻烦（而且不同项目权限问题都不同），就算sudo授权也是需要授予最少10几条命令的权限，而且不能保证以后不会出现新的命令，所以我直接让jenkins用户通过root方式执行部署操作，简单粗暴。</p>
</blockquote>

<p>（1）添加公钥到gitlab服务器，用来clone代码<br />
<a href="http://www.fblinux.com/wp-content/uploads/2016/11/image009.png" title=""><img alt="image009" src="http://www.fblinux.com/wp-content/uploads/2016/11/image009.png" style="height:476px; width:1066px" /></a><br />
添加完成之后从gitlab服务器clone下自己的工程，会在.ssh/known_hosts添加gitlab服务器记录</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>-</code><code>bash</code><code>-4.2$ git clone git@192.168.100.11:root</code><code>/jenkins_test</code><code>.git</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（2）添加公钥到jenkins服务器root用户，用来执行部署脚本</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>
			</td>
			<td>
			<p><code>-</code><code>bash</code><code>-4.2$&nbsp;</code><code>ssh</code><code>-copy-</code><code>id</code>&nbsp;<code>-i .</code><code>ssh</code><code>/id_rsa</code><code>.pub root@192.168.100.10</code></p>

			<p><code>root@192.168.100.10&#39;s password:</code></p>
			</td>
		</tr>
	</tbody>
</table>

<h2>5.jenkins触发式构建</h2>

<p>（1）准备一个测试脚本，看开发如何提交代码就执行这个构建操作。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>
			</td>
			<td>
			<p><code>[root@node1 ~]</code><code># cat /shell/deploy/test/jenkins_trigger.sh</code></p>

			<p><code>#!/bin/bash</code></p>

			<p><code>echo</code>&nbsp;<code>&quot;部署脚本被执行&quot;</code></p>

			<p><code>[root@node1 ~]</code><code># chmod +x /shell/deploy/test/jenkins_trigger.sh</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>注意：如果是生产配置，直接把这个脚本换成对应项目的上线脚本即可，jenkins配置无须修改。</p>

<p>（2）创建一个触发构建的项目，选择自由软件风格即可</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image010.png" title=""><img alt="image010" src="http://www.fblinux.com/wp-content/uploads/2016/11/image010.png" style="height:533px; width:942px" /></a></p>

<p>（3）源码管理选择git，然后只需要在repository url中输入git仓库地址即可。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image011.png" title=""><img alt="image011" src="http://www.fblinux.com/wp-content/uploads/2016/11/image011.png" style="height:448px; width:1144px" /></a></p>

<p>（4）构建，选择execute shell，执行部署脚本即可</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image012.png" title=""><img alt="image012" src="http://www.fblinux.com/wp-content/uploads/2016/11/image012.png" style="height:287px; width:1146px" /></a></p>

<p>（5）触发器配置：即gitlab有提交操作，则自动部署，这里只需要设置一个认证的token即可，gitlab调用触发器，需要使用&nbsp;JENKINS_URL/job/new_cms/build?token=TOKEN_NAME即可</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image013.png" title=""><img alt="image013" src="http://www.fblinux.com/wp-content/uploads/2016/11/image013.png" style="height:240px; width:1143px" /></a></p>

<p>（6）在系统管理&ndash;&gt;用户管理&ndash;&gt;查看用户id和token，需要把用户id和API Token加入触发器中，做用户验证</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image014.png" title=""><img alt="image014" src="http://www.fblinux.com/wp-content/uploads/2016/11/image014.png" style="height:288px; width:673px" /></a><br />
根据触发器验证令牌和用户id+token会生成一个下面的url，只需要访问这个URL地址jenkins就会自动部署对应项目的代码。</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>
			</td>
			<td>
			<p><code>http:</code><code>//admin</code><code>:984c9edf027e750f0587808fab0c3f9b@192.168.100.10:8080</code><code>/job/jenkins_trigger/build</code><code>?token=hehe</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（7）gitlab配置webhooks，每次提交代码就访问这个url，执行构建</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image015.png" title=""><img alt="image015" src="http://www.fblinux.com/wp-content/uploads/2016/11/image015.png" style="height:482px; width:1328px" /></a></p>

<p>URL这里输入上面上面用户ID+API token+job token生成的URL地址即可。触发工作选择，push event，merge request event即可。</p>

<p>&nbsp;</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image016.png" title=""><img alt="image016" src="http://www.fblinux.com/wp-content/uploads/2016/11/image016.png" style="height:841px; width:794px" /></a></p>

<p>（8）在jenkins全局在jenkins全局安全设置中取消勾选&ldquo;防止跨站点请求伪造，不然jenkins会认为gitlab的请求不合法。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image017.png" title=""><img alt="image017" src="http://www.fblinux.com/wp-content/uploads/2016/11/image017.png" style="height:622px; width:812px" /></a></p>

<p>（9）添加完成测试：点击test模拟提交操作，看看是否会执行自动构建</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image018.png" title=""><img alt="image018" src="http://www.fblinux.com/wp-content/uploads/2016/11/image018.png" style="height:127px; width:939px" /></a></p>

<p>如果执行成功会返回如下显示，说明执行钩子成功</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image019.png" title=""><img alt="image019" src="http://www.fblinux.com/wp-content/uploads/2016/11/image019.png" style="height:65px; width:328px" /></a></p>

<p>Jenkins查看，可以看到构建也是成功的。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image020.png" title=""><img alt="image020" src="http://www.fblinux.com/wp-content/uploads/2016/11/image020.png" style="height:370px; width:944px" /></a></p>

<h2>6.jenkins参数化构建</h2>

<p>（1）准备一个测试的脚本</p>

<table border="0" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td>
			<p>1</p>

			<p>2</p>

			<p>3</p>

			<p>4</p>

			<p>5</p>

			<p>6</p>
			</td>
			<td>
			<p><code>#!/bin/bash</code></p>

			<p><code>git_pro(){</code></p>

			<p><code>&nbsp;&nbsp;</code><code>echo</code>&nbsp;<code>&quot;拉取$1代码&quot;</code></p>

			<p><code>}</code></p>

			<p>&nbsp;</p>

			<p><code>git_pro $1</code></p>
			</td>
		</tr>
	</tbody>
</table>

<p>（2）创建一个参数化构建的项目</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image021.png" title=""><img alt="image021" src="http://www.fblinux.com/wp-content/uploads/2016/11/image021.png" style="height:491px; width:759px" /></a></p>

<p>（3）选择构建的参数：这里设置一个tag参数，就是每次执行job之前都需要传入这个tag</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image022.png" title=""><img alt="image022" src="http://www.fblinux.com/wp-content/uploads/2016/11/image022.png" style="height:460px; width:749px" /></a></p>

<p>（4）设置执行部署的脚本</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image023.png" title=""><img alt="image023" src="http://www.fblinux.com/wp-content/uploads/2016/11/image023.png" style="height:293px; width:755px" /></a></p>

<p>（5）选择创建的job执行构建</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image024.png" title=""><img alt="image024" src="http://www.fblinux.com/wp-content/uploads/2016/11/image024.png" style="height:95px; width:1065px" /></a></p>

<p>Tag处传入需要部署的tag即可</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image025.png" title=""><img alt="image025" src="http://www.fblinux.com/wp-content/uploads/2016/11/image025.png" style="height:165px; width:429px" /></a></p>

<p>构建完成查看构建的结果</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image026.png" title=""><img alt="image026" src="http://www.fblinux.com/wp-content/uploads/2016/11/image026.png" style="height:224px; width:795px" /></a></p>

<h2>7.jenkins定时构建</h2>

<p>定时构建一般用在安卓,ios打包，每天凌晨会拉取安卓,ios进行编译打包，并自动推送到共享。</p>

<p>示例：在上面的参数化构建示例上添加如下触发器，就是每天凌晨1:30分自动执行安卓或ios打包脚本，上面的参数化构建默认值是master就是每天从代码仓库的master分支拉取最新的代码打包。</p>

<p><a href="http://www.fblinux.com/wp-content/uploads/2016/11/image027.png" title=""><img alt="image027" src="http://www.fblinux.com/wp-content/uploads/2016/11/image027.png" style="height:320px; width:758px" /></a></p>

<h2>8.Jenkins用户权限设置</h2>

<p>现在各种job已经设置好了，但是如果开发测试人员需要部署一个tag到服务器进行测试，那么就需要登录jenkins，这个时候就需要给开发和测试人员创建一个可以执行job的用户，方法如下。</p>

<h3>8.1.新创建一个用户</h3>

<p>系统管理&ndash;&gt;用户管理&ndash;&gt;新建用户，按照提示填入信息即可</p>

<p><img alt="image028" src="http://www.fblinux.com/wp-content/uploads/2016/11/image028.png" style="height:298px; width:698px" /></p>

<h3>8.2.用户权限设置</h3>

<p>系统管理&ndash;&gt;Configure Global Security&ndash;&gt; 给develop用户授权，主要给job build，cancel，read权限。用户登录jenkins就可以构建我们创建的job了。</p>

<p>&nbsp;</p>
