<h1>Jenkins 持续集成平台构建之通过svn提交代码</h1>

<h2>一、简介</h2>

<p>Jenkins是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>

<p>主要功能：</p>

<p>1、持续的软件版本发布/测试项目。</p>

<p>2、监控外部调用执行的工作。</p>

<p>主要特点：</p>

<p>1、易于安装，只要把jenkins.war部署到servlet容器，不需要数据库的支持</p>

<p>2、易于配置，所有配置都是通过其提供的web界面实现</p>

<p>3、集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知</p>

<p>4、生成JUnit/TestNG测试报告</p>

<p>5、分布式构建支持Jenkins能够让多台计算机一起构建/测试</p>

<p>6、文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等</p>

<p>7、插件支持：支持扩展插件，你可以开发适合自己团队使用的工具</p>

<h2>二、安装配置</h2>

<p>1、环境介绍</p>

<p>Centos7.0 x86_64 IP: 210.28.216.100</p>

<p>2、安装方式：</p>

<p>第一种：可以war包安装 <a href="http://updates.jenkins-ci.org/download/war/">下载地址</a></p>

<p>第二种：也可以下载rpm包安装&nbsp; <a href="https://jenkins.io/download/">下载地址</a></p>

<p>第三种：可以yum直接安装（需要创建Jenkins.repo源）</p>

<p>3、软件版本：</p>

<table>
	<tbody>
		<tr>
			<td style="width:60px">软件名</td>
			<td style="width:240px">安装包</td>
		</tr>
		<tr>
			<td>java</td>
			<td>jdk-8u151-linux-x64.tar.gz</td>
		</tr>
		<tr>
			<td>tomcat</td>
			<td>apache-tomcat-8.5.23.tar.gz</td>
		</tr>
		<tr>
			<td>Jenkins</td>
			<td>jenkin.war&nbsp;&nbsp;<a href="http://updates.jenkins-ci.org/download/war/2.92/jenkins.war">2.92</a></td>
		</tr>
	</tbody>
</table>

<p>4、安装jdk</p>

<p>参考jdk安装</p>

<p>5、安装tomcat</p>

<p>参考tomcat安装</p>

<h2>三、jenkins安装配置-war包方式</h2>

<h3>方式一：</h3>

<p>1、按jenkins.war包放在tomcat</p>

<p>2、启动tomcat。tomcat会解压war包，生成一个jenkins文件夹，而且会在root目录下生成一个.jenkins的文件夹。&nbsp;如下图：</p>

<p>3、访问Jenkins网站 http://210.28.216.100:8080/jenkins/,安装完成</p>

<h3>方式二：</h3>

<p>1、只需要运行命令：</p>

<pre>
<code>java -jar jenkins.war
</code></pre>

<p>Jenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。</p>

<p>可以设置以特别用户，在开机启动。</p>

<p style="margin-left:0cm"><span style="font-size:10.5pt"><span style="font-family:宋体">启动方式：以</span></span><span style="font-size:10.5pt">wenhua</span><span style="font-size:10.5pt"><span style="font-family:宋体">用户启动，</span></span><span style="font-size:10.5pt">/etc/rc.local</span><span style="font-size:10.5pt"><span style="font-family:宋体">中配置</span></span><span style="font-size:10.5pt">su - wenhua -c &#39;java -jar jenkins.war --httpPort=9999 &amp;&#39;</span><span style="font-size:10.5pt"><span style="font-family:宋体">，前端以</span></span><span style="font-size:10.5pt">nginx</span><span style="font-size:10.5pt"><span style="font-family:宋体">反向代理，</span></span><span style="font-size:10.5pt">nginx</span><span style="font-size:10.5pt"><span style="font-family:宋体">同时用于</span></span><span style="font-size:10.5pt">zabbix</span><span style="font-size:10.5pt"><span style="font-family:宋体">反向代理</span></span></p>

<h3>2、访问Jenkins网站 http://210.28.216.100:8080/jenkins/,安装完成</h3>

<p>&nbsp;</p>

<h2>四、配置jenkins</h2>

<p>首次进入jenkins如要输入密码，密码位置：/root/.jenkins/secrets/initialAdminPassword ，用户名使用admin就行。</p>

<h3>1、配置jdk、maven</h3>

<p>用管理员账号登录Jenkins后，第一次使用前，需要在&ldquo;系统管理&rdquo;-&gt;&ldquo;Global Tool Configuration&rdquo;-&gt;&ldquo;Maven&rdquo;中新增一个Maven，直接输入一个名字，选中&ldquo;自动安装&rdquo;，Jenkins会自动下载并安装Maven：</p>

<p><img alt="install-maven" src="https://cdn.webxueyuan.com/cdn/files/attachments/0014632784306517526814978b244e0a9c882c23ddcdbff000/l" /></p>

<p>也可以自己安装maven后将路径配置进去：</p>

<h3>2、安装maven插件</h3>

<p>然后，你需要安装Maven项目插件：Maven Integration。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;点击&ldquo;可选插件&rdquo; &nbsp;然后在右边的过滤输入框中输入搜索关键字：&nbsp;Maven Integration 或者&nbsp;Pipeline Maven Integration Plugin ，搜索到了以后，点击<strong>直接安装</strong>，&nbsp;安装完成后重启就好了。</p>

<h3>3、安装svn插件</h3>

<p>Jenkins中对svn进行操作，可通过插件和脚本两种方式进行。</p>

<ul>
	<li>&nbsp;插件方式</li>
</ul>

<p>　　　　在插件管理中安装&quot;Subversion Plug-in&quot;，即可在任务的&quot;源码管理&quot;中配置SVN。（<a href="https://wiki.jenkins.io/display/JENKINS/Subversion+Plugin" target="_blank">插件官方说明地址</a>）</p>

<ul>
	<li>
	<ul>
		<li>Module：指svn上的模块。一个任务中可以添加多个不同来源的svn模块。</li>
		<li>Repository URL：svn代码仓库的地址。</li>
		<li>Credentials：访问svn代码仓库所需的账号密码。</li>
		<li>Local module directory：svn检出到本机的文件夹路径</li>
		<li>Repository depth：需要检出的文件夹深度，一般设为infinity（配置文件夹下的所有文件，包括子文件夹）具体说明可见插件帮助。</li>
		<li>Ignore externals / Additional Credentials：未用到，不作说明。</li>
		<li>Check-out Strategy：更新svn到本地的几种方式。建议使用<em>&nbsp;Use &#39;svn update&#39; as much as possible, with &#39;svn revert&#39; before update&nbsp;</em>(先放弃所有本地修改，然后尽可能进行svn更新。避免本地修改导致本地项目与代码仓库不一致）</li>
	</ul>
	</li>
	<li>
	<ul>
		<li>通过插件进行svn更新的情况，插件可提供若干参数（svn版本号及svn路径），供其它shell或插件使用，可参考官方文档（注意当配置了多个模块时的参数名命名方式）：</li>
	</ul>
	</li>
	<li>脚本方式(Shell)
	<ul>
		<li>脚本方式下，只需了解svn所支持的命令列表，即可在shell中自行配置。其自由度相比插件更高，可以方便地对特殊需求进行处理。</li>
		<li>常用命令包括：
		<ul>
			<li>检出 &nbsp;svn checkout</li>
			<li>更新 &nbsp;svn update</li>
			<li>取消本地修改 svn revert</li>
			<li>清理本地项目 svn cleanup</li>
			<li>向代码仓库新增文件 svn add</li>
			<li>提交到代码仓库 &nbsp;svn commit</li>
		</ul>
		</li>
		<li>脚本方式下取得svn 版本号可以通过shell的sed命令：&nbsp;</li>
	</ul>
	</li>
</ul>

<p><code>build_svn_version=`svnversion&nbsp; ${clientPath} |sed&nbsp;</code><code>&#39;s/^.*://&#39;</code>&nbsp;<code>|sed&nbsp;</code><code>&#39;s/[A-Z]*$//&#39;</code><code>`</code></p>

<p>上述语句中${clientPath}为本地svn项目的根目录（即包含了.svn隐藏文件夹的目录），build_svn_version存放了取出的svn版本号。</p>

<h3>4、安装deplay插件</h3>

<p>构建好的war项目，可以使用两种方式部署到测试机器上去：方式一：使用deploy插件。方式二：构建后执行脚本。</p>

<p>其中，使用第一种方式，需要安装下面这个插件！</p>

<p>Jenkins运行自动部署war包到servlet容器内，要实现这个功能必须安装一个插件 ：&nbsp; <span style="font-size:16px"><strong>Deploy to container [</strong>Plugin]</span>。</p>

<p><strong>注意，安装插件之后，最好将jenkins重启一下。不然可能出现这个那个错。</strong></p>

<h2>五、新建项目</h2>

<p>然后，在Jenkins首页选择&ldquo;新建&rdquo;，输入名字，选择&ldquo;构建一个maven项目&rdquo;：</p>

<p><img alt="new-job" src="https://cdn.webxueyuan.com/cdn/files/attachments/001463278452803c9a341771b694e4ab7a8de601944da5a000/l" /></p>

<p>在配置页中，源码管理选择Git，填入地址：</p>

<p><img alt="git-config" src="https://cdn.webxueyuan.com/cdn/files/attachments/0014632784671786d5d233d34214a028813763903617480000/l" /></p>

<p>默认使用master分支。如果需要口令，在Credentials中添加用户名/口令，或者使用SSH Key。</p>

<p>构建触发器指定了触发一次构建的条件。推荐使用最简单的配置&ldquo;Poll SCM&rdquo;，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。</p>

<p>我们在日程表中填入：</p>

<pre>
<code>* * * * *
</code></pre>

<p><img alt="trigger" src="https://cdn.webxueyuan.com/cdn/files/attachments/00146327849499017559f1c3205410e82719c7540b115d8000/l" /></p>

<p>表示每分钟检查一次。如果你觉得太频繁，可以改成&ldquo;每3分钟检查一次&rdquo;：</p>

<h3><code>常用时间设置：</code></h3>

<p>每15分钟构建一次：H/15 * * * * &nbsp; 或 */5 * * * *</p>

<p>每天8点构建一次：0 8 * * *</p>

<p>每天8点~17点，两小时构建一次：0 8-17/2 * * *</p>

<p>周一到周五，8点~17点，两小时构建一次：0 8-17/2 * * 1-5</p>

<p>每月1号、15号各构建一次，除12月：H H 1,15 1-11 *</p>

<p>*/5 * * * * （每5分钟检查一次源码变化）</p>

<p>0 2 * * * （每天2:00 必须build一次源码）</p>

<p>&nbsp;</p>

<p>在&ldquo;Build&rdquo;中，默认的Root POM是<code>pom.xml</code>。如果<code>pom.xml</code>不在根目录下，就填入子目录，例如：<code>wxapi/pom.xml</code>。</p>

<p>在Goals and options中，填入需要执行的mvn命令：<code>clean package</code>，Jenkins将执行如下命令：</p>

<pre>
<code>mvn clean package
</code></pre>

<p>特殊参数也在这里填写，如<code>-DskipTests=true clean package</code>。</p>

<p>保存后，就可以执行自动化构建了。</p>

<p>点击一个构建任务，可以在Console Output中看到控制台详细输出，便于出错排查：</p>

<p><img alt="console-output" src="https://cdn.webxueyuan.com/cdn/files/attachments/001463278521544b499a3af398742fb95dd1a9fe4c9f1c4000/l" /></p>

<h3>如何部署</h3>

<p>如果要部署构建好的war包，可以在Post Steps中填上shell命令，直接用脚本部署。</p>

<p>另一种方式是创建另外一个构建项目，手动触发部署。</p>

<p>无论用哪种方式，都是为了确保编译、部署是通过CI服务器完成的，而不是某台开发机器。</p>

<h3>如何创建Linux服务</h3>

<p>有了Jenkins，我们就可以在内网或者租用一台EC2服务器来搭建CI环境，每月费用不到&yen;100。推荐Ubuntu Linux系统。因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。</p>

<p>可以在Linux上创建一个<code>ci</code>用户，然后，用supervisor启动并指定9001端口：</p>

<pre>
<code># /etc/supervisor/conf.d/ci.conf

[program:ci]
command=java -jar /home/ci/jenkins.war --httpPort=9001
user=ci
autostart=true
autorestart=true
startsecs=30
startretries=5
</code></pre>

<p>Jenkins默认在当前用户的主目录下创建<code>.jenkins</code>目录，所有的配置文件、数据库都存放在里面，只需要备份这个目录就备份了整个CI配置。</p>

<p>这样，一个CI环境就搭建完毕。</p>

<p>&nbsp;</p>

<h2>六、实际中使用</h2>

<h3>相关的文件位置</h3>

<p>/home/lumingqi/.jenkins&nbsp; 这里放置了相关的工作目录</p>

<p>/root/.jenkins&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这里放置了部署工程的目录</p>

<h3>配置在jenkins里面的脚本</h3>

<p>/usr/bin/rsync -av /app/jenkins/jenkins-data/workspace/${JOB_NAME}/target/educationalManage/ projectname@ip:/home/wenhua/webapps/project/jiaowu/educationalManage/ &amp;&amp; ssh wenhua@210.28.216.95 &quot;/home/wenhua/webapps/restart_scripts/jiaowu_restart.sh&quot;</p>

<h3>具体脚本</h3>

<p>jiaowu_restart.sh 脚本：</p>

<p>#!/bin/bash<br />
BASEDIR1=/home/wenhua/webapps/tomcat/jiaowu_tomcat_8080<br />
BASEDIR2=/home/wenhua/webapps/tomcat/jiaowu_tomcat_8090<br />
PID1=$(ps -ef |grep jiaowu_tomcat_8080 |grep -v grep |awk &#39;{print $2}&#39;)<br />
PID2=$(ps -ef |grep jiaowu_tomcat_8090 |grep -v grep |awk &#39;{print $2}&#39;)<br />
if [ &quot;${PID1}&quot; ]<br />
then<br />
echo &quot;kill the ${PID1}&quot;<br />
kill -9 ${PID1}<br />
/usr/bin/rm -rf ${BASEDIR1}/work/*<br />
sleep 2<br />
echo &quot;restart the process!&quot;<br />
/bin/sh ${BASEDIR1}/bin/startup.sh<br />
else<br />
echo &quot;start the process! &quot;<br />
/usr/bin/rm -rf ${BASEDIR1}/work/*<br />
/bin/sh ${BASEDIR1}/bin/startup.sh<br />
fi<br />
sleep 12<br />
if [ &quot;${PID2}&quot; ]<br />
then<br />
echo &quot;kill the ${PID2}&quot;<br />
kill -9 ${PID2}<br />
/usr/bin/rm -rf ${BASEDIR2}/work/*<br />
sleep 2<br />
echo &quot;restart the process!&quot;<br />
/bin/sh ${BASEDIR2}/bin/startup.sh<br />
else<br />
echo &quot;start the process! &quot;<br />
/usr/bin/rm -rf ${BASEDIR2}/work/*<br />
/bin/sh ${BASEDIR2}/bin/startup.sh<br />
fi</p>

<p>&nbsp;</p>

<p>101上的jenkins配置备份</p>

<p>/usr/bin/rsync -av /home/wenhua/.jenkins/workspace/jwpt_pro/.var/genkins/jx/jwpt_pro/target/educationalManage /home/wenhua/webapps/project/jiaowu --delete</p>
