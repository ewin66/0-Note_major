<h1>六种开发环境部署大全：基于Openshift</h1>

<p>文中实验源自：https://learn.openshift.com/middleware/，本文内容仅供参考。</p>

<h2><strong>第一种：部署Wildfly Swarm</strong></h2>

<p>Jave EE的应用通常被创建成ear或者war包。ear或者war包含应用和应用的所有依赖包，并被部署到应用服务器上。多个Java EE的应用可以被部署到一个应用服务器上。</p>

<p>而WildFly Swarm提供新的打包和运行 Java EE 应用的方式：直接在JVM桑通过 java -jar来运行Java应用。</p>

<p>WildFly Swarm基于WildFly,它是Jave EE标准的一个子集，因此它大大简化了Jave EE应用实现微服务的复杂度。</p>

<p>在本实验中，我们将在OCP上部署Wildfly Swarm。</p>

<p>首先先看一个Maven项目：</p>

<p>$ tree</p>

<p>├── pom.xml</p>

<p>└── src</p>

<p>└── main</p>

<p>├── fabric8</p>

<p>│ └── deployment.yml</p>

<p>├── java</p>

<p>│ └── com</p>

<p>│ └── example</p>

<p>│ ├── ApplicationConfig.java</p>

<p>│ ├── Greeting.java</p>

<p>│ └── GreetingResource.java</p>

<p>└── webapp</p>

<p>└── index.html</p>

<p>7 directories, 6 files</p>

<p>项目中：</p>

<ul>
<li>pom.xml文件描述了如何构建这个项目。</li>
<li>ApplicationConfig.java：应用对外提供服务，接受外部请求。Greeting.java：描述了一个Java对象，它包含一个发送的问候信息。</li>
<li>GreetingResource.java：定义了/greeting and /stop RESTful 的endpoints.</li>
</ul>

<p>接下来，用maven编译并运行这个应用：</p>

<p>mvn wildfly-swarm:run</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/h471xoia1c.png?imageView2/2/w/1620" /></p>

<p>然后通过浏览器访问这个应用进行测试：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/x8iuwkevz5.jpeg?imageView2/2/w/1620" /></p>

<p>接下来，在OCP中部署这个应用：</p>

<p>通过maven触发fabric工具，在OCP中通过S2I部署这个应用：</p>

<p>mvn clean fabic8:deploy -Popenshift</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/b1ycb7niaj.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/prh7wpgv8r.png?imageView2/2/w/1620" /></p>

<p>查看应用routes</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/kd0aj99veh.png?imageView2/2/w/1620" /></p>

<p>通过浏览器访问routes：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/01kw3h0bft.jpeg?imageView2/2/w/1620" /></p>

<h2><strong>第二种：部署Node.js</strong></h2>

<p>Node.js是一个基于Chrome V8的JavaScript运行时。</p>

<p>接下来，我们通过实验展示在OCP上部署Node.js的应用。</p>

<p>先看一个Node.js的源码：</p>

<p>package.json：项目的元数据，包括名称、版本、依赖等。</p>

<p>app.js：主应用逻辑</p>

<p>app-config.yml ：用于触发、OpenShift ConfigMap</p>

<p>index.html ：Web应用的页面</p>

<p>先安装依赖：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/ej2o5xpfxt.png?imageView2/2/w/1620" /></p>

<p>然后启动应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/4okt96km9r.png?imageView2/2/w/1620" /></p>

<p>通过浏览器访问应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/ljlb84tjdn.jpeg?imageView2/2/w/1620" /></p>

<p>接下来，在OCP中部署应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/v9w3bgqbhr.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/zydmf2y0ko.png?imageView2/2/w/1620" /></p>

<p>通过浏览器访问应用的route：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/tnoq1cgxkb.jpeg?imageView2/2/w/1620" /></p>

<p>还可以给应用增加Configure Map</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/xm3mtldj1t.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/5pvqdupqxy.png?imageView2/2/w/1620" /></p>

<p>增加完以后，访问route：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/a5o86mj897.jpeg?imageView2/2/w/1620" /></p>

<h2><strong>第三种：部署Java EE批处理，WildFly & JBeret</strong></h2>

<p>批处理通常是非交互式、后台执行的。批处理通通常涉及大量的数据处理和密集计算。</p>

<p>JBeret项目实现JSR 352（Java平台的批处理应用程序）以及Java SE和Java EE环境中的其他高级批处理功能。 JBeret包含在WildFly和JBoss EAP中，提供企业批处理功能。</p>

<p>接下来，我们通过实验来展示 。</p>

<p>基于 WildFly image, 通过S2I的方式部署 Java batch应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/sr1hj2fc7k.png?imageView2/2/w/1620" /></p>

<p>部署应用：</p>

<p>oc rollout status dc/intro-jberet</p>

<p>oc expose svc intro-jberet</p>

<p>然后通过浏览器访问应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/vtk0l7suk1.jpeg?imageView2/2/w/1620" /></p>

<p>接下来，创建<a href="https://cloud.tencent.com/product/postgresql" target="_blank">PostgreSQL</a> 数据库：</p>

<p>oc new-app postgresql-ephemeral --name postgresql --param POSTGRESQL_USER=jberet --param POSTGRESQL_PASSWORD=jberet</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/w0heye9pa2.png?imageView2/2/w/1620" /></p>

<p>#oc rollout status dc/postgresql</p>

<p>本实验的批处理任务默认在作业XML文件csv2db中定义，包含两个步骤：</p>

<p>csv2db.step1：它执行特定的任务：初始化数据库表MOVIES。</p>

<pre>
<step id="csv2db.step1" next="csv2db.step2">
<batchlet ref="jdbcBatchlet">
<properties>
<property name="url" value=
"jdbc:postgresql://#{jobParameters['db.host']}?:postgresql;/#{jobParameters['db.name']}?:sampledb;"/>
<property name="user" value=
"#{jobParameters['db.user']}?:jberet;"/>
<property name="password" value=
"#{jobParameters['db.password']}?:jberet;"/>
<property name="sqls" value="
CREATE TABLE IF NOT EXISTS MOVIES (
rank INTEGER NOT NULL PRIMARY KEY,
tit VARCHAR(128),
grs NUMERIC(12, 3),
opn DATE);
DELETE FROM MOVIES"/>
</properties>
</batchlet>
</step></pre>

<p>csv2db.step2：块类型的步骤，读取、处理和写入数据块，并重复读取过程写入过程，直到输入结束。</p>

<pre>
<!-- read data from online CSV resource and output
to db, following chunk processing pattern -->
<step id="csv2db.step2">
<chunk>
<reader ref="csvItemReader">
<properties>
<property name="resource" value=
"https://raw.githubusercontent.com/jberet/jsr352/master/jberet-support/src/test/resources/movies-2012.csv"/>
<property name="beanType" value=
"java.util.Map"/>
<property name="nameMapping" value=
"rank,tit,grs,opn"/>
<property name="cellProcessors" value= 
"ParseInt; 
NotNull, StrMinMax(1, 100); 
DMinMax(1000000, 1000000000); 
ParseDate('yyyy-MM-dd')"/>
</properties>
</reader>
<!-- processor is optional and is not used -->
<writer ref="jdbcItemWriter">
<properties>
<!-- url, user & password properties are the same 
as in csv2db.step1, and are now shown here -->
<property name="sql" value=
"insert into MOVIES (rank,tit,grs,opn) 
VALUES (?, ?, ?, ?)"/>
<property name="parameterNames" value=
"rank,tit,grs,opn"/>
<property name="parameterTypes" value=
"Int,String,Double,Date"/>
<property name="beanType" value=
"java.util.Map"/>
</properties>
</writer>
</chunk>
</step></pre>

<p>在csv2db作业中，使用jberet-support库中的3个批处理工件来实现处理逻辑：</p>

<p>jdbcBatchlet：针对目标数据库执行SQL语句。 csvItemReader：从CSV输入源读取，一次一行。 jdbcItemWriter：将块中的累积数据写入目标数据库。</p>

<p>使用curl命令行工具来调用REST API来执行各种批处理操作。 JSON输出使用python -m json.tool格式化。</p>

<p>启动csv2db任务：</p>

<p>curl -s -X POST -H 'Content-Type:application/json' "http://intro-jberet-jberet-lab.2886795303-80-simba02.environments.katacoda.com/intro-jberet/api/jobs/csv2db/start" | python -m json.tool</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/vi9vg5hsoz.png?imageView2/2/w/1620" /></p>

<p>查看任务执行情况：</p>

<p>curl -s http://intro-jberet-jberet-lab.2886795303-80-simba02.environments.katacoda.com/intro-jberet/api/jobexecutions/1 | python -m json.tool</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/vqge1ddb7r.png?imageView2/2/w/1620" /></p>

<p>查看任务的所有执行步骤：</p>

<p>curl -s http://intro-jberet-jberet-lab.2886795303-80-simba02.environments.katacoda.com/intro-jberet/api/jobexecutions/1/stepexecutions/ | python -m json.tool</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/xagie64p5r.png?imageView2/2/w/1620" /></p>

<p>查看第二个任务的执行结果：</p>

<p>curl -s http://intro-jberet-jberet-lab.2886795303-80-simba02.environments.katacoda.com/intro-jberet/api/jobexecutions/1/stepexecutions/2 | python -m json.tool</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/cnvft95d48.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/n141l446ui.png?imageView2/2/w/1620" /></p>

<p>登录到数据库的pod中，查看表的内容：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/isyh3nxqxi.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/i48miw6dfg.png?imageView2/2/w/1620" /></p>

<h2><strong>第四种：部署JBoss Fuse开发环境</strong></h2>

<p>本实验将展示基于OCP部署JBoss Fuse Integration Services（FIS）2.0。JBoss FIS 2.0是一个敏捷、轻量级、现代化的开发框架，用于构建和部署高度可扩展的模块化API。它不仅提供了基于容器的开发实践，还提供了微服务框架，如：断路器，追踪，路由，转换，审计等等。</p>

<p>JBoss FIS有两种运行方式：</p>

<p>1.作为一个独立的Java应用程序（SpringBoot）</p>

<p>2.作为Apache Karaf（OSGi）的服务</p>

<p>FIS在Openshift上有三种部署方式：</p>

<p>1.通过docker image</p>

<p>2.本地构建，然后push到OCP，利用B2I完成后续的工作。</p>

<p>3.使用S2I的方式构建。</p>

<p>本实验展示的内容是：在Fuse上部署一个基于Spring Boot的People Service应用，该应用对外提供Rest API，实现微服务架构。</p>

<p>接下来，我们看实验过程：</p>

<p>根据模板创建应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/kbkg0k2amu.png?imageView2/2/w/1620" /></p>

<p>这个模板定义了和build相关的地址链接和信息：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/t9blpchyem.png?imageView2/2/w/1620" /></p>

<p>创建了如下资源：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/rrhufwmods.png?imageView2/2/w/1620" /></p>

<p>接下来，手工触发build：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/9mrv572bb9.png?imageView2/2/w/1620" /></p>

<p>查看构建过程：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/8io4a15v9e.jpeg?imageView2/2/w/1620" /></p>

<p>build成功，push镜像：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/p1dth3lph8.png?imageView2/2/w/1620" /></p>

<p>然后触发dc，构建了应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/5auuc0lyzo.png?imageView2/2/w/1620" /></p>

<p>接下来，我们查看JBoss Fuse Hawtio console，查看Route Diagram10个子模块被调用的情况：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/p5b8oieoh8.jpeg?imageView2/2/w/1620" /></p>

<p>在cli发起查询一个用户信息请求</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/425ebhq7se.png?imageView2/2/w/1620" /></p>

<p>再次查看Route Diagram，查看上一步curl操作调用的模块（数字1表示被调用一次）：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/uzp49smwym.png?imageView2/2/w/1620" /></p>

<p>再发起一次查询：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/dcsj860nik.png?imageView2/2/w/1620" /></p>

<p>查看Route Diagram，相关模块调用次数增加了一次：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/uhrorw4f2c.png?imageView2/2/w/1620" /></p>

<p>再次触发查询</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/jwk74el0wc.png?imageView2/2/w/1620" /></p>

<p>查看Route Diagram，相关模块调用次数增加了一次：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/rd2xumjtdw.png?imageView2/2/w/1620" /></p>

<p>这次我们换一种查询方式，查看用户列表：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/o0lma6fd8y.png?imageView2/2/w/1620" /></p>

<p>查看Route Diagram，有两个新的模块被调用（最右边一列）</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/1xsxggd9dj.png?imageView2/2/w/1620" /></p>

<p>接下来，为用户列表增加一个新的用户：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/96x545xazj.png?imageView2/2/w/1620" /></p>

<p>查看Route Diagram，又有两个新的模块被调用：</p>

<h2><strong>第五种：部署Eclipse Vert.x开发环境</strong></h2>

<p>Eclipse Vert.x是一个轻量级的微服务框架。本实验中，我们将在OCP中通过fabric工具部署vert.x应用。</p>

<p>我们先看一个Http Java应用的源码：</p>

<pre>
package com.example;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.StaticHandler;
import static io.vertx.core.http.HttpHeaders.CONTENT_TYPE;
public class HttpApplication extends AbstractVerticle {
static final String template = "Hello, %s!";
@Override
public void start() {
// TODO: Create a router object
// TODO: Add router for /api/greeting here
// TODO: Add a StaticHandler for accepting incoming requests
// TODO: Create the HTTP server listening on port 8080
System.out.println("THE HTTP APPLICATION HAS STARTED");
}
// TODO: Add method for greeting here
}</pre>

<p>接下来，我们通过maven编译并运行这个应用：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/6waz3753h6.png?imageView2/2/w/1620" /></p>

<p>应用已经运行：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/o0fr2ahmtf.png?imageView2/2/w/1620" /></p>

<p>接下来，分别动态为源码增加如下内容（增加路由信息）,应用自动刷新，实现响应式编程：</p>

<p>Router router = Router.router(vertx);</p>

<p>router.get("/*").handler(StaticHandler.create());</p>

<p>vertx.createHttpServer().requestHandler(router::accept).</p>

<p>三次输入触发了三次重新编译和重新部署：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/oc1qefv479.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/bacw89tggv.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/wwvzwfu1zc.png?imageView2/2/w/1620" /></p>

<p>接下来，通过浏览器访问应用:</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/kt1kvv1txk.png?imageView2/2/w/1620" /></p>

<p>接下来，为源码动态增加如下内容：</p>

<pre>
private void greeting(RoutingContext rc) {
String name = rc.request().getParam("name");
if (name == null) {
name = "World";
}
JsonObject response = new JsonObject()
.put("content", String.format(template, name));
rc.response()
.putHeader(CONTENT_TYPE, "application/json; charset=utf-8")
.end(response.encodePrettily());
}</pre>

<p>再在源码中增加一个route：router.get("/api/greeting").handler(this::greeting);</p>

<p>然后，再次访问应用链接，这次在页面中输入template，会有相应的返回值：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/vzpbdryymi.png?imageView2/2/w/1620" /></p>

<p>接下来，我们在OCP中部署vert.x。</p>

<p>先在OCP中创建一个项目：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/aib3ar09i.png?imageView2/2/w/1620" /></p>

<p>部署应用,下图fabric8:deploy是个小工具，通过mvn触发，实现vertx应用的整个S2I的过程：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/rr9nnrjswb.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/xt0sh4rb87.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/c23j3wnbzr.png?imageView2/2/w/1620" /></p>

<p>接下来，查看应用的route并进行访问：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/2j0o81gvfi.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/upwpdppm1n.png?imageView2/2/w/1620" /></p>

<h2><strong>第六种：部署Spring Boot</strong></h2>

<p>Spring是最受欢迎的Java框架之一，提供了Java EE编程模型的替代方案。本实验中，我们将在OCP中部署一个Spring Boot应用：</p>

<p>我们先看一个maven project:</p>

<p>$ tree</p>

<p>.</p>

<p>├── pom.xml</p>

<p>└── src</p>

<p>├── main</p>

<p>│ ├── fabric8</p>

<p>│ │ ├── credentials-secret.yml</p>

<p>│ │ ├── deployment.yml</p>

<p>│ │ └── route.yml</p>

<p>│ ├── java</p>

<p>│ │ └── com</p>

<p>│ │ └── example</p>

<p>│ │ ├── Application.java</p>

<p>│ │ └── service</p>

<p>│ └── resources</p>

<p>│ ├── application-local.properties</p>

<p>│ ├── application-openshift.properties</p>

<p>│ └── static</p>

<p>│ └── index.html</p>

<p>└── test</p>

<p>└── java</p>

<p>└── com</p>

<p>└── example</p>

<p>13 directories, 8 files</p>

<p>fabric8下的内容，是和容器相关的内容；</p>

<p>java下的内容是源码和相关内容；</p>

<p>resources下分别是应用的配置文件和openshit的配置文件；</p>

<p>我们看一下Java的源码：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/po9jcrj5k9.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/x2bd7nex76.png?imageView2/2/w/1620" /></p>

<p>查看应用的pom.xml：</p>

<pre>
<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2016-2017 Red Hat, Inc, and individual contributors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.example</groupId>
<artifactId>fruits</artifactId>
<version>15-SNAPSHOT</version>
<name>Simple Fruits Application</name>
<description>Spring Boot - CRUD Booster</description>
<properties>
<maven.compiler.source>1.8</maven.compiler.source>
<maven.compiler.target>1.8</maven.compiler.target>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
<maven.min.version>3.3.9</maven.min.version>
<postgresql.version>9.4.1212</postgresql.version>
<spring-boot.version>1.5.8.RELEASE</spring-boot.version>
<spring-boot.bom.version>1.5.8.Final-redhat-1</spring-boot.bom.version>
<maven-surefire-plugin.version>2.20</maven-surefire-plugin.version>
<fabric8-maven-plugin.version>3.5.30</fabric8-maven-plugin.version>
</properties>
<dependencyManagement>
<dependencies>
<dependency>
<groupId>me.snowdrop</groupId>
<artifactId>spring-boot-bom</artifactId>
<version>${spring-boot.bom.version}</version>
<type>pom</type>
<scope>import</scope>
</dependency>
</dependencies>
</dependencyManagement>
<dependencies>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter</artifactId>
</dependency>
<!-- TODO: Add web (tomcat) dependency here -->
<!-- TODO: Add JPA dependency here -->
<!-- TODO: ADD Actuator dependency here -->
<!-- Testing -->
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-test</artifactId>
<scope>test</scope>
</dependency>
</dependencies>
<build>
<plugins>
<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>
<version>${spring-boot.version}</version>
<configuration>
<profiles>
<profile>local</profile>
</profiles>
<classifier>exec</classifier>
</configuration>
<executions>
<execution>
<goals>
<goal>repackage</goal>
</goals>
</execution>
</executions>
</plugin>
</plugins>
</build>
<profiles>
<profile>
<id>local</id>
<activation>
<activeByDefault>true</activeByDefault>
</activation>
<dependencies>
<!-- TODO: ADD H2 database dependency here -->
</dependencies>
</profile>
<profile>
<id>openshift</id>
<dependencies>
<!-- TODO: ADD PostgreSQL database dependency here -->
</dependencies>
<build>
<plugins>
<plugin>
<groupId>io.fabric8</groupId>
<artifactId>fabric8-maven-plugin</artifactId>
<version>${fabric8-maven-plugin.version}</version>
<executions>
<execution>
<id>fmp</id>
<goals>
<goal>resource</goal>
<goal>build</goal>
</goals>
</execution>
</executions>
</plugin>
</plugins>
</build>
</profile>
</profiles>
</project></pre>

<p>通过在pom.xml中增加如下内容，将 Tomcat增加到应用中：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/mklff3wxo1.png?imageView2/2/w/1620" /></p>

<p>接下来，编译并运行应用：</p>

<p>mvn spring-boot:run</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/1ey9qeag82.png?imageView2/2/w/1620" /></p>

<p>浏览器访问应用的route，此时应用还没有连接数据库，因此没有内容。</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/nzx8jiym30.png?imageView2/2/w/1620" /></p>

<p>接下来，给应用增加 JPA (Hibernate) ，让它可以访问<a href="https://cloud.tencent.com/product/cdb-overview" target="_blank">关系型数据库</a>。在pom.xml中增加。</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/k6e1drox29.png?imageView2/2/w/1620" /></p>

<p>接下来，在pom.xml增加一段in-memory内存的描述</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/upy5pseulj.png?imageView2/2/w/1620" /></p>

<p>接下来，创建一个java的源码Fruit.java，定义Entity class以更新数据库中的内容（一个数据库表模型）：</p>

<pre>
package com.example.service;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Fruit {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Integer id;
private String name;
public Fruit() {
}
public Fruit(String type) {
this.name = type;
}
public Integer getId() {
return id;
}
public void setId(Integer id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
}</pre>

<p>再创建一个FruitRepository.java，它定义了对数据库操作服务。</p>

<pre>
package com.example.service;
import org.springframework.data.repository.CrudRepository;
public interface FruitRepository extends CrudRepository<Fruit, Integer> {
}</pre>

<p>再定义可一个sql，用于向数据中插入数据：</p>

<pre>
insert into fruit (name) values ('Cherry');
insert into fruit (name) values ('Apple');
insert into fruit (name) values ('Banana');
最后书写一个应用测试程序：
package com.example;
import java.util.Collections;
import com.example.service.Fruit;
import com.example.service.FruitRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ApplicationTest {
@Autowired
private FruitRepository fruitRepository;
@Before
public void beforeTest() {
}
@Test
public void testGetAll() {
assertTrue(fruitRepository.findAll().spliterator().getExactSizeIfKnown()==3);
}
@Test
public void getOne() {
assertTrue(fruitRepository.findOne(1)!=null);
}
@Test
public void updateAFruit() {
Fruit apple = fruitRepository.findOne(2);
assertTrue(apple!=null);
assertTrue(apple.getName().equals("Apple"));
apple.setName("Green Apple");
fruitRepository.save(apple);
assertTrue(fruitRepository.findOne(2).getName().equals("Green Apple"));
}
@Test
public void createAndDeleteAFruit() {
int orangeId = fruitRepository.save(new Fruit("Orange")).getId();
Fruit orange = fruitRepository.findOne(orangeId);
assertTrue(orange!=null);
fruitRepository.delete(orange);
assertTrue(fruitRepository.findOne(orangeId)==null);
}
@Test
public void getWrongId() {
assertTrue(fruitRepository.findOne(9999)==null);
}
}</pre>

<p>接下来，运行并进行检查：</p>

<p>mvn verify</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/6d8na4qmdw.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/taowvpvlxt.png?imageView2/2/w/1620" /></p>

<p>接下来，创建应用对外的service：FruitController.java</p>

<pre>
package com.example.service;
import java.util.List;
import java.util.Objects;
import java.util.Spliterator;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
@Controller
@RequestMapping(value = "/api/fruits")
public class FruitController {
private final FruitRepository repository;
@Autowired
public FruitController(FruitRepository repository) {
this.repository = repository;
}
@ResponseBody
@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
public List getAll() {
return StreamSupport
.stream(repository.findAll().spliterator(), false)
.collect(Collectors.toList());
}
//TODO: Add additional service calls here
}</pre>

<p>接下来，运行应用：</p>

<p>mvn spring-boot:run -DskipTests</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/3qw09zokfi.png?imageView2/2/w/1620" /></p>

<p>运行成功以后，通过浏览器访问应用，已经可以看到数据库中的内容，并可以对它进行操作：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/ywtaacn29j.png?imageView2/2/w/1620" /></p>

<p>同样，我们可以很方便地将这个应用部署到OCP中：</p>

<p>创建数据库：</p>

<p>oc new-app -e POSTGRESQL_USER=luke \ -e POSTGRESQL_PASSWORD=secret \ -e POSTGRESQL_DATABASE=my_data \ openshift/postgresql-92-centos7 \ --name=my-database</p>

<p>在应用pom.xml定义对数据库的访问内容：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/6po85w6cpk.png?imageView2/2/w/1620" /></p>

<p>pom.xml增加对spring boot的健康检查内容：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/9cxoyxz0ve.png?imageView2/2/w/1620" /></p>

<p>部署应用：</p>

<p>mvn package fabric8:deploy -Popenshift -DskipTests</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/wqbbeuchv.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/p43c3v49yg.png?imageView2/2/w/1620" /></p>

<p>访问route：</p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/khui4l784g.png?imageView2/2/w/1620" /></p>

<p><img src="https://ask.qcloudimg.com/http-save/yehe-1093885/yrj7ft6eal.png?imageView2/2/w/1620" /></p>

<p>参考链接：https://learn.openshift.com</p>
