<h1>vuejs开发的命名规范</h1>

<h2>views 命名</h2>

<p>views 文件夹下面是由 以页面为单位的 vue 文件 或者 模块文件夹 组成的，放在 src 目录之下，与 components、assets 同级。</p>

<h3>views 下的文件夹命名</h3>

<ol>
<li>
<p>views 下面的文件夹代表着模块的名字</p>
</li> 

 <li>
<p>由名词组成（car、order、cart）</p>
</li>
<li>
<p>单词只能有一个（good: car order cart）（bad: carInfo carpage）</p>
</li>
<li>
<p>尽量是名词（good: car）（bad: greet good）</p>
</li>
<li>
<p>以小写开头（good: car）（bad: Car）</p>
</li>
</ol>

<h3>views 下的 vue 文件命名</h3>

<ol>
<li>
<p>views 下面的 vue 文件代表着页面的名字</p>
</li>
<li>
<p>放在模块文件夹之下</p>
</li>
<li>
<p>只有一个文件的情况下不会出现文件夹，而是直接放在 views 目录下面，如 Login Home</p>
</li>
<li>
<p>尽量是名词</p>
</li>
<li>
<p>大写开头，开头的单词就是所属模块名字（CarDetail、CarEdit、CarList）</p>
</li>
<li>
<p>名字至少两个单词（good: CarDetail）（bad: Car）</p>
</li>
<li>
<p>常用结尾单词有（Detail、Edit、List、Info、Report）</p>
</li>
<li>
<p>以 Item 结尾的代表着组件（CarListItem、CarInfoItem）</p>
</li>
</ol>

<h2>vue 方法命名</h2>

<h3>vue 方法放置顺序</h3>

<ol>
<li>
<p>components</p>
</li>
<li>
<p>props</p>
</li>
<li>
<p>data</p>
</li>
<li>
<p>created</p>
</li>
<li>
<p>mounted</p>
</li>
<li>
<p>activited</p>
</li>
<li>
<p>update</p>
</li>
<li>
<p>beforeRouteUpdate</p>
</li>
<li>
<p>metods</p>
</li>
<li>
<p>filter</p>
</li>
<li>
<p>computed</p>
</li>
<li>
<p>watch</p>
</li>
</ol>

<h3>method 自定义方法命名</h3>

<ol>
<li>
<p>动宾短语（good：jumpPage、openCarInfoDialog）（bad：go、nextPage、show、open、login）</p>
</li>
<li>
<p>ajax 方法以 get、post 开头，以 data 结尾（good：getListData、postFormData）（bad：takeData、confirmData、getList、postForm）</p>
</li>
<li>
<p>事件方法以 on 开头（onTypeChange、onUsernameInput）</p>
</li>
<li>
<p>init、refresh 单词除外</p>
</li>
<li>
<p>尽量使用常用单词开头（set、get、open、close、jump）</p>
</li>
<li>
<p>驼峰命名（good: getListData）（bad: get_list_data、getlistData）</p>
</li>
</ol>

<h3>data props 方法注意点</h3>

<ol>
<li>
<p>使用 data 里的变量时请先在 data 里面初始化</p>
</li>
<li>
<p>props 指定类型，也就是 type</p>
</li>
<li>
<p>props 改变父组件数据 基础类型用 $emit ，复杂类型直接改</p>
</li>
<li>
<p>ajax 请求数据用上 isLoading、isError 变量</p>
</li>
<li>
<p>不命名多余数据，现在是详情页、你的数据是 ajax 请求的，那就直接声明一个对象叫 d，而不是每个字段都声明</p>
</li>
<li>
<p>表单数据请包裹一层 form</p>
</li>
</ol>

<h3>生命周期方法注意点</h3>

<ol>
<li>
<p>不在 mounted、created 之类的方法写逻辑，取 ajax 数据，</p>
</li>
<li>
<p>在 created 里面监听 Bus 事件</p>
</li>
</ol>

<h2>例</h2>

<h3>文件路径</h3>

<pre>

 </pre>

<ol>
<li>
<p><code>src</code></p>
</li>
<li>
<p><code>assets</code></p>
</li>
<li>
<p><code>...</code></p>
</li>
<li>
<p><code>components</code></p>
</li>
<li>
<p><code>...</code></p>
</li>
<li>
<p><code>views</code></p>
</li>
<li>
<p><code>car</code></p>
</li>
<li>
<p><code>CarEdit.vue</code></p>
</li>
<li>
<p><code>CarList.vue</code></p>
</li>
<li>
<p><code>CarDetai.vue</code></p>
</li>
<li>
<p><code>user</code></p>
</li>
<li>
<p><code>UserDetail.vue</code></p>
</li>
<li>
<p><code>UserEdit.vue</code></p>
</li>
<li>
<p><code>UserPasswordRest.vue</code></p>
</li>
<li>
<p><code>customer</code></p>
</li>
<li>
<p><code>CustomerCardItem.vue</code></p>
</li>
<li>
<p><code>CustomerList.vue</code></p>
</li>
</ol>

<h3>日常列表页</h3>

<ol>
<li>
<p><code>// CarList.vue</code></p>
</li>
<li>
<p><code><template></code></p>
</li>
<li>
<p><code><div class="container"></code></p>
</li>
<li>
<p><code><ul></code></p>
</li>
<li>
<p><code><li v-for="car in carList" :key="car.id"></code></p>
</li>
<li>
<p><code><img src="car.logo" alt=""></code></p>
</li>
<li>
<p><code><p>{{car.name | empty}}</p></code></p>
</li>
<li>
<p><code></li></code></p>
</li>
<li>
<p><code></ul></code></p>
</li>
<li>
<p><code><button @click="loadNextPage">下一页</button></code></p>
</li>
<li>
<p><code><div class="last" v-show="isLast">已经没有更多了...</div></code></p>
</li>
<li>
<p><code><div class="loading" v-show="isLoading">正在加载...</div></code></p>
</li>
<li>
<p><code><div class="error" v-show="isError" @click="getCarListData">加载错误，点击 <span class="font-blue">这里</span> 重试</div></code></p>
</li>
<li>
<p><code></div></code></p>
</li>
<li>
<p><code></template></code></p>
</li>
<li>
<p><code><script></code></p>
</li>
<li>
<p><code>export default {</code></p>
</li>
<li>
<p><code>data() {</code></p>
</li>
<li>
<p><code>return {</code></p>
</li>
<li>
<p><code>carList: [],</code></p>
</li>
<li>
<p><code>totalPage: 1, // 总页数</code></p>
</li>
<li>
<p><code>page: 0, // 当前页数</code></p>
</li>
<li>
<p><code>isLoading: false, // 是否正在加载</code></p>
</li>
<li>
<p><code>isError: false // 是否加载错误</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>},</code></p>
</li>
<li>
<p><code>mounted() {</code></p>
</li>
<li>
<p><code>this.loadNextPage();</code></p>
</li>
<li>
<p><code>},</code></p>
</li>
<li>
<p><code>methods: {</code></p>
</li>
<li>
<p><code>// 获取列表数据</code></p>
</li>
<li>
<p><code>getCarListData() {</code></p>
</li>
<li>
<p><code>let data = {</code></p>
</li>
<li>
<p><code>page: this.page, // 当前页数</code></p>
</li>
<li>
<p><code>pageSize: 10 // 每页条数 </code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li> </li>
<li>
<p><code>this.isLoading = true;</code></p>
</li>
<li>
<p><code>this.isError = false;</code></p>
</li>
<li>
<p><code>this.$ajaxGet('/car/list', data).then(data => {</code></p>
</li>
<li>
<p><code>// 加载成功</code></p>
</li>
<li>
<p><code>this.carList.concat(data.list);</code></p>
</li>
<li>
<p><code>this.page = data.page;</code></p>
</li>
<li>
<p><code>this.totalPage = data.totalPage</code></p>
</li>
<li> </li>
<li>
<p><code>this.isLoading = false;</code></p>
</li>
<li>
<p><code>}).catch(() => {</code></p>
</li>
<li>
<p><code>// 加载列表失败</code></p>
</li>
<li>
<p><code>this.isLoading = false;</code></p>
</li>
<li>
<p><code>this.isError = true;</code></p>
</li>
<li>
<p><code>});</code></p>
</li>
<li>
<p><code>},</code></p>
</li>
<li>
<p><code>// 下一页</code></p>
</li>
<li>
<p><code>loadNextPage() {</code></p>
</li>
<li>
<p><code>if(this.page <= this.totalPage) {</code></p>
</li>
<li>
<p><code>this.page ++;</code></p>
</li>
<li>
<p><code>this.getCarListData();</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>},</code></p>
</li>
<li>
<p><code>filters: {</code></p>
</li>
<li>
<p><code>empty(value) {</code></p>
</li>
<li>
<p><code>return value || '未知';</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>},</code></p>
</li>
<li>
<p><code>computed: {</code></p>
</li>
<li>
<p><code>// 是否是最后一条</code></p>
</li>
<li>
<p><code>isLast() {</code></p>
</li>
<li>
<p><code>return !this.isLoading && this.carList.length > 10 && !this.isError && this.page >= this.totalPage;</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code>}</code></p>
</li>
<li>
<p><code></script></code></p>
</li>
</ol>
