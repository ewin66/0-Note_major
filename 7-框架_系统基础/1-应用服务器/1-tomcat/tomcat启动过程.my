<h1>TomCat启动过程</h1>

<p><strong>startup.bat</strong> <br />
当我们启动tomcat一般是运行%TOMCAT_HOME%\bin\startup.bat文件，这个文件实际上调用了%TOMCAT_HOME%\bin\catalina.bat批处理文件。 <br />
startup.bat将start命令和控制台的所有参数都传给了catalina.bat文件。 <br />
org.apache.catalina.startup.Bootstrap类正是Tomcat的入口类，Tomcat正是从Bootstrap类的main方法开始运行的。</p>

<p><strong>Bootstrap</strong> <br />
下面来看看Bootstrap的main方法做了哪些事情： <br />
main方法做了3件事情： <br />
1、初始化; <br />
2、装配tomcat容器 <br />
3、启动tomcat容器</p>

<p><strong>初始化</strong> <br />
1、设置catalina.home系统属性 <br />
如果catalina.home被设置过直接返回，否则设置：如果bootstrap.jar文件存在，就设置为这个文件所在目录的上一级目录；如果不存在就设置为当前工作目录。在%TOMCAT_HOME%\bin目录下实际上是有这个jar文件的，也就是catalina.home=%TOMCAT_HOME%。 <br />
2、设置catalina.base系统属性，和1差不多 <br />
3、initClassLoaders，初始化三个classLoader： <br />
commonLoader：用于加载common/lib目录下的jar包和class文件 <br />
catalinaLoader：用于加载server/lib目录下的jar包和class文件 <br />
sharedLoader：用于加载shared/lib目录下的jar包和class文件 <br />
commonLoader是catalinaLoader和sharedLoader的parent classloader,Tomcat6以后，查看catalina.properties文件可以看见server.loader和shared.loader都是为空的。 <br />
catalina.properties文件中common.loader=catalina.base/lib,{catalina.base}/lib/<em>.jar,catalina.home/lib,{catalina.home}/lib/</em>.jar <br />
4、然后设置当前线程的classloader为catalinaLoader <br />
5、紧接着加载与安全相关的包和类 <br />
6、然后设置org.apache.catalina.startup.Catalina这个类的parent classloader为sharedLoader <br />
7、创建org.apache.catalina.startup.Catalina这个类的实例并赋给catalinaDaemon</p>

<p><strong>装配容器</strong> <br />
1、初始化目录和命名规则，为digester解析XML做准备,digester准备后面再研究一下 <br />
2、创建一个digester对象，解析conf/server.xml文件，在解析server.xml的过程中会调用StandardService.setContainer方法，将其设置为StandardEngine <br />
3、初始化Servlet窗口，这里的getServer()实际上返回的是StandardServer对象，这个初始化过程是在StandardServer类的initInternal方法中完成的，这个方法主要干了两件事，1是注册MBean，让JMX管理tomat容器，2是初始化Service <br />
<strong>启动容器</strong> <br />
此处的start调用的是org.apache.catalina.startup的start方法 <br />
start方法会调用StandardServer、StandardService、StandardEngine、StandardHost、StandardContext、StandardWrapper的start或者startInternal方法来完成启动过程，最后会循环等待，在关闭命令到来之前一直运行!</p>

<p>总结</p>

<p>1、tomcat中大量引入了模板方法模式，org.apache.catalina.util.LifecycleBase被所有容器继承，其中initInternal和startInternal方法是抽象方法，在初始化和启动时被每个容器会调用其init和start方法，这两个方法会去调用对应抽象方法***Internal,这些抽象方法都是在子类中实现的 <br />
2、tomcat中大量使用了类的反射，基本上都是通过配置文件获取类名，然后利用反射得到class对象，再通过newInstance获取对象。</p>
