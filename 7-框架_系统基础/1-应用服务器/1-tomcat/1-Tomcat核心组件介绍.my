<h1>Tomcat核心组件介绍</h1>

<h2>Mapper组件</h2>

<p>Mapper组件的核心功能是提供请求路径的路由映射，根据某个请求路径通过计算得到相应的Servlet（Wrapper）。这节看下Mapper的实现细节，包括Host容器、Context容器、Wrapper容器等的映射关系以及映射<a href="http://lib.csdn.net/base/datastructure" target="_blank" title="算法与数据结构知识库">算法</a>。</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20160717184554588" title="" /></p>

<p>如果要将整个tomcat容器中所有的web项目以能够以Servlet级别组织起来，需要一个多层级的类似Map结构的存储空间。如上图，以Mapper作为映射的入口，按照容器等级首先会包含了N个Host容器的引用，然后每个Host会有N个Context容器的引用，最后每个Context容器包含N个Wrapper容器的引用。例如使用Mapper组件查找“tomcat.apache.org/tomcat-7.0-doc/search”，它首先会匹配name为“tomcat.apache.org”的Host，然后从中继续匹配name为“tomcat-7.0-doc”的Context，最后匹配name为“search”的Wrapper（Servlet）。</p>

<p>为了方便问题阐述，下面是一个简化后的Mapper映射关系的存储模型，暂时不考虑多版本Context。</p>

<p>①提供一个基础的键值对模型，name为容器的名称，object为具体的容器。</p>

<pre>
<code>public class MapElement {
public String name = null;
public Object object = null;
}</code></pre>

<p> </p>

<p>②Host映射模型，继承MapElement，且包含若干Context映射。</p>

<pre>
<code>public class Host extends MapElement {
public Context[] contexts = null;
}</code></pre>

<p> </p>

<p>③Context映射模型，继承MapElement，包含不同类型的Wrapper(servlet)：默认Servlet、精确匹配Servlet、通配符Servlet和扩展Servlet。除此还有欢迎页资源和path。</p>

<pre>
<code>public class Context extends MapElement {
public String path = null;
public String[] welcomeResources = new String[0];
public Wrapper defaultWrapper = null;
public Wrapper[] exactWrappers = new Wrapper[0];
public Wrapper[] wildcardWrappers = new Wrapper[0];
public Wrapper[] extensionWrappers = new Wrapper[0];
}</code></pre>

<p> </p>

<p>④Wrapper映射模型，继承MapElement。</p>

<pre>
<code>public class Wrapper extends MapElement {
}</code>
</pre>

<p>⑤Mapper类</p>

<pre>
<code>public class Mapper{
public Host[] hosts;
}</code></pre>

<p>Mapper只要包含一个Host数组即可完成所有组件关系的映射。在tomcat启动时将所有Host容器和它的名字组成Host映射模型添加到Mapper对象中，每个Host下的Context容器和它的名字组成Context映射模型添加到对应的Host下，每个Context下的Wrapper容器和它的名字组成的Wrapper映射模型添加到对应的Context下。Mapper组件提供了对Host映射、Context映射、Wrapper映射的添加和移除的方法，在tomcat容器中添加或移除相应的容器时都要调用相应的方法维护这些映射关系。Mapper组件为了提高查找速度和效率，使用了二分搜索法查找，所以在添加时应按照字典序把Host、Context、Wrapper等映射排好序。</p>

<p>当tomcat启动稳定后，意味着这些映射都已经组织好，那么具体是如何查找对应容器的？</p>

<p>（一）Host的匹配，直接对Mapper中的Host映射数组进行忽略大小写的二分搜索查找。</p>

<p>（二）Context的匹配，对上面查找到的Host映射中的Context映射数组进行忽略大小写的二分搜索查找，这里有个比较特殊的情况是请求地址可以直接以Context名结束，例如<a href="http://tomcat.apache.org/tomcat-7.0-doc" target="_blank">http://tomcat.apache.org/tomcat-7.0-doc</a>，另外一些则类似<a href="http://tomcat.apache.org/tomcat-7.0-do/index.html" target="_blank">http://tomcat.apache.org/tomcat-7.0-do/index.html</a>。另外，Context映射中的name对应的是Context容器的path属性。</p>

<p>（三）Wrapper的匹配，首先，尝试使用精确匹配法匹配精确类型Servlet的路径；然后，尝试使用前缀匹配通配符类型Servlet；接着尝试使用扩展名匹配通配符类型Servlet；最后，匹配成默认Servlet。 <br />
Tomcat在处理请求时对请求的路由分发全由Mapper组件负责，请求通过Mapper找到最终的处理Servlet或资源。而在tomcat中会有两种类型的Mapper，它们作用的范围不同，因为称为全局路由映射和局部路由映射。</p>

<p><strong><em>点击订购作者《Tomcat内核设计剖析》</em></strong></p>

<p><a href="https://item.jd.com/12185360.html" target="_blank"><img alt="博主的书" src="http://img.blog.csdn.net/20170503091957943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3lhbmd6aGl6aG91/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="博主的书" /></a></p>
