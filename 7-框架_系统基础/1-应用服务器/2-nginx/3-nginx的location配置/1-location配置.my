<h1>NGINX location 配置</h1>

<h3>location表达式类型</h3>

<ul>
<li>~ 表示执行一个正则匹配，区分大小写</li>
<li>~* 表示执行一个正则匹配，不区分大小写</li>
<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>
<li>= 进行普通字符精确匹配。也就是完全匹配。</li>
<li>@ 它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</li>
</ul>

<h3>location优先级说明</h3>

<p>在nginx的location和配置中location的顺序没有太大关系。正location表达式的类型有关。相同类型的表达式，字符串长的会优先匹配。</p>

<p>以下是按优先级排列说明：</p>

<ol>
<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>
<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>
<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>
<li>常规字符串匹配类型。按前缀匹配。</li>
</ol>

<h3>location优先级示例</h3>

<p>配置项如下:</p>

<ol>
<li><code>location = / {</code></li>
<li><code># 仅仅匹配请求 /</code></li>
<li><code>[ configuration A ]</code></li>
<li><code>}</code></li>
<li><code>location / {</code></li>
<li><code># 匹配所有以 / 开头的请求。</code></li>
<li><code># 但是如果有更长的同类型的表达式，则选择更长的表达式。</code></li>
<li><code># 如果有正则表达式可以匹配，则优先匹配正则表达式。</code></li>
<li><code>[ configuration B ]</code></li>
<li><code>}</code></li>
<li><code>location /documents/ {</code></li>
<li><code># 匹配所有以 /documents/ 开头的请求。</code></li>
<li><code># 但是如果有更长的同类型的表达式，则选择更长的表达式。</code></li>
<li><code># 如果有正则表达式可以匹配，则优先匹配正则表达式。</code></li>
<li><code>[ configuration C ]</code></li>
<li><code>}</code></li>
<li><code>location ^~ /images/ {</code></li>
<li><code># 匹配所有以 /images/ 开头的表达式，如果匹配成功，则停止匹配查找。</code></li>
<li><code># 所以，即便有符合的正则表达式location，也不会被使用</code></li>
<li><code>[ configuration D ]</code></li>
<li><code>}</code></li>
<li><code>location ~* \.(gif|jpg|jpeg)$ {</code></li>
<li><code># 匹配所有以 gif jpg jpeg结尾的请求。</code></li>
<li><code># 但是 以 /images/开头的请求，将使用 Configuration D</code></li>
<li><code>[ configuration E ]</code></li>
<li><code>}</code></li>
</ol>

<p>请求匹配示例</p>

<ol>
<li><code>/ -> configuration A</code></li>
<li><code>/index.html -> configuration B</code></li>
<li><code>/documents/document.html -> configuration C</code></li>
<li><code>/images/1.gif -> configuration D</code></li>
<li><code>/documents/1.jpg -> configuration E</code></li>
</ol>

<p>注意，以上的匹配和在配置文件中定义的顺序无关。</p>

<p>原文：<a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a>作者： sean</p>

<h2>1. location正则写法</h2>

<p>一个示例：</p>

<ol>
<li><code>location = / {</code></li>
<li><code># 精确匹配 / ，主机名后面不能带任何字符串</code></li>
<li><code>[ configuration A ] </code></li>
<li><code>}</code></li>
<li><code>location / {</code></li>
<li><code># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</code></li>
<li><code># 但是正则和最长字符串会优先匹配</code></li>
<li><code>[ configuration B ] </code></li>
<li><code>}</code></li>
<li><code>location /documents/ {</code></li>
<li><code># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</code></li>
<li><code># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</code></li>
<li><code>[ configuration C ] </code></li>
<li><code>}</code></li>
<li><code>location ~ /documents/Abc {</code></li>
<li><code># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</code></li>
<li><code># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</code></li>
<li><code>[ configuration CC ] </code></li>
<li><code>}</code></li>
<li><code>location ^~ /images/ {</code></li>
<li><code># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</code></li>
<li><code>[ configuration D ] </code></li>
<li><code>}</code></li>
<li><code>location ~* \.(gif|jpg|jpeg)$ {</code></li>
<li><code># 匹配所有以 gif,jpg或jpeg 结尾的请求</code></li>
<li><code># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</code></li>
<li><code>[ configuration E ] </code></li>
<li><code>}</code></li>
<li><code>location /images/ {</code></li>
<li><code># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</code></li>
<li><code>[ configuration F ] </code></li>
<li><code>}</code></li>
<li><code>location /images/abc {</code></li>
<li><code># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</code></li>
<li><code># F与G的放置顺序是没有关系的</code></li>
<li><code>[ configuration G ] </code></li>
<li><code>}</code></li>
<li><code>location ~ /images/abc/ {</code></li>
<li><code># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</code></li>
<li><code>[ configuration H ] </code></li>
<li><code>}</code></li>
<li><code>location ~* /js/.*/\.js</code></li>
</ol>

<ul>
<li>已<code>=</code>开头表示精确匹配<br />
如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li>
<li><code>^~</code> 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>

<p>顺序不等于优先级：</p>

<blockquote>
<p>(location =) > (location 完整路径) > (location ^~ 路径) > (location ~,~* 正则顺序) > (location 部分起始路径) > (/)</p>
</blockquote>

<p>上面的匹配结果。按照上面的location写法，以下的匹配示例成立：</p>

<ul>
<li>/ -> config A<br />
精确完全匹配，即使/index.html也匹配不了</li>
<li>/downloads/download.html -> config B<br />
匹配B以后，往下没有任何匹配，采用B</li>
<li>/images/1.gif -> configuration D<br />
匹配到F，往下匹配到D，停止往下</li>
<li>/images/abc/def -> config D<br />
最长匹配到G，往下匹配D，停止往下<br />
你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li>
<li>/documents/document.html -> config C<br />
匹配到C，往下没有任何匹配，采用C</li>
<li>/documents/1.jpg -> configuration E<br />
匹配到C，往下正则匹配到E</li>
<li>/documents/Abc.jpg -> config CC<br />
最长匹配到C，往下正则顺序匹配到CC，不会往下到E</li>
</ul>

<h3>实际使用建议</h3>

<p>所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</p>

<pre>

 </pre>

<ol>
<li><code>#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</code></li>
<li><code>#这里是直接转发给后端应用服务器了，也可以是一个静态首页</code></li>
<li><code># 第一个必选规则</code></li>
<li><code>location = / {</code></li>
<li><code>proxy_pass http://tomcat:8080/index</code></li>
<li><code>}</code></li>
<li><code># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</code></li>
<li><code># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</code></li>
<li><code>location ^~ /static/ {</code></li>
<li><code>root /webroot/static/;</code></li>
<li><code>}</code></li>
<li><code>location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {</code></li>
<li><code>root /webroot/res/;</code></li>
<li><code>}</code></li>
<li><code># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</code></li>
<li><code># 非静态文件请求就默认是动态请求，自己根据实际把握</code></li>
<li><code># 毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</code></li>
<li><code>location / {</code></li>
<li><code>proxy_pass http://tomcat:8080/</code></li>
<li><code>}</code></li>
</ol>

<p>参考：</p>

<ul>
<li><a href="http://tengine.taobao.org/book/chapter_02.html" rel="external" target="_blank">http://tengine.taobao.org/book/chapter_02.html</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" rel="external" target="_blank">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></li>
</ul>

<h2>2. Rewrite规则</h2>

<p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如<code>http://seanlook.com/a/we/index.<a href="http://lib.csdn.net/base/php" target="_blank" title="PHP知识库">PHP</a>?id=1&u=str</code> 只对<code>/a/we/index.php</code>重写。语法<code>rewrite regex replacement [flag];</code></p>

<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p>

<p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>

<ol>
<li>执行server块的rewrite指令</li>
<li>执行location匹配</li>
<li>执行选定的location中的rewrite指令</li>
</ol>

<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p>

<h3>2.1 flag标志位</h3>

<ul>
<li><code>last</code> : 相当于Apache的[L]标记，表示完成rewrite</li>
<li><code>break</code> : 停止执行当前虚拟主机的后续rewrite指令集</li>
<li><code>redirect</code> : 返回302临时重定向，地址栏会显示跳转后的地址</li>
<li><code>permanent</code> : 返回301永久重定向，地址栏会显示跳转后的地址</li>
</ul>

<p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>

<ol>
<li>last一般写在server和if中，而break一般使用在location中</li>
<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>
<li>break和last都能组织继续执行后面的rewrite指令</li>
</ol>

<h3>2.2 if指令与全局变量</h3>

<h4>if判断指令</h4>

<p>语法为<code>if(condition){...}</code>，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p>

<ul>
<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>
<li>直接比较变量和内容时，使用<code>=</code>或<code>!=</code></li>
<li><code>~</code>正则表达式匹配，<code>~*</code>不区分大小写的匹配，<code>!~</code>区分大小写的不匹配</li>
</ul>

<p><code>-f</code>和<code>!-f</code>用来判断是否存在文件<br />
<code>-d</code>和<code>!-d</code>用来判断是否存在目录<br />
<code>-e</code>和<code>!-e</code>用来判断是否存在文件或目录<br />
<code>-x</code>和<code>!-x</code>用来判断文件是否可执行</p>

<p>例如：</p>

<ol>
<li><code>if ($http_user_agent ~ MSIE) {</code></li>
<li><code>rewrite ^(.*)$ /msie/$1 break;</code></li>
<li><code>} //如果UA包含"MSIE"，rewrite请求到/msid/目录下</code></li>
<li><code>if ($http_cookie ~* "id=([^;]+)(?:;|$)") {</code></li>
<li><code>set $id $1;</code></li>
<li><code>} //如果cookie匹配正则，设置变量$id等于正则引用部分</code></li>
<li><code>if ($request_method = POST) {</code></li>
<li><code>return 405;</code></li>
<li><code>} //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</code></li>
<li><code>if ($slow) {</code></li>
<li><code>limit_rate 10k;</code></li>
<li><code>} //限速，$slow可以通过 set 指令设置</code></li>
<li><code>if (!-f $request_filename){</code></li>
<li><code>break;</code></li>
<li><code>proxy_pass http://127.0.0.1; </code></li>
<li><code>} //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</code></li>
<li><code>if ($args ~ post=140){</code></li>
<li><code>rewrite ^ http://example.com/ permanent;</code></li>
<li><code>} //如果query string中包含"post=140"，永久重定向到example.com</code></li>
<li><code>location ~* \.(gif|jpg|png|swf|flv)$ {</code></li>
<li><code>valid_referers none blocked www.jefflei.com www.leizhenfang.com;</code></li>
<li><code>if ($invalid_referer) {</code></li>
<li><code>return 404;</code></li>
<li><code>} //防盗链</code></li>
<li><code>}</code></li>
</ol>

<h4>全局变量</h4>

<p>下面是可以用作if判断的全局变量</p>

<ul>
<li><code>$args</code> ： #这个变量等于请求行中的参数，同<code>$query_string</code></li>
<li><code>$content_length</code> ： 请求头中的Content-length字段。</li>
<li><code>$content_type</code> ： 请求头中的Content-Type字段。</li>
<li><code>$document_root</code> ： 当前请求在root指令中指定的值。</li>
<li><code>$host</code> ： 请求主机头字段，否则为服务器名称。</li>
<li><code>$http_user_agent</code> ： 客户端agent信息</li>
<li><code>$http_cookie</code> ： 客户端cookie信息</li>
<li><code>$limit_rate</code> ： 这个变量可以限制连接速率。</li>
<li><code>$request_method</code> ： 客户端请求的动作，通常为GET或POST。</li>
<li><code>$remote_addr</code> ： 客户端的IP地址。</li>
<li><code>$remote_port</code> ： 客户端的端口。</li>
<li><code>$remote_user</code> ： 已经经过Auth Basic Module验证的用户名。</li>
<li><code>$request_filename</code> ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li>
<li><code>$scheme</code> ： HTTP方法（如http，https）。</li>
<li><code>$server_protocol</code> ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</li>
<li><code>$server_addr</code> ： 服务器地址，在完成一次系统调用后可以确定这个值。</li>
<li><code>$server_name</code> ： 服务器名称。</li>
<li><code>$server_port</code> ： 请求到达服务器的端口号。</li>
<li><code>$request_uri</code> ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li>
<li><code>$uri</code> ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</li>
<li><code>$document_uri</code> ： 与$uri相同。</li>
</ul>

<p>例：<code>http://localhost:88/test1/test2/test.php</code></p>

<ol>
<li><code>$host：localhost</code></li>
<li><code>$server_port：88</code></li>
<li><code>$request_uri：http://localhost:88/test1/test2/test.php</code></li>
<li><code>$document_uri：/test1/test2/test.php</code></li>
<li><code>$document_root：/var/www/html</code></li>
<li><code>$request_filename：/var/www/html/test1/test2/test.php</code></li>
</ol>

<h3>2.3 常用正则</h3>

<ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复0次或1次</li>
<li><code>+</code> ： 重复1次或更多次</li>
<li><code>*</code> ： 重复0次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>{n}</code> ： 重复n次</li>
<li><code>{n,}</code> ： 重复n次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符c</li>
<li><code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li>
</ul>

<p>小括号<code>()</code>之间匹配的内容，可以在后面通过<code>$1</code>来引用，<code>$2</code>表示的是前面第二个<code>()</code>里的内容。正则里面容易让人困惑的是<code>\</code>转义特殊字符。</p>

<h3>2.4 rewrite实例</h3>

<h4>例1：</h4>

<ol>
<li><code>http {</code></li>
<li><code># 定义image日志格式</code></li>
<li><code>log_format imagelog '[$time_local] ' $image_file ' ' $image_type ' ' $body_bytes_sent ' ' $status;</code></li>
<li><code># 开启重写日志</code></li>
<li><code>rewrite_log on;</code></li>
<li> </li>
<li><code>server {</code></li>
<li><code>root /home/www;</code></li>
<li> </li>
<li><code>location / {</code></li>
<li><code># 重写规则信息</code></li>
<li><code>error_log logs/rewrite.log notice; </code></li>
<li><code># 注意这里要用‘’单引号引起来，避免{}</code></li>
<li><code>rewrite '^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\.(png|jpg|gif)$' /data?file=$3.$4;</code></li>
<li><code># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</code></li>
<li><code>set $image_file $3;</code></li>
<li><code>set $image_type $4;</code></li>
<li><code>}</code></li>
<li> </li>
<li><code>location /data {</code></li>
<li><code># 指定针对图片的日志格式，来分析图片类型和大小</code></li>
<li><code>access_log logs/images.log mian;</code></li>
<li><code>root /data/images;</code></li>
<li><code># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</code></li>
<li><code>try_files /$arg_file /image404.html;</code></li>
<li><code>}</code></li>
<li><code>location = /image404.html {</code></li>
<li><code># 图片不存在返回特定的信息</code></li>
<li><code>return 404 "image not found\n";</code></li>
<li><code>}</code></li>
<li><code>}</code></li>
</ol>

<p>对形如<code>/images/ef/uh7b3/test.png</code>的请求，重写到<code>/data?file=test.png</code>，于是匹配到<code>location /data</code>，先看<code>/data/images/test.png</code>文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p>

<ol>
<li><code>rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&height=$3? last;</code></li>
</ol>

<p>对形如<code>/images/bla_500x400.jpg</code>的文件请求，重写到<code>/resizer/bla.jpg?width=500&height=400</code>地址，并会继续尝试匹配location。</p>
