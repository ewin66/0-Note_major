<h1>redis类型[string 、list 、 set 、sorted set 、hash set]</h1>

<h2>redis 支持的类型</h2>

<h3>1.Keys&nbsp;</h3>

<p>redis本质上一个key-value db，所以我们首先来看看他的key.&nbsp;<br />
首先key也是字符串类型，但是key中不能包括边界字符；由于key不是binary safe的字符串，所以像&rdquo;my key&rdquo;和&rdquo;mykey\n&rdquo;这样包含空格和换行的key是不允许的&nbsp;<br />
注：&nbsp;<br />
顺便说一下在redis内部并不限制使用binary字符，这是redis协议限制的。&rdquo;\r\n&rdquo;在协议格式中会作为特殊字符。&nbsp;<br />
redis 1.2以后的协议中部分命令已经开始使用新的协议格式了(比如MSET)。总之目前还是把包含边界字符当成非法的key吧，免得被bug纠缠。&nbsp;<br />
另外关于key的一个格式约定介绍下，object-type:id:field。比如user:1000:password，blog:xxidxx:title&nbsp;<br />
还有key的长度最好不要太长。道理很明显占内存啊，而且查找时候相对短key也更慢。&nbsp;<br />
不过也推荐过短的key，比如u:1000:pwd,这样的。显然没上面的user:1000:password可读性好。</p>

<h3>2.String 类型&nbsp;</h3>

<p>string是redis最基本的类型，而且string类型是二进制安全的。&nbsp;<br />
意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象。从内部实现来看其实string可以看作byte数组，最大上限是1G字节。&nbsp;<br />
下面是string类型的定义。&nbsp;<br />
struct sdshdr {&nbsp;<br />
long len;&nbsp;<br />
long free;&nbsp;<br />
char buf[];&nbsp;<br />
};&nbsp;<br />
buf是个char数组用于存贮实际的字符串内容。其实char和c#中的byte是等价的，都是一个字节&nbsp;<br />
len是buf数组的长度，free是数组中剩余可用字节数。&nbsp;<br />
由此可以理解为什么string类型是二进制安全的了。因为它本质上就是个byte数组。当然可以包含任何数据了。&nbsp;<br />
另外string类型可以被部分命令按int处理.比如incr等命令，&nbsp;<br />
redis的其他类型像list,set,sorted set ，hash它们包含的元素与都只能是string类型。&nbsp;<br />
如果只用string类型，redis就可以被看作加上持久化特性的memcached.当然redis对string类型的操作比memcached多很多啊。</p>

<h3>3.List 类型&nbsp;</h3>

<p>redis的list类型其实就是一个每个子元素都是string类型的双向链表。所以[lr]push和[lr]pop命令的算法时间复杂度都是O&nbsp;<br />
另外list会记录链表的长度。所以llen操作也是O.链表的最大长度是(2的32次方-1)。&nbsp;<br />
我们可以通过push,pop操作从链表的头部或者尾部添加删除元素。这使得list既可以用作栈，也可以用作队列。&nbsp;<br />
有意思的是list的pop操作还有阻塞版本的。当我们[lr]pop一个list对象，如果list是空，或者不存在，会立即返回nil。但是阻塞版本的b[lr]pop可以则可以阻塞，&nbsp;<br />
当然可以加超时时间，超时后也会返回nil。为什么要阻塞版本的pop呢，主要是为了避免轮询。&nbsp;<br />
例子如果我们用list来实现一个工作队列。执行任务的thread可以调用阻塞版本的pop去&nbsp;<br />
获取任务这样就可以避免轮询去检查是否有任务存在。当任务来时候工作线程可以立即返回，也可以避免轮询带来的延迟。</p>

<h3>4.Set 类型&nbsp;</h3>

<p>redis的set是string类型的无序集合。set元素最大可以包含(2的32次方-1)个元素。&nbsp;<br />
set的是通过hash table实现的，所以添加，删除，查找的复杂度都是O。hash table会随着添加或者删除自动的调整大小。&nbsp;<br />
需要注意的是调整hash table大小时候需要同步（获取写锁）会阻塞其他读写操作。&nbsp;<br />
可能不久后就会改用跳表（skip list）来实现跳表已经在sorted set中使用了。&nbsp;<br />
关于set集合类型除了基本的添加删除操作，其他有用的操作还包含集合的取并集(union)，交集(intersection)，&nbsp;<br />
差集(difference)。</p>

<h3>5.Sorted Set 类型&nbsp;</h3>

<p>和set一样sorted set也是string类型元素的集合，不同的是每个元素都会关联一个double类型的score。sorted set的实现是skip list和hash table的混合体</p>

<p>当元素被添加到集合中时，一个元素到score的映射被添加到hash table中，所以给定一个元素获取score的开销是O,&nbsp;<br />
另一个score到元素的映射被添加到skip list并按照score排序，所以就可以有序的获取集合中的元素。&nbsp;<br />
添加，删除操作开销都是O和skip list的开销一致,redis的skip list实现用的是双向链表,这样就可以逆序从尾部取元素。&nbsp;<br />
sorted set最经常的使用方式应该是作为索引来使用.我们可以把要排序的字段作为score存储，对象的id当元素存储。</p>

<h3>6.Hash Set 类型&nbsp;</h3>

<p>redis hash是一个string类型的field和value的映射表.它的添加，删除操作都是O.hash特别适合用于存储对象。&nbsp;<br />
相较于将对象的每个字段存成单个string类型。将一个对象存储在hash类型中会占用更少的内存，并且可以更方便的存取整个对象。</p>

<p>省内存的原因是新建一个hash对象时开始是用zipmap（又称为small hash）来存储的。&nbsp;<br />
这个zipmap其实并不是hash table，但是zipmap相比正常的hash实现可以节省不少hash本身需要的一些元数据存储开销。&nbsp;<br />
尽管zipmap的添加，删除，查找都是O(n)，但是由于一般对象的field数量都不太多。&nbsp;<br />
所以使用zipmap也是很快的,也就是说添加删除平均还是O(1)。&nbsp;<br />
如果field或者value的大小超出一定限制后，redis会在内部自动将zipmap替换成正常的hash实现.&nbsp;<br />
这个限制可以在配置文件中指定&nbsp;<br />
hash-max-zipmap-entries 64 #配置字段最多64个&nbsp;<br />
hash-max-zipmap-value 512 #配置value最大为512字节</p>

<h2>命令：&nbsp;</h2>

<h3>key相关的命令&nbsp;</h3>

<p>exists key 测试指定key是否存在，返回1表示存在，0不存在&nbsp;<br />
del key1 key2 &hellip;.keyN 删除给定key,返回删除key的数目，0表示给定key都不存在&nbsp;<br />
type key 返回给定key的value类型。返回 none 表示不存在key,string字符类型，list 链表类型 set 无序集合类型&hellip;&nbsp;<br />
keys pattern 返回匹配指定模式的所有key,下面给个例子&nbsp;<br />
randomkey 返回从当前数据库中随机选择的一个key,如果当前数据库是空的，返回空串&nbsp;<br />
rename oldkey newkey 原子的重命名一个key,如果newkey存在，将会被覆盖，返回1表示成功，0失败。可能是oldkey不存在或者和newkey相同&nbsp;<br />
renamenx oldkey newkey 同上，但是如果newkey存在返回失败&nbsp;<br />
dbsize 返回当前数据库的key数量&nbsp;<br />
expire key seconds 为key指定过期时间，单位是秒。返回1成功，0表示key已经设置过过期时间或者不存在&nbsp;<br />
ttl key 返回设置过过期时间的key的剩余过期秒数 -1表示key不存在或者没有设置过过期时间&nbsp;<br />
select db-index 通过索引选择数据库，默认连接的数据库所有是0,默认数据库数是16个。返回1表示成功，0失败&nbsp;<br />
move key db-index 将key从当前数据库移动到指定数据库。返回1成功。0 如果key不存在，或者已经在指定数据库中&nbsp;<br />
flushdb 删除当前数据库中所有key,此方法不会失败。慎用&nbsp;<br />
flushall 删除所有数据库中的所有key，此方法不会失败。更加慎用</p>

<h3>String相关的命令&nbsp;</h3>

<p>set key value 设置key对应的值为string类型的value,返回1表示成功，0失败&nbsp;<br />
setnx key value 同上，如果key已经存在，返回0 。nx 是not exist的意思&nbsp;<br />
get key 获取key对应的string值,如果key不存在返回nil&nbsp;<br />
getset key value 原子的设置key的值，并返回key的旧值。如果key不存在返回nil&nbsp;<br />
mget key1 key2 &hellip; keyN 一次获取多个key的值，如果对应key不存在，则对应返回nil。&nbsp;<br />
mset key1 value1 &hellip; keyN valueN 一次设置多个key的值，成功返回1表示所有的值都设置了，失败返回0表示没有任何值被设置&nbsp;<br />
msetnx key1 value1 &hellip; keyN valueN 同上，但是不会覆盖已经存在的key&nbsp;<br />
incr key 对key的值做加加操作,并返回新的值。注意incr一个不是int的value会返回错误，incr一个不存在的key，则设置key为1&nbsp;<br />
decr key 同上，但是做的是减减操作，decr一个不存在key，则设置key为-1&nbsp;<br />
incrby key integer 同incr，加指定值 ，key不存在时候会设置key，并认为原来的value是 0&nbsp;<br />
decrby key integer 同decr，减指定值。decrby完全是为了可读性，我们完全可以通过incrby一个负值来实现同样效果，反之一样。&nbsp;<br />
append key value 给指定key的字符串值追加value,返回新字符串值的长度。&nbsp;<br />
substr key start end 返回截取过的key的字符串值,注意并不修改key的值。</p>

<h3>List相关的命令&nbsp;</h3>

<p>lpush key string 在key对应list的头部添加字符串元素，返回1表示成功，0表示key存在且不是list类型&nbsp;<br />
rpush key string 同上，在尾部添加&nbsp;<br />
llen key 返回key对应list的长度，key不存在返回0,如果key对应类型不是list返回错误&nbsp;<br />
lrange key start end 返回指定区间内的元素，下标从0开始，负值表示从后面计算，-1表示倒数第一个元素 ，key不存在返回空列表&nbsp;<br />
ltrim key start end 截取list，保留指定区间内元素，成功返回1，key不存在返回错误&nbsp;<br />
lset key index value 设置list中指定下标的元素值，成功返回1，key或者下标不存在返回错误&nbsp;<br />
lrem key count value 从key对应list中删除count个和value相同的元素。count为0时候删除全部&nbsp;<br />
lpop key 从list的头部删除元素，并返回删除元素。如果key对应list不存在或者是空返回nil，如果key对应值不是list返回错误&nbsp;<br />
rpop 同上，但是从尾部删除&nbsp;<br />
blpop key1&hellip;keyN timeout 从左到右扫描返回对第一个非空list进行lpop操作并返回，比如blpop list1 list2 list3 0 ,如果list不存在&nbsp;<br />
list2,list3都是非空则对list2做lpop并返回从list2中删除的元素。如果所有的list都是空或不存在，则会阻塞timeout秒，timeout为0表示一直阻塞。&nbsp;<br />
当阻塞时，如果有client对key1&hellip;keyN中的任意key进行push操作，则第一在这个key上被阻塞的client会立即返回。如果超时发生，则返回nil。有点像unix的select或者poll&nbsp;<br />
brpop 同blpop，一个是从头部删除一个是从尾部删除&nbsp;<br />
rpoplpush srckey destkey 从srckey对应list的尾部移除元素并添加到destkey对应list的头部,最后返回被移除的元素值，整个操作是原子的.如果srckey是空&nbsp;<br />
或者不存在返回nil</p>

<h3>Set相关的命令&nbsp;</h3>

<p>sadd key member 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误&nbsp;<br />
srem key member 从key对应set中移除给定元素，成功返回1，如果member在集合中不存在或者key不存在返回0，如果key对应的不是set类型的值返回错误&nbsp;<br />
spop key 删除并返回key对应set中随机的一个元素,如果set是空或者key不存在返回nil&nbsp;<br />
srandmember key 同spop，随机取set中的一个元素，但是不删除元素&nbsp;<br />
smove srckey dstkey member 从srckey对应set中移除member并添加到dstkey对应set中，整个操作是原子的。成功返回1,如果member在srckey中不存在返回0，如果&nbsp;<br />
key不是set类型返回错误&nbsp;<br />
scard key 返回set的元素个数，如果set是空或者key不存在返回0&nbsp;<br />
sismember key member 判断member是否在set中，存在返回1，0表示不存在或者key不存在&nbsp;<br />
sinter key1 key2&hellip;keyN 返回所有给定key的交集&nbsp;<br />
sinterstore dstkey key1&hellip;keyN 同sinter，但是会同时将交集存到dstkey下&nbsp;<br />
sunion key1 key2&hellip;keyN 返回所有给定key的并集&nbsp;<br />
sunionstore dstkey key1&hellip;keyN 同sunion，并同时保存并集到dstkey下&nbsp;<br />
sdiff key1 key2&hellip;keyN 返回所有给定key的差集&nbsp;<br />
sdiffstore dstkey key1&hellip;keyN 同sdiff，并同时保存差集到dstkey下&nbsp;<br />
smembers key 返回key对应set的所有元素，结果是无序的</p>

<h3>Sorted Set相关的命令&nbsp;</h3>

<p>zadd key score member 添加元素到集合，元素在集合中存在则更新对应score&nbsp;<br />
zrem key member 删除指定元素，1表示成功，如果元素不存在返回0&nbsp;<br />
zincrby key incr member 增加对应member的score值，然后移动元素并保持skip list保持有序。返回更新后的score值&nbsp;<br />
zrank key member 返回指定元素在集合中的排名（下标）,集合中元素是按score从小到大排序的&nbsp;<br />
zrevrank key member 同上,但是集合中元素是按score从大到小排序&nbsp;<br />
zrange key start end 类似lrange操作从集合中去指定区间的元素。返回的是有序结果&nbsp;<br />
zrevrange key start end 同上，返回结果是按score逆序的&nbsp;<br />
zrangebyscore key min max 返回集合中score在给定区间的元素&nbsp;<br />
zcount key min max 返回集合中score在给定区间的数量&nbsp;<br />
zcard key 返回集合中元素个数&nbsp;<br />
zscore key element 返回给定元素对应的score&nbsp;<br />
zremrangebyrank key min max 删除集合中排名在给定区间的元素&nbsp;<br />
zremrangebyscore key min max 删除集合中score在给定区间的元素</p>

<h3>Hash相关命令&nbsp;</h3>

<p>hset key field value 设置hash field为指定值，如果key不存在，则先创建&nbsp;<br />
hget key field 获取指定的hash field&nbsp;<br />
hmget key filed1&hellip;.fieldN 获取全部指定的hash filed&nbsp;<br />
hmset key filed1 value1 &hellip; filedN valueN 同时设置hash的多个field&nbsp;<br />
hincrby key field integer 将指定的hash filed 加上给定值&nbsp;<br />
hexists key field 测试指定field是否存在&nbsp;<br />
hdel key field 删除指定的hash field&nbsp;<br />
hlen key 返回指定hash的field数量&nbsp;<br />
hkeys key 返回hash的所有field&nbsp;<br />
hvals key 返回hash的所有value&nbsp;<br />
hgetall 返回hash的所有filed和value</p>
