<h1>Redis的内存回收机制</h1>

<p>Redis的内存回收机制主要体现在一下两个方面：</p>

<ul>
<li>删除过期时间的键对象</li>
</ul>

<ol>
<li> 删除过期键对象</li>
</ol>

<p>         ：多行删除用于当客户端读取带有超市属性的键时，如果已经超过键设置的过期时间，会执行删除操作并返回空。</p>

<p>     2.定时任务删除</p>

<p>           ：Redis内部维护一个定时任务，默认每秒运行10次。定时任务中删除过期键逻辑采用了自适应算法，根据键的过期比例，使用快慢两种速率回收键，流程如下：</p>

<p><img alt="" src="https://static.oschina.net/uploads/space/2018/0116/161542_RP9V_2313177.png" style="height:851px; width:768px" /></p>

<p>流程说明：</p>

<ol>
<li>定时任务在每个数据库空间随机检查20个键，当发现过期时删除对应的键</li>
<li>如果超过检查书的25%的键过期，循环执行回收逻辑知道不足25%或运行超时为止，慢模式下超时时间为25毫秒</li>
<li>如果之前回收键逻辑超时，则在Redis触发内部事件之前再次以快模式运行回收过期键任务，快模式下超时时间为1毫秒且2秒内只能运行1次</li>
<li>快慢两种模式内部删除逻辑相同，只是执行的超时时间不同。</li>
</ol>

<ul>
<li>内存使用到达maxmemory上限时触发内存溢出控制策略​​​​​​</li>
</ul>

<p> 当Redis所用内存打到maxmemory上限时会触发响应的溢出控制策略，具体策略受maxmemory-policy参数控制，Redis支持6中策略，如下所示：</p>

<ol>
<li>noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返回客户端错误信息，此时Redis只响应读操作。</li>
<li>volatitle-rlu：根据LRU算法删除设置了超时属性的键，知道腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。</li>
<li>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</li>
<li>allkeys-random：随机删除所有键，知道腾出足够空间为止。</li>
<li>volatitle-random：随机删除过期键，知道腾出足够空间为止。</li>
<li>volatitle-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略</li>
</ol>
