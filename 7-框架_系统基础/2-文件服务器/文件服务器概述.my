<p>FTP（File Transfer Protocol，文件传输协议），是一种应用层协议，可以实现很好的实现跨平台，但是无法实现一些其他的功能，像如文件系统挂载等功能。NFS（Network File System，网路文件系统）是工作在内核模式下的，因此不能很好的实现跨平台，一般只能是Linux主机或者Unix主机之间，但可以实现挂载使用等功能。SMB（Service Message Block，服务消息块协议），能够实现Windows和Linux主机之间的文件共享服务，可实现跨平台，在Linux上实现了CIFS（Common Internet File System）协议。</p>

<h1>一、FTP协议</h1>

<h2>1、FTP原理知识</h2>

<p>是一种C/S架构，基于套接字通信，用来在两台机器之间相互传输文件。FTP协议用到2种tcp连接：一是命令连接，用于客户端和服务端之间传递命令，监听在tcp/21端口；另一个是数据传输连接，用来传输数据，监听的端口是随机的。</p>

<h2>2、FTP的被动模式、主动模式</h2>

<p>主动模式的原理如下图：</p>

<p><a href="http://img1.51cto.com/attachment/201408/17/8886857_1408269616m4rt.jpg" target="_blank"><img alt="tcp主动模式" src="http://img1.51cto.com/attachment/201408/17/8886857_1408269618Ytcn.jpg" style="height:340px; width:650px" title="tcp主动模式" /></a></p>

<p>主动模式存在的问题是，在客户端一般都会有防火墙的设置，当服务端与客户端数据进行数据通信时，客户端的防火墙会将服务端的端口挡在外面。此时，通信就会受阻。因此，被动模式就产生了。</p>

<p>被动模式的原理图如下：</p>

<p><a href="http://img1.51cto.com/attachment/201408/17/8886857_1408269619ELL2.jpg" target="_blank"><img alt="tcp被动模式" src="http://img1.51cto.com/attachment/201408/17/8886857_1408269621GnKL.jpg" style="height:350px; width:650px" title="tcp被动模式" /></a></p>

<p>被动模式也会存在防火墙的问题，客户端与服务端传输数据时，在服务端也会有防火墙，但在服务端的防火墙有连接追踪的功能，解决了防火墙的问题。因此，一般使用被动模式比较多。</p>

<h2>3、FTP的用户认证</h2>

<p>FTP支持系统用户，匿名用户，和虚拟用户三种用户认证。</p>

<p>匿名用户：登陆用户名是anonymous，没有密码</p>

<p>系统用户：是FTP服务器端的本地用户和对应的密码，默认访问的是用户家目录</p>

<p>虚拟用户：仅用于访问服务器中特定的资源，常见的虚拟用户认证的方式有使用文件认证或使用数据库进行认证。最终也会将这些虚拟用户同一映射为一个系统用户，访问的默认目录就是这个系统用户的家目录。</p>

<h2>4、常见的状态信息码</h2>

<p>1**：提示信息</p>

<p>2**：成功执行的状态码</p>

<p>3**：需要进一步提供补充类的信息码，例如在输入用户账号信息后出现此状态，提示继续输入密码</p>

<p>4**：客户端类的错误</p>

<p>5**：服务端错误</p>

<h2>5、常见的实现FTP协议的工具</h2>

<p>服务端：</p>

<p>Linux端：wu-ftpd，pureftp，vsftpd（Centos 6上默认提供的）</p>

<p>windows端：ServU，FileZilla-Server</p>

<p>客户端工具：</p>

<p>Linux操作系统：ftp，lftp，lftpget，wget，cul，gftp等</p>

<p>windows操作系统：FileZilla</p>

<h2>6、vsftpd</h2>

<p>在CentOS上默认提供的是vsftpd（Very Secure FTP），以安全著称。</p>

<p>用户认证配置文件：/etc/pam.d/vsftpd      <br />
服务脚本：/etc/rc.d/init.d/vsftpd      <br />
配置文件目录：/etc/vsftpd       <br />
主配置文件：vsftpd.conf       <br />
匿名用户（映射为ftp用户）共享资源位置：/var/ftp       <br />
系统用户通过ftp访问的资源的位置：用户自己的家目录       <br />
虚拟用户通过ftp访问的资源的位置：给虚拟用户指定的映射成为的系统用户的家目录</p>

<h2>7、常见的的vsftpd的参数设置</h2>

<p>匿名用户的配置：</p>

<p>anonymous_enable=YES    #允许匿名用户登录<br />
anon_upload_enable=YES     #允许匿名用户上传文件<br />
anon_mkdir_write_enable=YES    #允许匿名用户创建目录<br />
anon_ohter_write_enable=YES    #允许其他的写权限（删除目录，文件）</p>

<p> </p>

<p>系统用户的配置：</p>

<p>local_enable=YES    #允许本地用户的登录<br />
write_enable=YES    # 本地用户可写<br />
local_umask=022    # 本地用户的umask</p>

<p> </p>

<p>禁锢所有的ftp本地用户于其家目录中：</p>

<p>chroot_local_user=YES      #允许本地用户只能访问自己的家目录，不允许访问其他目录，适用于所有的用户</p>

<p><a href="http://img1.51cto.com/attachment/201408/17/8886857_1408269623RUJj.jpg" target="_blank"><img alt="3" src="http://img1.51cto.com/attachment/201408/17/8886857_1408269625hx4M.jpg" style="height:430px; width:546px" title="3" /></a></p>

<p>禁锢文件中指定的ftp本地用户于其家目录中：</p>

<p>chroot_list_enable=YES</p>

<p>chroot_list_file=/etc/vsftpd/chroot_list</p>

<p> </p>

<p>目录消息：</p>

<p>dirmessage_enable=YES # 开启目录提示信息</p>

<p>在对应的目录下创建一个.message的文件，里面的内容当我们在访问时此目录时，会看到提示的信息。</p>

<p><a href="http://img1.51cto.com/attachment/201408/17/8886857_1408269627hz4T.jpg" target="_blank"><img alt="4" src="http://img1.51cto.com/attachment/201408/17/8886857_1408269629Dx8d.jpg" style="height:328px; width:592px" title="4" /></a></p>

<p> </p>

<p>日志：</p>

<p>xferlog_enable=YES      # 打开传输日志</p>

<p>xferlog_std_format=YES   # 是否使用标准格式</p>

<p>xferlog_file=/var/log/xferlog  #日志文件路径</p>

<p> </p>

<p>改变上传文件的属主：</p>

<p>chown_uploads=YES</p>

<p>chown_username=whoever #上传文件后立即改变文件的属主名</p>

<p> </p>

<p>vsftpd使用pam完成用户认证，其用到的pam配置文件：</p>

<p>pam_service_name=vsftpd   #用户认证文件，在/etc/pam.d/目录下</p>

<p> </p>

<p>是否启用控制用户登录的列表文件</p>

<p>userlist_enable=YES</p>

<p>userlist_deny=YES|NO   # 为yes的意思是，userlist_file是黑名单文件；是no的意思是userlist_file是白名单文件</p>

<p>userlist_file=/etc/vsftpd/user_list，默认文件为/etc/vsftpd/user_list</p>

<p> </p>

<p>连接限制：</p>

<p>max_clients: 最大并发连接数；</p>

<p>max_per_ip: 每个IP可同时发起的并发请求数；</p>

<p> </p>

<p>传输速率：</p>

<p>anon_max_rate: 匿名用户的最大传输速率, 单位是“字节/秒”;</p>

<p>local_max_rate: 本地用户的最大传输速率, 单位是“字节/秒”;</p>

<h2>8、虚拟用户（基于mysql实现）</h2>

<h3>一、安装所需要程序</h3>

<p><code>1、安装mysql和pam_mysql</code></p>

<p><code># yum -y install vsftpd mysql-server mysql-devel pam_mysql</code></p>

<p><code>注意：pam_mysql由epel源提供。</code></p>

<p> </p>

<h3>二、创建虚拟用户账号</h3>

<p><code>1.准备数据库及相关表</code></p>

<p><code>首先请确保mysql服务已经正常启动。而后，按需要建立存储虚拟用户的数据库即可，</code></p>

<p><code>这里将其创建为vsftpd数据库。</code></p>

<p><code>mysql> create database vsftpd;</code></p>

<p><code>mysql> grant </code><code>select</code> <code>on vsftpd.* to vsftpd@</code><code>'%'</code> <code>identified by </code><code>'vsftpd'</code><code>;</code></p>

<p><code>mysql> flush privileges;</code></p>

<p><code>mysql> use vsftpd;</code></p>

<p><code>mysql> create table </code><code>users</code> <code>(</code></p>

<p><code>    </code><code>-> </code><code>id</code> <code>int AUTO_INCREMENT NOT NULL,</code></p>

<p><code>    </code><code>-> name char(20) binary NOT NULL,</code></p>

<p><code>    </code><code>-> password char(48) binary NOT NULL,</code></p>

<p><code>    </code><code>-> primary key(</code><code>id</code><code>)</code></p>

<p><code>    </code><code>-> );</code></p>

<p><code>2、添加测试的虚拟用户</code></p>

<p><code>根据需要添加所需要的用户，需要说明的是，这里将其密码为了安全起见应该使用PASSWORD</code></p>

<p><code>函数加密后存储。</code></p>

<p><code>mysql> insert into </code><code>users</code><code>(name,password) values(</code><code>'tom'</code><code>,password(</code><code>'tom'</code><code>));</code></p>

<p><code>mysql> insert into </code><code>users</code><code>(name,password) values(</code><code>'jerry'</code><code>,password(</code><code>'tom'</code><code>));</code></p>

<h3>三、配置vsftpd</h3>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>

<p>4</p>

<p>5</p>

<p>6</p>

<p>7</p>

<p>8</p>

<p>9</p>

<p>10</p>

<p>11</p>

<p>12</p>

<p>13</p>

<p>14</p>

<p>15</p>

<p>16</p>

<p>17</p>

   <p>18</p>

<p>19</p>

<p>20</p>

<p>21</p>

<p>22</p>

<p>23</p>

<p>24</p>

<p>25</p>

<p>26</p>

<p>27</p>

<p>28</p>

<p>29</p>

<p>30</p>

<p>31</p>

<p>32</p>

<p>33</p>
</td>
<td>
<p><code>1.建立pam认证所需文件</code></p>

<p> </p>

<p><code>#vi /etc/pam.d/vsftpd.mysql</code></p>

<p><code>添加如下两行</code></p>

<p><code>auth required </code><code>/lib/security/pam_mysql</code><code>.so user=vsftpd </code><code>passwd</code><code>=www.magedu.com host=localhost</code></p>

<p><code> </code><code>db=vsftpd table=</code><code>users</code> <code>usercolumn=name passwdcolumn=password crypt=2</code></p>

<p><code>account required </code><code>/lib/security/pam_mysql</code><code>.so user=vsftpd </code><code>passwd</code><code>=www.magedu.com host=localh</code></p>

<p><code>ost db=vsftpd table=</code><code>users</code> <code>usercolumn=name passwdcolumn=password crypt=2</code></p>

<p> </p>

<p> </p>

<p><code>注意：由于mysql的安装方式不同，pam_mysql.so基于unix sock连接mysql服务器时可能会出问题，</code></p>

<p><code>此时，建议授权一个可远程连接的mysql并访问vsftpd数据库的用户。</code></p>

<p> </p>

<p><code>2.修改vsftpd的配置文件，使其适应mysql认证</code></p>

<p> </p>

<p><code>建立虚拟用户映射的系统用户及对应的目录</code></p>

<p><code># useradd -s /sbin/nologin -d /var/ftproot vuser</code></p>

<p><code># chmod go+rx /var/ftproot</code></p>

<p> </p>

<p><code>请确保</code><code>/etc/vsftpd</code><code>.conf中已经启用了以下选项</code></p>

<p><code>anonymous_enable=YES</code></p>

<p><code>local_enable=YES</code></p>

<p><code>write_enable=YES</code></p>

<p><code>anon_upload_enable=NO</code></p>

<p><code>anon_mkdir_write_enable=NO</code></p>

<p><code>chroot_local_user=YES</code></p>

<p> </p>

<p><code>而后添加以下选项</code></p>

<p><code>guest_enable=YES</code></p>

<p><code>guest_username=vuser</code></p>

<p> </p>

<p><code>并确保pam_service_name选项的值如下所示</code></p>

<p><code>pam_service_name=vsftpd.mysql</code></p>
</td>
</tr>
</tbody>
</table>

<h3>四、启动vsftpd服务</h3>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>
</td>
<td>
<p><code># service vsftpd start</code></p>

<p><code># chkconfig vsftpd on</code></p>
</td>
</tr>
</tbody>
</table>

<h3>五、配置虚拟用户具有不同的访问权限</h3>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>

<p>4</p>

<p>5</p>

<p>6</p>

<p>7</p>

<p>8</p>

<p>9</p>

<p>10</p>

<p>11</p>

<p>12</p>

<p>13</p>

<p>14</p>

<p>15</p>

<p>16</p>

<p>17</p>

<p>18</p>

<p>19</p>

<p>20</p>

<p>21</p>

<p>22</p>

<p>23</p>
</td>
<td>
<p><code>vsftpd可以在配置文件目录中为每个用户提供单独的配置文件以定义其</code><code>ftp</code><code>服务访问权限，</code></p>

<p><code>每个虚拟用户的配置文件名同虚拟用户的用户名。配置文件目录可以是任意未使用目录，</code></p>

<p><code>只需要在vsftpd.conf指定其路径及名称即可。</code></p>

<p> </p>

<p><code>1、配置vsftpd为虚拟用户使用配置文件目录</code></p>

<p> </p>

<p><code># vim vsftpd.conf</code></p>

<p><code>添加如下选项</code></p>

<p><code>user_config_dir=</code><code>/etc/vsftpd/vusers_config</code> </p>

<p> </p>

<p><code>2、创建所需要目录，并为虚拟用户提供配置文件</code></p>

<p> </p>

<p><code># mkdir /etc/vsftpd/vusers_config/</code></p>

<p><code># cd /etc/vsftpd/vusers_config/</code></p>

<p><code># touch tom jerry</code></p>

<p> </p>

<p><code>3、配置虚拟用户的访问权限</code></p>

<p> </p>

<p><code>虚拟用户对vsftpd服务的访问权限是通过匿名用户的相关指令进行的。比如，如果需要让tom用</code></p>

<p><code>户具有上传文件的权限，可以修改</code><code>/etc/vsftpd/vusers_config/tom</code><code>文件，在里面添加如下选项即可。</code></p>

<p><code>anon_upload_enable={YES|NO}</code></p>

<p><code>anon_mkdir_write_enable={YES|NO}</code></p>

<p><code>anon_other_write_enable={YES|NO}</code></p>
</td>
</tr>
</tbody>
</table>

<h1>二、NFS协议</h1>

<h2>1、NFS的几个概念</h2>

<h3>RPC（Remote Procedure Call Protocol远程过程调用协议）：</h3>

<p>简单的说是函数调用（远程主机上的函数） 一部分功能由本地程序完成 另一部分功能由远程主机上的函数完成。客户端挂载了nfs服务器的文件系统时，进行一些操作，但是这些操作服务端如何知道呢？？这可是在内核级别上实现协议。RPC就解决了这个问题，它会将客户端的操作的函数调用发送到服务器端，由服务器端执行这些函数调用。</p>

<h3>idmapd：</h3>

<p>想想这种情形，nfs客户端在挂载文件系统以后，在本地以某用户的身份创建了一个文件，在服务器端这个文件的属主和属组是哪个用户呢？早期是通过NIS（Network Information Services网络信息服务）来解决这个问题的，但是在传输账号和密码时，使用的是明文传输，现在使用LDAP+clbbler来实现的。但是，NFS使用的是idmapd这个服务，有rpc提供，将所有的用户后映射为nfsnobody，但是在访问的时候，还是以本地UID对应的本地用户来使用的。</p>

<h3>mounted:</h3>

<p>NFS是通过什么来控制那些客户端可以访问，那些不可以访问的呢？NFS只支持通过IP来控制客户端，而这个功能是由守护进程mounted来实现的，它监听的端口是半随机的。所谓的半随机指的是，这个随机端口是由rpc服务来决定的，而rpc是通过随机的方式。作用等等同于小区大门保安的作用。</p>

<h2>2、NFS请求过程</h2>

<p>在CentOS6.5中，NFS服务端监听在tcp和udp的2049端口，服务名是nfs、pc监听于tcp和udp的111号端口，服务名是portmapper。</p>

<p>请求过程：当客户端试这去挂载使用nfs共享的文件系统是，客户端首先回去与postmapper(tcp/111)端口去注册使用，此时postmapper会随机分配一个端口给mounted,然后mounted这个守护进程会来验证客户端的合法性，验证通过后，会把请求交给nfs服务，客户端此时可以挂载使用了，用户在创建文件时，会使用到idmapd的守护进程来映射属主。其实idmapd也是有rpc服务提供的，只不过在这里，nfs服务使用到用户映射的功能时，会自动的去调用此守护进程。</p>

<h2>3、服务的配置</h2>

<p>在服务端，只需要安装nfs-utils就可以直接使用，nfs服务直接是内核的模块。</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>

<p>4</p>

<p>5</p>

<p>6</p>

<p>7</p>
</td>
<td>
<p><code># smod | grep nfs</code></p>

<p><code>nfsd                  309196  13 </code></p>

<p><code>lockd                  73662  1 nfsd</code></p>

<p><code>nfs_acl                 2647  1 nfsd</code></p>

<p><code>auth_rpcgss            44949  1 nfsd</code></p>

<p><code>sunrpc                262768  17 nfsd,lockd,nfs_acl,auth_rpcgss</code></p>

<p><code>exportfs                4236  1 nfsd</code></p>
</td>
</tr>
</tbody>
</table>

<p>服务端共享的目录是通过 /etc/exports这个文件共享出去的。这个文件的书写格式如下：</p>

<p>共享目录    客户端（选项1，选项2） 客户端（选项1，选项2） …  示例：</p>

<p>/mydata   172.16.0.0/16（ro,async,no_root_squash)   <a href="http://www.example.com/" target="_blank">www.example.com</a>（ro）</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>

<p>4</p>

<p>5</p>

<p>6</p>

<p>7</p>

<p>8</p>

<p>9</p>

<p>10</p>

<p>11</p>

<p>12</p>

<p>13</p>

<p>14</p>

<p>15</p>

<p>16</p>

<p>17</p>

<p>18</p>

<p>19</p>

<p>20</p>

<p>21</p>

<p>22</p>

<p>23</p>

<p>24</p>

<p>25</p>

<p>26</p>

<p>27</p>

<p>28</p>

<p>29</p>

<p>30</p>

<p>31</p>
</td>
<td>
<p><code>########################客户端的表示方式##########################</code></p>

<p><code>主机IP地址：例如 192.168.1.10</code></p>

<p><code>网络地址：例如 172.16.0.0</code><code>/24</code></p>

<p><code>域名表示：例如 www.example.com（指定主机），*.example.com（对应域名下的所有主机）</code></p>

<p><code>*:表示所有的主机</code></p>

<p><code>##############################常见的选项###############################</code></p>

<p><code>有几个常用的选项可以对 NFS 实现进行定制。这些选项包括：</code></p>

<p><code>secure： 这个选项是缺省选项，它使用了 1024 以下的 TCP</code><code>/IP</code> <code>端口实现 NFS 的连接。</code></p>

<p><code>   </code><code>指定 insecure 可以禁用这个选项。</code></p>

<p><code>rw： 这个选项允许 NFS 客户机进行读/写访问。缺省选项是只读的。</code></p>

<p><code>async： 异步存储（所有的客户端操作先在内存中缓存，等待cpu空闲的时候写入磁盘）。</code></p>

<p><code>  </code><code>这个选项可以改进性能，但是如果没有完全关闭 NFS 守护进程就重新启动了 NFS 服务器，</code></p>

<p><code>  </code><code>这也可能会造成数据丢失。与之相反的是syns，是同步写入磁盘。</code></p>

<p><code>no_wdelay： 这个选项关闭写延时。如果设置了 async，那么 NFS 就会忽略这个选项。</code></p>

<p><code>nohide： 如果将一个目录挂载到另外一个目录之上，那么原来的目录通常就被隐藏起来</code></p>

<p><code>  </code><code>或看起来像空的一样。要禁用这种行为，需启用 hide 选项。</code></p>

<p><code>no_subtree_check： 这个选项关闭子树检查，子树检查会执行一些不想忽略的安全性检查。</code></p>

<p><code>  </code><code>缺省选项是启用子树检查。</code></p>

<p><code>no_auth_nlm： 这个选项也可以作为 insecure_locks 指定，它告诉 NFS 守护进程不要对加</code></p>

<p><code>  </code><code>锁请求进行认证。如果关心安全性问题，就要避免使用这个选项。缺省选项是 auth_nlm 或 </code></p>

<p><code>  </code><code>secure_locks。</code></p>

<p><code>mp (mountpoint=path)： 通过显式地声明这个选项，NFS 要求挂载所导出的目录。</code></p>

<p><code>fsid=num： 这个选项通常都在 NFS 故障恢复的情况中使用。如果希望实现 NFS 的故障恢复，</code></p>

<p><code>  </code><code>请参考 NFS 文档。</code></p>

<p> </p>

<p><code>#####################用户映射的选项############################</code></p>

<p><code>root_squash： 这个选项不允许 root 用户访问挂载上来的 NFS 卷。</code></p>

<p><code>no_root_squash： 这个选项允许 root 用户访问挂载上来的 NFS 卷。</code></p>

<p><code>all_squash： 这个选项对于公共访问的 NFS 卷来说非常有用，它会限制所有的 UID 和 GID，</code></p>

<p><code>  </code><code>只使用匿名用户。缺省设置是 no_all_squash。</code></p>

<p><code>anonuid 和 anongid： 这两个选项将匿名 UID 和 GID 修改成特定用户和组帐号。</code></p>
</td>
</tr>
</tbody>
</table>

<p> </p>

<h2>4、常用命令</h2>

<p>showmount是用来查看nfs服务的情况</p>

<p>用法：showmount [ -adehv ] [ --all ] [ --directories ] [ --exports ] [ --help ] [ --version ] [ host ]</p>

<p>可以使用短选型，也可以使用长选项。</p>

<p>-a ：这个参数是一般在NFS SERVER上使用，是用来显示已经mount上本机nfs目录的cline机器。   <br />
-e ：显示指定的NFS SERVER上export出来的目录。 </p>

<p>exportfs:一般用在当NFS服务启动后，使用此命令来控制共享目录的导出</p>

<p>用法：exportfs [-aruv] <br />
-a ：全部mount或者unmount /etc/exports中的内容 <br />
-r ：重新mount /etc/exports中分享出来的目录 <br />
-u ：umount目录 <br />
-v ：在export的时候，将详细的信息输出到屏幕上。 <br />
具体例子： <br />
# exportfs -au 卸载所有共享目录 <br />
# exportfs -rv 重新共享所有目录并输出详细信息</p>

<h2>5、客户端的使用</h2>

<p>先使用 showmont -e SER_NAME 来发现服务端的共享的目录</p>

<p>然后使用mount挂载使用，格式：</p>

<p>mount -t nfs SER_NAME:/data /parth/to/someponit [-o 选项]</p>

<p>mount -t nfs 192.168.1.99:/mydat /mnt -o rsize=4096</p>

<p>rsize 的值是从服务器读取的字节数。wsize 是写入到服务器的字节数。默认都是1024， 如果使用比较高的值，如8192,可以提高传输速度。</p>

<h1>三、samba服务（基本介绍）</h1>

<h2>1、协议</h2>

<p>smb: Service Message Block</p>

<p>CIFS: Common Internet File System通用网络文件系统，是windows主机之间共享的协议，samba实现了这个协议，所以可以实现wondows与linux之间的文件共享服务。</p>

<p>监听的端口有：</p>

<p>tcp/137 udp/137 tcp/139 udp/139</p>

<p>137：是实现NetBIOS协议，实现解析windows之间主机名的解析，实现在windows的网上邻居可以看到Linux的主机名。</p>

<p>139：是实现cifs协议</p>

<h2>2、如何访问？</h2>

<p>在Linux中：</p>

<p> </p>

<p>交互式数据访问：</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>
</td>
<td>
<p><code>smbclient -L HOST -U USERNAME</code></p>
</td>
</tr>
</tbody>
</table>

<p>获取到共享信息之后，</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>
</td>
<td>
<p><code>smbclint </code><code>//SERVER/shared_name</code> <code>-U USERNAME</code></p>
</td>
</tr>
</tbody>
</table>

<p>基于挂载的方式访问：</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>
</td>
<td>
<p><code>mount</code> <code>-t cifs </code><code>//SERVER/shared_name</code>  <code>/mount_point</code> <code>-o username=USERNAME,password=PASSWORD</code></p>
</td>
</tr>
</tbody>
</table>

<h2>3、如何配置samba服务器（Linux）</h2>

<p># yum -y install samba</p>

<p>服务脚本：</p>

<p>      /etc/rc.d/init.d/nmb # 实现 NetBIOS协议</p>

<p>      /etc/rc.d/init.d/smb  # 实现cifs协议</p>

<p>主配置文件：</p>

<p>       /etc/samba/smb.conf</p>

<p>samba用户：</p>

<p>     账号：都是系统用户, /etc/passwd</p>

<p>     密码：samba服务自有密码文件,</p>

<p>     将系统用户添加为samba的命令：smbpasswd</p>

<p>     smbpasswd:</p>

<p>         -a Sys_User: 添加系统用户为samba用户</p>

<p>         -d ：禁用用户</p>

<p>         -e: 启用用户</p>

<p>         -x: 删除用户</p>

<p>配置文件：</p>

<p>/etc/samba/smb.conf   配置文件包括全局设定，特定共享的设定，私有家目录，打印机共享，自定义共享</p>

<p>全局配置：</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>
</td>
<td>
<p><code>workgroup = MYGROUP  </code><code># 工作组</code></p>

<p><code>hosts allow = 127. 192.168.12. 192.168.13. </code><code># 访问控制，IP控制</code></p>

<p><code>interfaces = lo eth0 192.168.12.2</code><code>/24</code> <code>192.168.13.2</code><code>/24</code> <code># 接口+ip控制</code></p>
</td>
</tr>
</tbody>
</table>

<p>自定义共享：</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>

<p>2</p>

<p>3</p>

<p>4</p>

<p>5</p>

<p>6</p>
</td>
<td>
<p><code>[shared_name] </code><code>#共享名称</code></p>

<p><code>path = </code><code>/path/to/share_directory</code> <code>#共享路径</code></p>

<p><code>comment = Comment String </code><code># 注释信息</code></p>

<p><code>guest ok = {</code><code>yes</code><code>|no} | public = {</code><code>yes</code><code>|no} </code><code># 是否启用来宾账号</code></p>

<p><code>writable = {</code><code>yes</code><code>|no} |  </code><code>read</code> <code>only = {</code><code>yes</code><code>|no} </code><code># 共享目录是否可写</code></p>

<p><code>write list = +GROUP_NAME  </code><code># 允许可写的用户列表，前面有+是代表允许可写的组</code></p>
</td>
</tr>
</tbody>
</table>

<p>测试配置文件是否有语法错误，以及显示最终生效的配置：</p>

<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td>
<p>1</p>
</td>
<td>
<p><code>testparm</code></p>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>    至此，三种常见的文件服务介绍完成。</p>
