<h1>JDBC API 介绍</h1>
<h2>简介</h2>
<h3>The JDBC API</h3>
<p>jdbctm API提供了从JavaTM编程语言编程访问关系型数据。使用JDBC API，用java编程语言编写的应用程序可以执行SQL语句，检索结果，并更改传播回基础数据源。JDBC API还可以用于在分布式异构环境中与多个数据源交互。<br />
JDBC是基于开放的SQL CLI，它也是ODBC的基础。JDBC提供了一种自然的和易于使用的映射从java编程语言的抽象和概念的界定在X/Open CLI和SQL标准。<br />
自1997年1月推出以来，JDBC API已被广泛接受和实现。API的灵活性允许广泛的实现</p>
<h3>Platforms</h3>
<p>jdbc API是Java平台的一部分，其中包括javatm（javatm标准版、企业版 和 javatm javatm EE）。jdbc API分为：java.sql 和 javax.sql 两个包</p>
<h3>目标读者</h3>
<p>本规范主要针对这些类型的产品的供应商：</p>
<ul>
<li>用于实现 JDBC API的 驱动程序</li>
<li>在驱动层之上提供中间层服务的应用服务器</li>
<li>使用JDBC API提供服务的工具，如应用程序生成</li>
</ul>
<p>本规范也适用于下列目的：</p>
<ul>
<li>应用程序使用JDBC API的最终用户介绍</li>
<li>在api之上分层的其他api开发人员的起点</li>
</ul>
<h2>目标</h2>
<h3>历史</h3>
<p>JDBC是一种成熟的技术，在1997年1月首次被指定。在最初的版本中，JDBC API侧重于向SQL数据库提供基本的调用级接口。JDBC 2.1规范和2个可选包规范随后扩展了API的范围，包括支持更高级的应用程序和应用服务器所需的特性，以管理代表应用程序的JDBC API的使用。<br />
JDBC 3规范的目标是通过填充较小的缺失功能区域来绕过API。JDBC 4.2，我们的目标是双重的：提高所有开发者SQL在java平台开发经验的轻松工作。其次，提供一系列的企业级功能，以将JDBC暴露到更丰富的工具和API中，以管理JDBC资源</p>
<h3>概述的目标</h3>
<p>下面的列表概括了JDBC的目标和设计理念，特别是JDBC 4.2 API：</p>
<p>1， 适合java EE和java SE平台<br />
JDBC API是java平台的一个组成部分的技术。JDBC 4.2 API应该与java企业版和标准版的java平台的总体方向对齐。此外，与java平台的最新发展暴露出一系列新的特点和语言的改进，广泛应用于本规范。</p>
<p>2，与SQL一致：2003<br />
JDBC API提供了访问programmatic from the applications to the Java编程语言已经写在标准的SQL。sought JDBC 3.0的支持来保证它的子集，是likely features of the sql99 to be by the工业的广泛支持。similarly for JDBC支持for SQL Server 4.2、专业至上：2003 is on the of this组件规范，我们预期未来的负载foreseeable will be for the</p>
<p>3，提供供应商对公共特性的中立访问<br />
JDBC致力于提供对不同供应商实现共同支持的特性的高带宽访问。我们的目标是提供一定程度的特性访问，与本地应用程序可以实现的功能相媲美。但是，API必须是通用的且足够灵活，以便实现广泛的实现</p>
<p>4，维护SQL的重点<br />
JDBC API的焦点一直是从java编程语言访问关系数据。这个目标，以前在JDBC 3 API中提到的，仍然是构建这个规范的原则的核心。对发展主题的改进包括API和公用事业继续关注需要从java平台软件开发SQL缓解供应。类似于以前的规范，这并不排除与其他技术（如XML、CORBA和非关系数据）的交互。</p>
<p>5，为工具和高级API提供基础<br />
JDBC提供了一个标准API来访问广泛的底层数据源或遗留系统。实现差异通过JDBC API抽象变得透明，使它成为希望创建可移植工具和应用程序的工具供应商的一个有价值的目标平台。<br />
因为它是一个“从java编程语言SQL调用级接口，JDBC API也适合作为更高级别的设施，如企业JavaBeans（EJB）基础层容器管理的持久性，SQLJ和JDBC RowSet实现。</p>
<p>6， Keep it simple<br />
实体。这个目标是通过定义许多紧凑的、单一用途的方法来实现的，而不是使用控制标志参数的复杂的、多用途的方法</p>
<p>7，提高可靠性、可用性和可伸缩性<br />
可靠性，可用性，和可扩展性是java EE和java平台的主题，以及对未来的java平台的方向。JDBC通过增强几个领域的支持来保持这些主题，包括资源管理、通过逻辑连接重用已准备好的语句和错误处理</p>
<p>8，维护与现有应用程序和驱动程序的向后兼容性<br />
现有的JDBC技术使驱动程序（JDBC驱动程序）和使用它们的应用程序必须继续在java虚拟机支持JDBC 4.2 API的实现工作。仅使用JDBC早期版本中定义的特性的应用程序不需要继续运行的更改。对于现有的应用程序来说，迁移到JDBC 4.2技术应该是很简单的</p>
<p>9，用JDBC RowSet实现密切关联<br />
java SE包含一个标准的JDBC RowSet实现作为JDBC RowSet实现指定（jsr-114）。该规范将提供一个实用工具级别和元数据语言级别上描述的实用工具集。这将允许开发人员轻松地迁移的JDBC技术对JDBC RowSet模型，使断开连接的数据源的访问，除了从XML站点管理关系数据存储的应用程序的能力</p>
<p>10，允许与连接器的正向兼容性<br />
连接器架构定义了一个标准的方式来打包和部署资源适配器允许java EE容器将其连接，交易，和与外部资源的安全管理。JDBC提供了JDBC驱动程序向连接器架构的迁移路径。对于其产品使用JDBC技术逐步实现连接器API的供应商来说，应该是可能的。期望的是JDBC驱动程序供应商将围绕其现有的数据源实现编写资源管理器包装，以便它们可以在连接器框架中重用。</p>
<p>11，要求明确<br />
对JDBC遵从性的要求必须明确且易于识别。JDBC规范和API文档（javadoc）将澄清其特点是必需的，哪些是可选的</p>
<h2>新特性概述</h2>
<p>JDBC 4.2 API引入了新的特征和在以下方面的变化：</p>
<ul>
<li>
<p>增加了对游标的支持。<br />
多个数据库支持游标游标数据类型，以便从存储过程返回结果集</p>
</li>
<li>
<p>支持大更新计数<br />
当前更新计数的JDBC方法返回一个int值。在某些环境中，随着数据集的不断增长，这就造成了问题</p>
</li>
<li>
<p>增加 java.sql.driveraction 接口（JDK 1.8）<br />
必须实现java.sql.driveraction 接口 当 driver 被注册时 想要通知 DriverManager</p>
</li>
<li>
<p>增加 java.sql.SQLType 接口<br />
用于创建表示泛型SQL类型的对象的接口，称为JDBC类型或特定于供应商的类型</p>
</li>
<li>
<p>增加 java.sql.JDBCType 枚举<br />
用来识别通用的 SQL 类型，目的是为了取代定义在 Types.java 类里的常量。</p>
</li>
<li>
<p>增加 Java Object 类型与 JDBC 类型的映射<br />
增加 java.time.LocalDate 映射到 JDBC DATE<br />
增加 java.time.LocalTime 映射到 JDBC TIME<br />
增加 java.time.LocalDateTime 映射到 JDBC TIMESTAMP<br />
增加 java.time.LocalOffsetTime 映射到 JDBC TIME_WITH_TIMEZONE<br />
增加 java.time.LocalOffsetDateTime 映射到 JDBC TIMESTAMP_WITH_TIMEZONE</p>
</li>
<li>
<p>增加调用 setObject 和 setNull 方法时 Java 类型和 JDBC 类型的转换<br />
允许 java.time.LocalDate 转化为 CHAR, VARCHAR, LONGVARCHAR, DATE<br />
允许 java.time.LocalTime 转化为 CHAR, VARCHAR, LONGVARCHAR, TIME<br />
允许 java.time.LocalTime 转化为 CHAR, VARCHAR, LONGVARCHAR, TIMESTAMP<br />
允许 java.time.OffsetTime 转化为 CHAR, VARCHAR, LONGVARCHAR, TIME_WITH_TIMESTAMP<br />
允许 java.time.OffsetDateTime 转化为 CHAR, VARCHAR, LONGVARCHAR, TIME_WITH_TIMESTAMP, TIMESTAMP_WITH_TIMESTAMP</p>
</li>
<li>
<p>使用 ResultSet getter 方法来获得 JDBC 类型<br />
允许 getObject 方法返回 TIME_WITH_TIMEZONE, TIMESTAMP_WITH_TIMEZONE</p>
</li>
<li>
<p>JDBC API 的变化<br />
对现有JDBC接口进行了以下更改…</p>
</li>
</ul>
<p>1，BatchUpdateException<br />
增加了一个新的构造函数来支持大量的 update，增加 getLargeUpdateCounts 方法。</p>
<p>2，Connection<br />
增加了 abort,getNetworkTimeout, getSchema, setNetworkTimeout, setSchema 方法。<br />
调整了 getMapType, setSchema, setMapType 方法。</p>
<p>3，CallableStatement<br />
重载了 registerOutParameter, setObject 方法。<br />
调整了 getObject 方法</p>
<p>4， Date<br />
增加了 toInstant, toLocalDate 方法。<br />
重载了 valueOf 方法。</p>
<p>5，DatabaseMetaData<br />
增加了 supportsRefCursor, getMaxLogicalLobSize 方法。<br />
调整了 getIndexInfo 方法。</p>
<p>6，Driver<br />
调整了 acceptsURL, connect 方法。</p>
<p>7，DriverManager<br />
重载了 registerDriver 方法。<br />
调整了 getConnection, deregisterDriver, registerDriver 方法。</p>
<p>8，PreparedStatement<br />
增加了 executeLargeUpdate 方法。<br />
重载了 setObject 方法</p>
<p>9，ResultSet<br />
重载了 updateObject 方法。<br />
调整了 getObject 方法。</p>
<p>10，Statement<br />
增加了 executeLargeBatch, executeLargeUpdate,getLargeUpdateCount, getLargeMaxRows, setLargeMaxRows方法。<br />
调整了 setEscapeProcessing 方法</p>
<p>11，SQLInput<br />
增加了 readObject 方法</p>
<p>12，SQLOutput<br />
增加了 readObject 方法</p>
<p>13，Time<br />
增加了 toInstant, toLocalTime 方法<br />
重载了 valueOf 方法</p>
<p>14，Timestamp<br />
增加了 from, toInstant, toLocalTime 方法<br />
重载了 valueOf 方法</p>
<p>15，Types<br />
增加了 REF_CURSOR, TIME_WITH_TIMEZONE, TIMESTAMP_WITH_TIEMZONE 类型</p>
<p>16，SQLXML<br />
明确了GetSource和setResult方法</p>
<p>17，DataSource 与 XADataSource<br />
必须提供一个无参构造函数。</p>
