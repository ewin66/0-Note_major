<h1>数据库元数据（Database Metadata）</h1>
<p>DatabaseMetadata 接口通过JDBC驱动程序的实现提供基础数据源的信息。它主要由应用程序服务器和工具来决定如何与给定的数据源交互。应用程序也可以使用databasemetadata方法来获取有关数据源的信息，但这是不特别的<br />
DatabaseMetadata 接口包括超过150个方法，可以根据他们提供的信息的类型分类：</p>
<ul>
<li>关于数据源的一般信息</li>
<li>数据源是否支持给定的特性或功能</li>
<li>数据源的限制</li>
<li>数据源包含哪些SQL对象和这些对象的属性</li>
<li>由数据源提供的事务支持</li>
</ul>
<p>DatabaseMetadata 接口还包含超过40个字段，这是用来作为各种 databasemetadata 方法返回值</p>
<p>本章提出的databasemetadata接口的概述，举例说明元数据方法的分类，并介绍了一些新的方法。然而，对于一个全面的列表，读者应该参考JDBC API规范</p>
<blockquote>
<p>Note – 注–JDBC定义结果集元数据接口，会在第十五章 "结果集" 进行讨论</p>
</blockquote>
<h2>创建一个databasemetadata对象</h2>
<p>一个 databasemetadata 对象由连接方法 getmetadata 创建。一旦创建，它就可以被用来动态地发现底层数据源的信息。代码示例7-1创建一个databasemetadata对象。</p>
<pre>
<code>DatabaseMetaData dbmd = con.getMetadata();
int maxLen = dbmd.getMaxTableNameLength();
</code></pre>
<h2>通用信息检索</h2>
<p>一些databasemetadata方法用于动态地发现数据源的一般信息，以及一些关于它的实现细节。这一类中的这方法是</p>
<ul>
<li>getURL</li>
<li>getUserName</li>
<li>getDatabaseProductVersion, getDriverMajorVersion and getDriverMinorVersion</li>
<li>getSchemaTerm, getCatalogTerm and getProcedureTerm</li>
<li>nullsAreSortedHigh and nullsAreSortedLow</li>
<li>usesLocalFiles and usesLocalFilePerTable</li>
<li>getSQLKeywords</li>
</ul>
<h2>确定功能支持</h2>
<p>一大组 databasemetadata 方法可以用来确定一个特定的功能或功能集是由 Driver 或底层数据源支持。除此之外，一些方法描述了提供何种级别的支持。对单个特征支持的描述 的一些方法是：</p>
<ul>
<li>supportsaltertablewithdropcolumn</li>
<li>supportsBatchUpdates</li>
<li>supportsPositionedDelete</li>
<li>supportsFullOuterJoins</li>
<li>supportsStoredProcedures</li>
<li>supportsMixedCaseQuotedIdentifiers</li>
</ul>
<p>描述功能支持级别的方法包括：</p>
<ul>
<li>supportsANSI92EntryLevelSQL</li>
<li>supportsCoreSQLGrammar</li>
</ul>
<h2>数据源的限制</h2>
<p>这一组方法提供了给定数据源所施加的限制。这一类中的一些方法是：</p>
<ul>
<li>getMaxRowSize</li>
<li>getMaxStatementLength</li>
<li>getMaxTablesInSelect</li>
<li>getMaxConnections</li>
<li>getMaxCharLiteralLength</li>
<li>getMaxColumnsInTable</li>
</ul>
<p>这个组中的方法返回一个int类型的值，表示没有限制或限制是未知的</p>
<h2>SQL对象及其属性</h2>
<p>一些databasemetadata方法提供SQL对象的信息对于一个给定的数据源，还包括确定这些对象属性的方法，这一类的例子是:</p>
<ul>
<li>getSchemas</li>
<li>getCatalogs</li>
<li>getTables</li>
<li>getPrimaryKeys</li>
<li>getProcedures</li>
<li>getProcedureColumns</li>
<li>getUDTs</li>
<li>getFunctions</li>
<li>getFunctionColumns</li>
</ul>
<p>这是从一个databasemetadata方法返回ResultSet对象具有敏感性type_forward_only和并发concur_read_only。resultset.getholdability来确定返回的ResultSet对象的保持能力作为默认的保持能力是实现定义</p>
<p>附加的列以外的列定义为通过对给定的方法返回的ResultSet对象可以通过JDBC驱动程序厂商定义的，必须由他们的列标签的访问。这使得未来的JDBC规范能够如果需要现有的databasemetadata方法没有显著影响现有的应用程序添加额外的列</p>
<h2>事务支持</h2>
<p>一小部分方法提供有关数据源支持的事务语义的信息。这一类的例子包括</p>
<ul>
<li>supportsMultipleTransactions</li>
<li>getDefaultTransactionIsolation</li>
</ul>
<h2>新的方法</h2>
<p>JDBC 4.2 API提供了以下新的databasemetadata方法：</p>
<ul>
<li>supportsRefCursors</li>
<li>getMaxLogicalLobSize</li>
</ul>
<h2>已更新的方法</h2>
<p>JDBC 4.2 API修改现有的databasemetadata方法的定义：</p>
<ul>
<li>getIndexInfo<br />
以前返回CARDINALITY 和 PAGES 列现在返回一个long 类型的值</li>
</ul>
<p>JDBC 4.2 API规范包括这些方法的更新定义。</p>
