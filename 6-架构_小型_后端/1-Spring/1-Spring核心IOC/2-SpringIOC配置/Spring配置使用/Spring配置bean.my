<h1>spring 配置的两种方式：JAVA配置和注解配置</h1>

<p>众所周知，spring自从3.0开始以后，就全面推荐使用配置的方式进行代码编写了，这种方式确实可以避免了之前一个项目里面一大堆XML的情况，毕竟XML的可读性实在不怎么样，而且一会写JAVA，一会写XML，确实还是蛮麻烦的 <br />
就目前来说spring的配置方式一般为两种：JAVA配置和注解配置。那么什么的是注解配置呢？什么是JAVA配置呢？</p>

<p>//注解配置：<br />
@Service<br />
@Component<br />
@Repository<br />
@Controlle</p>

<p>//JAVA配置<br />
@Confirguration 相当于spring的配置文件XML<br />
@Bean 用到方法上，表示当前方法的返回值是一个bean</p>

<p>这两种方法的区别在于如果使用注解的方式，那么你需要在Serivce层，DAO层的时候，需要在类上进行注解，就可获得spring的依赖注入：</p>

<p>package di;</p>

<p>import org.springframework.beans.factory.annotation.Autowired;<br />
import org.springframework.stereotype.Service;<br />
//注解配置<br />
@Service <br />
public class UseFunctionService {<br />
    @Autowired<br />
    FunctionService functionService;</p>

<p>    public String sayHello(String word) {<br />
        return functionService.toHello(word);<br />
    }<br />
}</p>

<p>如果使用java配置的方式，那么就不需要在类上写注解了，直接在配置类里面进行申明即可：</p>

<p>package javaconfig;</p>

<p>import org.springframework.context.annotation.Bean;<br />
import org.springframework.context.annotation.Configuration;</p>

<p>@Configuration<br />
public class JavaConfig {<br />
    //通过这种方式，获得spring的依赖注入<br />
    @Bean<br />
    public UseFunctionService useFunctionService () {<br />
        return new UseFunctionService ();<br />
    }<br />
}</p>

<p>这两种方式没有什么所谓的优劣之分，主要看使用情况，一般来说是这样：</p>

<p>涉及到全局配置的，例如数据库相关配置、MVC相关配置等，就用JAVA配置的方式<br />
涉及到业务配置的，就使用注解方式</p>

<p> </p>
