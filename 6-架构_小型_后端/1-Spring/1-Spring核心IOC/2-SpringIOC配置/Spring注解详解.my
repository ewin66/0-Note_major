<h1><a href="http://blog.csdn.net/xyh820/article/details/7303330">Spring注解详解</a></h1>

<p>注释配置相对于 XML 配置具有很多的优势：</p>

<ul>
<li>它可以充分利用 Java 的反射机制获取类结构信息，这些信息可以有效减少配置的工作。如使用 JPA 注释配置 ORM 映射时，我们就不需要指定 PO 的属性名、类型等信息，如果关系表字段和 PO 属性名、类型都一致，您甚至无需编写任务属性映射信息——因为这些信息都可以通过 Java 反射机制获取。</li>
<li>注释和 Java 代码位于一个文件中，而 XML 配置采用独立的配置文件，大多数配置信息在程序开发完成后都不会调整，如果配置信息和 Java 代码放在一起，有助于增强程序的内聚性。而采用独立的 XML 配置文件，程序员在编写一个功能时，往往需要在程序文件和配置文件中不停切换，这种思维上的不连贯会降低开发效率。</li>
</ul>

<p>因此在很多情况下，注释配置比 XML 配置更受欢迎，注释配置有进一步流行的趋势。<a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">spring</a>2.5 的一大增强就是引入了很多注释类，现在您已经可以使用注释配置完成大部分 XML 配置的功能。在这篇文章里，我们将向您讲述使用注释进行 Bean 定义和依赖注入的内容。</p>

<p> </p>

<p>在使用注释配置之前，先来回顾一下传统上是如何配置 Bean 并完成 Bean 之间依赖关系的建立。下面是 3 个类，它们分别是 Office、Car 和 Boss，这 3 个类需要在 Spring 容器中配置为 Bean：</p>

<p>Office 仅有一个属性：</p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;
public class Office {
private String officeNo =”001”;

//省略 get/setter

@Override
public String toString() {
return "officeNo:" + officeNo;
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>Car 拥有两个属性：</p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

public class Car {
private String brand;
private double price;

// 省略 get/setter

@Override
public String toString() {
return "brand:" + brand + "," + "price:" + price;
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>Boss 拥有 Office 和 Car 类型的两个属性：</p>

<p><br />
<a name="N10084"><strong>清单 3. Boss.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

public class Boss {
private Car car;
private Office office;

// 省略 get/setter

@Override
public String toString() {
return "car:" + car + "\n" + "office:" + office;
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>我们在 Spring 容器中将 Office 和 Car 声明为 Bean，并注入到 Boss Bean 中：下面是使用传统 XML 完成这个工作的配置文件 beans.xml：</p>

<p><br />
<a name="N10090"><strong>清单 4. beans.xml 将以上三个类配置成 Bean</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
<bean id="boss" class="com.baobaotao.Boss">
<property name="car" ref="car"/>
<property name="office" ref="office" />
</bean>
<bean id="office" class="com.baobaotao.Office">
<property name="officeNo" value="002"/>
</bean>
<bean id="car" class="com.baobaotao.Car" scope="singleton">
<property name="brand" value=" 红旗 CA72"/>
<property name="price" value="2000"/>
</bean>
</beans>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>当我们运行以下代码时，控制台将正确打出 boss 的信息：</p>

<p><br />
<a name="N1009C"><strong>清单 5. 测试类：AnnoIoCTest.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class AnnoIoCTest {

public static void main(String[] args) {
String[] locations = {"beans.xml"};
ApplicationContext ctx = 
new ClassPathXmlApplicationContext(locations);
Boss boss = (Boss) ctx.getBean("boss");
System.out.println(boss);
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这说明 Spring 容器已经正确完成了 Bean 创建和装配的工作。</p>

<hr />
<p><a name="N100A5"><strong>使用 @Autowired 注释</strong></a></p>

<p>Spring 2.5 引入了 <code>@Autowired</code> 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。来看一下使用<code>@Autowired</code> 进行成员变量自动注入的代码：</p>

<p><br />
<a name="N100B8"><strong>清单 6. 使用 @Autowired 注释的 Boss.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;
import org.springframework.beans.factory.annotation.Autowired;

public class Boss {

@Autowired
private Car car;

@Autowired
private Office office;

…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>Spring 通过一个 <code>BeanPostProcessor</code> 对 <code>@Autowired</code> 进行解析，所以要让<code>@Autowired</code> 起作用必须事先在 Spring 容器中声明 <code>AutowiredAnnotationBeanPostProcessor</code> Bean。</p>

<p><br />
<a name="N100D4"><strong>清单 7. 让 @Autowired 注释工作起来</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
<bean class="org.springframework.beans.factory.annotation.
AutowiredAnnotationBeanPostProcessor"/>

<!-- 移除 boss Bean 的属性注入配置的信息 -->
<bean id="boss" class="com.baobaotao.Boss"/>

<bean id="office" class="com.baobaotao.Office">
<property name="officeNo" value="001"/>
</bean>
<bean id="car" class="com.baobaotao.Car" scope="singleton">
<property name="brand" value=" 红旗 CA72"/>
<property name="price" value="2000"/>
</bean>
</beans>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这样，当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code> 将扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有<code>@Autowired</code> 注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。</p>

<p>按照上面的配置，Spring 将直接采用 <a href="http://lib.csdn.net/base/javase" target="_blank" title="Java SE知识库">Java</a> 反射机制对 Boss 中的 <code>car</code> 和 <code>office</code> 这两个私有成员变量进行自动注入。所以对成员变量使用<code>@Autowired</code> 后，您大可将它们的 setter 方法（<code>setCar()</code> 和 <code>setOffice()</code>）从 Boss 中删除。</p>

<p>当然，您也可以通过 <code>@Autowired</code> 对方法或构造函数进行标注，来看下面的代码：</p>

<p><br />
<a name="N10106"><strong>清单 8. 将 @Autowired 注释标注在 Setter 方法上</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

public class Boss {
private Car car;
private Office office;

@Autowired
public void setCar(Car car) {
this.car = car;
}

@Autowired
public void setOffice(Office office) {
this.office = office;
}
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这时，<code>@Autowired</code> 将查找被标注的方法的入参类型的 Bean，并调用方法自动注入这些 Bean。而下面的使用方法则对构造函数进行标注：</p>

<p><br />
<a name="N10116"><strong>清单 9. 将 @Autowired 注释标注在构造函数上</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

public class Boss {
private Car car;
private Office office;

@Autowired
public Boss(Car car ,Office office){
this.car = car;
this.office = office ;
}

…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>由于 <code>Boss()</code> 构造函数有两个入参，分别是 <code>car</code> 和 <code>office</code>，<code>@Autowired</code> 将分别寻找和它们类型匹配的 Bean，将它们作为<code>Boss(Car car ,Office office)</code> 的入参来创建 <code>Boss</code> Bean。</p>

<hr />
<p><a name="N10137">当候选 Bean 数目不为 1 时的应对方法</a></p>

<p>在默认情况下使用 <code>@Autowired</code> 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出<code>BeanCreationException</code>异常，并指出必须至少拥有一个匹配的 Bean。我们可以来做一个实验：</p>

<p><br />
<a name="N1014A"><strong>清单 10. 候选 Bean 数目为 0 时</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd ">

<bean class="org.springframework.beans.factory.annotation.
AutowiredAnnotationBeanPostProcessor"/> 

<bean id="boss" class="com.baobaotao.Boss"/>

<!-- 将 office Bean 注释掉 -->
<!-- <bean id="office" class="com.baobaotao.Office">
<property name="officeNo" value="001"/>
</bean>-->

<bean id="car" class="com.baobaotao.Car" scope="singleton">
<property name="brand" value=" 红旗 CA72"/>
<property name="price" value="2000"/>
</bean>
</beans>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>由于 <code>office</code> Bean 被注释掉了，所以 Spring 容器中将没有类型为 <code>Office</code> 的 Bean 了，而 Boss 的<code>office</code> 属性标注了 <code>@Autowired</code>，当启动 Spring 容器时，异常就产生了。</p>

<p>当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方可以使用 <code>@Autowired(required = false)</code>，这等于告诉 Spring：在找不到匹配 Bean 时也不报错。来看一下具体的例子：</p>

<p><br />
<a name="N1016D"><strong>清单 11. 使用 @Autowired(required = false)</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;

public class Boss {

private Car car;
private Office office;

@Autowired
public void setCar(Car car) {
this.car = car;
}
@Autowired(required = false)
public void setOffice(Office office) {
this.office = office;
}
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>当然，一般情况下，使用 <code>@Autowired</code> 的地方都是需要注入 Bean 的，使用了自动注入而又允许不注入的情况一般仅会在开发期或<a href="http://lib.csdn.net/base/softwaretest" target="_blank" title="软件测试知识库">测试</a>期碰到（如为了快速启动 Spring 容器，仅引入一些模块的 Spring 配置文件），所以<code>@Autowired(required = false)</code> 会很少用到。</p>

<p>和找不到一个类型匹配 Bean 相反的一个错误是：如果 Spring 容器中拥有多个候选 Bean，Spring 容器在启动时也会抛出 <code>BeanCreationException</code> 异常。来看下面的例子：</p>

<p><br />
<a name="N10188"><strong>清单 12. 在 beans.xml 中配置两个 Office 类型的 Bean</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

… 
<bean id="office" class="com.baobaotao.Office">
<property name="officeNo" value="001"/>
</bean>
<bean id="office2" class="com.baobaotao.Office">
<property name="officeNo" value="001"/>
</bean>
…
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>我们在 Spring 容器中配置了两个类型为 <code>Office</code> 类型的 Bean，当对 Boss 的 <code>office</code> 成员变量进行自动注入时，Spring 容器将无法确定到底要用哪一个 Bean，因此异常发生了。</p>

<p>Spring 允许我们通过 <code>@Qualifier</code> 注释指定注入 Bean 的名称，这样歧义就消除了，可以通过下面的方法解决异常：</p>

<p><br />
<a name="N101A3"><strong>清单 13. 使用 @Qualifier 注释指定注入 Bean 的名称</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

@Autowired
public void setOffice(@Qualifier("office")Office office) {
this.office = office;
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p><code>@Qualifier("office")</code> 中的 <code>office</code> 是 Bean 的名称，所以 <code>@Autowired</code> 和<code>@Qualifier</code> 结合使用时，自动注入的策略就从 byType 转变成 byName 了。<code>@Autowired</code> 可以对成员变量、方法以及构造函数进行注释，而<code>@Qualifier</code> 的标注对象是成员变量、方法入参、构造函数入参。正是由于注释对象的不同，所以 Spring 不将 <code>@Autowired</code> 和<code>@Qualifier</code> 统一成一个注释类。下面是对成员变量和构造函数入参进行注释的代码：</p>

<p>对成员变量进行注释：</p>

<p><br />
<a name="N101D2"><strong>清单 14. 对成员变量使用 @Qualifier 注释</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

public class Boss {
@Autowired
private Car car;

@Autowired
@Qualifier("office")
private Office office;
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>对构造函数入参进行注释：</p>

<p><br />
<a name="N101DE"><strong>清单 15. 对构造函数变量使用 @Qualifier 注释</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

public class Boss {
private Car car;
private Office office;

@Autowired
public Boss(Car car , @Qualifier("office")Office office){
this.car = car;
this.office = office ;
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p><code>@Qualifier</code> 只能和 <code>@Autowired</code> 结合使用，是对 <code>@Autowired</code> 有益的补充。一般来讲，<code>@Qualifier</code> 对方法签名中入参进行注释会降低代码的可读性，而对成员变量注释则相对好一些。</p>

<hr />
<p><a name="N101F7">使用 JSR-250 的注释</a></p>

<p>Spring 不但支持自己定义的 <code>@Autowired</code> 的注释，还支持几个由 JSR-250 规范定义的注释，它们分别是 <code>@Resource</code>、<code>@PostConstruct</code> 以及 <code>@PreDestroy</code>。</p>

<p><a name="N1020F"><strong>@Resource</strong></a></p>

<p><code>@Resource</code> 的作用相当于 <code>@Autowired</code>，只不过 <code>@Autowired</code> 按 byType 自动注入，面<code>@Resource</code>默认按 byName 自动注入罢了。<code>@Resource</code> 有两个属性是比较重要的，分别是 name 和 type，Spring 将<code>@Resource</code> 注释的 name 属性解析为 Bean 的名字，而 type 属性则解析为 Bean 的类型。所以如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不指定 name 也不指定 type 属性，这时将通过反射机制使用 byName 自动注入策略。</p>

<p>Resource 注释类位于 Spring 发布包的 lib/j2ee/common-annotations.jar 类包中，因此在使用之前必须将其加入到项目的类库中。来看一个使用<code>@Resource</code> 的例子：</p>

<p><br />
<a name="N10239"><strong>清单 16. 使用 @Resource 注释的 Boss.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import javax.annotation.Resource;

public class Boss {
// 自动注入类型为 Car 的 Bean
@Resource
private Car car;

// 自动注入 bean 名称为 office 的 Bean
@Resource(name = "office")
private Office office;
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>一般情况下，我们无需使用类似于 <code>@Resource(type=Car.class)</code> 的注释方式，因为 Bean 的类型信息可以通过 Java 反射从代码中获取。</p>

<p>要让 JSR-250 的注释生效，除了在 Bean 类中标注这些注释外，还需要在 Spring 容器中注册一个负责处理这些注释的 <code>BeanPostProcessor</code>：</p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>
<bean 
class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p><code>CommonAnnotationBeanPostProcessor</code> 实现了 <code>BeanPostProcessor</code> 接口，它负责扫描使用了 JSR-250 注释的 Bean，并对它们进行相应的操作。</p>

<p><a name="N1025C"><strong>@PostConstruct 和 @PreDestroy</strong></a></p>

<p>Spring 容器中的 Bean 是有生命周期的，Spring 允许在 Bean 在初始化完成后以及 Bean 销毁前执行特定的操作，您既可以通过实现 InitializingBean/DisposableBean 接口来定制初始化之后 / 销毁之前的操作方法，也可以通过 <bean> 元素的 init-method/destroy-method 属性指定初始化之后 / 销毁之前调用的操作方法。关于 Spring 的生命周期，笔者在《精通 Spring 2.x—企业应用开发精解》第 3 章进行了详细的描述，有兴趣的读者可以查阅。</p>

<p>JSR-250 为初始化之后/销毁之前方法的指定定义了两个注释类，分别是 @PostConstruct 和 @PreDestroy，这两个注释只能应用于方法上。标注了 @PostConstruct 注释的方法将在类实例化后调用，而标注了 @PreDestroy 的方法将在类销毁之前调用。</p>

<p><br />
<a name="N1026A"><strong>清单 17. 使用 @PostConstruct 和 @PreDestroy 注释的 Boss.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import javax.annotation.Resource;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class Boss {
@Resource
private Car car;

@Resource(name = "office")
private Office office;

@PostConstruct
public void postConstruct1(){
System.out.println("postConstruct1");
}

@PreDestroy
public void preDestroy1(){
System.out.println("preDestroy1"); 
}
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>您只需要在方法前标注 <code>@PostConstruct</code> 或 <code>@PreDestroy</code>，这些方法就会在 Bean 初始化后或销毁之前被 Spring 容器执行了。</p>

<p>我们知道，不管是通过实现 <code>InitializingBean</code>/<code>DisposableBean</code> 接口，还是通过 <bean> 元素的<code>init-method/destroy-method</code> 属性进行配置，都只能为 Bean 指定一个初始化 / 销毁的方法。但是使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注释却可以指定多个初始化 / 销毁方法，那些被标注 <code>@PostConstruct</code> 或 <code>@PreDestroy</code> 注释的方法都会在初始化 / 销毁时被执行。</p>

<p>通过以下的测试代码，您将可以看到 Bean 的初始化 / 销毁方法是如何被执行的：</p>

<p><br />
<a name="N102A0"><strong>清单 18. 测试类代码</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AnnoIoCTest {

public static void main(String[] args) {
String[] locations = {"beans.xml"};
ClassPathXmlApplicationContext ctx = 
new ClassPathXmlApplicationContext(locations);
Boss boss = (Boss) ctx.getBean("boss");
System.out.println(boss);
ctx.destroy();// 关闭 Spring 容器，以触发 Bean 销毁方法的执行
}
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这时，您将看到标注了 <code>@PostConstruct</code> 的 <code>postConstruct1()</code> 方法将在 Spring 容器启动时，创建<code>Boss</code> Bean 的时候被触发执行，而标注了 <code>@PreDestroy</code> 注释的 <code>preDestroy1()</code> 方法将在 Spring 容器关闭前销毁<code>Boss</code> Bean 的时候被触发执行。</p>

<hr />
<p><a name="N102C1">使用 <context:annotation-config/> 简化配置</a></p>

<p>Spring 2.1 添加了一个新的 context 的 Schema 命名空间，该命名空间对注释驱动、属性文件引入、加载期织入等功能提供了便捷的配置。我们知道注释本身是不会做任何事情的，它仅提供元数据信息。要使元数据信息真正起作用，必须让负责处理这些元数据的处理器工作起来。</p>

<p>而我们前面所介绍的 <code>AutowiredAnnotationBeanPostProcessor</code> 和<code>CommonAnnotationBeanPostProcessor</code> 就是处理这些注释元数据的处理器。但是直接在 Spring 配置文件中定义这些 Bean 显得比较笨拙。Spring 为我们提供了一种方便的注册这些<code>BeanPostProcessor</code> 的方式，这就是 <context:annotation-config/>。请看下面的配置：</p>

<p><br />
<a name="N102DC"><strong>清单 19. 调整 beans.xml 配置文件</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-2.5.xsd">

<context:annotation-config/> 

<bean id="boss" class="com.baobaotao.Boss"/>
<bean id="office" class="com.baobaotao.Office">
<property name="officeNo" value="001"/>
</bean>
<bean id="car" class="com.baobaotao.Car" scope="singleton">
<property name="brand" value=" 红旗 CA72"/>
<property name="price" value="2000"/>
</bean>
</beans>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p><context:annotationconfig/> 将隐式地向 Spring 容器注册<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及<code>equiredAnnotationBeanPostProcessor</code> 这 4 个 BeanPostProcessor。</p>

<p>在配置文件中使用 context 命名空间之前，必须在 <beans> 元素中声明 context 命名空间。</p>

<hr />
<p><a name="N102F8"><strong>使用 @Component</strong></a></p>

<p>虽然我们可以通过 <code>@Autowired</code> 或 <code>@Resource</code> 在 Bean 类中使用自动注入功能，但是 Bean 还是在 XML 文件中通过 <bean> 进行定义 —— 也就是说，在 XML 配置文件中定义 Bean，通过<code>@Autowired</code> 或 <code>@Resource</code> 为 Bean 的成员变量、方法入参或构造函数入参提供自动注入的功能。能否也通过注释定义 Bean，从 XML 配置文件中完全移除 Bean 定义的配置呢？答案是肯定的，我们通过 Spring 2.5 提供的<code>@Component</code> 注释就可以达到这个目标了。</p>

<p>为什么 @Repository 只能标注在 DAO 类上呢？这是因为该注解的作用不只是将类识别为 Bean，同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。 Spring 本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架。</p>

<p>Spring 2.5 在 @Repository 的基础上增加了功能类似的额外三个注解：@Component、@Service、@Constroller，它们分别用于软件系统的不同层次：</p>

<ul>
<li>@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。</li>
<li>@Service 通常作用在业务层，但是目前该功能与 @Component 相同。</li>
<li>@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。</li>
</ul>

<p>通过在类上使用 @Repository、@Component、@Service 和 @Constroller 注解，Spring 会自动创建相应的 BeanDefinition 对象，并注册到 ApplicationContext 中。这些类就成了 Spring 受管组件。这三个注解除了作用于不同软件层次的类，其使用方式与 @Repository 是完全相同的。</p>

<p> </p>

<p> </p>

<p>下面，我们完全使用注释定义 Bean 并完成 Bean 之间装配：</p>

<p><br />
<a name="N1031A"><strong>清单 20. 使用 @Component 注释的 Car.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import org.springframework.stereotype.Component;

@Component
public class Car {
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>仅需要在类定义处，使用 <code>@Component</code> 注释就可以将一个类定义了 Spring 容器中的 Bean。下面的代码将 <code>Office</code> 定义为一个 Bean：</p>

<p><br />
<a name="N1032E"><strong>清单 21. 使用 @Component 注释的 Office.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import org.springframework.stereotype.Component;

@Component
public class Office {
private String officeNo = "001";
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这样，我们就可以在 Boss 类中通过 <code>@Autowired</code> 注入前面定义的 <code>Car</code> 和 <code>Office Bean</code> 了。</p>

<p><br />
<a name="N10346"><strong>清单 22. 使用 @Component 注释的 Boss.java</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("boss")
public class Boss {
@Autowired
private Car car;

@Autowired
private Office office;
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p><code>@Component</code> 有一个可选的入参，用于指定 Bean 的名称，在 Boss 中，我们就将 Bean 名称定义为“<code>boss</code>”。一般情况下，Bean 都是 singleton 的，需要注入 Bean 的地方仅需要通过 byType 策略就可以自动注入了，所以大可不必指定 Bean 的名称。</p>

<p>在使用 <code>@Component</code> 注释后，Spring 容器必须启用类扫描机制以启用注释驱动 Bean 定义和注释驱动 Bean 自动注入的策略。Spring 2.5 对 context 命名空间进行了扩展，提供了这一功能，请看下面的配置：</p>

<p><br />
<a name="N10361"><strong>清单 23. 简化版的 beans.xml</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-2.5.xsd">
<context:component-scan base-package="com.baobaotao"/>
</beans>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这里，所有通过 <bean> 元素定义 Bean 的配置内容已经被移除，仅需要添加一行 <context:component-scan/> 配置就解决所有问题了——Spring XML 配置文件得到了极致的简化（当然配置元数据还是需要的，只不过以注释形式存在罢了）。<context:component-scan/> 的 base-package 属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。</p>

<p><context:component-scan/> 还允许定义过滤器将基包下的某些类纳入或排除。Spring 支持以下 4 种类型的过滤方式，通过下表说明：</p>

<p><br />
<a name="N1036D"><strong>表 1. 扫描过滤方式</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%" summary="">
<tbody>
<tr>
<th>过滤器类型</th>
<th>说明</th>
</tr>
<tr>
<td>注释</td>
<td>假如 com.baobaotao.SomeAnnotation 是一个注释类，我们可以将使用该注释的类过滤出来。</td>
</tr>
<tr>
<td>类名指定</td>
<td>通过全限定类名进行过滤，如您可以指定将 com.baobaotao.Boss 纳入扫描，而将 com.baobaotao.Car 排除在外。</td>
</tr>
<tr>
<td>正则表达式</td>
<td>通过正则表达式定义过滤的类，如下所示： com\.baobaotao\.Default.*</td>
</tr>
<tr>
<td>AspectJ 表达式</td>
<td>通过 AspectJ 表达式定义过滤的类，如下所示： com. baobaotao..*Service+</td>
</tr>
</tbody>
</table>

<p>下面是一个简单的例子：</p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>
<context:component-scan base-package="com.baobaotao">
<context:include-filter type="regex" 
expression="com\.baobaotao\.service\..*"/>
<context:exclude-filter type="aspectj" 
expression="com.baobaotao.util..*"/>
</context:component-scan>
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>值得注意的是 <context:component-scan/> 配置项不但启用了对类包进行扫描以实施注释驱动 Bean 定义的功能，同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了<code>AutowiredAnnotationBeanPostProcessor</code> 和 <code>CommonAnnotationBeanPostProcessor</code>），因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了。</p>

<p>默认情况下通过 <code>@Component</code> 定义的 Bean 都是 singleton 的，如果需要使用其它作用范围的 Bean，可以通过<code>@Scope</code> 注释来达到目标，如以下代码所示：</p>

<p><strong>@scopee</strong></p>

<p><br />
<a name="N103CB"><strong>清单 24. 通过 @Scope 指定 Bean 的作用范围</strong></a></p>

<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
<tbody>
<tr>
<td>
<pre>

package com.baobaotao;
import org.springframework.context.annotation.Scope;
…
@Scope("prototype")
@Component("boss")
public class Boss {
…
}
</pre>
</td>
</tr>
</tbody>
</table>

<p> </p>

<p>这样，当从 Spring 容器中获取 <code>boss</code> Bean 时，每次返回的都是新的实例了。</p>

<hr />
<p><a name="N103D8">采用具有特殊语义的注释</a></p>

<p>Spring 2.5 中除了提供 <code>@Component</code> 注释外，还定义了几个拥有特殊语义的注释，它们分别是：<code>@Repository</code>、<code>@Service</code> 和<code>@Controller</code>。在目前的 Spring 版本中，这 3 个注释和<code>@Component</code> 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和<code>@Component</code> 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用<code>@Repository</code>、<code>@Service</code> 和<code>@Controller</code> 对分层中的类进行注释，而用<code>@Component</code> 对那些比较中立的类进行注释。</p>

<hr />
<p><a name="N10408">注释配置和 XML 配置的适用场合</a></p>

<p>是否有了这些 IOC 注释，我们就可以完全摒除原来 XML 配置的方式呢？答案是否定的。有以下几点原因：</p>

<ul>
<li>注释配置不一定在先天上优于 XML 配置。如果 Bean 的依赖关系是固定的，（如 Service 使用了哪几个 DAO 类），这种配置信息不会在部署时发生调整，那么注释配置优于 XML 配置；反之如果这种依赖关系会在部署时发生调整，XML 配置显然又优于注释配置，因为注释是对 Java 源代码的调整，您需要重新改写源代码并重新编译才可以实施调整。</li>
<li>如果 Bean 不是自己编写的类（如 <code>JdbcTemplate</code>、<code>SessionFactoryBean</code> 等），注释配置将无法实施，此时 XML 配置是唯一可用的方式。</li>
<li>注释配置往往是类级别的，而 XML 配置则可以表现得更加灵活。比如相比于<code>@Transaction</code> 事务注释，使用 aop/tx 命名空间的事务配置更加灵活和简单。</li>
</ul>

<p>所以在实现应用中，我们往往需要同时使用注释配置和 XML 配置，对于类级别且不会发生变动的配置可以优先考虑注释配置；而对于那些第三方类以及容易发生调整的配置则应优先考虑使用 XML 配置。Spring 会在具体实施 Bean 创建和 Bean 注入之前将这两种配置方式的元信息融合在一起。</p>
