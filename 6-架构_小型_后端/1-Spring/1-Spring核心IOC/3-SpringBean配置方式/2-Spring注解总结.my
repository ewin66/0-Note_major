<h1>Spring 注解总结</h1>

<h2>一 注解优点？注解解决了什么问题，为什么要使用注解？</h2>

<h2>二 注解的来龙去脉（历史）</h2>

<p>Spring 3.1 Reference 对注解与XML对比的一段叙述：</p>

<p>1 没有注解之前</p>

<ol start="1">
<li>public class UserManagerImpl implements UserManager {    </li>
<li>    private UserDao userDao;    </li>
<li>    public void setUserDao(UserDao userDao) {    </li>
<li>        this.userDao = userDao;    </li>
<li>    }    </li>
<li>    ...    </li>
<li>}    </li>
</ol>

<p>配置文件</p>

<ol start="1">
<li><bean id="userManagerImpl" class="com.kedacom.spring.annotation.service.UserManagerImpl">    </li>
<li>    <property name="userDao" ref="userDao" />    </li>
<li></bean>    </li>
<li><bean id="userDao" class="com.kedacom.spring.annotation.persistence.UserDaoImpl">    </li>
<li>    <property name="sessionFactory" ref="mySessionFactory" />    </li>
<li></bean>   </li>
</ol>

<p>2 注解诞生之后</p>

<ol start="1">
<li>public class UserManagerImpl implements UserManager {    </li>
<li>    @Autowired    </li>
<li>    private UserDao userDao;    </li>
<li>    ...    </li>
<li>}   </li>
</ol>

<p>或者（对方法进行标注）</p>

<ol start="1">
<li>public class UserManagerImpl implements UserManager {    </li>
<li>    private UserDao userDao;    </li>
<li>    @Autowired    </li>
<li>    public void setUserDao(UserDao userDao) {    </li>
<li>        this.userDao = userDao;    </li>
<li>    }    </li>
<li>    ...    </li>
<li>}   </li>
</ol>

<p>配置文件</p>

<ol start="1">
<li><bean id="userManagerImpl" class="com.kedacom.spring.annotation.service.UserManagerImpl" />  </li>
<li><bean id="userDao" class="com.kedacom.spring.annotation.persistence.UserDaoImpl">    </li>
<li>    <property name="sessionFactory" ref="mySessionFactory" />    </li>
<li></bean>  </li>
</ol>

<p>@Autowired可以对成员变量、方法和构造函数进行标注，来完成自动装配的工作。以上两种不同实现方式中，@Autowired的标注位置不同，它们都会在Spring在初始化userManagerImpl这个bean时，自动装配userDao这个属性，区别是：第一种实现中，Spring会直接将UserDao类型的唯一一个bean赋值给userDao这个成员变量；第二种实现中，Spring会调用setUserDao方法来将UserDao类型的唯一一个bean装配到userDao这个属性。</p>

<p>要使@Autowired能够工作，还需要在配置文件中加入以下代码 </p>

<ol start="1">
<li><bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />   </li>
</ol>

<p>可以看到确实是减少了代码和配置文件中的配置。</p>

<h2>三 注解总体介绍</h2>

<p>注解实现Bean配置主要用来进行如依赖注入、生命周期回调方法定义等，不能消除XML文件中的Bean元数据定义，且基于XML配置中的依赖注入的数据将覆盖基于注解配置中的依赖注入的数据。</p>

<p>Spring3的基于注解实现Bean依赖注入支持如下三种注解：</p>

<p>Spring自带依赖注入注解： Spring自带的一套依赖注入注解；<br />
JSR-250注解：Java平台的公共注解，是Java EE 5规范之一，在JDK6中默认包含这些注解，从Spring2.5开始支持。<br />
JSR-330注解：Java 依赖注入标准，Java EE 6规范之一，可能在加入到未来JDK版本，从Spring3开始支持；<br />
JPA注解：用于注入持久化上下文和尸体管理器。</p>

<p>这三种类型的注解在Spring3中都支持，类似于注解事务支持，想要使用这些注解需要在Spring容器中开启注解驱动支持，即使用如下配置方式开启：</p>

<ol start="1">
<li><beans xmlns="http://www.springframework.org/schema/beans"    </li>
<li>    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    </li>
<li>    xmlns:context="http://www.springframework.org/schema/context"    </li>
<li>    xsi:schemaLocation=" http://www.springframework.org/schema/beans    </li>
<li>       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    </li>
<li>       http://www.springframework.org/schema/context    </li>
<li>       http://www.springframework.org/schema/context/spring-context-3.0.xsd">    </li>
<li>    </li>
<li>    <context:annotation-config/>    </li>
<li>    </li>
<li></beans>   </li>
</ol>

<p>这样就能使用注解驱动依赖注入了</p>

<h3><strong>Spring自带依赖注入注解</strong></h3>

<p>1 @Required：依赖检查；<br />
2 @Autowired：自动装配2 <br />
自动装配，用于替代基于XML配置的自动装配<br />
基于@Autowired的自动装配，默认是根据类型注入，可以用于构造器、字段、方法注入<br />
3 @Value：注入SpEL表达式<br />
用于注入SpEL表达式，可以放置在字段方法或参数上<br />
@Value(value = "SpEL表达式")  <br />
@Value(value = "#{message}")  <br />
4 @Qualifier：限定描述符，用于细粒度选择候选者<br />
@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者<br />
@Qualifier(value = "限定标识符") </p>

<h3><strong>JSR-250注解</strong></h3>

<p>1 @Resource：自动装配，默认根据类型装配，如果指定name属性将根据名字装配，可以使用如下方式来指定<br />
@Resource(name = "标识符")  <br />
字段或setter方法 </p>

<p>2 @PostConstruct和PreDestroy：通过注解指定初始化和销毁方法定义</p>

<h3><strong>JSR-330注解</strong></h3>

<p>1 @Inject：等价于默认的@Autowired，只是没有required属性<br />
2 @Named：指定Bean名字，对应于Spring自带@Qualifier中的缺省的根据Bean名字注入情况<br />
3 @Qualifier：只对应于Spring自带@Qualifier中的扩展@Qualifier限定描述符注解，即只能扩展使用，没有value属性</p>

<h3><strong>JPA注解</strong></h3>

<p>@PersistenceContext<br />
@PersistenceUnit</p>

<p>用于注入EntityManagerFactory和EntityManager</p>

<p> </p>

<h2>四 注解需要的jar包及配置</h2>

<p><img alt="" src="http://my.csdn.net/uploads/201206/08/1339134222_3931.png" /></p>

<p> </p>

<h2>五 拓展：结合局部代码来说明注解</h2>

<h3><strong>1 @Autowired</strong></h3>

<p>同二 注解历史中的内容，此处不重复。</p>

<h3><strong>2 @Qualifier</strong></h3>

<p>@Autowired是根据类型进行自动装配的。在上面的例子中，如果当Spring上下文中存在不止一个UserDao类型的bean时，就会抛出BeanCreationException异常；如果Spring上下文中不存在UserDao类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。</p>

<p>1>可能存在多个UserDao实例 </p>

<ol start="1">
<li>@Autowired    </li>
<li>public void setUserDao(@Qualifier("userDao") UserDao userDao) {    </li>
<li>    this.userDao = userDao;    </li>
<li>}    </li>
</ol>

<p><br />
这样，Spring会找到id为userDao的bean进行装配。 <br />
2>可能不存在UserDao实例 </p>

<ol start="1">
<li>@Autowired(required = false)    </li>
<li>public void setUserDao(UserDao userDao) {    </li>
<li>    this.userDao = userDao;    </li>
<li>}    </li>
</ol>

<h3><strong>3 @Resource（JSR-250标准注解，推荐使用它来代替Spring专有的@Autowired注解） </strong></h3>

<p>Spring 不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。 <br />
@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按byName自动注入罢了。@Resource有两个属性是比较重要的，分别是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。 <br />
@Resource装配顺序 <br />
如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常<br />
如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常<br />
如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常<br />
如果既没有指定name，又没有指定type，则自动按照byName方式进行装配（见2）；如果没有匹配，则回退为一个原始类型（UserDao）进行匹配，如果匹配则自动装配；</p>

<h3><strong>4 @PostConstruct（JSR-250）</strong> </h3>

<p>在方法上加上注解@PostConstruct，这个方法就会在Bean初始化之后被Spring容器执行（注：Bean初始化包括，实例化Bean，并装配Bean的属性（依赖注入））。 <br />
它的一个典型的应用场景是，当你需要往Bean里注入一个其父类中定义的属性，而你又无法复写父类的属性或属性的setter方法时，如： </p>

<ol start="1">
<li>public class UserDaoImpl extends HibernateDaoSupport implements UserDao {    </li>
<li>    private SessionFactory mySessionFacotry;    </li>
<li>    @Resource    </li>
<li>    public void setMySessionFacotry(SessionFactory sessionFacotry) {    </li>
<li>        this.mySessionFacotry = sessionFacotry;    </li>
<li>    }    </li>
<li>    @PostConstruct    </li>
<li>    public void injectSessionFactory() {    </li>
<li>        super.setSessionFactory(mySessionFacotry);    </li>
<li>    }    </li>
<li>    ...    </li>
<li>}    </li>
</ol>

<p><br />
这里通过@PostConstruct，为UserDaoImpl的父类里定义的一个sessionFactory私有属性，注入了我们自己定义的sessionFactory（父类的setSessionFactory方法为final，不可复写），之后我们就可以通过调用super.getSessionFactory()来访问该属性了。</p>

<p> </p>

<h3><strong>5 @PreDestroy（JSR-250） </strong></h3>

<p>在方法上加上注解@PreDestroy，这个方法就会在Bean初始化之后被Spring容器执行。由于我们当前还没有需要用到它的场景，这里不不去演示。其用法同@PostConstruct。</p>

<h3><strong>6 使用<context:annotation-config />简化配置 </strong></h3>

<p>Spring2.1添加了一个新的context的Schema命名空间，该命名空间对注释驱动、属性文件引入、加载期织入等功能提供了便捷的配置。我们知道注释本身是不会做任何事情的，它仅提供元数据信息。要使元数据信息真正起作用，必须让负责处理这些元数据的处理器工作起来。 </p>

<p>AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor就是处理这些注释元数据的处理器。但是直接在Spring配置文件中定义这些Bean显得比较笨拙。Spring为我们提供了一种方便的注册这些BeanPostProcessor的方式，这就是<context:annotation-config />：</p>

<ol start="1">
<li><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"    </li>
<li>    xsi:schemaLocation="http://www.springframework.org/schema/beans    </li>
<li>    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd    </li>
<li>    http://www.springframework.org/schema/context    </li>
<li>    http://www.springframework.org/schema/context/spring-context-2.5.xsd">    </li>
<li>    <context:annotation-config />    </li>
<li></beans>    </li>
</ol>

<p><br />
<context:annotationconfig />将隐式地向Spring容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、 PersistenceAnnotationBeanPostProcessor以及RequiredAnnotationBeanPostProcessor这4个BeanPostProcessor。</p>

<p>使用Spring注解完成Bean的定义 <br />
以上我们介绍了通过@Autowired或@Resource来实现在Bean中自动注入的功能，下面我们将介绍如何注解Bean，从而从XML配置文件中完全移除Bean定义的配置。</p>

<h3><strong>7  @Component（不推荐使用）、@Repository、@Service、@Controller </strong></h3>

<p>只需要在对应的类上加上一个@Component注解，就将该类定义为一个Bean了：</p>

<ol start="1">
<li>@Component    </li>
<li>public class UserDaoImpl extends HibernateDaoSupport implements UserDao {    </li>
<li>    ...    </li>
<li>}   </li>
</ol>

<p><br />
使用@Component注解定义的Bean，默认的名称（id）是小写开头的非限定类名。如这里定义的Bean名称就是userDaoImpl。你也可以指定Bean的名称： <br />
@Component("userDao") <br />
@Component是所有受Spring管理组件的通用形式，Spring还提供了更加细化的注解形式：@Repository、@Service、@Controller，它们分别对应存储层Bean，业务层Bean，和展示层Bean。目前版本（2.5）中，这些注解与@Component的语义是一样的，完全通用，在Spring以后的版本中可能会给它们追加更多的语义。所以，我们推荐使用@Repository、@Service、@Controller来替代@Component。 </p>

<p> </p>

<h3><strong>8 使用<context:component-scan />让Bean定义注解工作起来 </strong></h3>

<ol start="1">
<li><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"    </li>
<li>    xsi:schemaLocation="http://www.springframework.org/schema/beans    </li>
<li>    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd    </li>
<li>    http://www.springframework.org/schema/context    </li>
<li>    http://www.springframework.org/schema/context/spring-context-2.5.xsd">    </li>
<li>    <context:component-scan base-package="com.kedacom.ksoa" />    </li>
<li></beans>    </li>
</ol>

<p><br />
这里，所有通过<bean>元素定义Bean的配置内容已经被移除，仅需要添加一行<context:component-scan />配置就解决所有问题了——Spring XML配置文件得到了极致的简化（当然配置元数据还是需要的，只不过以注释形式存在罢了）。<context:component-scan />的base-package属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。 <br />
<context:component-scan />还允许定义过滤器将基包下的某些类纳入或排除。Spring支持以下4种类型的过滤方式： <br />
过滤器类型 表达式范例   说明<br />
注解 org.example.SomeAnnotation将所有使用SomeAnnotation注解的类过滤出来<br />
类名指定 org.example.SomeClass过滤指定的类<br />
正则表达式 com\.kedacom\.spring\.annotation\.web\..*通过正则表达式过滤一些类<br />
AspectJ表达式 org.example..*Service+通过AspectJ表达式过滤一些类<br />
<br />
<br />
以正则表达式为例，我列举一个应用实例：</p>

<ol start="1">
<li><context:component-scan base-package="com.casheen.spring.annotation">    </li>
<li>    <context:exclude-filter type="regex" expression="com\.casheen\.spring\.annotation\.web\..*" />    </li>
<li></context:component-scan>    </li>
</ol>

<p> </p>

<p>值得注意的是<context:component-scan />配置项不但启用了对类包进行扫描以实施注释驱动Bean定义的功能，同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor），因此当使用<context:component-scan />后，就可以将<context:annotation-config />移除了.<br />
 </p>

<h3><strong>9 使用@Scope来定义Bean的作用范围 </strong></h3>

<p>在使用XML定义Bean时，我们可能还需要通过bean的scope属性来定义一个Bean的作用范围，我们同样可以通过@Scope注解来完成这项工作</p>

<ol start="1">
<li>@Scope("session")    </li>
<li>@Component()    </li>
<li>public class UserSessionBean implements Serializable {    </li>
<li>    ...    </li>
<li>}   </li>
</ol>

<h2><strong>六 一个完整的例子</strong></h2>

<p>为了加深印象，又增加了一个完整的例子。</p>

<p>例子来源 </p>

<p><a href="http://blog.csdn.net/pk490525/article/details/8096326" target="_blank">http://blog.csdn.net/pk490525/article/details/8096326</a></p>

<p><a href="http://lib.csdn.net/base/javaee" target="_blank" title="Java EE知识库">spring</a>零配置（Annotation）学习笔记</p>

<p>本地例子：</p>

<p>AnnotationTest</p>

<p>本地有细小的改变</p>

<p>project用到的jar包</p>

<p><img alt="" src="http://img.my.csdn.net/uploads/201211/08/1352355932_4314.png" /></p>

<p> </p>

<p>先上bean-config.xml</p>

<ol start="1">
<li><?xml version="1.0" encoding="UTF-8"?>  </li>
<li><beans xmlns="http://www.springframework.org/schema/beans"  </li>
<li>        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  </li>
<li>        xmlns:context="http://www.springframework.org/schema/context"  </li>
<li>        xsi:schemaLocation="http://www.springframework.org/schema/beans  </li>
<li>        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </li>
<li>        http://www.springframework.org/schema/context  </li>
<li>        http://www.springframework.org/schema/context/spring-context-3.0.xsd">  </li>
<li>         </li>
<li>    <context:annotation-config/>    </li>
<li>    <!-- action暂未用注解 -->    </li>
<li>    <bean id="myAction" class="com.demo.annotation.action.MyAction" scope="prototype" />  </li>
<li>      </li>
<li>    <!-- 注解测试   -->  </li>
<li>    <context:component-scan base-package="com.demo.annotation" />  </li>
<li>      </li>
<li>      </li>
<li></beans>  </li>
</ol>

<p><br />
service 接口</p>

<ol start="1">
<li>/** </li>
<li> *  </li>
<li> * Annotation </li>
<li> * </li>
<li> */  </li>
<li>  </li>
<li>public interface TestService {  </li>
<li>    /** </li>
<li>     * 注解测试 </li>
<li>     * @return </li>
<li>     */  </li>
<li>    public String getTestAnnotation();  </li>
<li>}  </li>
</ol>

<p><br />
service实现类</p>

<ol start="1">
<li>import org.springframework.stereotype.Service;  </li>
<li>  </li>
<li>import com.demo.annotation.dao.TestDao;  </li>
<li>import org.springframework.beans.factory.annotation.Autowired;  </li>
<li>import org.springframework.beans.factory.annotation.Qualifier;  </li>
<li>  </li>
<li>  </li>
<li>  </li>
<li>/** </li>
<li> *  </li>
<li> * 注解测试 </li>
<li> * </li>
<li> */  </li>
<li>  </li>
<li>@Service("testService")  </li>
<li>public class TestServiceImp implements TestService {  </li>
<li>    /** </li>
<li>     * 自动装配 </li>
<li>     */  </li>
<li>    @Autowired  </li>
<li>    @Qualifier("testDao")  </li>
<li>    //@Resource(name="testDao"), 等价于<property ………… ref="testDao" />   </li>
<li>    private TestDao testDao;  </li>
<li>  </li>
<li>    public TestDao getTestDao() {  </li>
<li>        return testDao;  </li>
<li>    }  </li>
<li>  </li>
<li>    public void setTestDao(TestDao testDao) {  </li>
<li>        this.testDao = testDao;  </li>
<li>    }  </li>
<li>  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public String getTestAnnotation() {  </li>
<li>        // TODO Auto-generated method stub  </li>
<li>        return testDao.getTestDaoAnnotation();  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<p><br />
dao接口</p>

<ol start="1">
<li>/** </li>
<li> * 测试注解 </li>
<li> * </li>
<li> */  </li>
<li>public interface TestDao {  </li>
<li>    /** </li>
<li>     * 得到dao层注解 </li>
<li>     * @return </li>
<li>     */  </li>
<li>    public String getTestDaoAnnotation();  </li>
<li>}  </li>
</ol>

<p><br />
dao层实现类</p>

<ol start="1">
<li>import org.springframework.stereotype.Repository;  </li>
<li>  </li>
<li>/** </li>
<li> * 测试Annotation </li>
<li> * </li>
<li> */  </li>
<li>  </li>
<li>@Repository("testDao")  </li>
<li>public class TestDaoImpl implements TestDao {  </li>
<li>  </li>
<li>    @Override  </li>
<li>    public String getTestDaoAnnotation() {  </li>
<li>        // TODO Auto-generated method stub  </li>
<li>        return "This is testDao Annotation...";  </li>
<li>    }  </li>
<li>  </li>
<li>}  </li>
</ol>

<p><br />
Action类</p>

<ol start="1">
<li>import javax.annotation.Resource;  </li>
<li>  </li>
<li>import com.demo.annotation.service.TestService;  </li>
<li>  </li>
<li>public class MyAction{  </li>
<li>    @Resource(name="testService")  </li>
<li>    private TestService testService;  </li>
<li>    public String testAnnotation(){  </li>
<li>        if(null == testService){  </li>
<li>            System.out.println("Service is null!!");  </li>
<li>        }  </li>
<li>        String result = testService.getTestAnnotation();  </li>
<li>        System.out.println(result);  </li>
<li>        return "success";  </li>
<li>    }  </li>
<li>      </li>
<li>    public TestService getTestService() {  </li>
<li>        return testService;  </li>
<li>    }  </li>
<li>  </li>
<li>    public void setTestService(TestService testService) {  </li>
<li>        this.testService = testService;  </li>
<li>    }  </li>
<li>      </li>
<li>}  </li>
</ol>

<p><br />
测试类</p>

<ol start="1">
<li>import org.springframework.context.ApplicationContext;  </li>
<li>import org.springframework.context.support.ClassPathXmlApplicationContext;  </li>
<li>  </li>
<li>import com.demo.annotation.action.MyAction;  </li>
<li>  </li>
<li>public class TestAnnotation {  </li>
<li>    public static void main(String[] args) {  </li>
<li>        ApplicationContext context = new ClassPathXmlApplicationContext("bean-config.xml");  </li>
<li>        MyAction action = (MyAction)context.getBean("myAction");  </li>
<li>        action.testAnnotation();  </li>
<li>          </li>
<li>    }  </li>
<li>}  </li>
</ol>

<h2><strong>七 Spring常用注解汇总 </strong></h2>

<p>本文汇总了Spring的常用注解，以方便大家查询和使用，具体如下：</p>

<p>使用注解之前要开启自动扫描功能，其中base-package为需要扫描的包(含子包)。</p>

<pre>
<context:component-scan base-package="cn.test"/> </pre>

<p>@Configuration把一个类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。</p>

<p>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下：<br />
@Autowired @Qualifier("personDaoBean") 存在多个实例配合使用<br />
@Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配。</p>

<p>@Lazy(true) 表示延迟初始化<br />
@Service用于标注业务层组件、 <br />
@Controller用于标注控制层组件（如struts中的action）<br />
@Repository用于标注数据访问组件，即DAO组件。<br />
@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p>

<p>@Scope用于指定scope作用域的（用在类上）<br />
@Async异步方法调用</p>

<p>@PostConstruct用于指定初始化方法（用在方法上）<br />
@PreDestory用于指定销毁方法（用在方法上）<br />
@DependsOn：定义Bean初始化及销毁时的顺序<br />
@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常</p>

<h2>常用注解</h2>

<h3>定义Bean的注解</h3>

<p>@Controller</p>

<p>@Controller("Bean的名称")</p>

<p>定义控制层Bean,如Action</p>

<p> </p>

<p>@Service          </p>

<p>@Service("Bean的名称")</p>

<p>定义业务层Bean</p>

<p> </p>

<p>@Repository   </p>

<p>@Repository("Bean的名称")</p>

<p>定义DAO层Bean</p>

<p> </p>

<p>@Component  </p>

<p>定义Bean, 不好归类时使用.</p>

<p> </p>

<h3>自动装配Bean （选用一种注解就可以）</h3>

<p>@Autowired  (Srping提供的)</p>

<p>默认按类型匹配,自动装配(Srping提供的)，可以写在成员属性上,或写在setter方法上</p>

<p> </p>

<p>@Autowired(required=true)  </p>

<p>一定要找到匹配的Bean，否则抛异常。 默认值就是true </p>

<p> </p>

<p>@Autowired</p>

<p>@Qualifier("bean的名字") </p>

<p>按名称装配Bean,与@Autowired组合使用，解决按类型匹配找到多个Bean问题。</p>

<p> </p>

<p>@Resource   JSR-250提供的</p>

<p>默认按名称装配,当找不到名称匹配的bean再按类型装配.</p>

<p>可以写在成员属性上,或写在setter方法上</p>

<p>可以通过@Resource(name="beanName") 指定被注入的bean的名称, 要是未指定name属性, 默认使用成员属性的变量名,一般不用写name属性.</p>

<p>@Resource(name="beanName")指定了name属性,按名称注入但没找到bean, 就不会再按类型装配了.</p>

<p> </p>

<p>@Inject   是JSR-330提供的</p>

<p>按类型装配，功能比@Autowired少，没有使用的必要。</p>

<p> </p>

<h3>定义Bean的作用域和生命过程</h3>

<p>@Scope("prototype")</p>

<p>值有:singleton,prototype,session,request,session,globalSession</p>

<p> </p>

<p>@PostConstruct </p>

<p>相当于init-method,使用在方法上，当Bean初始化时执行。</p>

<p> </p>

<p>@PreDestroy </p>

<p>相当于destory-method，使用在方法上，当Bean销毁时执行。</p>

<p> </p>

<h3>声明式事务</h3>

<p>@Transactional  </p>

<p>@Autowired @Resource @Qualifier的区别</p>

<p>实用理解：@Autowired @Resource 二选其一，看中哪个就用哪个。</p>

<p> </p>

<p>简单理解：</p>

<p>@Autowired 根据类型注入， </p>

<p>@Resource 默认根据名字注入，其次按照类型搜索</p>

<p>@Autowired @Qualifie("userService") 两个结合起来可以根据名字和类型注入</p>

<p> </p>

<p>复杂理解：</p>

<p>比如你有这么一个Bean</p>

<blockquote>@Service(“UserService”)<br />
public Class UserServiceImpl implements UserService｛｝;<br />
现在你想在UserController 里面使用这个UserServiceImpl <br />
public Class UserController ｛<br />
@AutoWire   //当使用这个注入的时候上面的 UserServiceImpl 只需要这样写 @Service，这样就会自动找到UserService这个类型以及他的子类型。UserServiceImpl 实现了UserService，所以能够找到它。不过这样有一个缺点，就是当UserService实现类有两个以上的时候，这个时候会找哪一个呢，这就造成了冲突，所以要用@AutoWire注入的时候要确保UserService只有一个实现类。<br />
@Resource 默认情况下是按照名称进行匹配，如果没有找到相同名称的Bean，则会按照类型进行匹配，有人可能会想了，这下好了，用这个是万能的了，不用管名字了，也不用管类型了，但这里还是有缺点。首先，根据这个注解的匹配效果可以看出，它进行了两次匹配，也就是说，如果你在UserService这个类上面这样写注解，@Service,它会怎么找呢，首先是找相同名字的，如果没有找到，再找相同类型的，而这里的@Service没有写名字，这个时候就进行了两次搜索，显然，速度就下降了许多。也许你还会问，这里的@Service本来就没有名字，肯定是直接进行类型搜索啊。其实不是这样的，UserServiceImpl 上面如果有@Service默认的名字 是这个userServiceImpl，注意看，就是把类名前面的大写变成小写，就是默认的Bean的名字了。 @Resource根据名字搜索是这样写@Resource("userService")，如果你写了这个名字叫userService，那么UserServiceImpl上面必须也是这个名字，不然还是会报错。<br />
@Autowired @Qualifie("userService") 是直接按照名字进行搜索，也就是说，对于UserServiceImpl 上面@Service注解必须写名字，不写就会报错，而且名字必须是@Autowired @Qualifie("userService") 保持一致。如果@Service上面写了名字，而@Autowired @Qualifie() ，一样会报错。<br />
private UserService userService;<span style="font-size:11px"><span style="font-family:Arial,Helvetica,sans-serif">｝</span></span></blockquote>

<p>说了这么多，可能你有些说晕了，那么怎么用这三个呢，要实际的工作是根据实际情况来使用的，通常使用AutoWire和@Resource多一些，bean的名字不用写，而UserServiceImpl上面能会这样写 @Service("userService")。这里的实际工作情况，到底是什么情况呢？说白了就是整个项目设计时候考虑的情况，如果你的<a href="http://lib.csdn.net/base/architecture" rel="nofollow" target="_blank" title="大型网站架构知识库">架构</a>设计师考虑的比较精细，要求比较严格，要求项目上线后的访问速度比较好，通常是考虑速度了。这个时候@AutoWire没有@Resource好用，因为@Resource可以根据名字来搜索，是这样写的@Resource("userService")。这个@Autowired @Qualifie("userService") 也可以用名字啊，为什么不用呢，原因很简单，这个有点长，不喜欢，增加工作量。因为根据名字搜索是最快的，就好像查<a href="http://lib.csdn.net/base/mysql" rel="nofollow" target="_blank" title="MySQL知识库">数据库</a>一样，根据Id查找最快。因为这里的名字与数据库里面的ID是一样的作用。这个时候，就要求你多写几个名字，工作量自然就增加了。而如果你不用注解，用xml文件的时候，对于注入Bean的时候要求写一个Id，xml文件时候的id就相当于这里的名字。</p>

<p> </p>

<p>说了那么多没用，你能做的就是简单直接，什么最方便就用什么，</p>

<p>你就直接用@Resource得了，如果你喜欢用@AutoWire也行，不用写名字。</p>

<h2><strong>九 注解错导致常见错误</strong></h2>

<p>通常情况一个Bean的注解写错了，会报下面这些错误，最为常见，</p>

<p>No bean named 'user' is defined，这个表示没有找到被命名为user的Bean，通俗的说，就是名字为user的类型，以及它的子类型，出现这个错误的原因就是注入时候的类型名字为user，而搜索的时候找不到，也就是说可能那个搜索的类型，并没有命令为user，解决办法就是找到这个类型，去命令为user，</p>

<p>下面这个错误也常见，</p>

<p>No qualifying bean of type [com.service.UserService] found for dependency:</p>

<p>这个错误的原因就是类型上面没有加@Service这个注入，不仅仅是@Service，如果是其他层也会出现这个错误，这里我是以Service为例子说明，如果是DAO层就是没有加@Repository，Controller层，则是没有加@Controller。</p>

<p>还有，如果你还是想再简单点，无论是DAO,Controller，Service三个层，都可以用这个注解，@Component，这个注解通用所有的Bean，这个时候你可能会说了，有通常的为什么用的人少呢，那是因为MVC这个分层的设计原则，用@Repository,@Service，@Controller，这个可以区别MVC原则中的DAO,Service，Controller。便于识别。</p>

<h2><strong>十 总结</strong></h2>

<p>Annotation的好处：</p>

<p>简化了xml文件</p>

<p>坏处：</p>

<p>1 spring一直宣称是无侵入的，annotation是否是侵入了？</p>

<p>2 很多类都是pojo的对象，引入annotation后还是pojo么？</p>

<p>3 增加了复杂度</p>

<p><strong>spring官方的态度是两种让你混合着用。</strong></p>

<p> </p>

<p> </p>
