<h1>quartz触发器 JobDataMap</h1>
<p>JobDataMap可以用来保存任何需要传递给任务实例的对象（这些对象要求是可序列化的）</p>
<h2>作业类</h2>
<p>public class ColorJob implements Job{<br />
    private static final String FAVORITE_COLOR = "favorite color";<br />
    public static final String EXECUTION_COUNT = "count";<br />
    private int _counter = 1;<br />
    private JobDataMap jobDataMap;<br />
 <br />
    public void execute(JobExecutionContext context)<br />
            throws JobExecutionException {<br />
        // TODO Auto-generated method stub<br />
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");<br />
        JobKey jobKey=context.getJobDetail().getKey();<br />
        <br />
        this.jobDataMap=context.getJobDetail().getJobDataMap();<br />
        String favoriteColor=jobDataMap.getString("color");<br />
        int count=jobDataMap.getInt("count");<br />
        System.out.println("ColorJob:在"+sdf.format(new Date())+"执行"+jobKey+"\n"<br />
                +"color:"+favoriteColor+"\n"<br />
                +"第"+count+"次执行\n"+"成员变量_counter是第"+this._counter+"次 执行");<br />
        ++count;<br />
        jobDataMap.put("count", count);<br />
        System.out.println(count);<br />
        this._counter+=1;<br />
    }<br />
 <br />
}</p>
<h2>示例类</h2>
<p>public class JobStateExample {<br />
 <br />
    public static void main(String[] args) {<br />
        // TODO Auto-generated method stub<br />
        System.out.println("------- 初始化 -------------------");<br />
        SchedulerFactory sf=new StdSchedulerFactory();<br />
        try {<br />
            Scheduler scheduler=sf.getScheduler();<br />
            System.out.println("------- 初始化完成 --------");  <br />
              <br />
            System.out.println("------- 向Scheduler加入Job ----------------");  <br />
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");<br />
            //把一个小时按15分钟（参数多少就是多少）划分,在当前时间的下一个划分时间点执行<br />
//            Date triggerStartTime=DateBuilder.nextGivenMinuteDate(null, 10);<br />
            //当前时间指定多长时间之后运行<br />
            Date triggerStartTime=DateBuilder.futureDate(5,DateBuilder.IntervalUnit.SECOND);<br />
            //指定作业，即工作类<br />
            JobDetail job1=JobBuilder.newJob(ColorJob.class).withIdentity("job1", "group1").build();<br />
            //设置触发器<br />
            SimpleTrigger simpleTrigger1=TriggerBuilder.newTrigger().withIdentity("trigger", "group")<br />
                    .startAt(triggerStartTime)//开始时间<br />
                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()<br />
                            .withIntervalInSeconds(5)//间隔5秒<br />
                            .withRepeatCount(4)).build();//重复4次<br />
            //向 JobDataMap 中存入键/值对，那些数据对可在你的 Job 类中传递和进行访问<br />
            job1.getJobDataMap().put("color", "green");<br />
            job1.getJobDataMap().put("count", 1);<br />
            //调度器关联作业和触发器<br />
            Date schedulerTime1=scheduler.scheduleJob(job1, simpleTrigger1);<br />
            System.out.println(job1.getKey()+"  将在: "+dateFormat.format(schedulerTime1)+" 运行，重复 "<br />
                    +simpleTrigger1.getRepeatCount()+" 次,每 "<br />
                    +simpleTrigger1.getRepeatInterval()/ 1000L+" 秒执行一次");<br />
            <br />
            //设置第二个作业<br />
            JobDetail job2 = JobBuilder.newJob(ColorJob.class).withIdentity("job2", "group1").build();  <br />
            <br />
            SimpleTrigger trigger2 = (SimpleTrigger)TriggerBuilder.newTrigger()  <br />
                    .withIdentity("trigger2", "group1")  <br />
                    .startAt(triggerStartTime)  <br />
                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()  <br />
                            .withIntervalInSeconds(5)  <br />
                            .withRepeatCount(4))  <br />
                    .build();  <br />
          <br />
            job2.getJobDataMap().put("color", "Red");  <br />
            job2.getJobDataMap().put("count", 1);  <br />
          <br />
            Date scheduleTime2 = scheduler.scheduleJob(job2, trigger2);  <br />
            System.out.println(job2.getKey().toString() + "  将在:  "<br />
                    + dateFormat.format(scheduleTime2) + " 运行，重复 " + trigger2.getRepeatCount()<br />
                    + " 次,每 " + trigger2.getRepeatInterval() / 1000L + " 秒执行一次");<br />
            System.out.println("------- 开始Scheduler ----------------");<br />
            scheduler.start();<br />
            System.out.println("------- Scheduler调用job结束 -----------------");<br />
            try {<br />
                Thread.sleep(60000L);//睡眠一分钟<br />
            } catch (InterruptedException e) {<br />
                // TODO Auto-generated catch block<br />
                e.printStackTrace();<br />
            }<br />
            System.out.println("------- 关闭Scheduler ---------------------");<br />
            scheduler.shutdown(true);  <br />
            System.out.println("------- 关闭完成 -----------------");  <br />
            SchedulerMetaData metaData = scheduler.getMetaData();  <br />
            System.out.println("Executed " + metaData.getNumberOfJobsExecuted() + " jobs.");<br />
        } catch (SchedulerException e) {<br />
            // TODO Auto-generated catch block<br />
            e.printStackTrace();<br />
        }<br />
    }<br />
 <br />
}<br />
 </p>
