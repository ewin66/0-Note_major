<h1>使用JobDataMap传递参数</h1>
<p>如果想在任务的execute()方法实现中回去一些关于这个Job的一些信息，或者传递一些参数，就可以使用JobDataMap。</p>
<p>JobDetail job = JobBuilder.newJob(DemoJob.class)<br />
    .withIdentity("myJob", "group1")<br />
    .usingJobData("strData", "Tom")<br />
    .usingJobData("intData", 15)<br />
    .build();</p>
<p>在构建JobDetail的时候，使用usingJobData(key, value)方法提供的各种重载形式来加入一些自定义的参数。这些参数可以在execute(JobExecutionContext jobExecutionContext)方法中取得，如下示例所示：</p>
<p>@Override<br />
public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {<br />
    JobKey key = jobExecutionContext.getJobDetail().getKey();<br />
    JobDataMap dataMap = jobExecutionContext.getJobDetail().getJobDataMap();<br />
    String strData = dataMap.getString("strData");<br />
    int intData = dataMap.getInt("intData");<br />
    System.out.println("key : " + key);<br />
    System.out.println("strData : " + strData);<br />
    System.out.println("intData : " + intData);<br />
}</p>
<p>运行结果：</p>
<p>key : group1.myJob<br />
strData : Tom<br />
intData : 15</p>
