<h1>Quartz的Simple Triggers和Cron Triggers使用</h1>
<h2>实现Job接口创建Job</h2>
<p>import java.util.Date;<br />
 <br />
import org.slf4j.Logger;<br />
import org.slf4j.LoggerFactory;<br />
import org.quartz.Job;<br />
import org.quartz.JobExecutionContext;<br />
import org.quartz.JobExecutionException;<br />
import org.quartz.JobKey;<br />
 <br />
/**<br />
 * <p><br />
 * This is just a simple job that gets fired off many times by example 1<br />
 * </p><br />
 * <br />
 * @author Bill Kratzer<br />
 */<br />
public class SimpleJob implements Job {<br />
 <br />
    private static Logger _log = LoggerFactory.getLogger(SimpleJob.class);<br />
 <br />
    /**<br />
     * Empty constructor for job initialization<br />
     */<br />
    public SimpleJob() {<br />
    }<br />
    /**<br />
     * <p><br />
     * Called by the <code>{@link org.quartz.Scheduler}</code> when a<br />
     * <code>{@link org.quartz.Trigger}</code> fires that is associated with<br />
     * the <code>Job</code>.<br />
     * </p><br />
     * <br />
     * @throws JobExecutionException<br />
     *             if there is an exception while executing the job.<br />
     */<br />
    public void execute(JobExecutionContext context)<br />
        throws JobExecutionException {<br />
        // This job simply prints out its job name and the<br />
        // date and time that it is running<br />
        JobKey jobKey = context.getJobDetail().getKey();<br />
        _log.info("SimpleJob says: " + jobKey + " executing at " + new Date());<br />
    }<br />
}</p>
<h2>Simple Triggers 的使用简介</h2>
<p>Job在15秒后执行<br />
    // get a "nice round" time a few seconds in the future...<br />
    Date startTime = DateBuilder.nextGivenSecondDate(null, 15);<br />
 <br />
    // job1 will only fire once at date/time "ts"<br />
    JobDetail job = newJob(SimpleJob.class).withIdentity("job1", "group1").build();<br />
 <br />
    SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity("trigger1", "group1").startAt(startTime).build();<br />
 <br />
    // schedule it to run!<br />
    Date ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " will run at: " + ft + " and repeat: " + trigger.getRepeatCount() + " times, every "<br />
             + trigger.getRepeatInterval() / 1000 + " seconds");</p>
<p>Job在重复执行11次<br />
 // job3 will run 11 times (run once and repeat 10 more times)<br />
    // job3 will repeat every 10 seconds<br />
    job = newJob(SimpleJob.class).withIdentity("job3", "group1").build();<br />
 <br />
    trigger = newTrigger().withIdentity("trigger3", "group1").startAt(startTime)<br />
        .withSchedule(simpleSchedule().withIntervalInSeconds(10).withRepeatCount(10)).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " will run at: " + ft + " and repeat: " + trigger.getRepeatCount() + " times, every "<br />
             + trigger.getRepeatInterval() / 1000 + " seconds");</p>
<p>Job在五分钟后执行<br />
    // job5 will run once, five minutes in the future<br />
    job = newJob(SimpleJob.class).withIdentity("job5", "group1").build();<br />
 <br />
    trigger = (SimpleTrigger) newTrigger().withIdentity("trigger5", "group1")<br />
        .startAt(futureDate(5, IntervalUnit.MINUTE)).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " will run at: " + ft + " and repeat: " + trigger.getRepeatCount() + " times, every "<br />
             + trigger.getRepeatInterval() / 1000 + " seconds");</p>
<p>Job每40秒执行一次，无限执行<br />
   // job6 will run indefinitely, every 40 seconds<br />
    job = newJob(SimpleJob.class).withIdentity("job6", "group1").build();<br />
 <br />
    trigger = newTrigger().withIdentity("trigger6", "group1").startAt(startTime)<br />
        .withSchedule(simpleSchedule().withIntervalInSeconds(40).repeatForever()).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " will run at: " + ft + " and repeat: " + trigger.getRepeatCount() + " times, every "<br />
             + trigger.getRepeatInterval() / 1000 + " seconds");</p>
<p><br />
当所有的Job和Trigger添加到scheduler里面去后调用    sched.start(); 便可启动触发器，开始检测任务，随时触发Job执行，</p>
<p>当然，当调用完    sched.start(); 之后还可以往scheduler里面添加Job和Trigger。</p>
<p>Job也可以不需要触发器触发，直接执行<br />
// jobs can be fired directly... (rather than waiting for a trigger)<br />
    job = newJob(SimpleJob.class).withIdentity("job8", "group1").storeDurably().build();<br />
 <br />
    sched.addJob(job, true);</p>
<p>关闭Scheduler调用 sched.shutdown(true);方法</p>
<h2>CronTrigger的简单使用</h2>
<p>Job每20秒执行一次<br />
// job 1 will run every 20 seconds<br />
    JobDetail job = newJob(SimpleJob.class).withIdentity("job1", "group1").build();<br />
 <br />
    CronTrigger trigger = newTrigger().withIdentity("trigger1", "group1").withSchedule(cronSchedule("0/20 * * * * ?"))<br />
        .build();<br />
 <br />
    Date ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " has been scheduled to run at: " + ft + " and repeat based on expression: "<br />
             + trigger.getCronExpression());</p>
<p>Job每两分钟的第15秒执行<br />
    // job 2 will run every other minute (at 15 seconds past the minute)<br />
    job = newJob(SimpleJob.class).withIdentity("job2", "group1").build();<br />
 <br />
    trigger = newTrigger().withIdentity("trigger2", "group1").withSchedule(cronSchedule("15 0/2 * * * ?")).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " has been scheduled to run at: " + ft + " and repeat based on expression: "<br />
             + trigger.getCronExpression());</p>
<p>Job每两分钟执行一次，在每天8点到17点<br />
    // job 3 will run every other minute but only between 8am and 5pm<br />
    job = newJob(SimpleJob.class).withIdentity("job3", "group1").build();<br />
 <br />
    trigger = newTrigger().withIdentity("trigger3", "group1").withSchedule(cronSchedule("0 0/2 8-17 * * ?")).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " has been scheduled to run at: " + ft + " and repeat based on expression: "<br />
             + trigger.getCronExpression());</p>
<p><br />
Job每个月的1号到15号每天早上十点执行<br />
    // job 5 will run at 10am on the 1st and 15th days of the month<br />
    job = newJob(SimpleJob.class).withIdentity("job5", "group1").build();<br />
 <br />
    trigger = newTrigger().withIdentity("trigger5", "group1").withSchedule(cronSchedule("0 0 10am 1,15 * ?")).build();<br />
 <br />
    ft = sched.scheduleJob(job, trigger);<br />
    log.info(job.getKey() + " has been scheduled to run at: " + ft + " and repeat based on expression: "<br />
             + trigger.getCronExpression());</p>
<p>更多表达式例子</p>
<p>cron表达式                  含义<br />
0 0 12 * * ?                   每天12点整触发一次<br />
0 15 10 ? * *                  每天10点15分触发一次<br />
0 15 10 * * ?                  每天10点15分触发一次<br />
0 15 10 * * ? *                每天10点15分触发一次<br />
0 15 10 * * ? 2005             2005年内每天10点15分触发一次<br />
0 * 14 * * ?                   每天的2点整至2点59分，每分钟触发一次<br />
0 0/5 14 * * ?                 每天的2点整至2点55分，每5分钟触发一次<br />
0 0/5 14,18 * * ?              每天的2点整至2点55分以及18点整至18点55分，每5分钟触发一次<br />
0 0-5 14 * * ?                 每天的2点整至2点5分，每分钟触发一次<br />
0 10,44 14 ? 3 WED             每年3月的每个星期三的2点10分以及2点44分触发一次<br />
0 15 10 ? * MON-FRI            每月周一、周二、周三、周四、周五的10点15分触发一次<br />
0 15 10 15 * ?                 每月15的10点15分触发一次<br />
0 15 10 L * ?                  每月最后一天的10点15分触发一次<br />
0 15 10 ? * 6L                 每月最后一个周五的10点15分触发一次<br />
0 15 10 ? * 6L                 每月最后一个周五的10点15分触发一次<br />
0 15 10 ? * 6L 2002-2005       2002年至2005年间，每月最后一个周五的10点15分触发一次<br />
0 15 10 ? * 6#3                每月第三个周五的10点15触发一次<br />
0 0 12 1/5 * ?                 每月1号开始，每5天的12点整触发一次<br />
0 11 11 11 11 ?                每年11月11日11点11分触发一次<br />
 </p>
