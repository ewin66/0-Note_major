<h1>mybatis 中mapper文件</h1>
<h2>1、特殊字符处理：</h2>
<p>其实就是xml的特殊符号，因为它的配置就是xml，所以可以用下面这种写法转义</p>
<p>    &lt;           < <br />
    &gt;          >  <br />
    &amp;     & <br />
    &quot;      "<br />
    &lt;=        <=<br />
    &gt;=       >=</p>
<p>也可以使用<![CDATA[ ]]>符号进行说明，将此类符号不进行解析 </p>
<p><![CDATA[ 这里写你的sql ]]>   例如：</p>
<p>AND scm.Id <![CDATA[<>]]> #{existCourseModuleId}    </p>
<p> 当然，用CDATA比较繁琐，所以还是使用转义符比较方便！</p>
<h2>2、like的写法可以用下面的这种</h2>
<p>LIKE #param#||'%'  或 '$param$%' 例如：</p>
<p>t1.course_name LIKE CONCAT(CONCAT('%',#{params.courseName}),'%')</p>
<p>注意： # 的参数会被替换为?，然后传入参数值，加上' '后执行。可以防止sql注入</p>
<h2>3、传参方式</h2>
<p>取值方式1：#{value jdbcType = valuetype}：jdbcType 表示该属性的数据类型在数据库中对应的类型，如 #{user jdbcType=varchar} 等价于 String username；</p>
<p>取值方式2：${value } : <strong>这种方式不建议大量使用</strong>，可能会发送sql注入而导致安全性问题。一般该取值方式可用在非经常变化的值上，如orderby ${columnName}；</p>
<h2>4、map做参数</h2>
<p>原来在MyBatis里面这样写的：</p>
<p>错误写法一：<select id="aaa" resultMap="java.util.Map" ></p>
<p>正确写法：   <select id="aaa" <strong>resultType</strong>="java.util.Map" ></p>
<p>错误写法二：<select id="aaa" resultType="java.util.Map" parameterMap="java.util.Map"></p>
<p>正确写法：   <select id="aaa" <strong>resultType</strong>="java.util.Map" <strong>parameterType</strong>="java.util.Map"></p>
<p>小结：java.util.Map在Mybatis里面只是一种类型（Type）,而在Mybatis里面“真正”的Map是通过<resultMap>标签和数据库字段映射的结果 （个人理解，不喜勿喷，欢迎指正！）</p>
<h2>5、#{}和${}的使用</h2>
<p>速记：如果要传入的是列名之类的，使用${}，一般情况下，都使用#{} 就可以了。</p>
<p>resultMap和ParameterMap书写拼写要使用#{}，resultType 和parameterType类型使用${}，使用例子如下：</p>
<p><strong>Select ID，COMMAND from Message where COMMAND=#{command}</strong></p>
<p>Select ID，COMMAND from Message where COMMAND=‘${command}’</p>
<p>前者解析为：Select ID，COMMAND from Message where COMMAND=？具有预编译效果</p>
<p>后者解析为：Select ID，COMMAND from Message where COMMAND=段子   不具有预编译效果</p>
<p>但是，例如当页面向后台传递一个列名（属性名）的时候，是不希望被预编译出一个？的，此时要用到$格式；</p>
<p>如：加上 order by${param} ，此时param是一个列名。</p>
