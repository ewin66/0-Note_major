<h1>Redis 数据类型</h1>

<p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>

<hr />
<h2>String（字符串）</h2>

<p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>

<p>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</p>

<p>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;
OK
redis 127.0.0.1:6379&gt; GET name
&quot;runoob&quot;</pre>

<p>在以上实例中我们使用了 Redis 的&nbsp;<strong>SET</strong>&nbsp;和&nbsp;<strong>GET</strong>&nbsp;命令。键为 name，对应的值为&nbsp;<strong>runoob</strong>。</p>

<p><strong>注意：</strong>一个键最大能存储512MB。</p>

<hr />
<h2>Hash（哈希）</h2>

<p>Redis hash 是一个键值(key=&gt;value)对集合。</p>

<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>

<h3>实例</h3>

<pre>
redis&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;
&quot;OK&quot;
redis&gt; HGET myhash field1
&quot;Hello&quot;
redis&gt; HGET myhash field2
&quot;World&quot;</pre>

<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis&nbsp;<strong>HMSET, HGETALL</strong>&nbsp;命令，<strong>user:1</strong>&nbsp;为键值。</p>

<p>每个 hash 可以存储 2<sup>32</sup>&nbsp;-1 键值对（40多亿）。</p>

<p>&nbsp;</p>

<hr />
<h2>List（列表）</h2>

<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; lpush runoob redis
(integer) 1
redis 127.0.0.1:6379&gt; lpush runoob mongodb
(integer) 2
redis 127.0.0.1:6379&gt; lpush runoob rabitmq
(integer) 3
redis 127.0.0.1:6379&gt; lrange runoob 0 10
1) &quot;rabitmq&quot;
2) &quot;mongodb&quot;
3) &quot;redis&quot;
redis 127.0.0.1:6379&gt;</pre>

<p>列表最多可存储 2<sup>32</sup>&nbsp;- 1 元素 (4294967295, 每个列表可存储40多亿)。</p>

<hr />
<h2>Set（集合）</h2>

<p>Redis的Set是string类型的无序集合。</p>

<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>

<h3>sadd 命令</h3>

<p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p>

<pre>
sadd key member</pre>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; sadd runoob redis
(integer) 1
redis 127.0.0.1:6379&gt; sadd runoob mongodb
(integer) 1
redis 127.0.0.1:6379&gt; sadd runoob rabitmq
(integer) 1
redis 127.0.0.1:6379&gt; sadd runoob rabitmq
(integer) 0
redis 127.0.0.1:6379&gt; smembers runoob

1) &quot;rabitmq&quot;
2) &quot;mongodb&quot;
3) &quot;redis&quot;</pre>

<p><strong>注意：</strong>以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p>

<p>集合中最大的成员数为 2<sup>32</sup>&nbsp;- 1(4294967295, 每个集合可存储40多亿个成员)。</p>

<hr />
<h2>zset(sorted set：有序集合)</h2>

<p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>

<p>&nbsp;</p>

<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>

<p>zset的成员是唯一的,但分数(score)却可以重复。</p>

<h3>zadd 命令</h3>

<p>添加元素到集合，元素在集合中存在则更新对应score</p>

<pre>
zadd key score member </pre>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; zadd runoob 0 redis
(integer) 1
redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb
(integer) 1
redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq
(integer) 1
redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq
(integer) 0
redis 127.0.0.1:6379&gt; ZRANGEBYSCORE runoob 0 1000

1) &quot;redis&quot;
2) &quot;mongodb&quot;
3) &quot;rabitmq&quot;</pre>

<p>&nbsp;</p>

<h1>Redis 字符串(String)</h1>

<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值，基本语法如下：</p>

<h3>语法</h3>

<pre>
redis 127.0.0.1:6379&gt; COMMAND KEY_NAME</pre>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; SET runoobkey redis
OK
redis 127.0.0.1:6379&gt; GET runoobkey
&quot;redis&quot;</pre>

<p>在以上实例中我们使用了&nbsp;<strong>SET</strong>&nbsp;和&nbsp;<strong>GET</strong>&nbsp;命令，键为&nbsp;<strong>runoobkey</strong>。</p>

<hr />
<h2>Redis 字符串命令</h2>

<p>下表列出了常用的 redis 字符串命令：</p>

<table>
	<tbody>
		<tr>
			<th>序号</th>
			<th>命令及描述</th>
		</tr>
		<tr>
			<td>1</td>
			<td><a href="http://www.runoob.com/redis/strings-set.html">SET key value</a>&nbsp;<br />
			设置指定 key 的值</td>
		</tr>
		<tr>
			<td>2</td>
			<td><a href="http://www.runoob.com/redis/strings-get.html">GET key</a>&nbsp;<br />
			获取指定 key 的值。</td>
		</tr>
		<tr>
			<td>3</td>
			<td><a href="http://www.runoob.com/redis/strings-getrange.html">GETRANGE key start end</a>&nbsp;<br />
			返回 key 中字符串值的子字符</td>
		</tr>
		<tr>
			<td>4</td>
			<td><a href="http://www.runoob.com/redis/strings-getset.html">GETSET key value</a><br />
			将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>
		</tr>
		<tr>
			<td>5</td>
			<td><a href="http://www.runoob.com/redis/strings-getbit.html">GETBIT key offset</a><br />
			对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>
		</tr>
		<tr>
			<td>6</td>
			<td><a href="http://www.runoob.com/redis/strings-mget.html">MGET key1 [key2..]</a><br />
			获取所有(一个或多个)给定 key 的值。</td>
		</tr>
		<tr>
			<td>7</td>
			<td><a href="http://www.runoob.com/redis/strings-setbit.html">SETBIT key offset value</a><br />
			对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>
		</tr>
		<tr>
			<td>8</td>
			<td><a href="http://www.runoob.com/redis/strings-setex.html">SETEX key seconds value</a><br />
			将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>
		</tr>
		<tr>
			<td>9</td>
			<td><a href="http://www.runoob.com/redis/strings-setnx.html">SETNX key value</a><br />
			只有在 key 不存在时设置 key 的值。</td>
		</tr>
		<tr>
			<td>10</td>
			<td><a href="http://www.runoob.com/redis/strings-setrange.html">SETRANGE key offset value</a><br />
			用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>
		</tr>
		<tr>
			<td>11</td>
			<td><a href="http://www.runoob.com/redis/strings-strlen.html">STRLEN key</a><br />
			返回 key 所储存的字符串值的长度。</td>
		</tr>
		<tr>
			<td>12</td>
			<td><a href="http://www.runoob.com/redis/strings-mset.html">MSET key value [key value ...]</a><br />
			同时设置一个或多个 key-value 对。</td>
		</tr>
		<tr>
			<td>13</td>
			<td><a href="http://www.runoob.com/redis/strings-msetnx.html">MSETNX key value [key value ...]</a>&nbsp;<br />
			同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>
		</tr>
		<tr>
			<td>14</td>
			<td><a href="http://www.runoob.com/redis/strings-psetex.html">PSETEX key milliseconds value</a><br />
			这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>
		</tr>
		<tr>
			<td>15</td>
			<td><a href="http://www.runoob.com/redis/strings-incr.html">INCR key</a><br />
			将 key 中储存的数字值增一。</td>
		</tr>
		<tr>
			<td>16</td>
			<td><a href="http://www.runoob.com/redis/strings-incrby.html">INCRBY key increment</a><br />
			将 key 所储存的值加上给定的增量值（increment） 。</td>
		</tr>
		<tr>
			<td>17</td>
			<td><a href="http://www.runoob.com/redis/strings-incrbyfloat.html">INCRBYFLOAT key increment</a><br />
			将 key 所储存的值加上给定的浮点增量值（increment） 。</td>
		</tr>
		<tr>
			<td>18</td>
			<td><a href="http://www.runoob.com/redis/strings-decr.html">DECR key</a><br />
			将 key 中储存的数字值减一。</td>
		</tr>
		<tr>
			<td>19</td>
			<td><a href="http://www.runoob.com/redis/strings-decrby.html">DECRBY key decrement</a><br />
			key 所储存的值减去给定的减量值（decrement） 。</td>
		</tr>
		<tr>
			<td>20</td>
			<td><a href="http://www.runoob.com/redis/strings-append.html">APPEND key value</a><br />
			如果 key 已经存在并且是一个字符串， APPEND 命令将 指定value 追加到改 key 原来的值（value）的末尾。</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>Redis 哈希(Hash)</h1>

<p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>

<p>Redis 中每个 hash 可以存储 2<sup>32</sup>&nbsp;- 1 键值对（40多亿）。</p>

<h3>实例</h3>

<pre>
127.0.0.1:6379&gt;  HMSET runoobkey name &quot;redis tutorial&quot; description &quot;redis basic commands for caching&quot; likes 20 visitors 23000
OK
127.0.0.1:6379&gt;  HGETALL runoobkey
1) &quot;name&quot;
2) &quot;redis tutorial&quot;
3) &quot;description&quot;
4) &quot;redis basic commands for caching&quot;
5) &quot;likes&quot;
6) &quot;20&quot;
7) &quot;visitors&quot;
8) &quot;23000&quot;
</pre>

<p>在以上实例中，我们设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的&nbsp;<strong>runoobkey</strong>&nbsp;中。</p>

<hr />
<h2>Redis hash 命令</h2>

<p>下表列出了 redis hash 基本的相关命令：</p>

<table>
	<tbody>
		<tr>
			<th>序号</th>
			<th>命令及描述</th>
		</tr>
		<tr>
			<td>1</td>
			<td><a href="http://www.runoob.com/redis/hashes-hdel.html">HDEL key field1 [field2]</a>&nbsp;<br />
			删除一个或多个哈希表字段</td>
		</tr>
		<tr>
			<td>2</td>
			<td><a href="http://www.runoob.com/redis/hashes-hexists.html">HEXISTS key field</a>&nbsp;<br />
			查看哈希表 key 中，指定的字段是否存在。</td>
		</tr>
		<tr>
			<td>3</td>
			<td><a href="http://www.runoob.com/redis/hashes-hget.html">HGET key field</a>&nbsp;<br />
			获取存储在哈希表中指定字段的值。</td>
		</tr>
		<tr>
			<td>4</td>
			<td><a href="http://www.runoob.com/redis/hashes-hgetall.html">HGETALL key</a>&nbsp;<br />
			获取在哈希表中指定 key 的所有字段和值</td>
		</tr>
		<tr>
			<td>5</td>
			<td><a href="http://www.runoob.com/redis/hashes-hincrby.html">HINCRBY key field increment</a>&nbsp;<br />
			为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>
		</tr>
		<tr>
			<td>6</td>
			<td><a href="http://www.runoob.com/redis/hashes-hincrbyfloat.html">HINCRBYFLOAT key field increment</a>&nbsp;<br />
			为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>
		</tr>
		<tr>
			<td>7</td>
			<td><a href="http://www.runoob.com/redis/hashes-hkeys.html">HKEYS key</a>&nbsp;<br />
			获取所有哈希表中的字段</td>
		</tr>
		<tr>
			<td>8</td>
			<td><a href="http://www.runoob.com/redis/hashes-hlen.html">HLEN key</a>&nbsp;<br />
			获取哈希表中字段的数量</td>
		</tr>
		<tr>
			<td>9</td>
			<td><a href="http://www.runoob.com/redis/hashes-hmget.html">HMGET key field1 [field2]</a>&nbsp;<br />
			获取所有给定字段的值</td>
		</tr>
		<tr>
			<td>10</td>
			<td><a href="http://www.runoob.com/redis/hashes-hmset.html">HMSET key field1 value1 [field2 value2 ]</a>&nbsp;<br />
			同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>
		</tr>
		<tr>
			<td>11</td>
			<td><a href="http://www.runoob.com/redis/hashes-hset.html">HSET key field value</a>&nbsp;<br />
			将哈希表 key 中的字段 field 的值设为 value 。</td>
		</tr>
		<tr>
			<td>12</td>
			<td><a href="http://www.runoob.com/redis/hashes-hsetnx.html">HSETNX key field value</a>&nbsp;<br />
			只有在字段 field 不存在时，设置哈希表字段的值。</td>
		</tr>
		<tr>
			<td>13</td>
			<td><a href="http://www.runoob.com/redis/hashes-hvals.html">HVALS key</a>&nbsp;<br />
			获取哈希表中所有值</td>
		</tr>
		<tr>
			<td>14</td>
			<td>HSCAN key cursor [MATCH pattern] [COUNT count]&nbsp;<br />
			迭代哈希表中的键值对。</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>Redis 列表(List)</h1>

<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>

<p>一个列表最多可以包含 2<sup>32</sup>&nbsp;- 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; LPUSH runoobkey redis
(integer) 1
redis 127.0.0.1:6379&gt; LPUSH runoobkey mongodb
(integer) 2
redis 127.0.0.1:6379&gt; LPUSH runoobkey mysql
(integer) 3
redis 127.0.0.1:6379&gt; LRANGE runoobkey 0 10

1) &quot;mysql&quot;
2) &quot;mongodb&quot;
3) &quot;redis&quot;</pre>

<p>在以上实例中我们使用了&nbsp;<strong>LPUSH</strong>&nbsp;将三个值插入了名为&nbsp;<strong>runoobkey</strong>&nbsp;的列表当中。</p>

<h3>Redis 列表命令</h3>

<p>下表列出了列表相关的基本命令：</p>

<table>
	<tbody>
		<tr>
			<th>序号</th>
			<th>命令及描述</th>
		</tr>
		<tr>
			<td>1</td>
			<td><a href="http://www.runoob.com/redis/lists-blpop.html" target="_blank">BLPOP key1 [key2 ] timeout</a>&nbsp;<br />
			移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
		</tr>
		<tr>
			<td>2</td>
			<td><a href="http://www.runoob.com/redis/lists-brpop.html" target="_blank">BRPOP key1 [key2 ] timeout</a>&nbsp;<br />
			移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
		</tr>
		<tr>
			<td>3</td>
			<td><a href="http://www.runoob.com/redis/lists-brpoplpush.html" target="_blank">BRPOPLPUSH source destination timeout</a>&nbsp;<br />
			从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
		</tr>
		<tr>
			<td>4</td>
			<td><a href="http://www.runoob.com/redis/lists-lindex.html" target="_blank">LINDEX key index</a>&nbsp;<br />
			通过索引获取列表中的元素</td>
		</tr>
		<tr>
			<td>5</td>
			<td><a href="http://www.runoob.com/redis/lists-linsert.html" target="_blank">LINSERT key BEFORE|AFTER pivot value</a>&nbsp;<br />
			在列表的元素前或者后插入元素</td>
		</tr>
		<tr>
			<td>6</td>
			<td><a href="http://www.runoob.com/redis/lists-llen.html" target="_blank">LLEN key</a>&nbsp;<br />
			获取列表长度</td>
		</tr>
		<tr>
			<td>7</td>
			<td><a href="http://www.runoob.com/redis/lists-lpop.html" target="_blank">LPOP key</a>&nbsp;<br />
			移出并获取列表的第一个元素</td>
		</tr>
		<tr>
			<td>8</td>
			<td><a href="http://www.runoob.com/redis/lists-lpush.html" target="_blank">LPUSH key value1 [value2]</a>&nbsp;<br />
			将一个或多个值插入到列表头部</td>
		</tr>
		<tr>
			<td>9</td>
			<td><a href="http://www.runoob.com/redis/lists-lpushx.html" target="_blank">LPUSHX key value</a>&nbsp;<br />
			将一个值插入到已存在的列表头部</td>
		</tr>
		<tr>
			<td>10</td>
			<td><a href="http://www.runoob.com/redis/lists-lrange.html" target="_blank">LRANGE key start stop</a>&nbsp;<br />
			获取列表指定范围内的元素</td>
		</tr>
		<tr>
			<td>11</td>
			<td><a href="http://www.runoob.com/redis/lists-lrem.html" target="_blank">LREM key count value</a>&nbsp;<br />
			移除列表元素</td>
		</tr>
		<tr>
			<td>12</td>
			<td><a href="http://www.runoob.com/redis/lists-lset.html" target="_blank">LSET key index value</a>&nbsp;<br />
			通过索引设置列表元素的值</td>
		</tr>
		<tr>
			<td>13</td>
			<td><a href="http://www.runoob.com/redis/lists-ltrim.html" target="_blank">LTRIM key start stop</a>&nbsp;<br />
			对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>
		</tr>
		<tr>
			<td>14</td>
			<td><a href="http://www.runoob.com/redis/lists-rpop.html" target="_blank">RPOP key</a>&nbsp;<br />
			移除并获取列表最后一个元素</td>
		</tr>
		<tr>
			<td>15</td>
			<td><a href="http://www.runoob.com/redis/lists-rpoplpush.html" target="_blank">RPOPLPUSH source destination</a>&nbsp;<br />
			移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>
		</tr>
		<tr>
			<td>16</td>
			<td><a href="http://www.runoob.com/redis/lists-rpush.html" target="_blank">RPUSH key value1 [value2]</a>&nbsp;<br />
			在列表中添加一个或多个值</td>
		</tr>
		<tr>
			<td>17</td>
			<td><a href="http://www.runoob.com/redis/lists-rpushx.html" target="_blank">RPUSHX key value</a>&nbsp;<br />
			为已存在的列表添加值</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>Redis 集合(Set)</h1>

<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>

<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>

<p>集合中最大的成员数为 2<sup>32 - 1</sup>&nbsp;(4294967295, 每个集合可存储40多亿个成员)。</p>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; SADD runoobkey redis
(integer) 1
redis 127.0.0.1:6379&gt; SADD runoobkey mongodb
(integer) 1
redis 127.0.0.1:6379&gt; SADD runoobkey mysql
(integer) 1
redis 127.0.0.1:6379&gt; SADD runoobkey mysql
(integer) 0
redis 127.0.0.1:6379&gt; SMEMBERS runoobkey

1) &quot;mysql&quot;
2) &quot;mongodb&quot;
3) &quot;redis&quot;</pre>

<p>在以上实例中我们通过&nbsp;<strong>SADD</strong>&nbsp;命令向名为&nbsp;<strong>runoobkey</strong>&nbsp;的集合插入的三个元素。</p>

<hr />
<h2>Redis 集合命令</h2>

<p>下表列出了 Redis 集合基本命令：</p>

<table>
	<tbody>
		<tr>
			<th>序号</th>
			<th>命令及描述</th>
		</tr>
		<tr>
			<td>1</td>
			<td><a href="http://www.runoob.com/redis/sets-sadd.html">SADD key member1 [member2]</a>&nbsp;<br />
			向集合添加一个或多个成员</td>
		</tr>
		<tr>
			<td>2</td>
			<td><a href="http://www.runoob.com/redis/sets-scard.html">SCARD key</a>&nbsp;<br />
			获取集合的成员数</td>
		</tr>
		<tr>
			<td>3</td>
			<td><a href="http://www.runoob.com/redis/sets-sdiff.html">SDIFF key1 [key2]</a>&nbsp;<br />
			返回给定所有集合的差集</td>
		</tr>
		<tr>
			<td>4</td>
			<td><a href="http://www.runoob.com/redis/sets-sdiffstore.html">SDIFFSTORE destination key1 [key2]</a>&nbsp;<br />
			返回给定所有集合的差集并存储在 destination 中</td>
		</tr>
		<tr>
			<td>5</td>
			<td><a href="http://www.runoob.com/redis/sets-sinter.html">SINTER key1 [key2]</a>&nbsp;<br />
			返回给定所有集合的交集</td>
		</tr>
		<tr>
			<td>6</td>
			<td><a href="http://www.runoob.com/redis/sets-sinterstore.html">SINTERSTORE destination key1 [key2]</a>&nbsp;<br />
			返回给定所有集合的交集并存储在 destination 中</td>
		</tr>
		<tr>
			<td>7</td>
			<td><a href="http://www.runoob.com/redis/sets-sismember.html">SISMEMBER key member</a>&nbsp;<br />
			判断 member 元素是否是集合 key 的成员</td>
		</tr>
		<tr>
			<td>8</td>
			<td><a href="http://www.runoob.com/redis/sets-smembers.html">SMEMBERS key</a>&nbsp;<br />
			返回集合中的所有成员</td>
		</tr>
		<tr>
			<td>9</td>
			<td><a href="http://www.runoob.com/redis/sets-smove.html">SMOVE source destination member</a>&nbsp;<br />
			将 member 元素从 source 集合移动到 destination 集合</td>
		</tr>
		<tr>
			<td>10</td>
			<td><a href="http://www.runoob.com/redis/sets-spop.html">SPOP key</a>&nbsp;<br />
			移除并返回集合中的一个随机元素</td>
		</tr>
		<tr>
			<td>11</td>
			<td><a href="http://www.runoob.com/redis/sets-srandmember.html">SRANDMEMBER key [count]</a>&nbsp;<br />
			返回集合中一个或多个随机数</td>
		</tr>
		<tr>
			<td>12</td>
			<td><a href="http://www.runoob.com/redis/sets-srem.html">SREM key member1 [member2]</a>&nbsp;<br />
			移除集合中一个或多个成员</td>
		</tr>
		<tr>
			<td>13</td>
			<td><a href="http://www.runoob.com/redis/sets-sunion.html">SUNION key1 [key2]</a>&nbsp;<br />
			返回所有给定集合的并集</td>
		</tr>
		<tr>
			<td>14</td>
			<td><a href="http://www.runoob.com/redis/sets-sunionstore.html">SUNIONSTORE destination key1 [key2]</a>&nbsp;<br />
			所有给定集合的并集存储在 destination 集合中</td>
		</tr>
		<tr>
			<td>15</td>
			<td><a href="http://www.runoob.com/redis/sets-sscan.html">SSCAN key cursor [MATCH pattern] [COUNT count]</a>&nbsp;<br />
			迭代集合中的元素</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>Redis 有序集合(sorted set)</h1>

<p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p>

<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>

<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>

<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 2<sup>32 - 1</sup>&nbsp;(4294967295, 每个集合可存储40多亿个成员)。</p>

<h3>实例</h3>

<pre>
redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis
(integer) 1
redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb
(integer) 1
redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql
(integer) 1
redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql
(integer) 0
redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql
(integer) 0
redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES

1) &quot;redis&quot;
2) &quot;1&quot;
3) &quot;mongodb&quot;
4) &quot;2&quot;
5) &quot;mysql&quot;
6) &quot;4&quot;</pre>

<p>在以上实例中我们通过命令&nbsp;<strong>ZADD</strong>&nbsp;向 redis 的有序集合中添加了三个值并关联上分数。</p>

<hr />
<h2>Redis 有序集合命令</h2>

<p>下表列出了 redis 有序集合的基本命令:</p>

<table>
	<tbody>
		<tr>
			<th>序号</th>
			<th>命令及描述</th>
		</tr>
		<tr>
			<td>1</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zadd.html">ZADD key score1 member1 [score2 member2]</a>&nbsp;<br />
			向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
		</tr>
		<tr>
			<td>2</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zcard.html">ZCARD key</a>&nbsp;<br />
			获取有序集合的成员数</td>
		</tr>
		<tr>
			<td>3</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zcount.html">ZCOUNT key min max</a>&nbsp;<br />
			计算在有序集合中指定区间分数的成员数</td>
		</tr>
		<tr>
			<td>4</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zincrby.html">ZINCRBY key increment member</a>&nbsp;<br />
			有序集合中对指定成员的分数加上增量 increment</td>
		</tr>
		<tr>
			<td>5</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zinterstore.html">ZINTERSTORE destination numkeys key [key ...]</a>&nbsp;<br />
			计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>
		</tr>
		<tr>
			<td>6</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zlexcount.html">ZLEXCOUNT key min max</a>&nbsp;<br />
			在有序集合中计算指定字典区间内成员数量</td>
		</tr>
		<tr>
			<td>7</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrange.html">ZRANGE key start stop [WITHSCORES]</a>&nbsp;<br />
			通过索引区间返回有序集合成指定区间内的成员</td>
		</tr>
		<tr>
			<td>8</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrangebylex.html">ZRANGEBYLEX key min max [LIMIT offset count]</a>&nbsp;<br />
			通过字典区间返回有序集合的成员</td>
		</tr>
		<tr>
			<td>9</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrangebyscore.html">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</a>&nbsp;<br />
			通过分数返回有序集合指定区间内的成员</td>
		</tr>
		<tr>
			<td>10</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrank.html">ZRANK key member</a>&nbsp;<br />
			返回有序集合中指定成员的索引</td>
		</tr>
		<tr>
			<td>11</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrem.html">ZREM key member [member ...]</a>&nbsp;<br />
			移除有序集合中的一个或多个成员</td>
		</tr>
		<tr>
			<td>12</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX key min max</a>&nbsp;<br />
			移除有序集合中给定的字典区间的所有成员</td>
		</tr>
		<tr>
			<td>13</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK key start stop</a>&nbsp;<br />
			移除有序集合中给定的排名区间的所有成员</td>
		</tr>
		<tr>
			<td>14</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE key min max</a>&nbsp;<br />
			移除有序集合中给定的分数区间的所有成员</td>
		</tr>
		<tr>
			<td>15</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrevrange.html">ZREVRANGE key start stop [WITHSCORES]</a>&nbsp;<br />
			返回有序集中指定区间内的成员，通过索引，分数从高到底</td>
		</tr>
		<tr>
			<td>16</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html">ZREVRANGEBYSCORE key max min [WITHSCORES]</a>&nbsp;<br />
			返回有序集中指定分数区间内的成员，分数从高到低排序</td>
		</tr>
		<tr>
			<td>17</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zrevrank.html">ZREVRANK key member</a>&nbsp;<br />
			返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>
		</tr>
		<tr>
			<td>18</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zscore.html">ZSCORE key member</a>&nbsp;<br />
			返回有序集中，成员的分数值</td>
		</tr>
		<tr>
			<td>19</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zunionstore.html">ZUNIONSTORE destination numkeys key [key ...]</a>&nbsp;<br />
			计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>
		</tr>
		<tr>
			<td>20</td>
			<td><a href="http://www.runoob.com/redis/sorted-sets-zscan.html">ZSCAN key cursor [MATCH pattern] [COUNT count]</a>&nbsp;<br />
			迭代有序集合中的元素（包括元素成员和元素分值）</td>
		</tr>
	</tbody>
</table>
