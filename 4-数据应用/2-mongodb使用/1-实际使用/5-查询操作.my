<h1>MongoDB&nbsp;文档查询</h1>

<h2>MongoDB 查询文档</h2>

<p>MongoDB 查询文档使用 find() 方法。</p>

<p>find() 方法以非结构化的方式来显示所有文档。</p>

<h3>语法</h3>

<p>MongoDB 查询数据的语法格式如下：</p>

<pre>
db.collection.find(query, projection)</pre>

<ul>
	<li><strong>query</strong>&nbsp;：可选，使用查询操作符指定查询条件</li>
	<li><strong>projection</strong>&nbsp;：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>
</ul>

<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p>

<pre>
&gt;db.col.find().pretty()</pre>

<p>pretty() 方法以格式化的方式来显示所有文档。</p>

<h3>实例</h3>

<p>以下实例我们查询了集合 col 中的数据：</p>

<pre>
&gt; db.col.find().pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}</pre>

<p>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</p>

<hr />
<h3>MongoDB 与 RDBMS Where 语句比较</h3>

<p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p>

<table>
	<thead>
		<tr>
			<th>操作</th>
			<th>格式</th>
			<th>范例</th>
			<th>RDBMS中的类似语句</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>等于</td>
			<td><code>{&lt;key&gt;:&lt;value&gt;</code>}</td>
			<td><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td>
			<td><code>where by = &#39;菜鸟教程&#39;</code></td>
		</tr>
		<tr>
			<td>小于</td>
			<td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td>
			<td><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>
			<td><code>where likes &lt; 50</code></td>
		</tr>
		<tr>
			<td>小于或等于</td>
			<td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td>
			<td><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>
			<td><code>where likes &lt;= 50</code></td>
		</tr>
		<tr>
			<td>大于</td>
			<td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td>
			<td><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>
			<td><code>where likes &gt; 50</code></td>
		</tr>
		<tr>
			<td>大于或等于</td>
			<td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td>
			<td><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>
			<td><code>where likes &gt;= 50</code></td>
		</tr>
		<tr>
			<td>不等于</td>
			<td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td>
			<td><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>
			<td><code>where likes != 50</code></td>
		</tr>
	</tbody>
</table>

<hr />
<h3>MongoDB AND 条件</h3>

<p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p>

<p>语法格式如下：</p>

<pre>
&gt;db.col.find({key1:value1, key2:value2}).pretty()</pre>

<h3>实例</h3>

<p>以下实例通过&nbsp;<strong>by</strong>&nbsp;和&nbsp;<strong>title</strong>&nbsp;键来查询&nbsp;<strong>菜鸟教程</strong>&nbsp;中&nbsp;<strong>MongoDB 教程</strong>&nbsp;的数据</p>

<pre>
&gt; db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;, &quot;title&quot;:&quot;MongoDB 教程&quot;}).pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}</pre>

<p>以上实例中类似于 WHERE 语句：<strong>WHERE by=&#39;菜鸟教程&#39; AND title=&#39;MongoDB 教程&#39;</strong></p>

<hr />
<h3>MongoDB OR 条件</h3>

<p>MongoDB OR 条件语句使用了关键字&nbsp;<strong>$or</strong>,语法格式如下：</p>

<pre>
&gt;db.col.find(
   {
      $or: [
&nbsp;&nbsp;&nbsp;&nbsp;     {key1: value1}, {key2:value2}
      ]
   }
).pretty()</pre>

<h3>实例</h3>

<p>以下实例中，我们演示了查询键&nbsp;<strong>by</strong>&nbsp;值为 菜鸟教程 或键&nbsp;<strong>title</strong>&nbsp;值为&nbsp;<strong>MongoDB 教程</strong>&nbsp;的文档。</p>

<pre>
&gt;db.col.find({$or:[{&quot;by&quot;:&quot;菜鸟教程&quot;},{&quot;title&quot;: &quot;MongoDB 教程&quot;}]}).pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}
&gt;</pre>

<hr />
<h3>AND 和 OR 联合使用</h3>

<p>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为：&nbsp;<strong>&#39;where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)&#39;</strong></p>

<pre>
&gt;db.col.find({&quot;likes&quot;: {$gt:50}, $or: [{&quot;by&quot;: &quot;菜鸟教程&quot;},{&quot;title&quot;: &quot;MongoDB 教程&quot;}]}).pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}
</pre>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;DisLido</p>

	<p>&nbsp;&nbsp;dis***o@foxmail.com</p>

	<p>补充一下 projection 参数的使用方法</p>

	<pre>
db.collection.find(query, projection)</pre>

	<p>若不指定 projection，则默认返回所有键，指定 projection 格式如下，有两种模式</p>

	<pre>
db.collection.find(query, {title: 1, by: 1}) // inclusion模式 指定返回的键，不返回其他键
db.collection.find(query, {title: 0, by: 0}) // exclusion模式 指定不返回的键,返回其他键</pre>

	<p>_id 键默认返回，需要主动指定 _id:0 才会隐藏</p>

	<p>两种模式不可混用（因为这样的话无法推断其他键是否应返回）</p>

	<pre>
db.collection.find(query, {title: 1, by: 0}) // 错误</pre>

	<p>只能全1或全0，除了在inclusion模式时可以指定_id为0</p>

	<pre>
db.collection.find(query, {_id:0, title: 1, by: 1}) // 正确</pre>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB&nbsp;条件操作符</h2>

<p>描述</p>

<p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p>

<p>在本章节中，我们将讨论如何在MongoDB中使用条件操作符。</p>

<p>MongoDB中条件操作符有：</p>

<ul>
	<li>(&gt;) 大于 - $gt</li>
	<li>(&lt;) 小于 - $lt</li>
	<li>(&gt;=) 大于等于 - $gte</li>
	<li>(&lt;= ) 小于等于 - $lte</li>
</ul>

<p><strong>我们使用的数据库名称为&quot;runoob&quot; 我们的集合名称为&quot;col&quot;，以下为我们插入的数据。</strong></p>

<p>为了方便测试，我们可以先使用以下命令清空集合 &quot;col&quot; 的数据：</p>

<pre>
db.col.remove({})</pre>

<p>插入以下数据</p>

<pre>
&gt;db.col.insert({
    title: &#39;PHP 教程&#39;, 
    description: &#39;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;php&#39;],
    likes: 200
})</pre>

<p>&nbsp;</p>

<pre>
&gt;db.col.insert({title: &#39;Java 教程&#39;, 
    description: &#39;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;java&#39;],
    likes: 150
})</pre>

<p>&nbsp;</p>

<pre>
&gt;db.col.insert({title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;],
    likes: 100
})</pre>

<p>使用find()命令查看数据：</p>

<pre>
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>&nbsp;</p>

<h3>MongoDB (&gt;) 大于操作符 - $gt</h3>

<p>如果你想获取 &quot;col&quot; 集合中 &quot;likes&quot; 大于 100 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({&quot;likes&quot; : {$gt : 100}})</pre>

<p>类似于SQL语句：</p>

<pre>
Select * from col where likes &gt; 100;</pre>

<p>输出结果：</p>

<pre>
&gt; db.col.find({&quot;likes&quot; : {$gt : 100}})
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
&gt; </pre>

<p>&nbsp;</p>

<h3>MongoDB（&gt;=）大于等于操作符 - $gte</h3>

<p>如果你想获取&quot;col&quot;集合中 &quot;likes&quot; 大于等于 100 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({likes : {$gte : 100}})</pre>

<p>类似于SQL语句：</p>

<pre>
Select * from col where likes &gt;=100;</pre>

<p>输出结果：</p>

<p>&nbsp;</p>

<pre>
&gt; db.col.find({likes : {$gte : 100}})
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }
&gt; </pre>

<p>&nbsp;</p>

<h3>MongoDB (&lt;) 小于操作符 - $lt</h3>

<p>如果你想获取&quot;col&quot;集合中 &quot;likes&quot; 小于 150 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({likes : {$lt : 150}})</pre>

<p>类似于SQL语句：</p>

<pre>
Select * from col where likes &lt; 150;</pre>

<p>输出结果：</p>

<p>&nbsp;</p>

<pre>
&gt; db.col.find({likes : {$lt : 150}})
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>&nbsp;</p>

<h3>MongoDB (&lt;=) 小于操作符 - $lte</h3>

<p>如果你想获取&quot;col&quot;集合中 &quot;likes&quot; 小于等于 150 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({likes : {$lte : 150}})</pre>

<p>类似于SQL语句：</p>

<pre>
Select * from col where likes &lt;= 150;</pre>

<p>输出结果：</p>

<pre>
&gt; db.col.find({likes : {$lte : 150}})
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>&nbsp;</p>

<h3>MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt</h3>

<p>如果你想获取&quot;col&quot;集合中 &quot;likes&quot; 大于100，小于 200 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({likes : {$lt :200, $gt : 100}})</pre>

<p>类似于SQL语句：</p>

<pre>
Select * from col where likes&gt;100 AND  likes&lt;200;</pre>

<p>输出结果：</p>

<p>&nbsp;</p>

<pre>
&gt; db.col.find({likes : {$lt :200, $gt : 100}})
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
&gt; </pre>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;Mrt.L</p>

	<p>&nbsp;&nbsp;903***165@qq.com</p>

	<p>一些简写说明：</p>

	<pre>
$gt -------- greater than  &gt;

$gte --------- gt equal  &gt;=

$lt -------- less than  &lt;

$lte --------- lt equal  &lt;=

$ne ----------- not equal  !=

$eq  --------  equal  =</pre>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB&nbsp;$type&nbsp;操作符</h2>

<p>描述</p>

<p>在本章节中，我们将继续讨论MongoDB中条件操作符 $type。</p>

<p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p>

<p>MongoDB 中可以使用的类型如下表所示：</p>

<table>
	<tbody>
		<tr>
			<th><strong>类型</strong></th>
			<th><strong>数字</strong></th>
			<th><strong>备注</strong></th>
		</tr>
		<tr>
			<td>Double</td>
			<td>1</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>String</td>
			<td>2</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Object</td>
			<td>3</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Array</td>
			<td>4</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Binary data</td>
			<td>5</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Undefined</td>
			<td>6</td>
			<td>已废弃。</td>
		</tr>
		<tr>
			<td>Object id</td>
			<td>7</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Boolean</td>
			<td>8</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Date</td>
			<td>9</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Null</td>
			<td>10</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Regular Expression</td>
			<td>11</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>JavaScript</td>
			<td>13</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Symbol</td>
			<td>14</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>JavaScript (with scope)</td>
			<td>15</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>32-bit integer</td>
			<td>16</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Timestamp</td>
			<td>17</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>64-bit integer</td>
			<td>18</td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td>Min key</td>
			<td>255</td>
			<td>Query with&nbsp;<tt>-1</tt>.</td>
		</tr>
		<tr>
			<td>Max key</td>
			<td>127</td>
			<td>&nbsp;</td>
		</tr>
	</tbody>
</table>

<p><strong>我们使用的数据库名称为&quot;runoob&quot; 我们的集合名称为&quot;col&quot;，以下为我们插入的数据。</strong></p>

<p>简单的集合&quot;col&quot;：</p>

<pre>
&gt;db.col.insert({
    title: &#39;PHP 教程&#39;, 
    description: &#39;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;php&#39;],
    likes: 200
})</pre>

<p>&nbsp;</p>

<pre>
&gt;db.col.insert({title: &#39;Java 教程&#39;, 
    description: &#39;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;java&#39;],
    likes: 150
})</pre>

<p>&nbsp;</p>

<pre>
&gt;db.col.insert({title: &#39;MongoDB 教程&#39;, 
    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
    by: &#39;菜鸟教程&#39;,
    url: &#39;http://www.runoob.com&#39;,
    tags: [&#39;mongodb&#39;],
    likes: 100
})</pre>

<p>使用find()命令查看数据：</p>

<pre>
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>&nbsp;</p>

<h3>MongoDB 操作符 - $type 实例</h3>

<p>如果想获取 &quot;col&quot; 集合中 title 为 String 的数据，你可以使用以下命令：</p>

<pre>
db.col.find({&quot;title&quot; : {$type : 2}})</pre>

<p>输出结果为：</p>

<pre>
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>MongoDB Limit与Skip方法</h2>

<hr />
<h3>MongoDB Limit() 方法</h3>

<p>如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</p>

<h3>语法</h3>

<p>limit()方法基本语法如下所示：</p>

<pre>
&gt;db.COLLECTION_NAME.find().limit(NUMBER)</pre>

<h3>实例</h3>

<p>集合 col 中的数据如下：</p>

<pre>
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>以上实例为显示查询文档中的两条记录：</p>

<pre>
&gt; db.col.find({},{&quot;title&quot;:1,_id:0}).limit(2)
{ &quot;title&quot; : &quot;PHP 教程&quot; }
{ &quot;title&quot; : &quot;Java 教程&quot; }
&gt;</pre>

<p>注：如果你们没有指定limit()方法中的参数则显示集合中的所有数据。</p>

<hr />
<h3>MongoDB Skip() 方法</h3>

<p>我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>

<h3>语法</h3>

<p>skip() 方法脚本语法格式如下：</p>

<pre>
&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</pre>

<h3>实例</h3>

<p>以下实例只会显示第二条文档数据</p>

<pre>
&gt;db.col.find({},{&quot;title&quot;:1,_id:0}).limit(1).skip(1)
{ &quot;title&quot; : &quot;Java 教程&quot; }
&gt;</pre>

<p><strong>注:</strong>skip()方法默认参数为 0 。</p>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;天堂人_2008</p>

	<p>&nbsp;&nbsp;yan***n_xi@163.com</p>

	<pre>
db.col.find({},{&quot;title&quot;:1,_id:0}).limit(2)</pre>

	<p>补充说明：</p>

	<ul>
		<li>第一个 {} 放 where 条件，为空表示返回集合中所有文档。</li>
		<li>第二个 {} 指定那些列显示和不显示 （0表示不显示 1表示显示)。</li>
	</ul>
	<a href="javascript:;">天堂人_2008</a>

	<p>&nbsp;&nbsp;&nbsp;天堂人_2008</p>

	<p>&nbsp;&nbsp;yan***n_xi@163.com</p>
	10个月前 (04-17)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;joyran</p>

	<p>&nbsp;&nbsp;xin***iyihan@126.com</p>

	<p>想要读取从 10 条记录后 100 条记录，相当于 sql 中limit (10,100)。</p>

	<pre>
&gt; db.COLLECTION_NAME.find().skip(10).limit(100)</pre>

	<p>以上实例在集合中跳过前面 10 条返回 100 条数据。</p>

	<p>skip 和 limit 结合就能实现分页。</p>
	<a href="javascript:;">joyran</a>

	<p>&nbsp;&nbsp;&nbsp;joyran</p>

	<p>&nbsp;&nbsp;xin***iyihan@126.com</p>
	10个月前 (04-20)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;幸福的小公猪</p>

	<p>&nbsp;&nbsp;pei***gfengzy@126.com</p>

	<p>当查询时同时使用sort,skip,limit，无论位置先后，最先执行顺序 sort再skip再limit。</p>
	<a href="javascript:;">幸福的小公猪</a>

	<p>&nbsp;&nbsp;&nbsp;幸福的小公猪</p>

	<p>&nbsp;&nbsp;pei***gfengzy@126.com</p>
	8个月前 (07-06)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;dragon</p>

	<p>&nbsp;&nbsp;lib***uan_87@126.com</p>

	<p>&nbsp;<a href="http://blog.jobbole.com/80464/" rel="nofollow" target="_blank">&nbsp;&nbsp;参考地址</a></p>

	<p>补充说明skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为skip方法是一条条数据数过去的，建议使用where_limit</p>

	<p>在查看了一些资料之后，发现所有的资料都是这样说的：</p>

	<p>不要轻易使用Skip来做查询，否则数据量大了就会导致性能急剧下降，这是因为Skip是一条一条的数过来的，多了自然就慢了。</p>

	<p>这么说Skip就要避免使用了，那么如何避免呢？首先来回顾SQL分页的后一种时间戳分页方案，这种利用字段的有序性质，利用查询来取数据的方式，可以直接避免掉了大量的数数。也就是说，如果能附带上这样的条件那查询效率就会提高，事实上是这样的么？我们来验证一下：</p>

	<p>这里我们假设查询第100001条数据，这条数据的Amount值是：2399927，我们来写两条语句分别如下：</p>

	<pre>
b.test.sort({&quot;amount&quot;:1}).skip(100000).limit(10)  //183ms
db.test.find({amount:{$gt:2399927}}).sort({&quot;amount&quot;:1}).limit(10)  //53ms</pre>

	<p>结果已经附带到注释了，很明显后者的性能是前者的三分之一，差距是非常大的。也印证了Skip效率差的理论。</p>

	<p>可以联系邮箱&nbsp;<strong>libaoyuan_87@126.com</strong>，互相学习。</p>
	<a href="javascript:;">dragon</a>

	<p>&nbsp;&nbsp;&nbsp;dragon</p>

	<p>&nbsp;&nbsp;lib***uan_87@126.com</p>

	<p>&nbsp;<a href="http://blog.jobbole.com/80464/" rel="nofollow" target="_blank">&nbsp;&nbsp;参考地址</a></p>
	5个月前 (09-14)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;niuyongjie</p>

	<p>&nbsp;&nbsp;niu***gjie@163.com</p>

	<p>limit(n) 是用来规定显示的条数，而 skip(n) 是用来在符合条件的记录中从第一个记录跳过的条数，这两个函数可以交换使用。</p>

	<p>比如：find({},{age:1,_id:0}).limit(2).skip(1)，在符合条件的文档中，要显示两条文档，显示的位置从跳过第一条记录开始。这样不是很好理解。</p>

	<p>如果写成 find({},{age:1,_id:0}).skip(1).limit(2)，在符合条件的文档中，先跳过第一条文档，然后显示两条文档，这样比较好理解。</p>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB 排序</h2>

<hr />
<h3>MongoDB sort()方法</h3>

<p>在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。</p>

<h3>语法</h3>

<p>sort()方法基本语法如下所示：</p>

<pre>
&gt;db.COLLECTION_NAME.find().sort({KEY:1})</pre>

<h3>实例</h3>

<p>col 集合中的数据如下：</p>

<pre>
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }</pre>

<p>以下实例演示了 col 集合中的数据按字段 likes 的降序排列：</p>

<pre>
&gt;db.col.find({},{&quot;title&quot;:1,_id:0}).sort({&quot;likes&quot;:-1})
{ &quot;title&quot; : &quot;PHP 教程&quot; }
{ &quot;title&quot; : &quot;Java 教程&quot; }
{ &quot;title&quot; : &quot;MongoDB 教程&quot; }
&gt;
</pre>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;niuyongjie</p>

	<p>&nbsp;&nbsp;niu***gjie@163.com</p>

	<p>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</p>
	</li>
</ol>

<p>&nbsp;</p>

<h2>MongoDB 聚合</h2>

<p>MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>

<hr />
<h3>aggregate() 方法</h3>

<p>MongoDB中聚合的方法使用aggregate()。</p>

<h3>语法</h3>

<p>aggregate() 方法的基本语法格式如下所示：</p>

<pre>
&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</pre>

<h3>实例</h3>

<p>集合中的数据如下：</p>

<pre>
{
   _id: ObjectId(7df78ad8902c)
   title: &#39;MongoDB Overview&#39;, 
   description: &#39;MongoDB is no sql database&#39;,
   by_user: &#39;runoob.com&#39;,
   url: &#39;http://www.runoob.com&#39;,
   tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
   likes: 100
},
{
   _id: ObjectId(7df78ad8902d)
   title: &#39;NoSQL Overview&#39;, 
   description: &#39;No sql database is very fast&#39;,
   by_user: &#39;runoob.com&#39;,
   url: &#39;http://www.runoob.com&#39;,
   tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
   likes: 10
},
{
   _id: ObjectId(7df78ad8902e)
   title: &#39;Neo4j Overview&#39;, 
   description: &#39;Neo4j is no sql database&#39;,
   by_user: &#39;Neo4j&#39;,
   url: &#39;http://www.neo4j.com&#39;,
   tags: [&#39;neo4j&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
   likes: 750
},</pre>

<p>现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：</p>

<pre>
&gt; db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : 1}}}])
{
   &quot;result&quot; : [
      {
         &quot;_id&quot; : &quot;runoob.com&quot;,
         &quot;num_tutorial&quot; : 2
      },
      {
         &quot;_id&quot; : &quot;Neo4j&quot;,
         &quot;num_tutorial&quot; : 1
      }
   ],
   &quot;ok&quot; : 1
}
&gt;</pre>

<p>以上实例类似sql语句：<em>&nbsp;select by_user, count(*) from mycol group by by_user</em></p>

<p>在上面的例子中，我们通过字段by_user字段对数据进行分组，并计算by_user字段相同值的总和。</p>

<p>下表展示了一些聚合的表达式:</p>

<table>
	<tbody>
		<tr>
			<th>表达式</th>
			<th>描述</th>
			<th>实例</th>
		</tr>
		<tr>
			<td>$sum</td>
			<td>计算总和。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : &quot;$likes&quot;}}}])</td>
		</tr>
		<tr>
			<td>$avg</td>
			<td>计算平均值</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$avg : &quot;$likes&quot;}}}])</td>
		</tr>
		<tr>
			<td>$min</td>
			<td>获取集合中所有文档对应值得最小值。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$min : &quot;$likes&quot;}}}])</td>
		</tr>
		<tr>
			<td>$max</td>
			<td>获取集合中所有文档对应值得最大值。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$max : &quot;$likes&quot;}}}])</td>
		</tr>
		<tr>
			<td>$push</td>
			<td>在结果文档中插入值到一个数组中。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$push: &quot;$url&quot;}}}])</td>
		</tr>
		<tr>
			<td>$addToSet</td>
			<td>在结果文档中插入值到一个数组中，但不创建副本。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$addToSet : &quot;$url&quot;}}}])</td>
		</tr>
		<tr>
			<td>$first</td>
			<td>根据资源文档的排序获取第一个文档数据。</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, first_url : {$first : &quot;$url&quot;}}}])</td>
		</tr>
		<tr>
			<td>$last</td>
			<td>根据资源文档的排序获取最后一个文档数据</td>
			<td>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, last_url : {$last : &quot;$url&quot;}}}])</td>
		</tr>
	</tbody>
</table>

<hr />
<h3>管道的概念</h3>

<p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p>

<p>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p>

<p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p>

<p>这里我们介绍一下聚合框架中常用的几个操作：</p>

<ul>
	<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li>
	<li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li>
	<li>$limit：用来限制MongoDB聚合管道返回的文档数。</li>
	<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li>
	<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>
	<li>$group：将集合中的文档分组，可用于统计结果。</li>
	<li>$sort：将输入文档排序后输出。</li>
	<li>$geoNear：输出接近某一地理位置的有序文档。</li>
</ul>

<h3>管道操作符实例</h3>

<p>1、$project实例</p>

<p>&nbsp;</p>

<pre>
db.article.aggregate(
    { $project : {
        title : 1 ,
        author : 1 ,
    }}
 );</pre>

<p>这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:</p>

<pre>
db.article.aggregate(
    { $project : {
        _id : 0 ,
        title : 1 ,
        author : 1
    }});</pre>

<p>2.$match实例</p>

<pre>
db.articles.aggregate( [
                        { $match : { score : { $gt : 70, $lte : 90 } } },
                        { $group: { _id: null, count: { $sum: 1 } } }
                       ] );</pre>

<p>$match用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</p>

<p>3.$skip实例</p>

<pre>
db.article.aggregate(
    { $skip : 5 });
</pre>

<p>经过$skip管道操作符处理后，前五个文档被&quot;过滤&quot;掉。</p>

<p>笔记列表</p>

<ol>
	<li>
	<p>&nbsp;&nbsp;&nbsp;taito</p>

	<p>&nbsp;&nbsp;129***4052@qq.com</p>

	<pre>
db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : 1}}}])</pre>

	<p>以上实例类似sql语句：</p>

	<pre>
select by_user as _id, count(*) as num_tutorial from mycol group by by_user</pre>
	<a href="javascript:;">taito</a>

	<p>&nbsp;&nbsp;&nbsp;taito</p>

	<p>&nbsp;&nbsp;129***4052@qq.com</p>
	9个月前 (06-06)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;tatoo</p>

	<p>&nbsp;&nbsp;c0d***@163.com</p>

	<pre>
db.articles.aggregate({
    $project : {
        title: 2,
        by_user: 1,
    }
})</pre>

	<p>这样子也是可行的。也就是说非0也可以进行表示显示该字段,负数也可以表示显示该字段。</p>
	<a href="javascript:;">tatoo</a>

	<p>&nbsp;&nbsp;&nbsp;tatoo</p>

	<p>&nbsp;&nbsp;c0d***@163.com</p>
	8个月前 (06-28)</li>
	<li>
	<p>&nbsp;&nbsp;&nbsp;zoujq</p>

	<p>&nbsp;&nbsp;904***449@qq.com</p>

	<p>&nbsp;<a href="http://blog.csdn.net/u013066244/article/details/53842355" rel="nofollow" target="_blank">&nbsp;&nbsp;参考地址</a></p>

	<p>按日、按月、按年、按周、按小时、按分钟聚合操作如下：</p>

	<pre>
db.getCollection(&#39;m_msg_tb&#39;).aggregate(
[
    {$match:{m_id:10001,mark_time:{$gt:new Date(2017,8,0)}}},
    {$group: {
       _id: {$dayOfMonth:&#39;$mark_time&#39;},
        pv: {$sum: 1}
        }
    },
    {$sort: {&quot;_id&quot;: 1}}
])</pre>

	<p>时间关键字如下：</p>

	<ul>
		<li>&nbsp;$dayOfYear: 返回该日期是这一年的第几天（全年 366 天）。</li>
		<li>&nbsp;$dayOfMonth: 返回该日期是这一个月的第几天（1到31）。</li>
		<li>&nbsp;$dayOfWeek: 返回的是这个周的星期几（1：星期日，7：星期六）。</li>
		<li>&nbsp;$year: 返回该日期的年份部分。</li>
		<li>&nbsp;$month： 返回该日期的月份部分（ 1 到 12）。</li>
		<li>&nbsp;$week： 返回该日期是所在年的第几个星期（ 0 到 53）。</li>
		<li>&nbsp;$hour： 返回该日期的小时部分。</li>
		<li>&nbsp;$minute: 返回该日期的分钟部分。</li>
		<li>&nbsp;$second: 返回该日期的秒部分（以0到59之间的数字形式返回日期的第二部分，但可以是60来计算闰秒）。</li>
		<li>&nbsp;$millisecond：返回该日期的毫秒部分（ 0 到 999）。</li>
		<li>&nbsp;$dateToString： { $dateToString: { format:&nbsp;, date:&nbsp;} }。</li>
	</ul>
	</li>
</ol>
