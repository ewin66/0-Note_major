<h1>MongoDB&nbsp;文档操作</h1>

<h2>MongoDB&nbsp;插入文档</h2>

<h3>语法</h3>

<p><strong>语法：db.collectionName.insert(document)</strong></p>

<h3>实例</h3>

<pre>
<code>&gt; userdoc1=({&quot;user_id&quot;:1,&quot;name&quot;:&quot;cloud&quot;,&quot;state&quot;:&quot;active&quot;,&quot;actor&quot;:&quot;user&quot;,&quot;e-mail&quot;:&quot;test@qq.com&quot;,&quot;VM_num&quot;:2,&quot;time&quot;:[{&quot;date&quot;:&quot;2014-08-12&quot;,&quot;hour&quot;:&quot;10:53 PM&quot;}] })        
&gt; userdoc2=({&quot;user_id&quot;:2,&quot;name&quot;:&quot;testadmin&quot;,&quot;state&quot;:&quot;active&quot;,&quot;actor&quot;:&quot;admin&quot;,&quot;e-mail&quot;:&quot;test@qq.com&quot;,&quot;VM_num&quot;:2,&quot;time&quot;:[{&quot;date&quot;:&quot;2014-08-11&quot;,&quot;hour&quot;:&quot;06:34 AM&quot;}] })    
&gt; doc1=({&quot;name&quot;:&quot;peter&quot;,&quot;position&quot;:&quot;teacher&quot;})        #先定义文档
&gt; use Chenshi
switched to db Chenshi
&gt; db.shiyanlou.insert(userdoc1)
WriteResult({&quot;nInserted&quot;:1})
&gt; db.shiyanlou.insert(userdoc2)
WriteResult({&quot;nInserted&quot;:1})
&gt; db.shiyanlou.insert(doc1)
WriteResult({&quot;nInserted&quot;:1})
</code></pre>

<p>插入文档成功，当然也可以直接将文档的内容作为函数的参数直接替代 document。</p>

<h2>MongoDB&nbsp;更新文档</h2>

<h3>语法</h3>

<p><strong>语法：db.collectionName.update(SELECTION_CRITERIA,UPDATED_DATA)</strong></p>

<h3>实例</h3>

<pre>
<code>&gt; db.shiyanlou.update({&quot;user_id&quot;:2,&quot;e-mail&quot;:&quot;test@qq.com&quot;},{$set:{&quot;e-mail&quot;:&quot;group@qq.com&quot;}})
WriteResult({&quot;nMatched&quot;:1,&quot;nUpserted&quot;:1,&quot;nModified&quot;:1})
&gt; db.shiyanlou.find()
</code></pre>

<ul>
	<li>将 user_id=2 的文档的 e-mail 改为&nbsp;<a href="mailto:group@qq.com" target="_blank">group@qq.com</a></li>
	<li>第一个大括号内容标示查找条件，第二个大括号内容则表示更新后的数据</li>
	<li>默认的 update 函数只对一个文档更新，如果想作用所有文档，则需要加入 multi:true</li>
</ul>

<p>操作实例：</p>

<pre>
<code>db.shiyanlou.update({&quot;e-mail&quot;:&quot;test@qq.com&quot;},{$set:{&quot;e-mail&quot;:&quot;group@qq.com&quot;}},{multi:true})
</code></pre>

<h2>MongoDB&nbsp;替换已有文档</h2>

<h3>语法</h3>

<p><strong>语法：db.collectionName.save({_id:ObjectId(),NEW_DATA})</strong></p>

<h3>实例</h3>

<pre>
<code>&gt; db.shiyanlou.save({&quot;_id&quot;:ObjectId(&quot;53ea174ccb4c62646d9544f4&quot;),&quot;name&quot;:&quot;Bob&quot;,&quot;position&quot;:&quot;techer&quot;})
WriteResult({&quot;nMatched&quot;:1,&quot;nUpserted&quot;:1,&quot;nModified&quot;:1})
</code></pre>

<p>这里的 _id 对应的是要替换文档的 _id。</p>

<p>跟 insert 差不多，但是 update 更好用。</p>

<h2>MongoDB&nbsp;删除文档</h2>

<h3>语法</h3>

<p><strong>语法：db.collectionName.remove(DELECTION_CRITERIA)</strong></p>

<h3>实例</h3>

<pre>
<code>&gt; db.shiyanlou.remove({&quot;name&quot;:&quot;Bob&quot;})
WriteResult({&quot;nRemoved&quot;:1})
</code></pre>

<p>其实 remove 函数的参数跟 update 函数的第一个参数一样，相当于查找条件，注意，不要误删！</p>

<p>删除后可以用查找命令确认数据：</p>

<pre>
<code>&gt; db.shiyanlou.find()</code></pre>
