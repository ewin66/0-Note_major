<h1>mongodb使用入门</h1>

<h2>数据库常用命令</h2>

<p>1、Help查看命令提示</p>

<p>&nbsp;help</p>

<p>&nbsp; db.help();</p>

<p>&nbsp; db.yourColl.help();</p>

<p>&nbsp; db.youColl.find().help();</p>

<p>&nbsp; rs.help();</p>

<p>2、切换/创建数据库</p>

<p>&nbsp;use yourDB;&nbsp;&nbsp;当创建一个集合(table)的时候会自动创建当前数据库</p>

<p>3、查询所有数据库</p>

<p>&nbsp;show dbs;</p>

<p>4、删除当前使用数据库</p>

<p>&nbsp;db.dropDatabase();</p>

<p>5、从指定主机上克隆数据库</p>

<p>&nbsp;db.cloneDatabase(&quot;127.0.0.1&quot;);&nbsp;将指定机器上的数据库的数据克隆到当前数据库</p>

<p>6、从指定的机器上复制指定数据库数据到某个数据库</p>

<p>&nbsp;db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;);将本机的mydb的数据复制到temp数据库中</p>

<p>7、修复当前数据库</p>

<p>&nbsp;db.repairDatabase();</p>

<p>8、查看当前使用的数据库</p>

<p>&nbsp;db.getName();</p>

<p>&nbsp;db; db和getName方法是一样的效果，都可以查询当前使用的数据库</p>

<p>9、显示当前db状态</p>

<p>&nbsp;db.stats();</p>

<p>10、当前db版本</p>

<p>&nbsp;db.version();</p>

<p>11、查看当前db的链接机器地址</p>

<p>&nbsp;db.getMongo();</p>

<h2>Collection聚集集合</h2>

<p>1、创建一个聚集集合（table）</p>

<p>&nbsp;db.createCollection(&quot;collName&quot;, {size: 20, capped: 5, max: 100});</p>

<p>2、得到指定名称的聚集集合（table）</p>

<p>&nbsp;db.getCollection(&quot;account&quot;);</p>

<p>3、得到当前db的所有聚集集合</p>

<p>&nbsp;db.getCollectionNames();</p>

<p>4、显示当前db所有聚集索引的状态</p>

<p>&nbsp;db.printCollectionStats();</p>

<p>&nbsp;</p>

<h2>用户相关</h2>

<p>1、添加一个用户</p>

<p>&nbsp;db.addUser(&quot;name&quot;);</p>

<p>&nbsp;db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true);&nbsp;添加用户、设置密码、是否只读</p>

<p>2、数据库认证、安全模式</p>

<p>&nbsp;db.auth(&quot;userName&quot;, &quot;123123&quot;);</p>

<p>3、显示当前所有用户</p>

<p>&nbsp;show users;</p>

<p>4、删除用户</p>

<p>&nbsp;db.removeUser(&quot;userName&quot;);</p>

<h2>其他</h2>

<p>1、查询之前的错误信息</p>

<p>&nbsp;db.getPrevError();</p>

<p>2、清除错误记录</p>

<p>&nbsp;db.resetError();</p>

<p>&nbsp;</p>

<h2>查看聚集集合基本信息</h2>

<p>1、查看帮助 db.yourColl.help();</p>

<p>2、查询当前集合的数据条数 db.yourColl.count();</p>

<p>3、查看数据空间大小 db.userInfo.dataSize();</p>

<p>4、得到当前聚集集合所在的db db.userInfo.getDB();</p>

<p>5、得到当前聚集的状态 db.userInfo.stats();</p>

<p>6、得到聚集集合总大小 db.userInfo.totalSize();</p>

<p>7、聚集集合储存空间大小 db.userInfo.storageSize();</p>

<p>8、Shard版本信息 db.userInfo.getShardVersion()</p>

<p>9、聚集集合重命名 db.userInfo.renameCollection(&quot;users&quot;); 将userInfo重命名为users</p>

<p>10、删除当前聚集集合 db.userInfo.drop();</p>

<p>&nbsp;</p>

<h2>聚集集合查询</h2>

<p>1、查询所有记录</p>

<p>db.userInfo.find();</p>

<p>相当于：select* from userInfo;</p>

<p>默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带&quot;；&quot;</p>

<p>但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</p>

<p>2、查询去掉后的当前聚集集合中的某列的重复数据</p>

<p>db.userInfo.distinct(&quot;name&quot;);</p>

<p>会过滤掉name中的相同数据</p>

<p>相当于：select distict name from userInfo;</p>

<p>3、查询age = 22的记录</p>

<p>db.userInfo.find({&quot;age&quot;: 22});</p>

<p>相当于：&nbsp;select&nbsp;* from userInfo where age&nbsp;= 22;</p>

<p>4、查询age&nbsp;&gt;&nbsp;22的记录</p>

<p>db.userInfo.find({age: {$gt: 22}});</p>

<p>相当于：select&nbsp;* from userInfo where age&nbsp;&gt;22;</p>

<p>5、查询age&nbsp;&lt;&nbsp;22的记录</p>

<p>db.userInfo.find({age: {$lt: 22}});</p>

<p>相当于：select&nbsp;* from userInfo where age&nbsp;&lt;22;</p>

<p>6、查询age&nbsp;&gt;= 25的记录</p>

<p>db.userInfo.find({age: {$gte: 25}});</p>

<p>相当于：select&nbsp;* from userInfo where age&nbsp;&gt;= 25;</p>

<p>7、查询age&nbsp;&lt;= 25的记录</p>

<p>db.userInfo.find({age: {$lte: 25}});</p>

<p>8、查询age&nbsp;&gt;= 23 并且 age&nbsp;&lt;= 26</p>

<p>db.userInfo.find({age: {gte:23,gte:23,lte: 26}});</p>

<p>9、查询name中包含 mongo的数据</p>

<p>db.userInfo.find({name: /mongo/});</p>

<p>//相当于%%</p>

<p>select&nbsp;* from userInfo where name like &#39;%mongo%&#39;;</p>

<p>10、查询name中以mongo开头的</p>

<p>db.userInfo.find({name: /^mongo/});</p>

<p>select&nbsp;* from userInfo where name like &#39;mongo%&#39;;</p>

<p>11、查询指定列name、age数据</p>

<p>db.userInfo.find({}, {name: 1, age: 1});</p>

<p>相当于：select name, age from userInfo;</p>

<p>当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。</p>

<p>12、查询指定列name、age数据, age&nbsp;&gt;&nbsp;25</p>

<p>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});</p>

<p>相当于：select&nbsp;name, age from userInfo where age&nbsp;&gt;25;</p>

<p>13、按照年龄排序</p>

<p>升序：db.userInfo.find().sort({age: 1});</p>

<p>降序：db.userInfo.find().sort({age: -1});</p>

<p>14、查询name = zhangsan, age = 22的数据</p>

<p>db.userInfo.find({name: &#39;zhangsan&#39;, age: 22});</p>

<p>相当于：select&nbsp;* from userInfo where name = &#39;zhangsan&#39; and age = &#39;22&#39;;</p>

<p>15、查询前5条数据</p>

<p>db.userInfo.find().limit(5);</p>

<p>相当于：selecttop&nbsp;5&nbsp;* from userInfo;</p>

<p>16、查询10条以后的数据</p>

<p>db.userInfo.find().skip(10);</p>

<p>相当于：select&nbsp;* from userInfo where id not in (</p>

<p>selecttop&nbsp;10 * from userInfo</p>

<p>);</p>

<p>17、查询在5-10之间的数据</p>

<p>db.userInfo.find().limit(10).skip(5);</p>

<p>可用于分页，limit是pageSize，skip是第几页*pageSize</p>

<p>18、or与 查询</p>

<p>db.userInfo.find({$or: [{age: 22}, {age: 25}]});</p>

<p>相当于：select&nbsp;* from userInfo where age = 22 or age&nbsp;= 25;</p>

<p>19、查询第一条数据</p>

<p>db.userInfo.findOne();</p>

<p>相当于：selecttop&nbsp;1&nbsp;* from userInfo;</p>

<p>db.userInfo.find().limit(1);</p>

<p>20、查询某个结果集的记录条数</p>

<p>db.userInfo.find({age: {$gte: 25}}).count();</p>

<p>相当于：select&nbsp;count(*) from userInfo where age&nbsp;&gt;= 20;</p>

<p>21、按照某列进行排序</p>

<p>db.userInfo.find({sex: {$exists: true}}).count();</p>

<p>相当于：select&nbsp;count(sex) from userInfo;</p>

<p>&nbsp;</p>

<h2>索引</h2>

<p>1、创建索引</p>

<p>db.userInfo.ensureIndex({name: 1});</p>

<p>db.userInfo.ensureIndex({name: 1, ts: -1});</p>

<p>&nbsp; &nbsp;2、查询当前聚集集合所有索引</p>

<p>db.userInfo.getIndexes();</p>

<p>&nbsp; &nbsp;3、查看总索引记录大小</p>

<p>db.userInfo.totalIndexSize();</p>

<p>&nbsp; &nbsp;4、读取当前集合的所有index信息</p>

<p>db.users.reIndex();</p>

<p>&nbsp; &nbsp;5、删除指定索引</p>

<p>db.users.dropIndex(&quot;name_1&quot;);</p>

<p>&nbsp; &nbsp;6、删除所有索引索引</p>

<p>db.users.dropIndexes();</p>

<p>&nbsp;</p>

<h2>修改、添加、删除集合数据</h2>

<p>&nbsp; 1、添加</p>

<p>db.users.save({name: &#39;zhangsan&#39;, age: 25, sex: true});</p>

<p>添加的数据的数据列，没有固定，根据添加的数据为准</p>

<p>&nbsp; &nbsp;2、修改</p>

<p>db.users.update({age: 25}, {$set: {name: &#39;changeName&#39;}}, false, true);</p>

<p>相当于：update users set name = &#39;changeName&#39; where age&nbsp;= 25;</p>

<p>&nbsp;</p>

<p>db.users.update({name: &#39;Lisi&#39;}, {$inc: {age: 50}}, false, true);</p>

<p>相当于：update users set age = age + 50 where name = &#39;Lisi&#39;;</p>

<p>&nbsp;</p>

<p>db.users.update({name: &#39;Lisi&#39;}, {inc:age:50,inc:age:50,set: {name: &#39;hoho&#39;}}, false, true);</p>

<p>相当于：update users set age = age + 50, name = &#39;hoho&#39; where name = &#39;Lisi&#39;;</p>

<p>&nbsp;</p>

<p>3、删除</p>

<p>db.users.remove({age: 132});</p>

<p>&nbsp; &nbsp;</p>

<p>4、查询修改删除</p>

<p>db.users.findAndModify({</p>

<p>query: {age: {$gte: 25}},</p>

<p>sort: {age: -1},</p>

<p>update: {set:name:&prime;a2&prime;,set:name:&prime;a2&prime;,inc: {age: 2}},</p>

<p>remove: true</p>

<p>});</p>

<p>&nbsp;</p>

<p>db.runCommand({ findandmodify : &quot;users&quot;,</p>

<p>query: {age: {$gte: 25}},</p>

<p>sort: {age: -1},</p>

<p>update: {set:name:&prime;a2&prime;,set:name:&prime;a2&prime;,inc: {age: 2}},</p>

<p>remove: true</p>

<p>});</p>

<p><em>update</em>&nbsp;或&nbsp;<em>remove</em>&nbsp;其中一个是必须的参数; 其他参数可选。</p>

<table border="0">
	<tbody>
		<tr>
			<td>
			<p><strong>参数</strong></p>
			</td>
			<td>
			<p><strong>详解</strong></p>
			</td>
			<td>
			<p><strong>默认值</strong></p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>query</em></p>
			</td>
			<td>
			<p>查询过滤条件</p>
			</td>
			<td>
			<p>{}</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>sort</em></p>
			</td>
			<td>
			<p>如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作</p>
			</td>
			<td>
			<p>{}</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>remove</em></p>
			</td>
			<td>
			<p>若为true，被选中对象将在返回前被删除</p>
			</td>
			<td>
			<p>N/A</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>update</em></p>
			</td>
			<td>
			<p>一个修改器对象</p>
			</td>
			<td>
			<p>N/A</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>new</em></p>
			</td>
			<td>
			<p>若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。</p>
			</td>
			<td>
			<p>false</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>fields</em></p>
			</td>
			<td>
			<p>参见Retrieving a Subset of Fields&nbsp;(1.5.0+)</p>
			</td>
			<td>
			<p>All fields</p>
			</td>
		</tr>
		<tr>
			<td>
			<p><em>upsert</em></p>
			</td>
			<td>
			<p>创建新对象若查询结果为空。示例&nbsp;(1.5.4+)</p>
			</td>
			<td>
			<p>false</p>
			</td>
		</tr>
	</tbody>
</table>

<h2>语句块操作</h2>

<p>1、简单Hello World</p>

<p>print(&quot;Hello World!&quot;);</p>

<p>这种写法调用了print函数，和直接写入&quot;Hello World!&quot;的效果是一样的；</p>

<p>2、将一个对象转换成json</p>

<p>tojson(new Object());</p>

<p>tojson(new Object(&#39;a&#39;));</p>

<p>3、循环添加数据</p>

<p>&gt;&nbsp;for (var&nbsp;i&nbsp;= 0;&nbsp;i&nbsp;&lt;&nbsp;30;&nbsp;i++) {</p>

<p>... db.users.save({name: &quot;u_&quot; +&nbsp;i, age: 22 +&nbsp;i, sex:&nbsp;i&nbsp;% 2});</p>

<p>... };</p>

<p>这样就循环添加了30条数据，同样也可以省略括号的写法</p>

<p>&gt;&nbsp;for (var&nbsp;i&nbsp;= 0;&nbsp;i&nbsp;&lt;&nbsp;30;&nbsp;i++) db.users.save({name: &quot;u_&quot; +&nbsp;i, age: 22 +&nbsp;i, sex:&nbsp;i&nbsp;% 2});</p>

<p>也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；</p>

<p>4、find 游标查询</p>

<p>&gt;var&nbsp;cursor&nbsp;= db.users.find();</p>

<p>&gt;&nbsp;while (cursor.hasNext()) {</p>

<p>printjson(cursor.next());</p>

<p>}</p>

<p>这样就查询所有的users信息，同样可以这样写</p>

<p>var&nbsp;cursor&nbsp;= db.users.find();</p>

<p>while (cursor.hasNext()) { printjson(cursor.next); }</p>

<p>同样可以省略{}号</p>

<p>5、forEach迭代循环</p>

<p>db.users.find().forEach(printjson);</p>

<p>forEach中必须传递一个函数来处理每条迭代的数据信息</p>

<p>6、将find游标当数组处理</p>

<p>var&nbsp;cursor&nbsp;= db.users.find();</p>

<p>cursor[4];</p>

<p>取得下标索引为4的那条数据</p>

<p>既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();</p>

<p>那样我们也可以用循环显示数据</p>

<p>for (var&nbsp;i&nbsp;= 0, len = c.length();&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++) printjson(c[i]);</p>

<p>7、将find游标转换成数组</p>

<p>&gt;&nbsp;var&nbsp;arr = db.users.find().toArray();</p>

<p>&gt;&nbsp;printjson(arr[2]);</p>

<p>用toArray方法将其转换为数组</p>

<p>8、定制我们自己的查询结果</p>

<p>只显示age&nbsp;&lt;= 28的并且只显示age这列数据</p>

<p>db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);</p>

<p>db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);</p>

<p>排除age的列</p>

<p>db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);</p>

<p>9、forEach传递函数显示信息</p>

<p>db.things.find({x:4}).forEach(function(x) {print(tojson(x));});</p>
