<h1>MongoDB教程</h1>

<p>本教程带你学习mongodb的基本操作，以及排序，复制，分片等技术</p>

<p><a href="http://outofmemory.cn/MongoDB/tutorial/" title="MongoDB教程"><img alt="MongoDB教程" src="http://outofmemory.cn/j/mongodb/logo.png" /></a></p>

<ul>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-tutorial.html" title="MongoDB教程">MongoDB教程</a></h3>

	<p>MongoDB教程 MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。 现在开始学习 MongoDB 内容列表 NoSQL 简介 介绍NoSQL基础概念。 MongoDB 简介 介绍MongoDB基础概念。 window平台安..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/nosql.html" title="NoSQL 简介">NoSQL 简介</a></h3>

	<p>NoSQL 简介 NoSQL(NoSQL = Not Only SQL )，意即&ldquo;不仅仅是SQL&rdquo;。 在现代的计算系统上每天网络上都会产生庞大的数据量。这些数据有很大一部分是由关系数据库管理系统（RDMBSs）来处理。 1970年 E.F.Codd&rsquo;s提出的关系模型的论文 &#39;A relational model of data for large shared data banks&rdquo;，这使得数据建模和应用程序编程更加简单。..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-intro.html" title="MongoDB 简介">MongoDB 简介</a></h3>

	<p>什么是MongoDB ? MongoDB 是由C++语言编写的开源数据库系统。 在高负载的情况下，添加更多的节点，可以保证服务器性能。 MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB 将数据存储为一个文档。MongoDB是一个基于分布式文件存储的数据库。 FirstName=&#39;Arun&#39;, Address=&#39;St. Xavier&#39;s Road&#39;..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-window-install.html" title="window平台安装 MongoDB ">window平台安装 MongoDB</a></h3>

	<p>window平台安装 MongoDB MongoDB 下载 MongoDB提供了可用于32位和64位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB预编译二进制包下载地址：http://www.mongodb.org/downloads 解压 下载zip包后，解压安装包，并安装它。 创建数据目录 MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-linux-install.html" title="Linux平台安装MongoDB">Linux平台安装MongoDB</a></h3>

	<p>Linux平台安装MongoDB 下载 MongoDB提供了linux平台上32位和64位的安装包，你可以在官网下载安装包。 下载地址：http://www.mongodb.org/downloads 安装 下载完成后，在你安装的目录下解压zip包。 创建数据库目录 MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。 注意：请将da..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-databases-documents-collections.html" title="MongoDB 数据库，对象，集合 ">MongoDB 数据库，对象，集合</a></h3>

	<p>MongoDB 数据库，对象，集合 描述 不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。 数据库 一个mongodb中可以建立多个数据库。 MongoDB的默认数据库为&ldquo;db&rdquo;，该数据库存储在data目录中。 在MongoDB中可以创建数据库，如果你想使用MongoDB，创建数据库不是必要的。 &ldquo;show dbs&rdquo; 命令可以显示所有数据的列表。 执行 &ldquo;db&rdquo;..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-connections.html" title="MongoDB - 连接">MongoDB - 连接</a></h3>

	<p>MongoDB - 连接 描述 在本教程我们将讨论MongoDB的不同连接方式。 启动 MongoDB服务 在前面的教程中，我们已经讨论了如何启动MongoDB服务，你只需要在MongoDB安装目录的bin目录下执行&#39;mongod&#39;即可。 执行启动操作后，mongodb在输出一些必要信息后不会输出任何信息，之后就等待连接的建立，当连接被建立后，就会开始打印日志信息。 你可以使用MongoDB shell 来连接 M..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-install-php-driver.html" title="PHP安装MongoDB扩展驱动">PHP安装MongoDB扩展驱动</a></h3>

	<p>PHP安装MongoDB扩展驱动 描述 本教程将向大家介绍如何在Linux、window、Mac平台上安装MongoDB扩展。 Linux上安装 MongoDB PHP扩展 在终端上安装 你可以在linux中执行以下命令来安装MongoDB 的 PHP 扩展驱动 $ sudo pecl install mongo 使用php的pecl安装命令必须保证网络连接可用以及root权限。 安装手册 如果你想通过源码来编译扩展驱动。你必须手..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-insert.html" title="MongoDB 数据插入">MongoDB 数据插入</a></h3>

	<p>MongoDB 数据插入 描述 本章节中我们将向大家介绍如何将数据插入到MongoDB的集合中。 文档的数据结构和JSON基本一样。 所有存储在集合中的数据都是BSON格式。BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。 MongoDB数据库切换 以下命令可以使用&ldquo;myinfo&rdquo;数据库： &amp;gt; use myinfo switch to db myinfo 为MongoDB数据库定义..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-update.html" title="MongoDB使用update()函数更新数据">MongoDB使用update()函数更新数据</a></h3>

	<p>MongoDB使用update()函数更新数据 描述 本章节我们将开始学习如何更新MongoDB中的集合数据。 MongoDB数据更新可以使用update()函数。 db.collection.update( criteria, objNew, upsert, multi ) update()函数接受以下四个参数： criteria : update的查询条件，类似sql update查询内where后面的。 objNew ..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-remove.html" title="MongoDB使用- remove()函数删除数据">MongoDB使用- remove()函数删除数据</a></h3>

	<p>MongoDB使用- remove()函数删除数据 描述 在前面的几个章节中我们已经学习了MongoDB中如何为集合添加数据和更新数据。在本章节中我们将继续学习MongoDB集合的删除。 MongoDB remove()函数是用来移除集合中的数据。 MongoDB数据更新可以使用update()函数。在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。 我们使用的数据库名称为&ldquo;myinfo&rdquo;..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-query.html" title="MongoDB 查询">MongoDB 查询</a></h3>

	<p>MongoDB 查询 描述 本教程我们将向大家介绍如何在MongoDB集合中获取数据。 我们使用的数据库名称为&ldquo;myinfo&rdquo; 我们的集合名称为&ldquo;userdetails&rdquo;，以下为我们插入的数据： &gt;db.userdetails.insert({&#39;user_id&#39; : &#39;user1&#39;,&#39;password&#39; :&#39;1a2b3c&#39; ,&#39;date_o..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-operators.html" title="MongoDB条件操作符">MongoDB条件操作符</a></h3>

	<p>MongoDB条件操作符 描述 条件操作符用于比较两个表达式并从mongoDB集合中获取数据。 在本章节中，我们将讨论如何在MongoDB中使用条件操作符。 MongoDB中条件操作符有： (&amp;gt;) 大于 - $gt (&amp;lt;) 小于 - $lt (&amp;gt;=) 大于等于 - $gte (&amp;lt;= ) 小于等于 - $lte 我们使用的数据库名称为&#39;myinfo&#39; ..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-operators-type.html" title="MongoDB条件操作符 - $type">MongoDB条件操作符 - $type</a></h3>

	<p>MongoDB条件操作符 - $type 描述 在本章节中，我们将继续讨论MongoDB中条件操作符 $type。 $type操作符是基于BSON类型来检索集合中匹配的结果。 MongoDB中可以使用的类型： 类型描述 类型值 Double 1 String 2 Object 3 Array 4 Binary data 5 Object id 7 Boolean 8 Date 9 Null 10..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-limit-skip.html" title="MongoDB Limit与Skip方法做分页">MongoDB Limit与Skip方法做分页</a></h3>

	<p>MongoDB Limit与Skip方法 MongoDB Limit() 方法 如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。 语法 limit()方法基本语法如下所示： &gt;db.COLLECTION_NAME.find().limit(NUMBER) 实例 集合 myycol 中的数据如下： { ..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-sort.html" title="MongoDB 排序">MongoDB 排序</a></h3>

	<p>MongoDB 排序 MongoDB sort()方法 在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排序，而-1是用于降序排列。 语法 sort()方法基本语法如下所示： &gt;db.COLLECTION_NAME.find().sort({KEY:1}) 实例 myycol 集合中的数据如下： { &#39;..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-indexing.html" title="MongoDB 索引">MongoDB 索引</a></h3>

	<p>MongoDB 索引 索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。 这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。 索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构 ensureIndex() 方法 MongoDB使..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-aggregate.html" title="MongoDB 聚合">MongoDB 聚合</a></h3>

	<p>MongoDB 聚合 MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。 aggregate() 方法 MongoDB中聚合的方法使用aggregate()。 语法 aggregate() 方法的基本语法格式如下所示： &gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION) 实..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-replication.html" title="MongoDB 复制（副本集）">MongoDB 复制（副本集）</a></h3>

	<p>MongoDB 复制（副本集） MongoDB复制是将数据同步在多个服务器的过程。 复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。 复制还允许您从硬件故障和服务中断中恢复数据。 什么是复制? 保障数据的安全性 数据高可用性 (24*7) 灾难恢复 无需停机维护（如备份，重建索引，压缩） 分布式读取数据 MongoDB复制原理 mongodb的复制至少需要两个节点。其中一个..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
	<li>
	<h3><a href="http://outofmemory.cn/MongoDB/tutorial/mongodb-sharding.html" title="MongoDB 分片">MongoDB 分片</a></h3>

	<p>MongoDB 分片 分片 在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。 当MongoDB存储海量的数据时，一台机器可能不足以存储数据也足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。 为什么使用分片 复制所有的写入操作到主节点 延迟的敏感数据会在主节点查询 单个副本集限制在12个节点 当请求量巨大时会出现内存不足。 本..</p>

	<p><a href="http://outofmemory.cn/tag/MongoDB">MongoDB</a></p>
	</li>
</ul>
