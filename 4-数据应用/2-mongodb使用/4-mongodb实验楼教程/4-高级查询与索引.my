<h1>高级查询与索引</h1>

<h2>一、实验介绍</h2>

<h3>1.1 实验内容</h3>

<p>本次实验将介绍 MongoDB 高级查询和索引的相关知识。</p>

<h3>1.2 实验知识点</h3>

<ul>
	<li>高级查询</li>
	<li>索引</li>
</ul>

<h3>1.3 实验环境</h3>

<p>课程使用的实验环境为 Ubuntu Linux 14.04 64 位版本。实验中会用到程序：</p>

<ul>
	<li>MongoDB 2.4.9</li>
	<li>Xfce终端</li>
</ul>

<h2>二、实验步骤</h2>

<h3>2.1 初始化环境</h3>

<p>启动 MongoDB 服务，因为 MongoDB 并不随系统一起启动，可能以下命令运行后会等一小段的时间才会启动完毕。</p>

<pre>
<code>$ sudo service mongodb start
</code></pre>

<p>进入 MongoDB 命令行操作界面，在命令行中敲<strong>exit</strong>可以退出。</p>

<pre>
<code>$ mongo
</code></pre>

<p>实验中的布尔类型的 ture 用1代替，false 用0代替。</p>

<h3>2.2 覆盖索引查询</h3>

<p>所有的查询字段都是索引的一部分；所有的查询返回字段在同一个索引中。</p>

<p>由于索引存在于 RAM 中，因而从索引中获取数据要比扫描文档更快。</p>

<p>范例：创建如下 users 集合（使用前面所学的方法创建该集合）：</p>

<pre>
<code>{
   &quot;contact&quot;: &quot;987654321&quot;,
   &quot;dob&quot;: &quot;01-01-1991&quot;,
   &quot;gender&quot;: &quot;M&quot;,
   &quot;name&quot;: &quot;Tom Benzamin&quot;,
   &quot;user_name&quot;: &quot;tombenzamin&quot;
}
</code></pre>

<p>在 user 中创建一个联合索引</p>

<pre>
<code>&gt; db.users.ensureIndex({gender:1,user_name:1})
</code></pre>

<p>该索引会覆盖下面的查询：</p>

<pre>
<code>&gt; db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0})
</code></pre>

<p>对于上述查询，MongoDB 不会在数据库文件中查找，而会从索引中提取数据。因为索引中不包含 _id 字段，所以 _id 在查询中会默认返回，可以在查询结果中将其排除。而&nbsp;<code>db.users.find({gender:&quot;M&quot;},{user_name:1})</code>&nbsp;就不会被索引覆盖。</p>

<h3>2.3 高级索引</h3>

<p>创建如下 users 集合（使用前面所学的方法创建该集合）：</p>

<pre>
<code>{
   &quot;address&quot;: {
      &quot;city&quot;: &quot;chengdu&quot;,
      &quot;province&quot;: &quot;sichuan&quot;,
      &quot;pincode&quot;: &quot;123&quot;
   },
   &quot;tags&quot;: [
      &quot;music&quot;,
      &quot;cricket&quot;,
      &quot;blogs&quot;
   ],
   &quot;name&quot;: &quot;clound&quot;
}
</code></pre>

<p>索引数组字段，在数组中创建索引，需要对数组中的每个字段依次建立索引。所以在我们为数组 tags 创建索引时，会为 music、cricket、blogs 三个值建立单独的索引。 范例：</p>

<pre>
<code>&gt; db.users.ensureIndex({&quot;tags&quot;:1})
</code></pre>

<p>创建索引后，我们可以这样检索集合的 tags 字段：</p>

<pre>
<code>&gt; db.users.find({tags:&quot;cricket&quot;})
</code></pre>

<p>为了验证我们使用了索引，可以使用 explain 命令：</p>

<pre>
<code>&gt; db.users.find({tags:&quot;cricket&quot;}).explain()
</code></pre>

<p><img alt="此处输入图片的描述" src="https://dn-anything-about-doc.qbox.me/document-uid370051labid78timestamp1490345248893.png/wm" /></p>

<p>以上命令执行结果中会显示 &quot;cursor&quot; : &quot;BtreeCursor tags_1&quot; ，则表示已经使用了索引。</p>

<h4>2.3.1 索引子文档字段</h4>

<p>假设我们需要通过 city、province、pincode 字段来检索文档，由于这些字段是子文档的字段，所以我们需要对子文档建立索引。 范例： 为子文档的三个字段创建索引，命令如下：</p>

<pre>
<code>&gt; db.users.ensureIndex({&quot;address.city&quot;:1,&quot;address.province&quot;:1,&quot;address.pincode&quot;:1})
</code></pre>

<p>一旦创建索引，我们可以使用子文档的字段来检索数据：</p>

<pre>
<code>&gt; db.users.find({&quot;address.city&quot;:&quot;chengdu&quot;})   
</code></pre>

<p>记住查询表达式必须遵循指定的索引的顺序。所以上面创建的索引将支持以下查询：</p>

<pre>
<code>&gt; db.users.find({&quot;address.city&quot;:&quot;chengdu&quot;,&quot;address.province&quot;:&quot;sichuan&quot;}) 
</code></pre>

<p>同样支持以下查询：</p>

<pre>
<code>&gt; db.users.find({&quot;address.city&quot;:&quot;chengdu&quot;,&quot;address.province&quot;:&quot;sichuan&quot;,&quot;address.pincode&quot;:&quot;123&quot;})
</code></pre>

<h3>2.4 原子操作</h3>

<p>所谓原子操作，就是要么执行成功，要么执行失败，执行成功完成既定任务，执行失败还原执行前的状态。 常用原子操作命令：</p>

<p><strong>1) $set</strong>&nbsp;用来指定一个键并更新键值，若键不存在则创建。</p>

<pre>
<code>{ $set : { field : value } }
</code></pre>

<p><strong>2) $unset</strong>&nbsp;用来删除一个键。</p>

<pre>
<code>{ $unset : { field : 1} }
</code></pre>

<p><strong>3) $inc</strong>&nbsp;$inc 可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。</p>

<pre>
<code>{ $inc : { field : value } }
</code></pre>

<p><strong>4) $push</strong>&nbsp;把 value 追加到 field 里面去，field 一定要是数组类型才行，如果 field 不存在，会新增一个数组类型加进去。</p>

<pre>
<code>{ $push : { field : value } }
</code></pre>

<p><strong>5) $pushAll</strong>&nbsp;同 $push ,只是一次可以追加多个值到一个数组字段内。</p>

<pre>
<code>{ $pushAll : { field : value_array } }
</code></pre>

<p><strong>6) $pull</strong>&nbsp;从数组 field 内删除一个等于 value 值。</p>

<pre>
<code>{ $pull : { field : _value } }
</code></pre>

<p><strong>7) $addToSet</strong>&nbsp;增加一个值到数组内，而且只有当这个值不在数组内才增加。</p>

<p><strong>8) $pop</strong>&nbsp;删除数组的第一个或最后一个元素。</p>

<pre>
<code>{ $pop : { field : 1 } }
</code></pre>

<p><strong>9) $rename</strong>&nbsp;修改字段名称</p>

<pre>
<code>{ $rename : { old_field_name : new_field_name } }
</code></pre>

<p><strong>10) $bit</strong>&nbsp;位操作，integer 类型</p>

<pre>
<code>{$bit : { field : {and : 5}}}
</code></pre>

<h3>2.5 查询分析</h3>

<h4>2.5.1 explain()</h4>

<p>explain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。接下来我们在 users 集合中创建 gender 和 user_name 的索引：</p>

<pre>
<code>&gt; db.users.ensureIndex({gender:1,user_name:1})
&gt; db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).explain()
</code></pre>

<p><img alt="此处输入图片的描述" src="https://dn-anything-about-doc.qbox.me/document-uid370051labid78timestamp1490346260441.png/wm" /></p>

<p>结果中字段解释：</p>

<ul>
	<li>indexOnly:为 true ，表示我们使用了索引；</li>
	<li>cursor：因为这个查询使用了索引，MongoDB 中索引存储在 B 树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的 system.indexes 集合（系统自动创建）来得到索引的详细信息；</li>
	<li>n：当前查询返回的文档数量；</li>
	<li>nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好；</li>
	<li>millis：当前查询所需时间，毫秒数；</li>
	<li>indexBounds：当前查询具体使用的索引。</li>
</ul>

<h4>2.5.2 hint()</h4>

<p>虽然 MongoDB 查询优化器一般工作的很不错，但是也可以使用 hints 来强迫 MongoDB 使用一个指定的索引。 通过这种方法在某些情形下会提升性能。 范例：指定使用 gender 和 user_name 索引字段来查询：</p>

<pre>
<code>&gt; db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1})
</code></pre>

<p>可以使用 explain() 函数来分析以上查询：</p>

<pre>
<code>&gt; db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()
</code></pre>

<h2>三、实验总结</h2>

<p>本节实验介绍了 MongoDB 的高级查询与索引，支持索引子文档字段，支持原子操作，explain 可以用于查询分析，hint 可以强制指定使用哪一个索引。</p>
