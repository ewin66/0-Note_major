<h1>文档操作</h1>

<h2>一、实验介绍</h2>

<h3>1.1 实验内容</h3>

<p>本次实验将介绍 MongoDB 数据库、集合以及文档的基本操作。</p>

<h3>1.2 实验知识点</h3>

<ul>
	<li>数据库操作</li>
	<li>集合操作</li>
	<li>文档操作</li>
</ul>

<h3>1.3 实验环境</h3>

<p>课程使用的实验环境为 Ubuntu Linux 14.04 64 位版本。实验中会用到程序：</p>

<ul>
	<li>MongoDB 2.4.9</li>
	<li>Xfce终端</li>
</ul>

<h2>二、实验步骤</h2>

<h3>2.1 虚拟机开机配置</h3>

<p>启动 MongoDB 服务，因为 MongoDB 并不随系统一起启动，可能以下命令运行后会等一小段的时间才会启动完毕。</p>

<pre>
<code>$ sudo service mongodb start
</code></pre>

<p>进入 MongoDB 命令行操作界面，在命令行中敲<strong>exit</strong>可以退出。</p>

<pre>
<code>$ mongo
</code></pre>

<p>实验中的布尔类型的 true 用1代替，false 用0代替。</p>

<h3>2.2 创建数据库</h3>

<p>范例：进入 MongoDB 命令行操作界面之后，进行如下操作：</p>

<pre>
<code>&gt; use Chenshi
switched to db Chenshi
</code></pre>

<p>您可以使用 db 命令查看您当前选择的数据库</p>

<pre>
<code>&gt; db
Chenshi
</code></pre>

<p>您也可以通过使用 show dbs 命令查看所有的数据库</p>

<pre>
<code>&gt; show dbs
</code></pre>

<p>在这条命令之后您刚才创建的 Chenshi 不会显示，这只有在向数据库中插入了数据之后才能显示</p>

<h3>2.3 删除数据库</h3>

<p><strong>语法：db.dropDatabase()</strong></p>

<p>假设刚才我们使用语句 db.computer.insert({&quot;name&quot;:&quot;shiyanlou&quot;}) 对数据库 Chenshi 进行了数据插入操作</p>

<pre>
<code>&gt; show dbs      #显示当前系统中的所有数据库
&gt; use Chenshi   #转到Chenshi数据库
switched to db Chenshi
&gt; db.dropDatabase()
{&quot;dropped&quot;:&quot;Chenshi&quot;,&quot;ok&quot;:1}
&gt; show dbs
</code></pre>

<h3>2.4 创建集合</h3>

<p>语法：</p>

<pre>
<code>db.createCollection(name,options)
</code></pre>

<p>参数描述：</p>

<ul>
	<li>name：创建的集合名称</li>
	<li>options：是一个作为初始化的文档(可选)</li>
</ul>

<p>范例：</p>

<pre>
<code>&gt; db.createCollection(&quot;shiyanlou&quot;)            #无参数
{ &quot;ok&quot; : 1 }
&gt; show collections
shiyanlou
system.indexes
&gt; db.createCollection(&quot;shiyanlou2&quot;, { capped : 1, autoIndexID : 1, size : 6142800, max : 10000 } )            #带参数
{ &quot;ok &quot;: 1 }
</code></pre>

<p>参数描述：</p>

<ul>
	<li>capped：类型为 Boolean，如果为 true 则创建一个固定大小的集合，当其条目达到最大时可以自动覆盖以前的条目。在设置其为 true 时也要指定参数大小；</li>
	<li>autoIndexID：类型为 Boolean，默认为 false，如果设置为 true，则会在 _id field.s 上自动创建索引；</li>
	<li>size：如果 capped 为 true 需要指定，指定参数的最大值，单位为 byte；</li>
	<li>max：指定最大的文档数。 在 Mongodb 中也可以不用创建集合，因为在创建文档的时候也会自动的创建集合。</li>
</ul>

<h3>2.5 删除集合</h3>

<p><strong>语法：db.COLLECTION.drop()</strong></p>

<p>操作实例：</p>

<pre>
<code>&gt; use Chenshi
switched to db Chenshi
&gt; show collections
shiyanlou
shiyanlou2
system.indexes
&gt; db.shiyanlou.drop()
true
&gt; show collections
shiyanlou2
system.indexes
</code></pre>

<p>删除成功</p>

<p>注意：当您要删除指定的集合时，用您想要删除的集合名称替代 COLLECTION 即可</p>

<h3>2.6 插入文档</h3>

<p><strong>语法：db.COLLECTION_NAME.insert(document)</strong></p>

<p>操作实例：</p>

<pre>
<code>&gt; userdoc1=({&quot;user_id&quot;:1,&quot;name&quot;:&quot;cloud&quot;,&quot;state&quot;:&quot;active&quot;,&quot;actor&quot;:&quot;user&quot;,&quot;e-mail&quot;:&quot;test@qq.com&quot;,&quot;VM_num&quot;:2,&quot;time&quot;:[{&quot;date&quot;:&quot;2014-08-12&quot;,&quot;hour&quot;:&quot;10:53 PM&quot;}] })        
&gt; userdoc2=({&quot;user_id&quot;:2,&quot;name&quot;:&quot;testadmin&quot;,&quot;state&quot;:&quot;active&quot;,&quot;actor&quot;:&quot;admin&quot;,&quot;e-mail&quot;:&quot;test@qq.com&quot;,&quot;VM_num&quot;:2,&quot;time&quot;:[{&quot;date&quot;:&quot;2014-08-11&quot;,&quot;hour&quot;:&quot;06:34 AM&quot;}] })    
&gt; doc1=({&quot;name&quot;:&quot;peter&quot;,&quot;position&quot;:&quot;teacher&quot;})        #先定义文档
&gt; use Chenshi
switched to db Chenshi
&gt; db.shiyanlou.insert(userdoc1)
WriteResult({&quot;nInserted&quot;:1})
&gt; db.shiyanlou.insert(userdoc2)
WriteResult({&quot;nInserted&quot;:1})
&gt; db.shiyanlou.insert(doc1)
WriteResult({&quot;nInserted&quot;:1})
</code></pre>

<p>插入文档成功，当然也可以直接将文档的内容作为函数的参数直接替代 document。</p>

<h3>2.7 更新文档</h3>

<p><strong>语法：db.COLLECTION_NAME.update(SELECTION_CRITERIA,UPDATED_DATA)</strong></p>

<p>操作实例：</p>

<pre>
<code>&gt; db.shiyanlou.update({&quot;user_id&quot;:2,&quot;e-mail&quot;:&quot;test@qq.com&quot;},{$set:{&quot;e-mail&quot;:&quot;group@qq.com&quot;}})
WriteResult({&quot;nMatched&quot;:1,&quot;nUpserted&quot;:1,&quot;nModified&quot;:1})
&gt; db.shiyanlou.find()
</code></pre>

<ul>
	<li>将 user_id=2 的文档的 e-mail 改为&nbsp;<a href="mailto:group@qq.com" target="_blank">group@qq.com</a></li>
	<li>第一个大括号内容标示查找条件，第二个大括号内容则表示更新后的数据</li>
	<li>默认的 update 函数只对一个文档更新，如果想作用所有文档，则需要加入 multi:true</li>
</ul>

<p>操作实例：</p>

<pre>
<code>db.shiyanlou.update({&quot;e-mail&quot;:&quot;test@qq.com&quot;},{$set:{&quot;e-mail&quot;:&quot;group@qq.com&quot;}},{multi:true})
</code></pre>

<h3>2.8 替换已存在的文档</h3>

<p><strong>语法：db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</strong></p>

<p>操作实例：</p>

<pre>
<code>&gt; db.shiyanlou.save({&quot;_id&quot;:ObjectId(&quot;53ea174ccb4c62646d9544f4&quot;),&quot;name&quot;:&quot;Bob&quot;,&quot;position&quot;:&quot;techer&quot;})
WriteResult({&quot;nMatched&quot;:1,&quot;nUpserted&quot;:1,&quot;nModified&quot;:1})
</code></pre>

<p>这里的 _id 对应的是要替换文档的 _id。</p>

<p>跟 insert 差不多，但是 update 更好用。</p>

<h3>2.9 删除文档</h3>

<p><strong>语法：db.COLLECTION_NAME.remove(DELECTION_CRITERIA)</strong></p>

<p>操作实例：</p>

<pre>
<code>&gt; db.shiyanlou.remove({&quot;name&quot;:&quot;Bob&quot;})
WriteResult({&quot;nRemoved&quot;:1})
</code></pre>

<p>其实 remove 函数的参数跟 update 函数的第一个参数一样，相当于查找条件，注意，不要误删！</p>

<p>删除后可以用查找命令确认数据：</p>

<pre>
<code>&gt; db.shiyanlou.find()
</code></pre>

<h2>三、实验总结</h2>

<p>本节实验介绍了集合和文档的基本操作：</p>

<p>createCollection()：创建集合</p>

<p>db.COLLECTION.drop()：删除集合</p>

<p>db.COLLECTION_NAME.insert(document)：插入文档</p>

<p>db.COLLECTION_NAME.update(SELECTION_CRITERIA,UPDATED_DATA)：更新文档</p>

<p>db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})：替换已存在的文档</p>

<p>db.COLLECTION_NAME.remove(DELECTION_CRITERIA)：删除文档</p>

<h2>四、课后习题</h2>

<p>请通过查询资料更加熟练地掌握上述提到的操作，了解它们的高级用法。</p>
