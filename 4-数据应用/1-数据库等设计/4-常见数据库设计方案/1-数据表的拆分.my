<h1>数据拆分</h1>

<p>&nbsp;</p>

<h2>数据库做拆分的几种方式：</h2>

<p>&nbsp;</p>

<p>1．按功能划分（垂直切分）</p>

<p>将不同功能相关的表放到不同的数据库中，这样做的好处是非常直观。但当某一部分的功能其数据量或性能要求超出了可控的范围，就需要继续对其进行深入的再切分。</p>

<p>&nbsp;</p>

<p>2．按表中某一字段值的范围划分（水平切分）</p>

<p>当伴随着某一个表的数据量越来越大，以至于不能承受的时候，就需要对它进行进一步的切分。一种选择是根据key 的范围来做切分，譬如ID 为 1-10000的放到A上，ID 为10000~20000的放到B。这样的扩展就是可预见的。另一种是根据某一字段值来划分，譬如根据用户名的首字母，如果是A-D，就属于A，E-H就属于B。这样做也存在不均衡性，当某个范围超出了单点所能承受的范围就需要继续切分。还有按日期切分等等。</p>

<p>优点：单表大小可控，天然水平扩展</p>

<p>缺点：无法解决集中写入瓶颈的问题</p>

<p><br />
3．基于hash的切分</p>

<p>一般采用mod来切分，一开始确定切分数据库的个数，通过hash取模来决定使用哪台。这种方法能够平均地来分配数据，但是伴随着数据量的增大，需要进行扩展的时候，这种方式无法做到在线扩容。每增加节点的时候，就需要对hash 算法重新运算。</p>

<p>所以采用这种方法推荐采用mod 2^n这种一致性哈希</p>

<p>以点评统一订单库为例，分库分表的方案是32*32的，即通过userId后四位mod 32分到32个库中，同时再将userId后四位div 32 mod 32将每个库分为32个表，共计分为1024张表。其线上部署情况为8个集群(主从)，每个集群4个库</p>

<p>&nbsp;</p>

<p>4．基于路由表的切分</p>

<p>前面的几种方式都是根据应用的数据来决定操作的，基于路由表的切分是一种更加松散的方法。它单独维护一张路由表，根据用户的某一属性来查找路由表决定使用哪个数据库，这种方式是一种更加通用的方案</p>

<p>&nbsp;</p>

<h2>数据拆分</h2>

<p>一个大型系统里各个环节中最容易出性能和可用性问题的往往是数据库，因此分布式设计与开发的一个重要领域就是如何让数据层具有可扩展性，数据库的扩展分为Scale Up 和Scale Out，而Scale Up说白了是通过升级服务器配置来完成，因此不在分布式设计的考虑之内。Scale Out是通过增加机器的方式来提升处理能力，一般需要考虑以下两个问题：</p>

<ul>
	<li>数据拆分</li>
	<li>数据库高可用架构</li>
</ul>

<p>数据拆分是最先会被想到的，原理很简单，当一个表的数据达到无法处理的时候，就需要把它拆成多个表，说起来简单，真正在项目里运用的时候有很多点是需要深入研究的，一般分为：</p>

<ul>
	<li>切分策略</li>
	<li>与应用程序端的整合策略</li>
</ul>

<p><strong>切分策略</strong></p>

<p>切分策略一般分为垂直切分、横向切分和两者的混搭。</p>

<p><strong>1）垂直切分</strong></p>

<p>垂直切分就是要把表按模块划分到不同数据库中，这种拆分在大型网站的演变过程中是很常见的。当一个网站还在很小的时候，只有小量的人来开发和维护，各模块和表都在一起，当网站不断丰富和壮大的时候，也会变成多个子系统来支撑，这时就有按模块和功能把表划分出来的需求。如下图所示：</p>

<p><img alt="" src="http://hi.csdn.net/attachment/201008/26/0_1282807855EIJM.gif" /></p>

<p>其实，相对于垂直切分更进一步的是服务化改造，说得简单就是要把原来强耦合的系统拆分成多个弱耦合的服务，通过服务间的调用来满足业务需求看，因此表拆出来后要通过服务的形式暴露出去，而不是直接调用不同模块的表，淘宝在架构不断演变过程，最重要的一环就是服务化改造，把用户、交易、店铺、宝贝这些核心的概念抽取成独立的服务，也非常有利于进行局部的优化和治理，保障核心模块的稳定性。这样一种拆分方式也是有代价的：</p>

<ul>
	<li>表关联无法在数据库层面做</li>
	<li>单表大数据量依然存在性能瓶颈</li>
	<li>事务保证比较复杂</li>
	<li>应用端的复杂性增加</li>
</ul>

<p>上面这些问题是显而易见的，处理这些的关键在于如何解除不同模块间的耦合性，这说是技术问题，其实更是业务的设计问题，只有在业务上是松耦合的，才可能在技术设计上隔离开来。没有耦合性，也就不存在表关联和事务的需求。另外，大数据瓶颈问题可以参见下面要将的水平切分。</p>

<p><strong>2）水平切分</strong></p>

<p>上面谈到垂直切分只是把表按模块划分到不同数据库，但没有解决单表大数据量的问题，而水平切分就是要把一个表按照某种规则把数据划分到不同表或数据库里。例如像计费系统，通过按时间来划分表就比较合适，因为系统都是处理某一时间段的数据。而像SaaS应用，通过按用户维度来划分数据比较合适，因为用户与用户之间的隔离的，一般不存在处理多个用户数据的情况，下面是一个比较简单的按user_id来水平切分的例子：</p>

<p><img alt="" src="http://hi.csdn.net/attachment/201008/26/0_1282809528zTQv.gif" /></p>

<p>水平切分没有破坏表之间的联系，完全可以把有关系的表放在一个库里，这样就不影响应用端的业务需求，并且这样的切分能从根本上解决大数据量的问题。它的问题也是很明显的：</p>

<ul>
	<li>当切分规则复杂时，增加了应用端调用的难度</li>
	<li>数据维护难度比较大，当拆分规则有变化时，需要对数据进行迁移</li>
</ul>

<p>对于第一个问题，可以参考后面要讲的如何整合应用端和数据库端。对于第二个问题可以参考一致性hash的算法，通过某些映射策略来降低数据维护的成本，可参见以前的博文<a href="http://blog.csdn.net/cutesource/archive/2010/08/15/5813379.aspx" target="_blank">分布式设计与开发（二）------几种必须了解的分布式算法</a></p>

<p><strong>3）垂直与水平联合切分</strong></p>

<p>由上面可知垂直切分能更清晰化模块划分，区分治理，水平切分能解决大数据量性能瓶颈问题，因此常常就会把两者结合使用，这在大型网站里是种常见的策略，这可以结合两者的优点，当然缺点就是比较复杂，成本较高，不太适合小型网站，下面是结合前面两个例子的情况：</p>

<p><img alt="" src="http://hi.csdn.net/attachment/201008/26/0_1282810259303L.gif" /></p>

<p><strong>与应用程序端的整合策略</strong></p>

<p>数据切出来还只是第一步，关键在于应用端如何方便地存取数据，不能因为数据拆分导致应用端存取数据错误或者异常复杂。按照从前往后一般说来有以下三种策略：</p>

<ul>
	<li>应用端做数据库路由</li>
	<li>在应用端和服务器端加一个代理服务器做路由</li>
	<li>数据库端自行做路由</li>
</ul>

<p><strong>1）</strong>&nbsp;<strong>应用端做数据库路由</strong></p>

<p>应用端做数据库路由实现起来比较简单，也就是在数据库调用的点通过工具包的处理，给每次调用数据库加上路由信息，也就是分析每次调用，路由到正确的库。这种方式多多少少没有对应用端透明，如果路由策略有更改还需要修改应用端，并且这种更改很难做到动态更改。最关键的是应用端的连接池设计会比较复杂，池里的连接就不是无状态了，不利于管理和扩展。</p>

<p><strong>2）在应用端和服务器端加一个代理服务器做路由</strong></p>

<p>通过代理服务器来做服务器做路由可以对客户端屏蔽后端数据库拆分细节，增强了拆分规则的可维护性，一般而言proxy需要提供以下features：</p>

<ul>
	<li>对客户端和数据库服务端的连接管理和安全认证</li>
	<li>数据库请求路由可配置性</li>
	<li>对调用命令和SQL的解析</li>
	<li>调用结果的过滤和合并</li>
</ul>

<p>现在有些开源框架提供了类似功能，比如ameoba，在以前博文<a href="http://blog.csdn.net/cutesource/archive/2010/08/02/5783213.aspx" target="_blank">设计与开发应用服务器（一）------常见模式</a>&nbsp;中介绍过ameoba的大致结构，在<a href="http://blog.csdn.net/cutesource/archive/2010/07/03/5710645.aspx" target="_blank">构建高性能web之路------mysql读写分离实战</a>&nbsp;介绍过如何实战ameoba，有兴趣的朋友可以参考一下。</p>

<p><strong>3）数据库端自行做路由</strong></p>

<p>例如MySQL就提供了MySQL Proxy的代理产品可以在数据库端做路由，结构如下所示：</p>

<p><img alt="" src="http://hi.csdn.net/attachment/201008/26/0_1282812193zKbF.gif" /></p>

<p>这种方式的最大问题就是拆分规则配置的灵活性不好，不一定能满足应用端的多种划分需求。</p>

<p>以上介绍了些数据拆分的策略和相关支撑策略，随后会研究一下前面谈到的数据库高可用架构。</p>

<p>（很资料来源于简朝阳的《MySQL性能调优与架构设计》，需要深入学习的朋友可以参考这本书）</p>
