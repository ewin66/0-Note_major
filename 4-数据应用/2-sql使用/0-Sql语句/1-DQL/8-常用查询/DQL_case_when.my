<h1><a href="http://www.cnblogs.com/clphp/p/6256207.html" id="cb_post_title_url">mysql操作查询结果case when then else end用法举例</a></h1>

<p>Case具有两种格式。简单Case函数和Case搜索函数。&nbsp;<br />
--简单Case函数&nbsp;<br />
CASE sex&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;1&#39; THEN &#39;男&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;2&#39; THEN &#39;女&#39;&nbsp;<br />
ELSE &#39;其他&#39; END&nbsp;<br />
--Case搜索函数&nbsp;<br />
CASE WHEN sex = &#39;1&#39; THEN &#39;男&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN sex = &#39;2&#39; THEN &#39;女&#39;&nbsp;<br />
ELSE &#39;其他&#39; END&nbsp;<br />
<br />
这两种方式，可以实现相同的功能。简单Case函数的写法相对比较简洁，但是和Case搜索函数相比，功能方面会有些限制，比如写判断式。&nbsp;<br />
还有一个需要注意的问题，Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。&nbsp;<br />
<br />
--比如说，下面这段SQL，你永远无法得到&ldquo;第二类&rdquo;这个结果&nbsp;<br />
CASE WHEN col_1 IN ( &#39;a&#39;, &#39;b&#39;) THEN &#39;第一类&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN col_1 IN (&#39;a&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;第二类&#39;&nbsp;<br />
ELSE&#39;其他&#39; END&nbsp;<br />
下面我们来看一下，使用Case函数都能做些什么事情。&nbsp;<br />
<br />
一，已知数据按照另外一种方式进行分组，分析。&nbsp;<br />
<br />
有如下数据:(为了看得更清楚，我并没有使用国家代码，而是直接用国家名作为Primary Key)&nbsp;<br />
国家（country） 人口（population）&nbsp;<br />
中国 600&nbsp;<br />
美国 100&nbsp;<br />
加拿大 100&nbsp;<br />
英国 200&nbsp;<br />
法国 300&nbsp;<br />
日本 250&nbsp;<br />
德国 200&nbsp;<br />
墨西哥 50&nbsp;<br />
印度 250&nbsp;<br />
<br />
根据这个国家人口数据，统计亚洲和北美洲的人口数量。应该得到下面这个结果。&nbsp;<br />
洲 人口&nbsp;<br />
亚洲 1100&nbsp;<br />
北美洲 250&nbsp;<br />
其他 700&nbsp;<br />
<br />
想要解决这个问题，你会怎么做？生成一个带有洲Code的View，是一个解决方法，但是这样很难动态的改变统计的方式。&nbsp;<br />
如果使用Case函数，SQL代码如下:&nbsp;<br />
SELECT&nbsp; SUM(population),&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CASE country&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;中国&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;印度&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;日本&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;美国&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;加拿大&#39;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;墨西哥&#39;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE &#39;其他&#39; END&nbsp;<br />
FROM&nbsp;&nbsp;&nbsp; Table_A&nbsp;<br />
GROUP BY CASE country&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;中国&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;印度&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;日本&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;亚洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;美国&#39;&nbsp;&nbsp;&nbsp;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;加拿大&#39;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#39;墨西哥&#39;&nbsp; THEN &#39;北美洲&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE &#39;其他&#39; END;&nbsp;<br />
<br />
同样的，我们也可以用这个方法来判断工资的等级，并统计每一等级的人数。SQL代码如下；&nbsp;<br />
<br />
SELECT&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CASE WHEN salary &lt;= 500 THEN &#39;1&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 500 AND salary &lt;= 600&nbsp; THEN &#39;2&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 600 AND salary &lt;= 800&nbsp; THEN &#39;3&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &#39;4&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE NULL END salary_class,&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COUNT(*)&nbsp;<br />
FROM&nbsp;&nbsp;&nbsp; Table_A&nbsp;<br />
GROUP BY&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CASE WHEN salary &lt;= 500 THEN &#39;1&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 500 AND salary &lt;= 600&nbsp; THEN &#39;2&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 600 AND salary &lt;= 800&nbsp; THEN &#39;3&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &#39;4&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE NULL END;&nbsp;<br />
<br />
二，用一个SQL语句完成不同条件的分组。&nbsp;<br />
<br />
有如下数据&nbsp;<br />
国家（country） 性别（sex） 人口（population）&nbsp;<br />
中国 1 340&nbsp;<br />
中国 2 260&nbsp;<br />
美国 1 45&nbsp;<br />
美国 2 55&nbsp;<br />
加拿大 1 51&nbsp;<br />
加拿大 2 49&nbsp;<br />
英国 1 40&nbsp;<br />
英国 2 60&nbsp;<br />
<br />
按照国家和性别进行分组，得出结果如下&nbsp;<br />
国家 男 女&nbsp;<br />
中国 340 260&nbsp;<br />
美国 45 55&nbsp;<br />
加拿大 51 49&nbsp;<br />
英国 40 60&nbsp;<br />
<br />
普通情况下，用UNION也可以实现用一条语句进行查询。但是那样增加消耗(两个Select部分)，而且SQL语句会比较长。&nbsp;<br />
下面是一个是用Case函数来完成这个功能的例子&nbsp;<br />
<br />
SELECT country,&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUM( CASE WHEN sex = &#39;1&#39; THEN&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; population ELSE 0 END),&nbsp; --男性人口&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SUM( CASE WHEN sex = &#39;2&#39; THEN&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; population ELSE 0 END)&nbsp;&nbsp; --女性人口&nbsp;<br />
FROM&nbsp; Table_A&nbsp;<br />
GROUP BY country;&nbsp;<br />
<br />
这样我们使用Select，完成对二维表的输出形式，充分显示了Case函数的强大。&nbsp;<br />
<br />
三，在Check中使用Case函数。&nbsp;<br />
<br />
在Check中使用Case函数在很多情况下都是非常不错的解决方法。可能有很多人根本就不用Check，那么我建议你在看过下面的例子之后也尝试一下在SQL中使用Check。&nbsp;<br />
下面我们来举个例子&nbsp;<br />
公司A，这个公司有个规定，女职员的工资必须高于1000块。如果用Check和Case来表现的话，如下所示&nbsp;<br />
CONSTRAINT check_salary CHECK&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( CASE WHEN sex = &#39;2&#39;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN CASE WHEN salary &gt; 1000&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN 1 ELSE 0 END&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE 1 END = 1 )&nbsp;<br />
<br />
如果单纯使用Check，如下所示&nbsp;<br />
<br />
CONSTRAINT check_salary CHECK&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( sex = &#39;2&#39; AND salary &gt; 1000 )&nbsp;<br />
<br />
女职员的条件倒是符合了，男职员就无法输入了</p>

<p>&nbsp;</p>

<p>四，根据条件有选择的UPDATE。&nbsp;<br />
<br />
例，有如下更新条件&nbsp;<br />
工资5000以上的职员，工资减少10%&nbsp;<br />
工资在2000到4600之间的职员，工资增加15%&nbsp;<br />
很容易考虑的是选择执行两次UPDATE语句，如下所示&nbsp;<br />
<br />
--条件1&nbsp;<br />
UPDATE Personnel&nbsp;<br />
SET salary = salary * 0.9&nbsp;<br />
WHERE salary &gt;= 5000;&nbsp;<br />
--条件2&nbsp;<br />
UPDATE Personnel&nbsp;<br />
SET salary = salary * 1.15&nbsp;<br />
WHERE salary &gt;= 2000 AND salary &lt; 4600;&nbsp;<br />
<br />
但是事情没有想象得那么简单，假设有个人工资5000块。首先，按照条件1，工资减少10%，变成工资4500。接下来运行第二个SQL时候，因为这个人的工资是4500在2000到4600的范围之内， 需增加15%，最后这个人的工资结果是5175,不但没有减少，反而增加了。如果要是反过来执行，那么工资4600的人相反会变成减少工资。暂且不管这个规章是多么荒诞，如果想要一个SQL 语句实现这个功能的话，我们需要用到Case函数。代码如下:&nbsp;<br />
<br />
UPDATE Personnel&nbsp;<br />
SET salary = CASE WHEN salary &gt;= 5000&nbsp;<br />
　&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN salary * 0.9&nbsp;<br />
WHEN salary &gt;= 2000 AND salary &lt; 4600&nbsp;<br />
THEN salary * 1.15&nbsp;<br />
ELSE salary END;&nbsp;<br />
<br />
这里要注意一点，最后一行的ELSE salary是必需的，要是没有这行，不符合这两个条件的人的工资将会被写成NUll,那可就大事不妙了。在Case函数中Else部分的默认值是NULL，这点是需要注意的地方。&nbsp;<br />
这种方法还可以在很多地方使用，比如说变更主键这种累活。&nbsp;<br />
一般情况下，要想把两条数据的Primary key,a和b交换，需要经过临时存储，拷贝，读回数据的三个过程，要是使用Case函数的话，一切都变得简单多了。&nbsp;<br />
p_key col_1 col_2&nbsp;<br />
a 1 张三&nbsp;<br />
b 2 李四&nbsp;<br />
c 3 王五&nbsp;<br />
<br />
<br />
假设有如上数据，需要把主键a和b相互交换。用Case函数来实现的话，代码如下&nbsp;<br />
<br />
UPDATE SomeTable&nbsp;<br />
SET p_key = CASE WHEN p_key = &#39;a&#39;&nbsp;<br />
THEN &#39;b&#39;&nbsp;<br />
WHEN p_key = &#39;b&#39;&nbsp;<br />
THEN &#39;a&#39;&nbsp;<br />
ELSE p_key END&nbsp;<br />
WHERE p_key IN (&#39;a&#39;, &#39;b&#39;);&nbsp;<br />
<br />
同样的也可以交换两个Unique key。需要注意的是，如果有需要交换主键的情况发生，多半是当初对这个表的设计进行得不够到位，建议检查表的设计是否妥当。&nbsp;<br />
<br />
五，两个表数据是否一致的检查。&nbsp;<br />
<br />
Case函数不同于DECODE函数。在Case函数中，可以使用BETWEEN,LIKE,IS NULL,IN,EXISTS等等。比如说使用IN,EXISTS，可以进行子查询，从而 实现更多的功能。&nbsp;<br />
下面具个例子来说明，有两个表，tbl_A,tbl_B，两个表中都有keyCol列。现在我们对两个表进行比较，tbl_A中的keyCol列的数据如果在tbl_B的keyCol列的数据中可以找到， 返回结果&#39;Matched&#39;,如果没有找到，返回结果&#39;Unmatched&#39;。&nbsp;<br />
要实现下面这个功能，可以使用下面两条语句&nbsp;<br />
<br />
--使用IN的时候&nbsp;<br />
SELECT keyCol,&nbsp;<br />
CASE WHEN keyCol IN ( SELECT keyCol FROM tbl_B )&nbsp;<br />
THEN &#39;Matched&#39;&nbsp;<br />
ELSE &#39;Unmatched&#39; END Label&nbsp;<br />
FROM tbl_A;&nbsp;<br />
--使用EXISTS的时候&nbsp;<br />
SELECT keyCol,&nbsp;<br />
CASE WHEN EXISTS ( SELECT * FROM tbl_B&nbsp;<br />
WHERE tbl_A.keyCol = tbl_B.keyCol )&nbsp;<br />
THEN &#39;Matched&#39;&nbsp;<br />
ELSE &#39;Unmatched&#39; END Label&nbsp;<br />
FROM tbl_A;&nbsp;<br />
<br />
使用IN和EXISTS的结果是相同的。也可以使用NOT IN和NOT EXISTS，但是这个时候要注意NULL的情况。&nbsp;<br />
<br />
六，在Case函数中使用合计函数&nbsp;<br />
<br />
假设有下面一个表&nbsp;<br />
学号(std_id) 课程ID(class_id) 课程名(class_name) 主修flag（main_class_flg)&nbsp;<br />
100 1 经济学 Y&nbsp;<br />
100 2 历史学 N&nbsp;<br />
200 2 历史学 N&nbsp;<br />
200 3 考古学 Y&nbsp;<br />
200 4 计算机 N&nbsp;<br />
300 4 计算机 N&nbsp;<br />
400 5 化学 N&nbsp;<br />
500 6 数学 N&nbsp;<br />
<br />
有的学生选择了同时修几门课程(100,200)也有的学生只选择了一门课程(300,400,500)。选修多门课程的学生，要选择一门课程作为主修，主修flag里面写入 Y。只选择一门课程的学生，主修flag为N(实际上要是写入Y的话，就没有下面的麻烦事了，为了举例子，还请多多包含)。&nbsp;<br />
现在我们要按照下面两个条件对这个表进行查询&nbsp;<br />
只选修一门课程的人，返回那门课程的ID&nbsp;<br />
选修多门课程的人，返回所选的主课程ID&nbsp;<br />
<br />
简单的想法就是，执行两条不同的SQL语句进行查询。&nbsp;<br />
条件1&nbsp;<br />
<br />
--条件1：只选择了一门课程的学生&nbsp;<br />
SELECT std_id, MAX(class_id) AS main_class&nbsp;<br />
FROM Studentclass&nbsp;<br />
GROUP BY std_id&nbsp;<br />
HAVING COUNT(*) = 1;&nbsp;<br />
<br />
执行结果1&nbsp;<br />
<br />
STD_ID&nbsp;&nbsp; MAIN_class&nbsp;<br />
------&nbsp;&nbsp; ----------&nbsp;<br />
300&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;<br />
400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;<br />
500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;<br />
<br />
条件2&nbsp;<br />
<br />
--条件2：选择多门课程的学生&nbsp;<br />
SELECT std_id, class_id AS main_class&nbsp;<br />
FROM Studentclass&nbsp;<br />
WHERE main_class_flg = &#39;Y&#39; ;&nbsp;<br />
<br />
执行结果2&nbsp;<br />
<br />
STD_ID&nbsp; MAIN_class&nbsp;<br />
------&nbsp; ----------&nbsp;<br />
100&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;<br />
200&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;<br />
<br />
如果使用Case函数，我们只要一条SQL语句就可以解决问题，具体如下所示&nbsp;<br />
<br />
SELECT&nbsp; std_id,&nbsp;<br />
CASE WHEN COUNT(*) = 1&nbsp; --只选择一门课程的学生的情况&nbsp;<br />
THEN MAX(class_id)&nbsp;<br />
ELSE MAX(CASE WHEN main_class_flg = &#39;Y&#39;&nbsp;<br />
THEN class_id&nbsp;<br />
ELSE NULL END&nbsp;<br />
)&nbsp;<br />
END AS main_class&nbsp;<br />
FROM Studentclass&nbsp;<br />
GROUP BY std_id;&nbsp;<br />
<br />
运行结果&nbsp;<br />
<br />
STD_ID&nbsp;&nbsp; MAIN_class&nbsp;<br />
------&nbsp;&nbsp; ----------&nbsp;<br />
100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;<br />
200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;<br />
300&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;<br />
400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;<br />
500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6&nbsp;<br />
<br />
通过在Case函数中嵌套Case函数，在合计函数中使用Case函数等方法，我们可以轻松的解决这个问题。使用Case函数给我们带来了更大的自由度。&nbsp;<br />
最后提醒一下使用Case函数的新手注意不要犯下面的错误&nbsp;<br />
<br />
CASE col_1&nbsp;<br />
WHEN 1&nbsp;&nbsp;&nbsp; 　&nbsp;&nbsp; THEN &#39;Right&#39;&nbsp;<br />
WHEN NULL&nbsp; THEN &#39;Wrong&#39;&nbsp;<br />
END&nbsp;<br />
<br />
在这个语句中When Null这一行总是返回unknown，所以永远不会出现Wrong的情况。因为这句可以替换成WHEN col_1 = NULL，这是一个错误的用法，这个时候我们应该选择用WHEN col_1 IS NULL。</p>

<p>-----------------</p>

<p>举例1：</p>

<p>使用该查询，得出iFavoriteID,iFavUserType ,cUser,iArticleID,dFavoriteTime五个字段的值:<br />
<br />
SELECT iFavoriteID,<br />
CASE WHEN iFavUserType = 0 THEN &#39;新闻管理员&#39;<br />
WHEN iFavUserType = 1 THEN &#39;商家&#39;<br />
WHEN iFavUserType = 2 THEN &#39;会员&#39;<br />
WHEN iFavUserType = 3 THEN &#39;未注册&#39;<br />
WHEN iFavUserType = 4 then &#39;匿名&#39;<br />
END AS iFavUserType, cUser, iArticleID,<br />
CONVERT(nvarchar(100), dFavoriteTime, 111) AS dFavoriteTime FROM dig_favorite</p>

<p>举例2：</p>

<p>SELECT&nbsp;CASE&nbsp;WHEN&nbsp;`MEMBERTYPE`&nbsp;=1<br />
THEN&nbsp;&#39;参赛队员&#39;<br />
ELSE&nbsp;&#39;指导老师&#39;<br />
END&nbsp;FROM&nbsp;`tab_sign_member`<br />
WHERE&nbsp;1</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>--------------------------------------------</p>

<p>下面为您举例说明了三种mysql中case when语句的使用方法，供您参考学习，如果您对<a href="http://database.51cto.com/art/201010/228991.htm">mysql</a>中case when语句使用方面感兴趣的话，不妨一看。</p>

<p>1。</p>

<ol>
	<li>select&nbsp;name, &nbsp;</li>
	<li>&nbsp;case&nbsp; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;birthday&lt;&#39;1981&#39;&nbsp;then&nbsp;&#39;old&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;birthday&gt;&#39;1988&#39;&nbsp;then&nbsp;&#39;yong&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&#39;ok&#39;&nbsp;END&nbsp;YORN &nbsp;</li>
	<li>from&nbsp;lee;&nbsp;</li>
</ol>

<p>2。</p>

<ol>
	<li>select&nbsp;NAME, &nbsp;</li>
	<li>&nbsp;case&nbsp;name &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&#39;sam&#39;&nbsp;then&nbsp;&#39;yong&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;&#39;lee&#39;&nbsp;then&nbsp;&#39;handsome&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&#39;good&#39;&nbsp;end &nbsp;</li>
	<li>from&nbsp;lee;&nbsp;</li>
</ol>

<p>当然了case when语句还可以复合</p>

<p>3。</p>

<ol>
	<li>select&nbsp;name,birthday, &nbsp;</li>
	<li>&nbsp;case&nbsp; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;birthday&gt;&#39;1983&#39;&nbsp;then&nbsp;&#39;yong&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;name=&#39;lee&#39;&nbsp;then&nbsp;&#39;handsome&#39; &nbsp;</li>
	<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&#39;just&nbsp;so&nbsp;so&nbsp;&#39;&nbsp;end &nbsp;</li>
	<li>from&nbsp;lee; &nbsp;</li>
</ol>

<h2>实际使用</h2>

<h3>多表关联的case when 查询</h3>

<p>SELECT<br />
&nbsp;&nbsp; &nbsp;CASE&nbsp;<br />
&nbsp; WHEN(!ISNULL(a_b.`name`)) THEN a_b.`name`<br />
&nbsp; WHEN (!ISNULL(a_c.`name`)) THEN a_c.`name`<br />
&nbsp; ELSE 0&nbsp;<br />
&nbsp; END AS &quot;name&quot;<br />
&nbsp;&nbsp; &nbsp;FROM<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;a<br />
&nbsp;&nbsp; &nbsp;LEFT JOIN a_b ON a.id = a_b.id_a<br />
&nbsp;&nbsp; &nbsp;LEFT JOIN a_c ON a.id = a_c.id_a;</p>

<h3>建表语句：</h3>

<h3>主表 a</h3>

<p>SET FOREIGN_KEY_CHECKS=0;</p>

<p>DROP TABLE IF EXISTS `a`;<br />
CREATE TABLE `a` (<br />
&nbsp; `id` varchar(32) NOT NULL,<br />
&nbsp; `name` varchar(32) DEFAULT NULL,<br />
&nbsp; `class` varchar(32) DEFAULT NULL,<br />
&nbsp; `age` int(11) DEFAULT NULL,<br />
&nbsp; `birthday` datetime DEFAULT NULL,<br />
&nbsp; `has_del` tinyint(4) DEFAULT NULL,<br />
&nbsp; PRIMARY KEY (`id`)<br />
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>

<p>INSERT INTO `a` VALUES (&#39;001&#39;, &#39;name001&#39;, &#39;class001&#39;, null, &#39;1990-09-09 00:00:00&#39;, &#39;0&#39;);<br />
INSERT INTO `a` VALUES (&#39;002&#39;, &#39;name002&#39;, &#39;class002&#39;, &#39;20&#39;, &#39;1990-09-05 00:00:00&#39;, &#39;0&#39;);</p>

<h3>关联表 a_b</h3>

<p>DROP TABLE IF EXISTS `a_b`;<br />
CREATE TABLE `a_b` (<br />
&nbsp; `id` varchar(32) NOT NULL,<br />
&nbsp; `id_a` varchar(32) DEFAULT NULL,<br />
&nbsp; `name` varchar(32) DEFAULT NULL,<br />
&nbsp; PRIMARY KEY (`id`)<br />
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>

<p>INSERT INTO `a_b` VALUES (&#39;001&#39;, &#39;001&#39;, &#39;name_b_001&#39;);</p>

<h3>关联表 a_c</h3>

<p>DROP TABLE IF EXISTS `a_c`;<br />
CREATE TABLE `a_c` (<br />
&nbsp; `id` varchar(32) NOT NULL,<br />
&nbsp; `id_a` varchar(32) DEFAULT NULL,<br />
&nbsp; `name` varchar(32) DEFAULT NULL,<br />
&nbsp; PRIMARY KEY (`id`)<br />
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>

<p>INSERT INTO `a_c` VALUES (&#39;002&#39;, &#39;002&#39;, &#39;name_c_002&#39;);</p>
