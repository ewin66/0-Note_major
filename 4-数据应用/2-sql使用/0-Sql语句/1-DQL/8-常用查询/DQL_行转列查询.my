<h1>使用到行转列的统计查询</h1>

<h2>使用max 和 case when做行转列&nbsp; &nbsp;</h2>

<p><strong>MAX(case T.typeid when &#39;0a1eec7fa7444856984be054c485cfd3&#39; then T.account else 0 end) &#39;scoreFee&#39;,<br />
MAX(case T.typeid when &#39;1e98bfd9adbd41bea509c987887017e2&#39; then T.account else 0 end) &#39;examFee&#39;,</strong></p>

<h2>测试数据</h2>

<p>发票1：</p>

<p>finance_invoice id 001 userid 001&nbsp;</p>

<p>finance_invoice_order id 001 invoice_id 001 order_id 001</p>

<p>finance_invoice_order id 002 invoice_id 001 order_id 002</p>

<p>finance_invoice_order id 003 invoice_id 001 order_id 003</p>

<p>finance_order id 001 userid 001 account 46</p>

<p>finance_order id 002 userid 001 account 50</p>

<p>finance_order id 003 userid 001 account 23</p>

<p>发票2：</p>

<p>finance_invoice id 002 userid 002&nbsp;</p>

<p>finance_invoice_order id 004 invoice_id 002 order_id 001</p>

<p>finance_invoice_order id 005 invoice_id 002 order_id 002</p>

<p>finance_invoice_order id 006 invoice_id 002 order_id 003</p>

<p>finance_order id 004 userid 002 account 10</p>

<p>finance_order id 005 userid 002 account 20</p>

<p>finance_order id 006 userid 002 account 15</p>

<h2>统计求和查询：</h2>

<p>&nbsp;&nbsp; &nbsp;select userid ,sum(account ) as accounts from finance_order where userid = &#39;002&#39;&nbsp;</p>

<h2>简单的左关联查询</h2>

<p>&nbsp; &nbsp; select * from finance_invoice_order IO left join finance_invoice I on IO.invoice_id = I.id left join finance_order O on IO.order_id = O.id;</p>

<h2><br />
多条件分组查询</h2>

<p>&nbsp; &nbsp; select&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; O.userid,<br />
&nbsp; &nbsp; &nbsp; &nbsp; O.pay_type,<br />
&nbsp; &nbsp; &nbsp; &nbsp; sum(account)&nbsp;<br />
&nbsp; &nbsp; from finance_invoice_order IO&nbsp;<br />
&nbsp; &nbsp; left join finance_invoice I on IO.invoice_id = I.id&nbsp;<br />
&nbsp; &nbsp; left join finance_order O on IO.order_id = O.id&nbsp;<br />
&nbsp; &nbsp; group by O.pay_type,O.userid&nbsp;</p>

<p>&nbsp; &nbsp; userid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pay_type &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sum(account)<br />
&nbsp; &nbsp; 001 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 学分费 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 40.00<br />
&nbsp; &nbsp; 002 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 学分费 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50.00<br />
&nbsp; &nbsp; 001 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 考试费 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90.00<br />
&nbsp; &nbsp; 002 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 考试费 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 25.00</p>

<h2>使用 case when &nbsp;进行多条件分组的 部分统计&nbsp;</h2>

<p>&nbsp; &nbsp; select<br />
&nbsp; &nbsp; &nbsp; &nbsp; S.name,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.userid,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.account,<br />
&nbsp; &nbsp; &nbsp; &nbsp; MAX(case T.pay_type when &#39;考试费&#39; then T.account else 0 end) &#39;scoreFee&#39;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; MAX(case T.pay_type when &#39;学分费&#39; then T.account else 0 end) &#39;examFee&#39;<br />
&nbsp; &nbsp; from (<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; select&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; O.userid,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; O.pay_type,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.id,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum(O.account) account<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; from finance_invoice_order IO<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left join finance_order O on IO.order_id = O.id<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; left join finance_invoice I on IO.invoice_id = I.id<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; group by O.pay_type,O.userid<br />
&nbsp; &nbsp; &nbsp; &nbsp; ) T<br />
&nbsp; &nbsp; left join base_stubase S on T.userid = S.id<br />
&nbsp; &nbsp; group by T.userid</p>

<p>&nbsp;</p>

<p>&nbsp; &nbsp; name &nbsp; &nbsp;userid &nbsp; &nbsp; &nbsp; &nbsp;scoreFee &nbsp; &nbsp; examFee &nbsp; &nbsp; &nbsp;<br />
&nbsp; &nbsp; tom&nbsp; &nbsp; &nbsp;&nbsp;001&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 40.00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;90.00 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; cat&nbsp; &nbsp; &nbsp; &nbsp; 002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 50.00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;25.00 s &nbsp; &nbsp; &nbsp;</p>

<p>&nbsp;</p>

<h2>在江开数据库上练习</h2>

<p>select * from finance_invoice_order IO left join finance_invoice I on IO.invoice_id = I.id left join finance_order O on IO.order_id = O.id;</p>

<p>select O.schoolroll_id,O.pay_type_id,sum(pay_account) from finance_invoice_order IO left join finance_invoice I on IO.invoice_id = I.id left join finance_order O on IO.order_id = O.id group by O.pay_type_id,O.schoolroll_id&nbsp;</p>

<p>select &nbsp;T.schoolroll_id as schoolrollId,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.invoice_id as invoiceId,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.export_batch as exportBatch,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.has_export as &quot;hasExport&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.invoice_time as &quot;invoiceTime&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; S.name as &quot;stuName&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; R.student_no as &quot;schoolrollNo&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; P.id as &quot;pointId&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; P.point_name as &quot;pointName&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; P.point_code as &quot;pointCode&quot;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; MAX(case T.typeid when &#39;0a1eec7fa7444856984be054c485cfd3&#39; then T.account else 0 end) &#39;scoreFee&#39;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; MAX(case T.typeid when &#39;1e98bfd9adbd41bea509c987887017e2&#39; then T.account else 0 end) &#39;examFee&#39;,<br />
&nbsp; &nbsp; &nbsp; &nbsp; T.payment_amount as paymentAmount<br />
from (<br />
&nbsp; &nbsp; &nbsp; &nbsp; select&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; O.schoolroll_id,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; O.pay_type_id typeid,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.id invoice_id,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.point_id point_id,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.export_batch,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.has_export,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.invoice_time,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.has_del,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I.payment_amount payment_amount,<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum(pay_account) account&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; from finance_invoice_order IO&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; left join finance_invoice I on IO.invoice_id = I.id&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; left join finance_order O on IO.order_id = O.id&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; group by O.pay_type_id,O.schoolroll_id) T<br />
left join roll_schoolroll R on T.schoolroll_id = R.id<br />
left join roll_stu_base S on R.stu_base_id = S.id<br />
left join sys_point P on T.point_id = P.id<br />
WHERE T.HAS_DEL = 0<br />
and &nbsp;T.schoolroll_id = &#39;2f8eb64ad1f84e05aced94ee561bcb7d&#39;<br />
group by &nbsp;T.schoolroll_id<br />
having &nbsp;T.schoolroll_id = &#39;2f8eb64ad1f84e05aced94ee561bcb7d&#39;</p>

<p>&nbsp;</p>

<h2>单表汇总再行转列查询</h2>

<p>单纯的查询order表，然后按用户userid汇总，再行转列。</p>

<h3>多条件分组查询</h3>

<p>select&nbsp;<br />
O.userid,<br />
O.pay_type,<br />
sum(O.account) account<br />
from finance_order O&nbsp;<br />
group by O.pay_type,O.userid</p>

<p>执行结果：</p>

<p>userid pay_type account</p>

<p>001&nbsp; &nbsp; &nbsp;学分费&nbsp; &nbsp; &nbsp; 40<br />
002&nbsp; &nbsp; &nbsp;学分费&nbsp; &nbsp; &nbsp; 50<br />
001&nbsp; &nbsp; &nbsp;考试费&nbsp; &nbsp; &nbsp; 90<br />
002&nbsp; &nbsp; &nbsp;考试费&nbsp; &nbsp; &nbsp; 25</p>

<h2>简单行转列</h2>

<p>SELECT<br />
&nbsp;T.userid,<br />
&nbsp;sum(T.account) account,<br />
&nbsp;MAX(case T.pay_type when &#39;考试费&#39; then T.account else 0 end) &#39;scoreFee&#39;,<br />
&nbsp;MAX(case T.pay_type when &#39;学分费&#39; then T.account else 0 end) &#39;examFee&#39;<br />
FROM<br />
(select&nbsp;<br />
O.userid,<br />
O.pay_type,<br />
sum(O.account) account<br />
from finance_order O&nbsp;<br />
group by O.pay_type,O.userid<br />
) T<br />
&nbsp;group by T.userid</p>

<p>查询结果：</p>

<table>
	<tbody>
		<tr>
			<td style="width:100px">userid</td>
			<td style="width:80px">account</td>
			<td style="width:100px">scoreFee</td>
			<td style="width:100px">examFee</td>
		</tr>
		<tr>
			<td>001</td>
			<td>130</td>
			<td>90</td>
			<td>40</td>
		</tr>
		<tr>
			<td>002</td>
			<td>75</td>
			<td>25</td>
			<td>50</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<h2>Mysql case when 实现行转列时为什么要用max()或者其他聚合函数</h2>

<p><a href="http://www.zuidaima.com/question/2051229414231040.htm" target="_blank">mysql中的case when语句查询结果问题</a>&nbsp;<br />
原始数据：&nbsp;<br />
<img alt="原始数据" src="http://img.blog.csdn.net/20180124140214098?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" />&nbsp;<br />
不加max进行case when&nbsp;<br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140303220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" />&nbsp;<br />
加max:&nbsp;<br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140245082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" />&nbsp;<br />
很明显两次结果不同，不加max结果不对，熟悉分组聚合的同学应该一下就明白了这里还是进行下说明为什么要加max,这里直接采用这位网友的答案：</p>

<p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140536481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140505812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140629872?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140652855?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124140855306?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
另外的解释：&nbsp;<br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124141003407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /></p>

<p>这里相信大家都知道了为什么要加聚合函数max（），min()等等，是因为分组函数导致的，跟case when没有很大关系，分组函数一定和聚合函数一同存在，要不然你想，比如上述数据，按照名字分组后，每个组内都有三个数据，而展示的时候就只展示一条，所以必须从中选择一条展示所以才出现了上述数据不完全正确状况，所以以后大家在使用分组函数时一定要使用聚合函数<a href="https://www.cnblogs.com/geaozhang/p/6745147.html" target="_blank">SQL分组和聚合</a>&nbsp;<br />
<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124141821316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" /><br />
这里相信大家会有些不理解，特别是新手，对于 &ldquo;出现在SELECT子句中的单独的列，必须出现在GROUP BY子句中作为分组列&rdquo;特别是这一行要求是大部分新手难以理解的，为什么一定要求出现在SELECT子句中的单独的列，必须出现在GROUP BY子句中作为分组列呢？大家结合刚刚解决问题的思路去向，如果是出现在GROUP BY子句中的字段，当我们去select时列值一定是唯一的。例如<img alt="这里写图片描述" src="http://img.blog.csdn.net/20180124142218161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDE4MDUwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title="" />&nbsp;<br />
这个是按照姓名分组的，我们去在select姓名，数据库会选择按照姓名分组后的一条记录显示，因为我们就是按照姓名分组的所以选择任何一条数据的姓名列值都是相同的，例如图中的&lsquo;张三&rsquo;，但是为啥不出现在GROUP BY子句中的字段不能选择呢，比如&lsquo;语文&rsquo;&lsquo;数学&rsquo;字段，因为他们的记录值可能是不一样的，但是显示的时候只能取一条，所以取到的值可能正确也可能不正确，可能是0也可能是83，相信大家结合例子去理解这个要求已经明白了为什么要这样，以后再写的时候也能少踩坑，希望对大家有帮助。</p>

<p>&nbsp;</p>
