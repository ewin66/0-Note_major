<p>Case具有两种格式。简单Case函数和Case搜索函数。</p>

<pre>
--简单Case函数
CASE sex
         WHEN &#39;1&#39; THEN &#39;男&#39;
         WHEN &#39;2&#39; THEN &#39;女&#39;
ELSE &#39;其他&#39; END
--Case搜索函数
CASE WHEN sex = &#39;1&#39; THEN &#39;男&#39;
         WHEN sex = &#39;2&#39; THEN &#39;女&#39;
ELSE &#39;其他&#39; END
</pre>

<p>这两种方式，可以实现相同的功能。简单Case函数的写法相对比较简洁，但是和Case搜索函数相比，功能方面会有些限制，比如写判断式。&nbsp;<br />
还有一个需要注意的问题，Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。</p>

<pre>
--比如说，下面这段SQL，你永远无法得到&ldquo;第二类&rdquo;这个结果
CASE WHEN col_1 IN ( &#39;a&#39;, &#39;b&#39;) THEN &#39;第一类&#39;
         WHEN col_1 IN (&#39;a&#39;)       THEN &#39;第二类&#39;
ELSE&#39;其他&#39; END</pre>

<p>下面我们来看一下，使用Case函数都能做些什么事情。&nbsp;<br />
<br />
<strong>一，已知数据按照另外一种方式进行分组，分析。</strong>&nbsp;<br />
<br />
有如下数据:(为了看得更清楚，我并没有使用国家代码，而是直接用国家名作为Primary Key)</p>

<table>
	<tbody>
		<tr>
			<td>国家（country）</td>
			<td>人口（population）</td>
		</tr>
		<tr>
			<td>中国</td>
			<td>600</td>
		</tr>
		<tr>
			<td>美国</td>
			<td>100</td>
		</tr>
		<tr>
			<td>加拿大</td>
			<td>100</td>
		</tr>
		<tr>
			<td>英国</td>
			<td>200</td>
		</tr>
		<tr>
			<td>法国</td>
			<td>300</td>
		</tr>
		<tr>
			<td>日本</td>
			<td>250</td>
		</tr>
		<tr>
			<td>德国</td>
			<td>200</td>
		</tr>
		<tr>
			<td>墨西哥</td>
			<td>50</td>
		</tr>
		<tr>
			<td>印度</td>
			<td>250</td>
		</tr>
	</tbody>
</table>

<p><br />
根据这个国家人口数据，统计亚洲和北美洲的人口数量。应该得到下面这个结果。</p>

<table>
	<tbody>
		<tr>
			<td>洲</td>
			<td>人口</td>
		</tr>
		<tr>
			<td>亚洲</td>
			<td>1100</td>
		</tr>
		<tr>
			<td>北美洲</td>
			<td>250</td>
		</tr>
		<tr>
			<td>其他</td>
			<td>700</td>
		</tr>
	</tbody>
</table>

<p><br />
想要解决这个问题，你会怎么做？生成一个带有洲Code的View，是一个解决方法，但是这样很难动态的改变统计的方式。&nbsp;<br />
如果使用Case函数，SQL代码如下:</p>

<pre>
SELECT  SUM(population),
        CASE country
                WHEN &#39;中国&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;印度&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;日本&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;美国&#39;     THEN &#39;北美洲&#39;
                WHEN &#39;加拿大&#39;  THEN &#39;北美洲&#39;
                WHEN &#39;墨西哥&#39;  THEN &#39;北美洲&#39;
        ELSE &#39;其他&#39; END
FROM    Table_A
GROUP BY CASE country
                WHEN &#39;中国&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;印度&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;日本&#39;     THEN &#39;亚洲&#39;
                WHEN &#39;美国&#39;     THEN &#39;北美洲&#39;
                WHEN &#39;加拿大&#39;  THEN &#39;北美洲&#39;
                WHEN &#39;墨西哥&#39;  THEN &#39;北美洲&#39;
        ELSE &#39;其他&#39; END;
</pre>

<p>同样的，我们也可以用这个方法来判断工资的等级，并统计每一等级的人数。SQL代码如下:</p>

<pre>
SELECT
        CASE WHEN salary &lt;= 500 THEN &#39;1&#39;
             WHEN salary &gt; 500 AND salary &lt;= 600  THEN &#39;2&#39;
             WHEN salary &gt; 600 AND salary &lt;= 800  THEN &#39;3&#39;
             WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &#39;4&#39;
        ELSE NULL END salary_class,
        COUNT(*)
FROM    Table_A
GROUP BY
        CASE WHEN salary &lt;= 500 THEN &#39;1&#39;
             WHEN salary &gt; 500 AND salary &lt;= 600  THEN &#39;2&#39;
             WHEN salary &gt; 600 AND salary &lt;= 800  THEN &#39;3&#39;
             WHEN salary &gt; 800 AND salary &lt;= 1000 THEN &#39;4&#39;
        ELSE NULL END;
</pre>

<p><strong>二，用一个SQL语句完成不同条件的分组。</strong>&nbsp;<br />
<br />
有如下数据</p>

<table id="Table1">
	<tbody>
		<tr>
			<td>国家（country）</td>
			<td>性别（sex）</td>
			<td>人口（population）</td>
		</tr>
		<tr>
			<td>中国</td>
			<td>1</td>
			<td>340</td>
		</tr>
		<tr>
			<td>中国</td>
			<td>2</td>
			<td>260</td>
		</tr>
		<tr>
			<td>美国</td>
			<td>1</td>
			<td>45</td>
		</tr>
		<tr>
			<td>美国</td>
			<td>2</td>
			<td>55</td>
		</tr>
		<tr>
			<td>加拿大</td>
			<td>1</td>
			<td>51</td>
		</tr>
		<tr>
			<td>加拿大</td>
			<td>2</td>
			<td>49</td>
		</tr>
		<tr>
			<td>英国</td>
			<td>1</td>
			<td>40</td>
		</tr>
		<tr>
			<td>英国</td>
			<td>2</td>
			<td>60</td>
		</tr>
	</tbody>
</table>

<p><br />
按照国家和性别进行分组，得出结果如下</p>

<table id="Table2">
	<tbody>
		<tr>
			<td>国家</td>
			<td>男</td>
			<td>女</td>
		</tr>
		<tr>
			<td>中国</td>
			<td>340</td>
			<td>260</td>
		</tr>
		<tr>
			<td>美国</td>
			<td>45</td>
			<td>55</td>
		</tr>
		<tr>
			<td>加拿大</td>
			<td>51</td>
			<td>49</td>
		</tr>
		<tr>
			<td>英国</td>
			<td>40</td>
			<td>60</td>
		</tr>
	</tbody>
</table>

<p><br />
普通情况下，用UNION也可以实现用一条语句进行查询。但是那样增加消耗(两个Select部分)，而且SQL语句会比较长。&nbsp;<br />
下面是一个是用Case函数来完成这个功能的例子</p>

<pre>
SELECT country,
       SUM( CASE WHEN sex = &#39;1&#39; THEN 
                      population ELSE 0 END),  --男性人口
       SUM( CASE WHEN sex = &#39;2&#39; THEN 
                      population ELSE 0 END)   --女性人口
FROM  Table_A
GROUP BY country;
</pre>

<p>这样我们使用Select，完成对二维表的输出形式，充分显示了Case函数的强大。&nbsp;<br />
<br />
<strong>三，在Check中使用Case函数。</strong>&nbsp;<br />
<br />
在Check中使用Case函数在很多情况下都是非常不错的解决方法。可能有很多人根本就不用Check，那么我建议你在看过下面的例子之后也尝试一下在SQL中使用Check。&nbsp;<br />
下面我们来举个例子&nbsp;<br />
公司A，这个公司有个规定，女职员的工资必须高于1000块。如果用Check和Case来表现的话，如下所示</p>

<pre>
CONSTRAINT check_salary CHECK
           ( CASE WHEN sex = &#39;2&#39;
                  THEN CASE WHEN salary &gt; 1000
                        THEN 1 ELSE 0 END
                  ELSE 1 END = 1 )</pre>

<p>如果单纯使用Check，如下所示</p>

<pre>
CONSTRAINT check_salary CHECK
           ( sex = &#39;2&#39; AND salary &gt; 1000 )</pre>

<p>女职员的条件倒是符合了，男职员就无法输入了。</p>

<p><strong>四，根据条件有选择的UPDATE。</strong>&nbsp;<br />
<br />
例，有如下更新条件</p>

<ol>
	<li>工资5000以上的职员，工资减少10%</li>
	<li>工资在2000到4600之间的职员，工资增加15%</li>
</ol>

<p>很容易考虑的是选择执行两次UPDATE语句，如下所示</p>

<pre>
--条件1
UPDATE Personnel
SET salary = salary * 0.9
WHERE salary &gt;= 5000;
--条件2
UPDATE Personnel
SET salary = salary * 1.15
WHERE salary &gt;= 2000 AND salary &lt; 4600;
</pre>

<p>但是事情没有想象得那么简单，假设有个人工资5000块。首先，按照条件1，工资减少10%，变成工资4500。接下来运行第二个SQL时候，因为 这个人 的工资是4500在2000到4600的范围之内， 需增加15%，最后这个人的工资结果是5175,不但没有减少，反而增加了。如果要是反过来执行，那么工资4600的人相反会变成减少工资。暂且不管这个 规章是多么荒诞，如果想要一个SQL 语句实现这个功能的话，我们需要用到Case函数。代码如下:</p>

<pre>
UPDATE Personnel
SET salary = CASE WHEN salary &gt;= 5000
　            THEN salary * 0.9
WHEN salary &gt;= 2000 AND salary &lt; 4600
THEN salary * 1.15
ELSE salary END;</pre>

<p>这里要注意一点，最后一行的ELSE salary是必需的，要是没有这行，不符合这两个条件的人的工资将会被写成NUll,那可就大事不妙了。在Case函数中Else部分的默认值是NULL，这点是需要注意的地方。&nbsp;<br />
这种方法还可以在很多地方使用，比如说变更主键这种累活。&nbsp;<br />
一般情况下，要想把两条数据的Primary key,a和b交换，需要经过临时存储，拷贝，读回数据的三个过程，要是使用Case函数的话，一切都变得简单多了。</p>

<table>
	<tbody>
		<tr>
			<td>p_key</td>
			<td>col_1</td>
			<td>col_2</td>
		</tr>
		<tr>
			<td>a</td>
			<td>1</td>
			<td>张三</td>
		</tr>
		<tr>
			<td>b</td>
			<td>2</td>
			<td>李四</td>
		</tr>
		<tr>
			<td>c</td>
			<td>3</td>
			<td>王五</td>
		</tr>
	</tbody>
</table>

<p><br />
<br />
假设有如上数据，需要把主键<code>a</code>和<code>b</code>相互交换。用Case函数来实现的话，代码如下</p>

<pre>
UPDATE SomeTable
SET p_key = CASE WHEN p_key = &#39;a&#39;
THEN &#39;b&#39;
WHEN p_key = &#39;b&#39;
THEN &#39;a&#39;
ELSE p_key END
WHERE p_key IN (&#39;a&#39;, &#39;b&#39;);
</pre>

<p>同样的也可以交换两个Unique key。需要注意的是，如果有需要交换主键的情况发生，多半是当初对这个表的设计进行得不够到位，建议检查表的设计是否妥当。&nbsp;<br />
<br />
<strong>五，两个表数据是否一致的检查。</strong>&nbsp;<br />
<br />
Case函数不同于DECODE函数。在Case函数中，可以使用BETWEEN,LIKE,IS NULL,IN,EXISTS等等。比如说使用IN,EXISTS，可以进行子查询，从而 实现更多的功能。&nbsp;<br />
下 面具个例子来说明，有两个表，tbl_A,tbl_B，两个表中都有keyCol列。现在我们对两个表进行比较，tbl_A中的keyCol列的数据如果 在tbl_B的keyCol列的数据中可以找到， 返回结果&#39;Matched&#39;,如果没有找到，返回结果&#39;Unmatched&#39;。&nbsp;<br />
要实现下面这个功能，可以使用下面两条语句</p>

<pre>
--使用IN的时候
SELECT keyCol,
CASE WHEN keyCol IN ( SELECT keyCol FROM tbl_B )
THEN &#39;Matched&#39;
ELSE &#39;Unmatched&#39; END Label
FROM tbl_A;
--使用EXISTS的时候
SELECT keyCol,
CASE WHEN EXISTS ( SELECT * FROM tbl_B
WHERE tbl_A.keyCol = tbl_B.keyCol )
THEN &#39;Matched&#39;
ELSE &#39;Unmatched&#39; END Label
FROM tbl_A;
</pre>

<p>使用IN和EXISTS的结果是相同的。也可以使用NOT IN和NOT EXISTS，但是这个时候要注意NULL的情况。&nbsp;<br />
<br />
<strong>六，在Case函数中使用合计函数</strong>&nbsp;<br />
<br />
假设有下面一个表</p>

<table>
	<tbody>
		<tr>
			<td>学号(std_id)</td>
			<td>课程ID(class_id)</td>
			<td>课程名(class_name)</td>
			<td>主修flag（main_class_flg)</td>
		</tr>
		<tr>
			<td>100</td>
			<td>1</td>
			<td>经济学</td>
			<td>Y</td>
		</tr>
		<tr>
			<td>100</td>
			<td>2</td>
			<td>历史学</td>
			<td>N</td>
		</tr>
		<tr>
			<td>200</td>
			<td>2</td>
			<td>历史学</td>
			<td>N</td>
		</tr>
		<tr>
			<td>200</td>
			<td>3</td>
			<td>考古学</td>
			<td>Y</td>
		</tr>
		<tr>
			<td>200</td>
			<td>4</td>
			<td>计算机</td>
			<td>N</td>
		</tr>
		<tr>
			<td>300</td>
			<td>4</td>
			<td>计算机</td>
			<td>N</td>
		</tr>
		<tr>
			<td>400</td>
			<td>5</td>
			<td>化学</td>
			<td>N</td>
		</tr>
		<tr>
			<td>500</td>
			<td>6</td>
			<td>数学</td>
			<td>N</td>
		</tr>
	</tbody>
</table>

<p><br />
有的学生选择了同时修几门课程 (100,200)也有的学生只选择了一门课程(300,400,500)。选修多门课程的学生，要选择一门课程作为主修，主修flag里面写入 Y。只选择一门课程的学生，主修flag为N(实际上要是写入Y的话，就没有下面的麻烦事了，为了举例子，还请多多包含)。&nbsp;<br />
现在我们要按照下面两个条件对这个表进行查询</p>

<ol>
	<li>只选修一门课程的人，返回那门课程的ID</li>
	<li>选修多门课程的人，返回所选的主课程ID</li>
</ol>

<p><br />
简单的想法就是，执行两条不同的SQL语句进行查询。&nbsp;<br />
条件1</p>

<pre>
--条件1：只选择了一门课程的学生
SELECT std_id, MAX(class_id) AS main_class
FROM Studentclass
GROUP BY std_id
HAVING COUNT(*) = 1;</pre>

<p>执行结果1</p>

<pre>
STD_ID   MAIN_class
------   ----------
300      4
400      5
500      6
</pre>

<p><br />
条件2</p>

<pre>
--条件2：选择多门课程的学生
SELECT std_id, class_id AS main_class
FROM Studentclass
WHERE main_class_flg = &#39;Y&#39; ;</pre>

<p><br />
如果使用Case函数，我们只要一条SQL语句就可以解决问题，具体如下所示</p>

<pre>
SELECT  std_id,
CASE WHEN COUNT(*) = 1  --只选择一门课程的学生的情况
THEN MAX(class_id)
ELSE MAX(CASE WHEN main_class_flg = &#39;Y&#39;
THEN class_id
ELSE NULL END
)
END AS main_class
FROM Studentclass
GROUP BY std_id;</pre>

<p>运行结果</p>

<pre>
STD_ID   MAIN_class
------   ----------
100      1
200      3
300      4
400      5
500      6</pre>

<p>通过在Case函数中嵌套Case函数，在合计函数中使用Case函数等方法，我们可以轻松的解决这个问题。使用Case函数给我们带来了更大的自由度。&nbsp;<br />
最后提醒一下使用Case函数的新手注意不要犯下面的错误</p>

<pre>
CASE col_1
WHEN 1    　   THEN &#39;Right&#39;
WHEN NULL  THEN &#39;Wrong&#39;
END</pre>

<p>在这个语句中When Null这一行总是返回unknown，所以永远不会出现Wrong的情况。因为这句可以替换成WHEN col_1 = NULL，这是一个错误的用法，这个时候我们应该选择用WHEN col_1 IS NULL。</p>
