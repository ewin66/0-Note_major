<h1>in与exist , not in与not exist 的区别</h1>

<h2>in和exists &nbsp;</h2>

<p>in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。一直以来认为exists比in效率高的说法是不准确的。 &nbsp;<br />
如果查询的两个表大小相当，那么用in和exists差别不大。 &nbsp;<br />
如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in： &nbsp;<br />
例如：表A（小表），表B（大表）1：<strong>select * from A where cc in (select cc from B) &nbsp;</strong><br />
效率低，用到了A表上cc列的索引；<strong>select * from A where exists(select cc from B where cc=A.cc) &nbsp;</strong><br />
效率高，用到了B表上cc列的索引。 &nbsp;<br />
相反的2：select * from B where cc in (select cc from A) &nbsp;<br />
效率高，用到了B表上cc列的索引；select * from B where exists(select cc from A where cc=B.cc) &nbsp;<br />
效率低，用到了A表上cc列的索引。 &nbsp;</p>

<h2>not in 和not exists</h2>

<p>&nbsp;如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。 &nbsp;<br />
&nbsp;&nbsp;<br />
not in 逻辑上不完全等同于not exists，如果你误用了not in，小心你的程序存在致命的BUG： &nbsp;<br />
&nbsp;&nbsp;<br />
请看下面的例子： &nbsp;<br />
create table t1 (c1 number,c2 number); &nbsp;<br />
create table t2 (c1 number,c2 number); &nbsp;<br />
&nbsp;&nbsp;<br />
insert into t1 values (1,2); &nbsp;<br />
insert into t1 values (1,3); &nbsp;<br />
insert into t2 values (1,2); &nbsp;<br />
insert into t2 values (1,null); &nbsp;<br />
&nbsp;&nbsp;<br />
select * from t1 where c2 not in (select c2 from t2); &nbsp;<br />
no rows found &nbsp;<br />
select * from t1 where not exists (select 1 from t2 where t1.c2=t2.c2); &nbsp;<br />
c1 c2 &nbsp;<br />
1 3 &nbsp;<br />
&nbsp;&nbsp;<br />
正如所看到的，not in 出现了不期望的结果集，存在逻辑错误。如果看一下上述两个select语句的执行计划，也会不同。后者使用了hash_aj。 &nbsp;<br />
因此，请尽量不要使用not in(它会调用子查询)，而尽量使用not exists(它会调用关联子查询)。如果子查询中返回的任意一条记录含有空值，则查询将不返回任何记录，正如上面例子所示。 &nbsp;<br />
除非子查询字段有非空限制，这时可以使用not in ,并且也可以通过提示让它使用hasg_aj或merge_aj连接 &nbsp;</p>
