<h1>关于数据库中的join的用法学习</h1>

<p>最终的原因就是我对JOIN的语义还是不太了解，特摘录网上的分析：</p>

<h2>口诀：</h2>

<table>
	<tbody>
		<tr>
			<td style="width:120px">A left join B</td>
			<td style="width:150px">以A为基础</td>
			<td>左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).B表记录不足的地方均为NULL</td>
		</tr>
		<tr>
			<td>A right join B</td>
			<td>以B为基础</td>
			<td>略</td>
		</tr>
		<tr>
			<td>A inner join B</td>
			<td>不以任一个为基础</td>
			<td>只显示符合条件的记录，不以任一个表为基础。</td>
		</tr>
	</tbody>
</table>

<h2>下面是例子分析</h2>

<p>表A记录如下：&nbsp;<br />
aID aNum&nbsp;<br />
1 a20050111&nbsp;<br />
2 a20050112&nbsp;<br />
3 a20050113&nbsp;<br />
4 a20050114&nbsp;<br />
5 a20050115&nbsp;</p>

<p><br />
表B记录如下:&nbsp;<br />
bID bName&nbsp;<br />
1 2006032401&nbsp;<br />
2 2006032402&nbsp;<br />
3 2006032403&nbsp;<br />
4 2006032404&nbsp;<br />
8 2006032408&nbsp;</p>

<p><br />
创建这两个表SQL语句如下：&nbsp;<br />
CREATE TABLE a&nbsp;<br />
aID int( 1 ) AUTO_INCREMENT PRIMARY KEY ,&nbsp;<br />
aNum char( 20 )&nbsp;<br />
)&nbsp;<br />
CREATE TABLE b(&nbsp;<br />
bID int( 1 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,&nbsp;<br />
bName char( 20 )&nbsp;<br />
)&nbsp;</p>

<p><br />
INSERT INTO a&nbsp;<br />
VALUES ( 1, &#39;a20050111&#39; ) , ( 2, &#39;a20050112&#39; ) , ( 3, &#39;a20050113&#39; ) , ( 4, &#39;a20050114&#39; ) , ( 5, &#39;a20050115&#39; ) ;&nbsp;</p>

<p><br />
INSERT INTO b&nbsp;<br />
VALUES ( 1, &#39; 2006032401&#39; ) , ( 2, &#39;2006032402&#39; ) , ( 3, &#39;2006032403&#39; ) , ( 4, &#39;2006032404&#39; ) , ( 8, &#39;2006032408&#39; ) ;&nbsp;</p>

<p><br />
实验如下:&nbsp;</p>

<h2>1.left join(左联接)&nbsp;</h2>

<p>sql语句如下:&nbsp;<br />
SELECT * FROM a&nbsp;<br />
LEFT JOIN b&nbsp;<br />
ON a.aID =b.bID&nbsp;</p>

<p><br />
结果如下:&nbsp;<br />
aID aNum bID bName&nbsp;<br />
1 a20050111 1 2006032401&nbsp;<br />
2 a20050112 2 2006032402&nbsp;<br />
3 a20050113 3 2006032403&nbsp;<br />
4 a20050114 4 2006032404&nbsp;<br />
5 a20050115 NULL NULL&nbsp;<br />
（所影响的行数为 5 行）&nbsp;</p>

<p><br />
结果说明:&nbsp;<br />
left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.&nbsp;<br />
换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).&nbsp;<br />
B表记录不足的地方均为NULL.&nbsp;</p>

<h2>2.right join(右联接)&nbsp;</h2>

<p><br />
sql语句如下:&nbsp;<br />
SELECT * FROM a&nbsp;<br />
RIGHT JOING b&nbsp;<br />
ON a.aID = b.bID&nbsp;</p>

<p><br />
结果如下:&nbsp;<br />
aID aNum bID bName&nbsp;<br />
1 a20050111 1 2006032401&nbsp;<br />
2 a20050112 2 2006032402&nbsp;<br />
3 a20050113 3 2006032403&nbsp;<br />
4 a20050114 4 2006032404&nbsp;<br />
NULL NULL 8 2006032408&nbsp;<br />
（所影响的行数为 5 行）&nbsp;</p>

<p><br />
结果说明:&nbsp;<br />
仔细观察一下,就会发现,和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.&nbsp;</p>

<h2>3.inner join(相等联接或内联接)&nbsp;</h2>

<p>sql语句如下:&nbsp;<br />
SELECT * FROM a&nbsp;<br />
INNER JOIN b&nbsp;<br />
ON a.aID =b.bID&nbsp;</p>

<p><br />
等同于以下SQL句:&nbsp;<br />
SELECT *&nbsp;<br />
FROM a,b&nbsp;<br />
WHERE a.aID = b.bID&nbsp;</p>

<p><br />
结果如下:&nbsp;<br />
aID aNum bID bName&nbsp;<br />
1 a20050111 1 2006032401&nbsp;<br />
2 a20050112 2 2006032402&nbsp;<br />
3 a20050113 3 2006032403&nbsp;<br />
4 a20050114 4 2006032404&nbsp;</p>

<p><br />
结果说明:&nbsp;<br />
很明显,这里只显示出了 A.aID = B.bID的记录.这说明inner join并不以谁为基础,它只显示符合条件的记录.&nbsp;<br />
LEFT JOIN操作用于在任何的 FROM 子句中，&nbsp;</p>

<p><br />
组合来源表的记录。使用 LEFT JOIN 运算来创建一个左边外部联接。左边外部联接将包含了从第一个（左边）开始的两个表中的全部记录，即&nbsp;<br />
使在第二个（右边）表中并没有相符值的记录 （右边没有符合的话就用NULL），RIGHT JOIN也一样。</p>

<p>通俗一点说就是：INNER JOIN 主表和从表都存在的记录才会查出来，OUTER JOIN 如果主表中存在的记录，从表中不存在则用NULL替代</p>

<p><br />
语法：FROM table1 LEFT JOIN table2 ON table1.field1 compopr table2.field2&nbsp;<br />
说明：table1, table2参数用于指定要将记录组合的表的名称。&nbsp;<br />
field1, field2参数指定被联接的字段的名称。且这些字段必须有相同的数据类型及包含相同类型的数据，但它们不需要有相同的&nbsp;<br />
名称。&nbsp;<br />
compopr参数指定关系比较运算符：&quot;=&quot;， &quot;&lt;&quot;， &quot;&gt;&quot;， &quot;&lt;=&quot;， &quot;&gt;=&quot; 或 &quot;&lt;&gt;&quot;。&nbsp;<br />
如果在INNER JOIN操作中要联接包含Memo 数据类型或 OLE Object 数据类型数据的字段，将会发生错误。</p>

<p>&nbsp;</p>

<h2>4.full&nbsp;join(全联接)&nbsp;</h2>

<p>oracle里面可以，但是mysql似乎不支持。</p>

<p>select student.school from student s FULL JOIN studentcourse sc on s.studentid = sc.studentid;</p>

<p>mysql里的替代方法</p>

<pre>
<code>MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法
left join + union(可去除重复数据)+ right join

两张表时：
select * from A left join B on A.id = B.id (where 条件）
union
select *</code><code>from A right join B on A.id = B.id （where条件);</code>
</pre>
