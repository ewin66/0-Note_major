<h1>笛卡尔积、等值联接、自然联接三者之间区别</h1>

<p>笛卡尔积对两个关系R和S进行操作，产生的关系中元组个数为两个关系中元组个数之积。等值联接则是在笛卡尔积的结果上再进行选择操作，挑选关系第i个分量与第(r+j)个分量值相等的元组；自然连接则是在等值联接(以公共属性值相等为条件)的基础上再行投影操作，去掉S中的公共属性列，当两个关系没有公共属性时，自然连接就转化成笛卡尔积</p>

<p>内连接分：等值连接 不等值连接 自然连接</p>

<p>外连接分：左外连接 右外连接</p>

<p>交叉连接： cross join 笛卡尔积&nbsp;&nbsp;</p>

<h2>连接 (SQL)</h2>

<p>维基百科，自由的百科全书</p>

<p><a href="http://zh.wikipedia.org/wiki/SQL" target="_blank" title="SQL">SQL</a>&nbsp;的连接(<code>JOIN</code>)语句将数据库中的两个或多个表组合起来.<sup><a href="http://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL)#cite_note-0" target="_blank">[1]</a></sup>&nbsp;由&quot;连接&quot;生成的集合, 可以被保存为表, 或者当成表来使用.&nbsp;<code>JOIN</code>&nbsp;语句的含义是把两张表的属性通过它们的值组合在一起. 基于 ANSI 标准的 SQL 列出了四种&nbsp;<code>JOIN</code>&nbsp;方式: 内连接(<code>INNER</code>), 外连接(<code>OUTER</code>), 左外连接(<code>LEFT</code>), 和右外连接(<code>RIGHT</code>). 在特定的情况下, 一张表(基本表, 视图, 或连接表)可以和自身进行连接, 成为自连接(<em>self-join</em>).</p>

<p>程序员用&nbsp;<code>JOIN</code>&nbsp;<a href="http://zh.wikipedia.org/wiki/%E8%B0%93%E8%AF%8D" target="_blank" title="谓词">谓词</a>表示要得到&quot;连接&quot;后的集合. 如果evaluated predicate为真, 组合后的记录就会按照预期的方式生成, 如一个记录集, 或者一张临时表.</p>

<h2>下文中解释&quot;连接&quot;都将用到这里的两张表. 表中的记录(行)用于演示不同类型的&quot;连接&quot;和&quot;连接谓词&quot;的作用. 在下面两张表中,&nbsp;<code>Department.DepartmentID</code>&nbsp;是主键,<code>Employee.DepartmentID</code>&nbsp;是外键.[<a href="http://zh.wikipedia.org/w/index.php?title=%E8%BF%9E%E6%8E%A5_(SQL)&amp;action=edit&amp;section=1" target="_blank" title="编辑段落：示例用表">编辑</a>]示例用表</h2>

<table>
	<caption>雇员表(Employee)</caption>
	<tbody>
		<tr>
			<th>LastName</th>
			<th>DepartmentID</th>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jasper</td>
			<td>NULL</td>
		</tr>
	</tbody>
</table>

<table>
	<caption>部门表(Department)</caption>
	<tbody>
		<tr>
			<th>DepartmentID</th>
			<th>部门</th>
		</tr>
		<tr>
			<td>31</td>
			<td>销售部</td>
		</tr>
		<tr>
			<td>33</td>
			<td>工程部</td>
		</tr>
		<tr>
			<td>34</td>
			<td>书记</td>
		</tr>
		<tr>
			<td>35</td>
			<td>市场部</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>注: &quot;市场部&quot; 目前没有员工列出. 同样, 雇员 &quot;Jasper&quot; 不在 部门表中的任何一个部门.</p>

<h2>内连接</h2>

<p><strong>内连接</strong>(<strong>inner join</strong>)是应用程序中用的普遍的&quot;连接&quot;操作，它一般都是默认的连接类型。内连接基于连接谓词将两张表(如 A 和 B)的列组合在一起，产生新的结果表。查询会将 A 表的每一行和 B 表的每一行进行比较，并找出满足连接谓词的组合。当连接谓词被满足，A 和 B 中匹配的行会按列组合(并排组合)成结果集中的一行。连接产生的结果集，可以定义为首先对两张表做笛卡尔积(交叉连接) -- 将 A 中的每一行和 B 中的每一行组合，然后返回满足连接谓词的记录。实际上 SQL 产品会尽可能用其他方式去实现连接，笛卡尔积运算是非常没效率的.</p>

<p>SQL 定义了两种不同语法方式去表示&quot;连接&quot;。首先是&quot;显式连接符号&quot;，它显式地使用关键字&nbsp;<code>JOIN</code>，其次是&quot;隐式连接符号&quot;，它使用所谓的&quot;隐式连接符号&quot;。隐式连接符号把需要连接的表放到&nbsp;<code>SELECT</code>&nbsp;语句的&nbsp;<code>FROM</code>&nbsp;部分，并用逗号隔开。这样就构成了一个&quot;交叉连接&quot;，<code>WHERE</code>&nbsp;语句可能放置一些过滤谓词(过滤条件)。那些过滤谓词在功能上等价于显式连接符号.</p>

<p>内连接&quot;可以进一步被分为: 相等连接，自然连接，和交叉连接(见下).</p>

<p>程序要应该特别注意连接依据的列可能包含 NULL 值，NULL 值不与任何值匹配(甚至和它本身) -- 除非连接条件中显式地使用&nbsp;<code>IS NULL</code>&nbsp;或&nbsp;<code>IS NOT NULL</code>&nbsp;等谓词.</p>

<p>例如，下面的查询通过 Employee 表和 Department 表共有的属性 DepartmentID 连接两表。在两表 DepartmentID 匹配之处(如连接谓词被满足)，查询将组合两表的<em>LastName</em>，<em>DepartmentID</em>&nbsp;和<em>DepartmentName</em>&nbsp;等列，把它们放到结果表的一行(一条记录)里。当 DepartmentID 不匹配，就不会往结果表中生成任何数据.</p>

<p>显式的内连接实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>INNER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<p>等价于:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee，department&nbsp;<strong>WHERE</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<p>显式的内连接的输出结果:</p>

<table>
	<tbody>
		<tr>
			<th>Employee.LastName</th>
			<th>Employee.DepartmentID</th>
			<th>Department.DepartmentName</th>
			<th>Department.DepartmentID</th>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>书记</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>工程部</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>书记</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>工程部</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>销售部</td>
			<td>31</td>
		</tr>
	</tbody>
</table>

<p><strong>注</strong>&nbsp;雇员 &quot;Jasper&quot; 和部门 &quot;市场部&quot; 都未出现。它们在预期得到的表中没有任何匹配的记录: &quot;Jasper&quot; 没有关联的部门，而号码为35的部门中没有任何雇员。这样，在&quot;连接&quot;后的表中，就没有关于 Jasper 或 市场部的信息了。相对于预期的结果，这个行为可能是一个微妙的臭虫(bug)。外连接可能可以避免这种情况.</p>

<h3>相等链接</h3>

<p>相等连接 (<strong>equi-join</strong>，或&nbsp;<strong>equijoin</strong>)，是比较连接(<em>&theta;连接</em>)的一种特例，它的连接谓词只用了相等比较。使用其他比较操作符(如&nbsp;<code>&lt;</code>)的不是相等连接。前面的查询已经展示了一个相等连接的实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>INNER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<p>SQL 提供了一种可选的简短符号去表达相等连接，它使用&nbsp;<code>USING</code>&nbsp;关键字 (Feature ID F402):</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>INNER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>USING</strong>&nbsp;(DepartmentID)</pre>

<p><code>USING</code>&nbsp;结构并不仅仅是<a href="http://zh.wikipedia.org/wiki/%E8%AF%AD%E6%B3%95%E7%B3%96" target="_blank" title="语法糖">语法糖</a>，上面查询的结果和使用显式谓词得到的查询得到的结果是不同的。特别地，在&nbsp;<code>USING</code>&nbsp;部分列出的列(column)将以只出现一次，且名称无表名修饰.在上面的例子中，将产生单独的名为&nbsp;<code>DepartmentID</code>&nbsp;的列，而不是&nbsp;<code>employee.DepartmentID</code>&nbsp;或&nbsp;<code>department.DepartmentID</code>.</p>

<p><code>USING</code>&nbsp;语句现已被 MySQL，Oracle，PostgreSQL，SQLite，和 DB2/400 等产品支持.</p>

<h3>自然连接</h3>

<p><a href="http://zh.wikipedia.org/w/index.php?title=%E8%87%AA%E7%84%B6%E8%BF%9E%E6%8E%A5&amp;action=edit&amp;redlink=1" target="_blank" title="自然连接（页面不存在）">自然连接</a>比相等连接的进一步特例化。两表做自然连接时，两表中的所有名称相同的列都将被比较，这是隐式的。自然连接得到的结果表中，两表中名称相同的列只出现一次.</p>

<p>上面用于内连接的查询实例可以用自然连接的方式表示如下:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>NATURAL</strong>&nbsp;<strong>JOIN</strong>&nbsp;department</pre>

<p>用了&nbsp;<code>USING</code>&nbsp;语句后，在连接表中，DepartmentID 列只出现一次，且没有表名作前缀:</p>

<table>
	<tbody>
		<tr>
			<th>DepartmentID</th>
			<th>Employee.LastName</th>
			<th>Department.DepartmentName</th>
		</tr>
		<tr>
			<td>34</td>
			<td>Smith</td>
			<td>Clerical</td>
		</tr>
		<tr>
			<td>33</td>
			<td>Jones</td>
			<td>Engineering</td>
		</tr>
		<tr>
			<td>34</td>
			<td>Robinson</td>
			<td>Clerical</td>
		</tr>
		<tr>
			<td>33</td>
			<td>Steinberg</td>
			<td>Engineering</td>
		</tr>
		<tr>
			<td>31</td>
			<td>Rafferty</td>
			<td>Sales</td>
		</tr>
	</tbody>
</table>

<p>在&nbsp;<a href="http://zh.wikipedia.org/wiki/Oracle" target="_blank" title="Oracle">Oracle</a>&nbsp;里用&nbsp;<code>JOIN USING</code>&nbsp;或&nbsp;<code>NATURAL JOIN</code>&nbsp;时，如果两表共有的列的名称前加上某表名作为前缀，则会报编译错误: &quot;ORA-25154: column part of USING clause cannot have qualifier&quot; 或 &quot;ORA-25155: column used in NATURAL join cannot have qualifier&quot;.</p>

<h3>交叉连接</h3>

<p><strong>交叉连接</strong>(<strong>cross join</strong>)，又称<strong><a href="http://zh.wikipedia.org/w/index.php?title=%E7%AC%9B%E5%8D%A1%E5%B0%94%E8%BF%9E%E6%8E%A5&amp;action=edit&amp;redlink=1" target="_blank" title="笛卡尔连接（页面不存在）">笛卡尔连接</a></strong>(<strong>cartesian join</strong>)或<strong><a href="http://zh.wikipedia.org/wiki/%E5%8F%89%E4%B9%98" target="_blank" title="叉乘">叉乘</a></strong>(<strong>Product</strong>)，它是所有类型的内连接的基础。把表视为行记录的集合，交叉连接即返回这两个集合的<a href="http://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF" target="_blank" title="笛卡尔积">笛卡尔积</a>。这其实等价于内连接的链接条件为&quot;永真&quot;，或连接条件不存在.</p>

<p>如果 A 和 B 是两个集合，它们的交叉连接就记为: A &times; B.</p>

<p>用于交叉连接的 SQL 代码在&nbsp;<code><a href="http://zh.wikipedia.org/w/index.php?title=From_(SQL)&amp;action=edit&amp;redlink=1" target="_blank" title="From (SQL)（页面不存在）">FROM</a></code>&nbsp;列出表名，但并不包含任何过滤的连接谓词.</p>

<p>显式的交叉连接实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>CROSS</strong>&nbsp;<strong>JOIN</strong>&nbsp;department</pre>

<p>隐式的交叉连接实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee，department;</pre>

<table>
	<tbody>
		<tr>
			<th>Employee.LastName</th>
			<th>Employee.DepartmentID</th>
			<th>Department.DepartmentName</th>
			<th>Department.DepartmentID</th>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Jasper</td>
			<td>NULL</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Jasper</td>
			<td>NULL</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jasper</td>
			<td>NULL</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
		<tr>
			<td>Jasper</td>
			<td>NULL</td>
			<td>Marketing</td>
			<td>35</td>
		</tr>
	</tbody>
</table>

<p>交叉连接不会应用任何谓词去过滤结果表中的记录。程序员可以用&nbsp;<code>WHERE</code>&nbsp;语句进一步过滤结果集.</p>

<h2>外连接</h2>

<p><a href="http://zh.wikipedia.org/w/index.php?title=%E5%A4%96%E8%BF%9E%E6%8E%A5&amp;action=edit&amp;redlink=1" target="_blank" title="外连接（页面不存在）">外连接</a>并不要求连接的两表的每一条记录在对方表中都一条匹配的记录. 连接表保留所有记录 -- 甚至这条记录没有匹配的记录也要保留. 外连接可依据连接表保留左表, 右表或全部表的行而进一步分为左外连接, 右外连接和全连接.</p>

<p>(在这种情况下<em>left</em>&lt;<em>左</em>&gt; 和&nbsp;<em>right</em>&lt;<em>右</em>&gt; 表示&nbsp;<code>JOIN</code>&nbsp;关键字的两边.)</p>

<p>在标准的 SQL 语言中, 外连接没有隐式的连接符号.</p>

<h3>左外连接</h3>

<p><em>左外连接</em>(<em>left outer join</em>), 亦简称为<strong>左连接</strong>(<strong>left join</strong>), 若 A 和 B 两表进行左外连接, 那么结果表中将包含&quot;左表&quot;(即表 A)的所有记录, 即使那些记录在&quot;右表&quot; B 没有符合连接条件的匹配. 这意味着即使&nbsp;<code>ON</code>&nbsp;语句在 B 中的匹配项是0条, 连接操作还是会返回一条记录, 只不过这条记录的中来自于 B 的每一列的值都为 NULL. 这意味着<strong>左外连接</strong>会返回左表的所有记录和右表中匹配记录的组合(如果右表中无匹配记录, 来自于右表的所有列的值设为 NULL). 如果左表的一行在右表中存在多个匹配行, 那么左表的行会复制和右表匹配行一样的数量, 并进行组合生成连接结果.</p>

<p>如, 这允许我们去找到雇员的部门时, 显示所有雇员, 即使这个雇员还没有关联的部门. (在上面的内连接部分由一个相反的例子, 没有关联的部门号的雇员在结果中是不显示的).</p>

<p>左外连接实例: (相对于内连接增添的行用斜体标出)</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>LEFT</strong>&nbsp;<strong>OUTER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<table>
	<tbody>
		<tr>
			<th>Employee.LastName</th>
			<th>Employee.DepartmentID</th>
			<th>Department.DepartmentName</th>
			<th>Department.DepartmentID</th>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td><em>Jasper</em></td>
			<td>NULL</td>
			<td>NULL</td>
			<td>NULL</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
	</tbody>
</table>

<h3>右外连接</h3>

<p><strong>右外连接</strong>, 亦简称<strong>右连接</strong>, 它与左外连接完全类似, 只不过是作连接的表的顺序相反而已. 如果 A 表右连接 B 表, 那么&quot;右表&quot; B 中的每一行在连接表中至少会出现一次. 如果 B 表的记录在&quot;左表&quot; A 中未找到匹配行, 连接表中来源于 A 的列的值设为 NULL.</p>

<p>右连接操作返回右表的所有行和这些行在左表中匹配的行(没有匹配的, 来源于左表的列值设为 NULL).</p>

<p>例如, 这允许我们在找每一个雇员以及他的部门信息时, 当这个部门里没有任何雇员时, 也把部分显示出来.</p>

<p>右连接的实例: (相对于内连接增添的行用斜体标出)</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>RIGHT</strong>&nbsp;<strong>OUTER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<table>
	<tbody>
		<tr>
			<th>Employee.LastName</th>
			<th>Employee.DepartmentID</th>
			<th>Department.DepartmentName</th>
			<th>Department.DepartmentID</th>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>NULL</td>
			<td>NULL</td>
			<td><em>Marketing</em></td>
			<td><em>35</em></td>
		</tr>
	</tbody>
</table>

<p>实际上显式的右连接很少使用, 因为它总是可以被替换成左连接--换换表的位置就可以了, 另外, 右连接相对于左连接并没有什么额外的功能. 上表同样可以使用左连接得到:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;department&nbsp;<strong>LEFT</strong>&nbsp;<strong>OUTER</strong>&nbsp;<strong>JOIN</strong>&nbsp;employee&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<h3>全连接</h3>

<p><strong>全连接</strong>是左右外连接的并集. 连接表包含被连接的表的所有记录, 如果缺少匹配的记录, 即以 NULL 填充.</p>

<p>如, 这允许我们查看每一个在部门里的员工和每一个拥有雇员的部门, 同时, 还能看到不在任何部门的员工以及没有任何员工的部门.</p>

<p>全连接实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>FULL</strong>&nbsp;<strong>OUTER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<table>
	<tbody>
		<tr>
			<th>Employee.LastName</th>
			<th>Employee.DepartmentID</th>
			<th>Department.DepartmentName</th>
			<th>Department.DepartmentID</th>
		</tr>
		<tr>
			<td>Smith</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td>Jones</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Robinson</td>
			<td>34</td>
			<td>Clerical</td>
			<td>34</td>
		</tr>
		<tr>
			<td><em>Jasper</em></td>
			<td>NULL</td>
			<td>NULL</td>
			<td>NULL</td>
		</tr>
		<tr>
			<td>Steinberg</td>
			<td>33</td>
			<td>Engineering</td>
			<td>33</td>
		</tr>
		<tr>
			<td>Rafferty</td>
			<td>31</td>
			<td>Sales</td>
			<td>31</td>
		</tr>
		<tr>
			<td>NULL</td>
			<td>NULL</td>
			<td><em>Marketing</em></td>
			<td><em>35</em></td>
		</tr>
	</tbody>
</table>

<p>一些数据库系统(如 MySQL)并不直接支持全连接, 但它们可以通过左右外连接的并集(参:&nbsp;<a href="http://zh.wikipedia.org/w/index.php?title=Union_(SQL)&amp;action=edit&amp;redlink=1" target="_blank" title="Union (SQL)（页面不存在）">union</a>)来模拟实现. 和上面等价的实例:</p>

<pre>
<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>LEFT</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID&nbsp;<strong>UNION</strong>&nbsp;<strong>SELECT</strong>&nbsp;*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>RIGHT</strong><strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID&nbsp;<strong>WHERE</strong>&nbsp;employee.DepartmentID&nbsp;<strong>IS</strong>&nbsp;<strong>NULL</strong></pre>

<p>SQLite 不支持右连接, 全外连接可以按照下面的方式模拟:</p>

<pre>
<strong>SELECT</strong>&nbsp;employee.*,&nbsp;department.*&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>LEFT</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID&nbsp;<strong>UNION</strong><strong>SELECT</strong>&nbsp;employee.*,&nbsp;department.*&nbsp;<strong>FROM</strong>&nbsp;department&nbsp;<strong>LEFT</strong>&nbsp;<strong>JOIN</strong>&nbsp;employee&nbsp;<strong>ON</strong>&nbsp;employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID&nbsp;<strong>WHERE</strong>employee.DepartmentID&nbsp;<strong>IS</strong>&nbsp;<strong>NULL</strong></pre>

<h2>自连接</h2>

<p>自连接就是和自身连接.<sup><a href="http://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL)#cite_note-1" target="_blank">[2]</a></sup>&nbsp;下面的例子是一个很好的说明.</p>

<h3>示例</h3>

<p>构建一个查询, 它试图找到这样的记录: 每条记录包含两个雇员, 他们来自于同一个国家. 如果你有两张雇员表(<code>Employee</code>), 那么只要第一张表的雇员和第二张表的雇员在同样的国家的就行了, 你可以用一个通常的连接(相等连接)操作去得到这个表. 不过, 这里所有雇员信息都在一张但对大表里.<sup><a href="http://zh.wikipedia.org/wiki/%E8%BF%9E%E6%8E%A5_(SQL)#cite_note-2" target="_blank">[3]</a></sup></p>

<p>下面一个修改过的雇员表&nbsp;<code>Employee</code>:</p>

<table>
	<caption>雇员表 (Employee)</caption>
	<tbody>
		<tr>
			<th>EmployeeID</th>
			<th>LastName</th>
			<th>Country</th>
			<th>DepartmentID</th>
		</tr>
		<tr>
			<td>123</td>
			<td>Rafferty</td>
			<td>Australia</td>
			<td>31</td>
		</tr>
		<tr>
			<td>124</td>
			<td>Jones</td>
			<td>Australia</td>
			<td>33</td>
		</tr>
		<tr>
			<td>145</td>
			<td>Steinberg</td>
			<td>Australia</td>
			<td>33</td>
		</tr>
		<tr>
			<td>201</td>
			<td>Robinson</td>
			<td>United States</td>
			<td>34</td>
		</tr>
		<tr>
			<td>305</td>
			<td>Smith</td>
			<td>United Kingdom</td>
			<td>34</td>
		</tr>
		<tr>
			<td>306</td>
			<td>Jasper</td>
			<td>United Kingdom</td>
			<td>NULL</td>
		</tr>
	</tbody>
</table>

<p>&nbsp;</p>

<p>示例解决方案的查询可以写成如下:</p>

<pre>
<strong>SELECT</strong>&nbsp;F.EmployeeID,&nbsp;F.LastName,&nbsp;S.EmployeeID,&nbsp;S.LastName,&nbsp;F.Country&nbsp;<strong>FROM</strong>&nbsp;Employee F,&nbsp;Employee S&nbsp;<strong>WHERE</strong>&nbsp;F.Country&nbsp;=&nbsp;S.Country&nbsp;<strong>AND</strong>F.EmployeeID&nbsp;&lt;&nbsp;S.EmployeeID&nbsp;<strong>ORDER</strong>&nbsp;<strong>BY</strong>&nbsp;F.EmployeeID,&nbsp;S.EmployeeID;</pre>

<p>它执行后将生成下面的表:</p>

<table>
	<caption>通过 Country 自连接后的雇员表(Employee)</caption>
	<tbody>
		<tr>
			<th>EmployeeID</th>
			<th>LastName</th>
			<th>EmployeeID</th>
			<th>LastName</th>
			<th>Country</th>
		</tr>
		<tr>
			<td>123</td>
			<td>Rafferty</td>
			<td>124</td>
			<td>Jones</td>
			<td>Australia</td>
		</tr>
		<tr>
			<td>123</td>
			<td>Rafferty</td>
			<td>145</td>
			<td>Steinberg</td>
			<td>Australia</td>
		</tr>
		<tr>
			<td>124</td>
			<td>Jones</td>
			<td>145</td>
			<td>Steinberg</td>
			<td>Australia</td>
		</tr>
		<tr>
			<td>305</td>
			<td>Smith</td>
			<td>306</td>
			<td>Jasper</td>
			<td>United Kingdom</td>
		</tr>
	</tbody>
</table>

<p><br />
关于这个例子, 请注意:</p>

<ul>
	<li><code>F</code>&nbsp;和&nbsp;<code>S</code>&nbsp;是雇员表(employee)的第一个和第二个拷贝的别名</li>
	<li>条件&nbsp;<code>F.Country = S.Country</code>&nbsp;排除了在不同国家的雇员的组合. 这个例子仅仅期望得到在相同国家的雇员的组合.</li>
	<li>条件&nbsp;<code>F.EmployeeID &lt; S.EmployeeID</code>&nbsp;排除了雇员号(<code>EmployeeID</code>)相同的组合.</li>
	<li><code>F.EmployeeID &lt; S.EmployeeID</code>&nbsp;排除了重复的组合. 没有这个条件的话, 将生成类似下面表中的无用数据(仅以 United Kingdom 为例)</li>
</ul>

<table>
	<tbody>
		<tr>
			<th>EmployeeID</th>
			<th>LastName</th>
			<th>EmployeeID</th>
			<th>LastName</th>
			<th>Country</th>
		</tr>
		<tr>
			<td>305</td>
			<td>Smith</td>
			<td>305</td>
			<td>Smith</td>
			<td>United Kingdom</td>
		</tr>
		<tr>
			<td>305</td>
			<td>Smith</td>
			<td>306</td>
			<td>Jasper</td>
			<td>United Kingdom</td>
		</tr>
		<tr>
			<td>306</td>
			<td>Jasper</td>
			<td>305</td>
			<td>Smith</td>
			<td>United Kingdom</td>
		</tr>
		<tr>
			<td>306</td>
			<td>Jasper</td>
			<td>306</td>
			<td>Jasper</td>
			<td>United Kingdom</td>
		</tr>
	</tbody>
</table>

<p><br />
只有当中的两行满足最初问题的要求, 第一项和最后一项对于本例来讲毫无用处.</p>

<h2>替代方式</h2>

<p>外连接查询得到的结果也可以通过<a href="http://zh.wikipedia.org/w/index.php?title=%E5%85%B3%E8%81%94%E5%AD%90%E6%9F%A5%E8%AF%A2&amp;action=edit&amp;redlink=1" target="_blank" title="关联子查询（页面不存在）">关联子查询</a>得到. 例如</p>

<pre>
<strong>SELECT</strong>&nbsp;employee.LastName,&nbsp;employee.DepartmentID,&nbsp;department.DepartmentName&nbsp;<strong>FROM</strong>&nbsp;employee&nbsp;<strong>LEFT</strong>&nbsp;<strong>OUTER</strong>&nbsp;<strong>JOIN</strong>&nbsp;department&nbsp;<strong>ON</strong>employee.DepartmentID&nbsp;=&nbsp;department.DepartmentID</pre>

<p>也可以写成如下样子:</p>

<pre>
<strong>SELECT</strong>&nbsp;employee.LastName,&nbsp;employee.DepartmentID,&nbsp;(<strong>SELECT</strong>&nbsp;department.DepartmentName&nbsp;<strong>FROM</strong>&nbsp;department&nbsp;<strong>WHERE</strong>&nbsp;employee.DepartmentID&nbsp;=department.DepartmentID&nbsp;)&nbsp;<strong>FROM</strong>&nbsp;employee
</pre>
