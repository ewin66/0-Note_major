<h1>MySQL之自定义函数</h1>

<p>引言<br />
　　MySQL本身提供了内置函数，这些函数的存在给我们日常的开发和数据操作带来了很大的便利，比如我前面提到过的聚合函数SUM()、AVG()以及日期时间函数等等，可是我们总会出现其他的需求：我们需要调用一个函数，这个函数需要按照我们的要求来实现我们自己的功能，可是这个函数式系统不能提供的因为这中需求的不确定性。因此我们需要自己来解决这种需求。还好MySQL设计的扩展性给了我们这个机会，我们可以通过自定义函数的功能解决这个问题。</p>

<h2>1.MySQL自定义函数简介</h2>

<p>　　在MySQL中使用自定义函数也需要相应的要求，语法如下，</p>

<p>　　创建新函数：</p>

<p>　　　　Create function function_name(参数列表)</p>

<p>　　　　returns返回值类型</p>

<p>　　　　函数体内容</p>

<p>　　相关说明，</p>

<p>函数名：应该合法的标识符，并且不应该与已有的关键字冲突。一个函数应该属于某数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库<br />
　　　　，否则默认为当前数据库。</p>

<p>参数列表：可以有一个或者多个函数参数，甚至是没有参数也是可以的。对于每个参数，由参数名和参数类型组成。<br />
返回值：指明返回值类类型<br />
函数体：自定义函数的函数体由多条可用的MySQL语句，流程控制，变量声明等语句构成。需要指明的是函数体中一定要含有return 返回语句。</p>

<h2>2.自定义示例</h2>

<p>&nbsp; a.无参函数定义　　<br />
&nbsp; &nbsp; mysql&gt; DROP FUNCTION IF EXISTS hello;<br />
&nbsp; &nbsp; Query OK, 0 rows affected, 1 warning (0.00 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; DELIMITER $$<br />
&nbsp; &nbsp; mysql&gt; CREATE FUNCTION hello()<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; RETURNS VARCHAR(255)<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; BEGIN<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; RETURN &#39;Hello &nbsp;world,i am mysql&#39;;<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; END $$<br />
&nbsp; &nbsp; Query OK, 0 rows affected (0.11 sec)<br />
&nbsp; &nbsp; 　　调用自定义函数：</p>

<p>&nbsp; &nbsp; mysql&gt; DELIMITER ;<br />
&nbsp; &nbsp; mysql&gt; SELECT hello();<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | hello() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | Hello &nbsp;world,i am mysql |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; 1 row in set (0.00 sec)<br />
&nbsp; &nbsp; &nbsp; 可见已经调用成功了，需要注意的几点</p>

<p>&nbsp; &nbsp; 　　之所以使用DELIMITER是因为MySQL中默认是使用分号来结束一个命令的，我们定义的函数体中一条命令写完时会用分号来结束，而MySQL会误以为函数体已经定义完成，因为我们需要定义一个新的标识符来标识一个命令的结束，因为就可以使用DELIMITER。</p>

<p>　b:含有参数的自定义函数</p>

<p>&nbsp; &nbsp; 在我们格式化日期的时候我们会调用DATE_FORMAT(date,format)函数，第一个参数是日期第二个参数是需要格式化的格式，也就是说需要传递两个参数，我们现在就把这个函数给改下</p>

<p>&nbsp; &nbsp; mysql&gt; DELIMITER $$<br />
&nbsp; &nbsp; mysql&gt; DROP FUNCTION IF EXISTS test.formatDate $$<br />
&nbsp; &nbsp; Query OK, 0 rows affected, 1 warning (0.07 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; CREATE FUNCTION &nbsp; test.formatDate(fdate datetime)<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; RETURNS VARCHAR(255)<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; BEGIN<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; DECLARE x VARCHAR(255) DEFAULT &#39;&#39;;<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; SET x= date_format(fdate,&#39;%Y年%m月%d日%h时%i分%s秒&#39;);<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; RETURN x;<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; END $$<br />
&nbsp; &nbsp; Query OK, 0 rows affected (0.11 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; DELIMITER ;<br />
&nbsp; &nbsp; mysql&gt; SELECT &nbsp; formatDate(now());<br />
&nbsp; &nbsp; +----------------------------+<br />
&nbsp; &nbsp; | formatDate(now()) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />
&nbsp; &nbsp; +----------------------------+<br />
&nbsp; &nbsp; | 2014年11月21日03时41分21秒 |<br />
&nbsp; &nbsp; +----------------------------+<br />
&nbsp; &nbsp; 1 row in set (0.18 sec)<br />
&nbsp; &nbsp; 　　这样当我们需要定制这样的函数时就可以自己实现了，那就是通过含参的自定义函数。</p>

<h2>3.自定义函数相关语法及变量</h2>

<p>　　a:变量声明</p>

<p>&nbsp; &nbsp; &nbsp; DECLARE var_name[,...] type [DEFAULT value] ，这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个DEFAULT子句。值可以被指定为一个表达式，不需要为一个常数。如果没有DEFAULT子句，初始值为NULL。使用语序使用 set 和 select into语句为变量赋值。</p>

<p>　　b:IF &nbsp;条件语句、<br />
&nbsp; &nbsp; &nbsp; IF search_conditionTHEN<br />
&nbsp; &nbsp; &nbsp; statement_list<br />
&nbsp; &nbsp; &nbsp; [ELSEIF search_conditionTHENstatement_list]<br />
&nbsp; &nbsp; &nbsp; ...<br />
&nbsp; &nbsp; &nbsp; [ELSE statement_list]<br />
&nbsp; &nbsp; &nbsp; ENDIF;</p>

<p>　　c:CASE语句</p>

<p>&nbsp; &nbsp; &nbsp; CASE case_value<br />
&nbsp; &nbsp; &nbsp; WHEN when_valueTHENstatement_list<br />
&nbsp; &nbsp; &nbsp; [WHEN when_value THENstatement_list]<br />
&nbsp; &nbsp; &nbsp; ...<br />
&nbsp; &nbsp; &nbsp; [ELSE statement_list]<br />
&nbsp; &nbsp; &nbsp; END CASE;&nbsp;<br />
&nbsp; &nbsp; &nbsp;&nbsp;<br />
　　d:循环语句</p>

<p>&nbsp; &nbsp; &nbsp; While<br />
&nbsp; &nbsp; &nbsp; [begin_label:]WHILEsearch_conditionDO<br />
&nbsp; &nbsp; &nbsp; statement_list<br />
&nbsp; &nbsp; &nbsp; END WHILE [end_label];<br />
&nbsp; &nbsp; &nbsp; 退出整个循环leave 相当于break<br />
&nbsp; &nbsp; &nbsp; 退出当前循环iterate 相当于 continue<br />
&nbsp; &nbsp; &nbsp; 通过退出的标签决定退出哪个循环。</p>

<h2>4.其他相关</h2>

<p>删除函数</p>

<p>&nbsp; &nbsp; 我们可以使用 DROP FUNCTION IF EXISTS function_name;</p>

<p>&nbsp; &nbsp; mysql&gt; &nbsp;SELECT hello();<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | hello() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | Hello &nbsp;world,i am mysql |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; 1 row in set (0.12 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; DROP FUNCTION hello();<br />
&nbsp; &nbsp; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right s<br />
&nbsp; &nbsp; mysql&gt; DROP FUNCTION hello;<br />
&nbsp; &nbsp; Query OK, 0 rows affected (0.47 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; &nbsp;SELECT hello();<br />
&nbsp; &nbsp; ERROR 1305 (42000): FUNCTION test.hello does not exist<br />
&nbsp; &nbsp; 通过打印的错误可以发现有些是需要注意的</p>

<p>查看定义的函数 &nbsp;</p>

<p>&nbsp; &nbsp; SHOW FUCNTION STATUS LIKE &#39;function_name&#39;，或者是使用SHOW &nbsp;CREATE FUNCTION function_name;</p>

<p>&nbsp; &nbsp; mysql&gt; SHOW FUNCTION STATUS LIKE &#39;hello&#39;;<br />
&nbsp; &nbsp; +------+-------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; | Db &nbsp; | Name &nbsp;| Type &nbsp; &nbsp; | Definer &nbsp; &nbsp; &nbsp; &nbsp;| Modified &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| Created &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Security_type | Comment | character_set_client | collation_connection | Database Collation |<br />
&nbsp; &nbsp; +------+-------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; | test | hello | FUNCTION | root@localhost | 2014-11-21 14:48:05 | 2014-11-21 14:48:05 | DEFINER &nbsp; &nbsp; &nbsp; | &nbsp; &nbsp; &nbsp; &nbsp; | latin1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | latin1_swedish_ci &nbsp; &nbsp;| latin1_swedish_ci &nbsp;|<br />
&nbsp; &nbsp; +------+-------+----------+----------------+---------------------+---------------------+---------------+---------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; 1 row in set (0.18 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; SHOW &nbsp;CREATE FUNCTION hello;<br />
&nbsp; &nbsp; +----------+----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------<br />
&nbsp; &nbsp; -----------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; | Function | sql_mode &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Create Function<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| character_set_client | collation_connection | Database Collation |<br />
&nbsp; &nbsp; +----------+----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------<br />
&nbsp; &nbsp; -----------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; | hello &nbsp; &nbsp;| STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` FUNCTION `hello`() RETURNS varchar(255) CHARSET latin1<br />
&nbsp; &nbsp; BEGIN<br />
&nbsp; &nbsp; RETURN &#39;Hello &nbsp;world,i am mysql&#39;;<br />
&nbsp; &nbsp; END | latin1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | latin1_swedish_ci &nbsp; &nbsp;| latin1_swedish_ci &nbsp;|<br />
&nbsp; &nbsp; +----------+----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------<br />
&nbsp; &nbsp; -----------+----------------------+----------------------+--------------------+<br />
&nbsp; &nbsp; 1 row in set (0.01 sec)</p>

<p>修改函数ALTER FUNCTION &nbsp;function_name &nbsp;函数选项。</p>

<p>&nbsp; ALTER FUNCTION func_name [characteristic ...]</p>

<p>&nbsp; &nbsp; characteristic:<br />
&nbsp; &nbsp; &nbsp; &nbsp; COMMENT &#39;string&#39;<br />
&nbsp; &nbsp; &nbsp; | LANGUAGE SQL<br />
&nbsp; &nbsp; &nbsp; | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }<br />
&nbsp; &nbsp; &nbsp; | SQL SECURITY { DEFINER | INVOKER }<br />
&nbsp; &nbsp; 　　上面这个语法结构是MySQL官方给出的，修改的内容可以包含SQL语句也可以不包含，既可以是读数据的SQL也可以是修改数据的SQL还有权限。此外在修改function的时候还需要注意你不能使用这个语句来修改函数的参数以及函数体，如果你想改变这些的话你就需要删除掉这个函数然后重新创建。</p>

<p>&nbsp; &nbsp; 　　</p>

<p>&nbsp; &nbsp; mysql&gt; SELECT hello();<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | hello() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; | Hello &nbsp;world,i am mysql |<br />
&nbsp; &nbsp; +-------------------------+<br />
&nbsp; &nbsp; 1 row in set (0.00 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; ALTER FUNCTION hello<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; READS SQL DATA<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; COMMENT &#39;print &nbsp;hello&#39;;<br />
&nbsp; &nbsp; Query OK, 0 rows affected (0.23 sec)</p>

<p>&nbsp; &nbsp; mysql&gt; &nbsp;SELECT SPECIFIC_NAME,SQL_DATA_ACCESS,<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; ROUTINE_COMMENT FROM information_schema.Routines<br />
&nbsp; &nbsp; &nbsp; &nbsp; -&gt; WHERE ROUTINE_NAME=&#39;hello&#39;;<br />
&nbsp; &nbsp; +---------------+-----------------+-----------------+<br />
&nbsp; &nbsp; | SPECIFIC_NAME | SQL_DATA_ACCESS | ROUTINE_COMMENT |<br />
&nbsp; &nbsp; +---------------+-----------------+-----------------+<br />
&nbsp; &nbsp; | hello &nbsp; &nbsp; &nbsp; &nbsp; | READS SQL DATA &nbsp;| print &nbsp;hello &nbsp; &nbsp;|<br />
&nbsp; &nbsp; +---------------+-----------------+-----------------+<br />
&nbsp; &nbsp; 1 row in set (0.21 sec)</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h1>自定义函数</h1>

<h2>自定义函数定义</h2>

<p>语法：Create function function_name(参数列表)returns返回值类型</p>

<p>函数体 函数名，应合法的标识符，不应与系统关键字冲突。</p>

<p>一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</p>

<p>参数部分，由参数名和参数类型组成。</p>

<p>返回值类类型.注意，一定要有return返回值语句。</p>

<p>创建第一个函数:<br />
mysql&gt; DROP FUNCTION IF EXISTS SP_FUNC_DBDH_ONE&nbsp; -- 删掉已存在函数</p>

<p>mysql&gt;DELIMITER &amp;&amp; -- 定义分隔符，必须要有 ,本例为 &amp;&amp; 可以为得数字符,例如: $$,%%,**</p>

<h2>自定义函数示例</h2>

<p>mysql&gt;DELIMITER $$<br />
mysql&gt;CREATE FUNCTION SP_FUNC_DBDH_ONE( PARA_VAR varchar(30))<br />
mysql&gt;RETURNS VARCHAR(100)<br />
mysql&gt;BEGIN<br />
mysql&gt;DECLARE NAYIBU_FIR VARCHAR(30) DEFAULT &#39;THIS IS MY FIRST,&#39;;<br />
mysql&gt;SET NAYIBU_FIR = concat(NAYIBU_FIR,PARA_VAR);<br />
mysql&gt;RETURN NAYIBU_FIR;<br />
mysql&gt;END $$</p>

<p>mysql&gt;Query OK, 0 rows affected (0.01 sec)</p>

<p>mysql&gt; DELIMITER &amp;&amp; &nbsp;&nbsp;<br />
mysql&gt; select SP_FUNC_DBDH_ONE(&#39;PROGRAM&#39;);<br />
mysql&gt; &amp;&amp;</p>

<p>+-----------------------------+<br />
| SP_FUNC_DBDH_ONE(&#39;PROGRAM&#39;) |<br />
+-----------------------------+<br />
| THIS IS MY FIRST,PROGRAM &nbsp; &nbsp;|<br />
+-----------------------------+</p>
