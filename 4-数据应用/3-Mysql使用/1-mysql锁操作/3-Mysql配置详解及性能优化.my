<h1>MYSQL ini 配置文件详解及性能优化方案</h1>

<p>my.ini分为两块：Client Section和Server Section。</p>

<p>Client Section用来配置MySQL客户端参数。<br />
要查看配置参数可以用下面的命令：</p>

<pre>
<strong>show variables like &#39;%innodb%&#39;;</strong> # 查看innodb相关配置参数
<strong>show status like &#39;%innodb%&#39;;</strong> # 查看innodb相关的运行时参数（比如当前正在打开的表的数量，当前已经打开的表的数量）
<strong>show global status like &#39;open%tables&#39;;</strong> # 查看全局的运行时参数，加上global是对当前mysql服务器中运行的所有<a href="http://www.cr173.com/k/sql/" target="_blank">数据库</a>实例进行统计。不加global则只对当前数据库实例进行统计。</pre>

<p><strong>1、Client Section</strong><br />
&nbsp; &nbsp; [client]<br />
&nbsp; &nbsp; port = 3306 # 设置mysql客户端连接服务端时默认使用的端口<br />
&nbsp; &nbsp; [mysql]<br />
&nbsp; &nbsp; default-character-set=utf8 # 设置mysql客户端默认字符集</p>

<p><strong>2、Server Section</strong></p>

<p>[mysqld]<br />
port=3306 # mysql服务端默认监听(listen on)的TCP/IP端口<br />
<br />
basedir=&quot;C:/Program Files/MySQL/My<a href="http://www.cr173.com/k/sqlserver/" target="_blank">sql server</a>&nbsp;5.5/&quot; # 基准路径，其他路径都相对于这个路径<br />
<br />
datadir=&quot;C:/Program Files/MySQL/MySQL Server 5.5/Data&quot; #&nbsp;<a href="http://www.cr173.com/k/mysql/" target="_blank">mysql数据库</a>文件所在目录<br />
<br />
character-set-server=latin1 # 服务端使用的字符集默认为8比特<a href="http://www.cr173.com/k/bmzh/" target="_blank">编码</a>的latin1字符集<br />
<br />
default-storage-engine=INNODB # 创建新表时将使用的默认存储引擎<br />
<br />
sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot; # SQL模式为strict模式<br />
<br />
max_connections=100 # mysql服务器支持的最大并发连接数（用户数）。但总会预留其中的一个连接给管理员使用超级权限登录，即使连接数目达到最大限制。如果设置得过小而用户比较多，会经常出现&ldquo;Too many connections&rdquo;错误。<br />
<br />
query_cache_size=0 # 查询缓存大小，用于缓存SELECT查询结果。如果有许多返回相同查询结果的SELECT查询，并且很少改变表，可以设置query_cache_size大于0，可以极大改善查询效率。而如果表数据频繁变化，就不要使用这个，会适得其反<br />
<br />
table_cache=256 # 这个参数在5.1.3之后的版本中叫做table_open_cache，用于设置table高速缓存的数量。由于每个客户端连接都会至少访问一个表，因此此参数的值与&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max_connections有关。当某一连接访问一个表时，MySQL会检查当前已缓存表的数量。如果该表已经在缓存中打开，则会直接访问缓存中的表已加快查询速度；如果该表未被缓存，则会将当前的表添加进缓存并进行查询。在执行缓存操作之前，table_cache用于限制缓存表的最大数目：如果当前已经缓存的表未达到table_cache，则会将新表添加进来；若已经达到此值，MySQL将根据缓存表的最后查询时间、查询率等规则释放之前的缓存。<br />
<br />
tmp_table_size=34M # 内存中的每个临时表允许的最大大小。如果临时表大小超过该值，临时表将自动转为基于磁盘的表（Disk Based Table）。<br />
<br />
thread_cache_size=8 # 缓存的最大线程数。当客户端连接断开时，如果客户端总连接数小于该值，则处理客户端任务的线程放回缓存。在高并发情况下，如果该值设置得太小，就会有很多线程频繁创建，线程创建的开销会变大，查询效率也会下降。一般来说如果在应用端有良好的多线程处理，这个参数对性能不会有太大的提高。</p>

<p><strong># MyISAM相关参数</strong><br />
myisam_max_sort_file_size=100G # mysql重建索引时允许使用的临时文件最大大小<br />
<br />
myisam_sort_buffer_size=68M<br />
<br />
key_buffer_size=54M # Key Buffer大小，用于缓存MyISAM表的索引块。决定数据库索引处理的速度（尤其是索引读）<br />
<br />
read_buffer_size=64K # 用于对MyISAM表全表扫描时使用的缓冲区大小。针对每个线程进行分配（前提是进行了全表扫描）。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。<br />
<br />
read_rnd_buffer_size=256K<br />
<br />
sort_buffer_size=256K # connection级参数（为每个线程配置），500个线程将消耗500*256K的sort_buffer_size。</p>

<p><strong># InnoDB相关参数</strong><br />
innodb_additional_mem_pool_size=3M # InnoDB用于存储元数据信息的内存池大小，一般不需修改<br />
<br />
innodb_flush_log_at_trx_commit =1 # 事务相关参数，如果值为1，则InnoDB在每次commit都会将事务日志写入磁盘（磁盘IO消耗较大），这样保证了完全的ACID特性。而如果设置为0，则表示事务日志写入内存log和内存log写入磁盘的频率都为1次/秒。如果设为2则表示事务日志在每次commit都写入内存log，但内存log写入磁盘的频率为1次/秒。<br />
<br />
innodb_log_buffer_size=2M # InnoDB日志数据缓冲大小，如果缓冲满了，就会将缓冲中的日志数据写入磁盘（flush）。由于一般至少都1秒钟会写一次磁盘，所以没必要设置过大，即使是长事务。<br />
<br />
innodb_buffer_pool_size=105M # InnoDB使用缓冲池来缓存索引和行数据。该值设置的越大，则磁盘IO越少。一般将该值设为物理内存的80%。<br />
<br />
innodb_log_file_size=53M # 每一个InnoDB事务日志的大小。一般设为innodb_buffer_pool_size的25%到100%<br />
<br />
innodb_thread_concurrency=9 # InnoDB内核最大并发线程数。</p>

<p>在Apache, PHP, MySQL的体系架构中，MySQL对于性能的影响最大，也是关键的核心部分。对于Discuz!论坛程序也是如此，MySQL的设置是否合理优化，直接影响到论坛的速度和承载量！同时，MySQL也是优化难度最大的一个部分，不但需要理解一些MySQL专业知识，同时还需要长时间的观察统计并且根据经验进行判断，然后设置合理的参数。 下面我们了解一下MySQL优化的一些基础，MySQL的优化我分为两个部分，一是服务器物理硬件的优化，二是MySQL自身(my.cnf)的优化。&nbsp;<br />
<strong>一、服务器硬件对MySQL性能的影响&nbsp;</strong><br />
①磁盘寻道能力（磁盘I/O）,以目前高转速SCSI硬盘(7200转/秒)为例，这种硬盘理论上每秒寻道7200次，这是物理特性决定的，没有办法改变。MySQL每秒钟都在进行大量、复杂的查询操作，对磁盘的读写量可想而知。所以，通常认为磁盘I/O是制约MySQL性能的最大因素之一，对于日均访问量在100万PV以上的Discuz!论坛，由于磁盘I/O的制约，MySQL的性能会非常低下！解决这一制约因素可以考虑以下几种解决方案： 使用RAID-0+1磁盘阵列，注意不要尝试使用RAID-5，MySQL在RAID-5磁盘阵列上的效率不会像你期待的那样快。&nbsp;<br />
②CPU 对于MySQL应用，推荐使用S.M.P.架构的多路对称CPU，例如：可以使用两颗Intel Xeon 3.6GHz的CPU，现在我较推荐用4U的服务器来专门做数据库服务器，不仅仅是针对于mysql。&nbsp;<br />
③物理内存对于一台使用MySQL的Database Server来说，服务器内存建议不要小于2GB，推荐使用4GB以上的物理内存，不过内存对于现在的服务器而言可以说是一个可以忽略的问题，工作中遇到了高端服务器基本上内存都超过了16G。&nbsp;<br />
<br />
二、MySQL自身因素当解决了上述服务器硬件制约因素后，让我们看看MySQL自身的优化是如何操作的。对MySQL自身的优化主要是对其配置文件my.cnf中的各项参数进行优化调整。下面我们介绍一些对性能影响较大的参数。 由于my.cnf文件的优化设置是与服务器硬件配置息息相关的，因而我们指定一个假想的服务器硬件环境：CPU: 2颗Intel Xeon 2.4GHz 内存: 4GB DDR 硬盘: SCSI 73GB(很常见的2U服务器)。&nbsp;<br />
<br />
下面，我们根据以上硬件配置结合一份已经优化好的<strong>my.cnf进行说明：</strong>&nbsp;<br />
#vim /etc/my.cnf以下只列出my.cnf文件中[mysqld]段落中的内容，其他段落内容对MySQL运行性能影响甚微，因而姑且忽略。&nbsp;<br />
[mysqld]&nbsp;<br />
port = 3306&nbsp;<br />
serverid = 1&nbsp;<br />
socket = /tmp/mysql.sock&nbsp;<br />
skip-locking&nbsp;<br />
#避免MySQL的外部锁定，减少出错几率增强稳定性。&nbsp;<br />
skip-name-resolve&nbsp;<br />
#禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！&nbsp;<br />
back_log = 384&nbsp;<br />
#back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。 如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。不同的操作系统在这个队列大小上有它自己的限制。 试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。&nbsp;<br />
key_buffer_size = 256M&nbsp;<br />
#key_buffer_size指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。对于内存在4GB左右的服务器该参数可设置为256M或384M。注意：该参数值设置的过大反而会是服务器整体效率降低！<br />
max_allowed_packet = 4M&nbsp;<br />
thread_stack = 256K&nbsp;<br />
table_cache = 128K&nbsp;<br />
sort_buffer_size = 6M&nbsp;<br />
#查询排序时所能使用的缓冲区大小。注意：该参数对应的分配内存是每连接独占，如果有100个连接，那么实际分配的总共排序缓冲区大小为100 &times; 6 ＝ 600MB。所以，对于内存在4GB左右的服务器推荐设置为6-8M。&nbsp;<br />
read_buffer_size = 4M&nbsp;<br />
#读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享。&nbsp;<br />
join_buffer_size = 8M&nbsp;<br />
#联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享。&nbsp;<br />
myisam_sort_buffer_size = 64M&nbsp;<br />
table_cache = 512&nbsp;<br />
thread_cache_size = 64&nbsp;<br />
query_cache_size = 64M&nbsp;<br />
#指定MySQL查询缓冲区的大小。可以通过在MySQL控制台观察，如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。&nbsp;<br />
tmp_table_size = 256M&nbsp;<br />
max_connections = 768&nbsp;<br />
#指定MySQL允许的最大连接进程数。如果在访问论坛时经常出现Too Many Connections的错误提 示，则需要增大该参数值。&nbsp;<br />
max_connect_errors = 10000000&nbsp;<br />
wait_timeout = 10&nbsp;<br />
#指定一个请求的最大连接时间，对于4GB左右内存的服务器可以设置为5-10。&nbsp;<br />
thread_concurrency = 8&nbsp;<br />
#该参数取值为服务器逻辑CPU数量*2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4*2=8&nbsp;<br />
skip-networking&nbsp;<br />
#开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！&nbsp;<br />
table_cache=1024&nbsp;<br />
#物理内存越大,设置就越大.默认为2402,调到512-1024最佳&nbsp;<br />
innodb_additional_mem_pool_size=4M&nbsp;<br />
#默认为2M&nbsp;<br />
innodb_flush_log_at_trx_commit=1&nbsp;<br />
#设置为0就是等到innodb_log_buffer_size列队满后再统一储存,默认为1&nbsp;<br />
innodb_log_buffer_size=2M&nbsp;<br />
#默认为1M&nbsp;<br />
innodb_thread_concurrency=8&nbsp;<br />
#你的服务器CPU有几个就设置为几,建议用默认一般为8&nbsp;<br />
key_buffer_size=256M&nbsp;<br />
#默认为218，调到128最佳&nbsp;<br />
tmp_table_size=64M&nbsp;<br />
#默认为16M，调到64-256最挂&nbsp;<br />
read_buffer_size=4M&nbsp;<br />
#默认为64K&nbsp;<br />
read_rnd_buffer_size=16M&nbsp;<br />
#默认为256K&nbsp;<br />
sort_buffer_size=32M&nbsp;<br />
#默认为256K&nbsp;<br />
thread_cache_size=120&nbsp;<br />
#默认为60&nbsp;<br />
query_cache_size=32M&nbsp;<br />
<br />
<strong>很多情况需要具体情况具体分析&nbsp;</strong><br />
一、如果Key_reads太大，则应该把my.cnf中Key_buffer_size变大，保持Key_reads/Key_read_requests至少1/100以上，越小越好。&nbsp;<br />
二、如果Qcache_lowmem_prunes很大，就要增加Query_cache_size的值。</p>
