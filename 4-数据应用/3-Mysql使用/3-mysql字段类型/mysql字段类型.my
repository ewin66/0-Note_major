<h1>Mysql 字段类型</h1>

<h2>一.数值类型</h2>

<p>&nbsp; &nbsp; Mysql支持所有标准SQL中的数值类型，其中包括严格数据类型(INTEGER,SMALLINT,DECIMAL,NUMBERIC)，以及近似数值数据类型(FLOAT,REAL,DOUBLE PRESISION),并在此基础上进行扩展。<br />
&nbsp; &nbsp; 扩展后增加了TINYINT,MEDIUMINT,BIGINT这3种长度不同的整形，并增加了BIT类型，用来存放位数据。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>

<table>
	<tbody>
		<tr>
			<td>整数类型 &nbsp; &nbsp;</td>
			<td>字节 &nbsp;</td>
			<td>&nbsp; &nbsp; &nbsp; &nbsp;范围（有符号） &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>范围（无符号） &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>用途 &nbsp;</td>
		</tr>
		<tr>
			<td>TINYINT &nbsp; &nbsp;</td>
			<td>1字节</td>
			<td>&nbsp; &nbsp; &nbsp;(-128，127) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>(0，255) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>小整数值&nbsp;</td>
		</tr>
		<tr>
			<td>SMALLINT &nbsp; &nbsp;</td>
			<td>2字节</td>
			<td>&nbsp; &nbsp; (-32 768，32 767) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>(0，65 535) &nbsp; &nbsp; &nbsp; &nbsp;</td>
			<td>大整数值&nbsp;</td>
		</tr>
		<tr>
			<td>MEDIUMINT &nbsp;</td>
			<td>3字节</td>
			<td>&nbsp; &nbsp; &nbsp;(-8 388 608，8 388 607) &nbsp;</td>
			<td>(0，16 777 215) &nbsp; &nbsp;</td>
			<td>大整数值&nbsp;</td>
		</tr>
		<tr>
			<td>INT或INTEGER</td>
			<td>4字节</td>
			<td>&nbsp; &nbsp; &nbsp;(-2 147 483 648，2 147 483 647)</td>
			<td>(0，4 294 967 295)</td>
			<td>大整数值&nbsp;</td>
		</tr>
		<tr>
			<td>BIGINT &nbsp; &nbsp; &nbsp;</td>
			<td>8字节</td>
			<td>&nbsp; &nbsp; &nbsp;(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td>
			<td>(0，18 446 744 073 709 551 615)</td>
			<td>极大整数值&nbsp;</td>
		</tr>
	</tbody>
</table>

<p>&nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; FLOAT &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4字节 &nbsp; (-3.402 823 466 E+38，1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度浮点数值&nbsp;<br />
&nbsp; &nbsp; DOUBLE &nbsp; &nbsp; &nbsp; &nbsp; 8字节 (1.797 693 134 862 315 7 E+308，2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度浮点数值&nbsp;<br />
&nbsp; &nbsp; DECIMAL 对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值</p>

<p>&nbsp;</p>

<h3>INT 类型:</h3>

<p>&nbsp; &nbsp; 　　在 MySQL 中支持的 5 个主要整数类型是 TINYINT，SMALLINT，MEDIUMINT，INT 和 BIGINT。这些类型在很大程度上是相同的，只有它们存储的值的大小是不相同的。<br />
&nbsp; &nbsp; MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。例如，指定一个字段的类型为 INT(6)，<br />
&nbsp; &nbsp; 就可以保证所包含数字少于 6 个的值从数据库中检索出来时能够自动地用空格填充。需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。<br />
&nbsp; &nbsp; 万一我们需要对一个字段存储一个超出许可范围的数字，MySQL 会根据允许范围最接近它的一端截短后再进行存储。还有一个比较特别的地方是，<br />
&nbsp; &nbsp; MySQL 会在不合规定的值插入表前自动修改为 0。</p>

<p>&nbsp; &nbsp; UNSIGNED 修饰符规定字段只保存正值。因为不需要保存数字的正、负符号，可以在储时节约一个&ldquo;位&rdquo;的空间。从而增大这个字段可以存储的值的范围。<br />
&nbsp; &nbsp; ZEROFILL 修饰符规定 0（不是空格）可以用来真补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。</p>

<h3>FLOAT、DOUBLE 和 DECIMAL 类型</h3>

<p>&nbsp; &nbsp; 　　MySQL 支持的三个浮点类型是 FLOAT、DOUBLE 和 DECIMAL 类型。FLOAT 数值类型用于表示单精度浮点数值，而 DOUBLE 数值类型用于表示双精度浮点数值。<br />
&nbsp; &nbsp; 与整数一样，这些类型也带有附加参数：一个显示宽度指示器和一个小数点指示器。比如语句 FLOAT(7,3) 规定显示的值不会超过 7 位数字，小数点后面带有 3 位数字。</p>

<p>&nbsp; &nbsp; 对于小数点后面的位数超过允许范围的值，MySQL 会自动将它四舍五入为最接近它的值，再插入它。<br />
&nbsp; &nbsp; DECIMAL 数据类型用于精度要求非常高的计算中，这种类型允许指定数值的精度和计数方法作为选择参数。精度在这里指为这个值保存的有效数字的总个数，<br />
&nbsp; &nbsp; 而计数方法表示小数点后数字的位数。比如语句 DECIMAL(7,3) 规定了存储的值不会超过 7 位数字，并且小数点后不超过 3 位。</p>

<p>&nbsp; &nbsp; 忽略 DECIMAL 数据类型的精度和计数方法修饰符将会使 MySQL 数据库把所有标识为这个数据类型的字段精度设置为 10，计算方法设置为 0。<br />
&nbsp; &nbsp; UNSIGNED 和 ZEROFILL 修饰符也可以被 FLOAT、DOUBLE 和 DECIMAL 数据类型使用。并且效果与 INT 数据类型相同。</p>

<h2>二.字符串类型 &nbsp;一个汉字等于两个字符。</h2>

<p>&nbsp; &nbsp; 　&nbsp; MySQL 提供了8个基本的字符串类型,分别:CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 各SET等多种字符串类型。<br />
&nbsp; &nbsp; 可以存储的范围从简单的一个字符到巨大的文本块或二进制字符串数据。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 字符串类型 &nbsp; &nbsp; &nbsp;字节大小 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;描述及存储需求<br />
&nbsp; &nbsp; &nbsp; &nbsp; CHAR &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0-255字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 定长字符串&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; VARCHAR &nbsp; &nbsp; &nbsp; &nbsp; 0-65535字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 变长字符串 &nbsp;另加一个字节来记录长度(如果列声明的长度超过255，则使用两个字节记录长度)。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; TINYBLOB &nbsp; &nbsp; &nbsp; &nbsp;0-255字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 不超过 255 个字符的二进制字符串&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; TINYTEXT &nbsp; &nbsp; &nbsp; &nbsp;0-255字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 短文本字符串&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; BLOB &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0-65535字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 二进制形式的长文本数据&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; TEXT &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0-65535字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 长文本数据&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; MEDIUMBLOB &nbsp; &nbsp; &nbsp;0-16777215字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;二进制形式的中等长度文本数据&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; MEDIUMTEXT &nbsp; &nbsp; &nbsp;0-16777215字节 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;中等长度文本数据&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; LOGNGBLOB &nbsp; &nbsp; &nbsp; 0-4294967295字节 &nbsp; &nbsp; &nbsp; &nbsp;二进制形式的极大文本数据&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; LONGTEXT &nbsp; &nbsp; &nbsp; &nbsp;0-4294967295字节 &nbsp; &nbsp; &nbsp; &nbsp;极大文本数据<br />
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; VARBINARY(M) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;允许长度0-M个字节的定长字节符串，值的长度+1个字节<br />
&nbsp; &nbsp; &nbsp; &nbsp; BINARY(M) &nbsp; &nbsp; &nbsp; M &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 允许长度0-M个字节的定长字节符串</p>

<h3>CHAR 和 VARCHAR 类型</h3>

<p>&nbsp; &nbsp; 　&nbsp;CHAR 类型用于定长字符串，并且必须在圆括号内用一个大小修饰符来定义。这个大小修饰符的范围从 0-255。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。<br />
&nbsp; &nbsp; CHAR 类型可以使用 BINARY 修饰符。当用于比较运算时，这个修饰符使 CHAR 以二进制方式参于运算，而不是以传统的区分大小写的方式。<br />
&nbsp; &nbsp; &nbsp; &nbsp;CHAR 类型的一个变体是 VARCHAR 类型。它是一种可变长度的字符串类型，并且也必须带有一个范围在 0-255 之间的指示器。CHAR 和 VARCHGAR 不同之处在于 MYSQL 数据库处理<br />
&nbsp; &nbsp; 这个指示器的方式：CHAR 把这个大小视为值的大小，不长度不足的情况下就用空格补足。而 VARCHAR 类型把它视为最大值并且只使用存储字符串实际需要的长度<br />
&nbsp; &nbsp; (增加一个额外字节来存储字符串本身的长度)来存储值。所以短于指示器长度的 VARCHAR 类型不会被空格填补，但长于指示器的值仍然会被截短。<br />
&nbsp; &nbsp; 因为 VARCHAR 类型可以根据实际内容动态改变存储值的长度，所以在不能确定字段需要多少字符时使用 VARCHAR 类型可以大大地节约磁盘空间、提高存储效率。<br />
&nbsp; &nbsp; VARCHAR 类型在使用 BINARY 修饰符时与 CHAR 类型完全相同。<br />
&nbsp; &nbsp; 当存储的信息长度超出最长长度时：<br />
&nbsp; &nbsp; 如果分配给CHAR或VARCHAR列的值超过列的最大长度，则对值进行裁剪以使其适合。如果被裁掉的字符不是空格，则会产生一条警告。如果裁剪非空格字符，则会造成错误(而不是警告)并通过使用严格SQL模式禁用值的插入。</p>

<h3>TEXT 和 BLOB 类型</h3>

<p>&nbsp; &nbsp; 　　对于字段长度要求很大的情况下，MySQL 提供了 TEXT 和 BLOB 两种类型。根据存储数据的大小，它们都有不同的子类型。这些大型的数据用于存储文本块或图像、<br />
&nbsp; &nbsp; 声音文件等二进制数据类型。<br />
&nbsp; &nbsp; TEXT 和 BLOB 类型在分类和比较上存在区别。BLOB 类型区分大小写，而 TEXT 不区分大小写。大小修饰符不用于各种 BLOB 和 TEXT 子类型。<br />
&nbsp; &nbsp; 比指定类型支持的最大范围大的值将被自动截短。</p>

<h2>三.日期和时间类型</h2>

<p>&nbsp; &nbsp; 　&nbsp; 在处理日期和时间类型的值时，MySQL 带有 5 个不同的数据类型可供选择。它们可以被分成简单的日期、时间类型，和混合日期、时间类型。<br />
&nbsp; &nbsp; 根据要求的精度，子类型在每个分类型中都可以使用，并且 MySQL 带有内置功能可以把多样化的输入格式变为一个标准格式。</p>

<p>&nbsp; &nbsp; &nbsp;类型 &nbsp; &nbsp; 大小(字节) &nbsp; &nbsp; 范围 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 格式 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;用途&nbsp;<br />
&nbsp; &nbsp; &nbsp;DATE &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp;1000-01-01/9999-12-31 YYYY-MM-DD &nbsp; &nbsp;日期值&nbsp;<br />
&nbsp; &nbsp; &nbsp;TIME &nbsp; &nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp;&#39;-838:59:59&#39;/&#39;838:59:59&#39; HH:MM:SS &nbsp; &nbsp;时间值或持续时间&nbsp;<br />
&nbsp; &nbsp; &nbsp;YEAR &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; 1901/2155 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; YYYY &nbsp; &nbsp; &nbsp; 年份值&nbsp;<br />
&nbsp; &nbsp; &nbsp;DATETIME &nbsp; 8 &nbsp; &nbsp; &nbsp; 1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值&nbsp;<br />
&nbsp; &nbsp; &nbsp;TIMESTAMP &nbsp;4 &nbsp; &nbsp; &nbsp; 1970-01-01 00:00:00/2037 年某时 YYYYMMDD HHMMSS 混合日期和时间值，时间戳</p>

<p>&nbsp; &nbsp; DATE、TIME 和 TEAR 类型<br />
&nbsp; &nbsp; 　　MySQL 用 DATE 和 TEAR 类型存储简单的日期值，使用 TIME 类型存储时间值。这些类型可以描述为字符串或不带分隔符的整数序列。如果描述为字符串,<br />
&nbsp; &nbsp; DATE 类型的值应该使用连字号作为分隔符分开，而 TIME 类型的值应该使用冒号作为分隔符分开。<br />
&nbsp; &nbsp; 　　需要注意的是，没有冒号分隔符的 TIME 类型值，将会被 MySQL 理解为持续的时间，而不是时间戳。</p>

<p>&nbsp; &nbsp; MySQL 还对日期的年份中的两个数字的值，或是 SQL 语句中为 TEAR 类型输入的两个数字进行最大限度的通译。因为所有 TEAR 类型的值必须用 4 个数字存储。<br />
&nbsp; &nbsp; MySQL 试图将 2 个数字的年份转换为 4 个数字的值。把在 00-69 范围内的值转换到 2000-2069 范围内。把 70-99 范围内的值转换到 1970-1979 之内。<br />
&nbsp; &nbsp; 如果 MySQL 自动转换后的值并不符合我们的需要，请输入 4 个数字表示的年份。<br />
&nbsp; &nbsp; DATEYIME 和 TIMESTAMP 类型<br />
&nbsp; &nbsp; 　　除了日期和时间数据类型，MySQL 还支持 DATEYIME 和 TIMESTAMP 这两种混合类型。它们可以把日期和时间作为单个的值进行存储。<br />
&nbsp; &nbsp; 这两种类型通常用于自动存储包含当前日期和时间的时间戳，并可在需要执行大量数据库事务和需要建立一个调试和审查用途的审计跟踪的应用程序中发挥良好作用。<br />
&nbsp; &nbsp; 如果我们对 TIMESTAMP 类型的字段没有明确赋值，或是被赋与了 null 值。MySQL 会自动使用系统当前的日期和时间来填充它。</p>

<h2>四.复合类型</h2>

<p>　　MySQL 还支持两种复合数据类型 ENUM 和 SET，它们扩展了 SQL 规范。虽然这些类型在技术上是字符串类型，但是可以被视为不同的数据类型。<br />
一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。</p>

<p>ENUM 类型<br />
&nbsp; &nbsp; 　　ENUM 类型因为只允许在集合中取得一个值，有点类似于单选项。在处理相互排拆的数据时容易让人理解，比如人类的性别。ENUM 类型字段可以从集合中取得一个值或使用 null 值，<br />
&nbsp; &nbsp; 除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。另外如果插入值的大小写与集合中值的大小写不匹配，MySQL 会自动使用插入值的大小写转换成与集合中大小写一致的值。<br />
&nbsp; &nbsp; &nbsp; &nbsp;ENUM 类型在系统内部可以存储为数字，并且从 1 开始用数字做索引。一个 ENUM 类型最多可以包含 65536 个元素，其中一个元素被 MySQL 保留，用来存储错误信息，<br />
&nbsp; &nbsp; 这个错误值用索引 0 或者一个空字符串表示。<br />
&nbsp; &nbsp; MySQL 认为 ENUM 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。这说明通过搜索包含空字符串或对应数字索引为 0 的行就可以很容易地找到错误记录的位置。</p>

<p>SET 类型<br />
&nbsp; &nbsp; 　SET 类型与 ENUM 类型相似但不相同。SET 类型可以从预定义的集合中取得任意数量的值。并且与 ENUM 类型相同的是任何试图在 SET 类型字段中插入非预定义的值都会使&nbsp;<br />
&nbsp; &nbsp; MySQL 插入一个空字符串。如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。</p>

<p>&nbsp; &nbsp; 　一个 SET 类型最多可以包含 64 项元素。在 SET 元素中值被存储为一个分离的&ldquo;位&rdquo;序列，这些&ldquo;位&rdquo;表示与它相对应的元素。&ldquo;位&rdquo;是创建有序元素集合的一种简单而有效的方式。<br />
&nbsp; &nbsp; 并且它还去除了重复的元素，所以 SET 类型中不可能包含两个相同的元素。<br />
&nbsp; &nbsp; 希望从 SET 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 0 的行。</p>

<p>&nbsp; &nbsp; 通过对每种数据类型的用途，物理存储，表示范围等有一个概要的了解。这样在面对具体应用时，就可以根据相应的特来来选择合适的数据类型，使得我们能够争取在满足应用的基础上，<br />
&nbsp; &nbsp; 用较小的存储代价换来较高的数据库性能。<br />
&nbsp;</p>

<h2>五、数据约束</h2>

<pre>
<a href="https://www.baidu.com/s?wd=mysql%E6%95%B0%E6%8D%AE%E5%BA%93&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y4nWRzuH6krHTLPWRdrHcv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En101PWRkn1RdnWcLP1RvnW6Y" rel="nofollow" target="_blank">mysql数据库</a>中以 ：数据类型(m)  来约束数据，其中 数字m在不同的数据类型中表示含义是不同的。 整型数系统已经限制了<a href="https://www.baidu.com/s?wd=%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y4nWRzuH6krHTLPWRdrHcv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En101PWRkn1RdnWcLP1RvnW6Y" rel="nofollow" target="_blank">取值范围</a>，tinyint占一个字节、int占4个字节。所以整型数后面的m不是表示的数据长度，而是表示数据在显示时显示的最小长度（长度为字符数）。
tinyint(1) 这里的1表示的是 最短显示一个字符。tinyint(2) 这里的2表示的是 最短显示两个字符，但这里光设置m是没有意义的，你还需要指定当数据少于长度m时用什么来填充，比如zerofill（表示有0填充）。设置tinyint(2) zerofill 你插入1时他会显示01。设置tinyint(4) zerofill 你插入1时他会显示0001。</pre>
