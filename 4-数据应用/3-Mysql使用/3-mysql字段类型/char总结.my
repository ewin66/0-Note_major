<h1>char数据类型总结</h1>

<h2>一、几种类型介绍</h2>

<p>1、char[(n)]</p>

<p>长度为 n 个字节的固定长度且非 Unicode 的字符数据。n 必须是一个介于 1 和 8,000 之间的数值。存储大小为 n 个字节。char 在 SQL-92 中的同义词为 character。<br />
<br />
2、varchar[(n)]</p>

<p>长度为 n 个字节的可变长度且非 Unicode 的字符数据。n 必须是一个介于 1 和 8,000 之间的数值。存储大小为输入数据的字节的实际长度，<strong>而不是 n 个字节</strong>。所输入的数据字符长度可以为零。varchar 在 SQL-92 中的同义词为 char varying 或 character varying。<br />
如果没有在数据定义或变量声明语句中指定 n，则默认长度为 1。如果没有使用 CAST 函数指定 n，则默认长度为 30。</p>

<p>将为使用 char 或 varchar 的对象被指派数据库的默认排序规则，除非用 COLLATE 子句另外指派了特定的排序规则。该排序规则控制用于存储字符数据的代码页。<br />
当排序规则代码页使用双字节字符时，存储大小仍然为 n 个字节。根据字符串的不同，n 个字节的存储大小可能小于 n 个字符。<br />
<br />
3、nchar(n)</p>

<p>包含 n 个字符的固定长度 Unicode 字符数据。n 的值必须介于 1 与 4,000 之间。存储大小为 n 字节的两倍。nchar 在 SQL-92 中的同义词为 national char 和 national character。</p>

<p>nchar 是固定长度 Unicode 数据的数据类型，nvarchar 是可变长度 Unicode 数据的数据类型，二者均使用 UNICODE UCS-2 字符集。</p>

<p>4、nvarchar(n)</p>

<p>包含 n 个字符的可变长度 Unicode 字符数据。n 的值必须介于 1 与 4,000 之间。字节的存储大小是所输入字符个数的两倍。所输入的数据字符长度可以为零。nvarchar 在 SQL-92 中的同义词为 national char varying 和 national character varying。<br />
如果没有在数据定义或变量声明语句中指定 n，则默认长度为 1。如果没有使用 CAST 函数指定 n，则默认长度为 30。<br />
<br />
使用 nchar 或 nvarchar 的对象被赋予数据库的默认排序规则，除非使用 COLLATE 子句赋予特定的排序规则。<br />
SET ANSI_PADDING OFF 不适用于 nchar 或 nvarchar。SET ANSI_PADDING ON 永远适用于 nchar 和 nvarchar。</p>

<h2>二、对比区别:</h2>

<p>1．CHAR的长度是固定的，而VARCHAR2的长度是可以变化的， 比如，存储字符串&ldquo;abc&quot;，对于CHAR (20)，表示你存储的字符将占20个字节(包括17个空字符)，而同样的VARCHAR2 (20)则只占用3个字节的长度，20只是最大值，当你存储的字符小于20时，按实际长度存储。&nbsp;<br />
2．CHAR的效率比VARCHAR2的效率稍高。&nbsp;<br />
3．目前VARCHAR是VARCHAR2的同义词。工业标准的VARCHAR类型可以存储空字符串，但是oracle不这样做，尽管它保留以后这样做的权利。<strong>Oracle自己开发了一个数据类型VARCHAR2，这个类型不是一个标准的VARCHAR，它将在数据库中varchar列可以存储空字符串的特性改为存储NULL值</strong>。如果你想有向后兼容的能力，<strong>Oracle建议使用VARCHAR2而不是VARCHAR</strong>。<br />
<br />
何时该用CHAR，何时该用varchar2？&nbsp;<br />
CHAR与VARCHAR2是一对矛盾的统一体，两者是互补的关系.&nbsp;<br />
VARCHAR2比CHAR节省空间，在效率上比CHAR会稍微差一些，即要想获得效率，就必须牺牲一定的空间，这也就是我们在数据库设计上常说的&lsquo;以空间换效率&rsquo;。&nbsp;<br />
VARCHAR2虽然比CHAR节省空间，<strong>但是如果一个VARCHAR2列经常被修改，而且每次被修改的数据的长度不同，这会引起&lsquo;行迁移&rsquo;(Row Migration)现象，而这造成多余的I/O</strong>，是数据库设计和调整中要尽力避免的，在这种情况下用CHAR代替VARCHAR2会更好一些。<br />
<br />
char varchar nchar nvarchar 四者的区别<br />
<br />
===========================================================================<br />
<br />
<br />
&nbsp; &nbsp; 包含 &nbsp; &nbsp; n &nbsp; &nbsp; 个字符的可变长度 &nbsp; &nbsp; Unicode &nbsp; &nbsp; 字符数据。n &nbsp; &nbsp; 的值必须介于 &nbsp; &nbsp; 1 &nbsp; &nbsp; 与 &nbsp; &nbsp; 4,000 &nbsp; &nbsp; 之间。字节的存储大小是所输入字符个数的两倍。所输入的数据字符长度可以为零。nvarchar &nbsp; &nbsp; 在 &nbsp; &nbsp; SQL-92 &nbsp; &nbsp; 中的同义词为 &nbsp; &nbsp; national &nbsp; &nbsp; char &nbsp; &nbsp; varying &nbsp; &nbsp; 和 &nbsp; &nbsp; national &nbsp; &nbsp; character &nbsp; &nbsp; varying。&nbsp;&nbsp;&nbsp;<br />
<br />
<br />
&nbsp; &nbsp; SET &nbsp; &nbsp; ANSI_PADDING &nbsp; &nbsp; OFF &nbsp; &nbsp; 不适用于 &nbsp; &nbsp; nchar &nbsp; &nbsp; 或 &nbsp; &nbsp; nvarchar。SET &nbsp; &nbsp; ANSI_PADDING &nbsp; &nbsp; ON &nbsp; &nbsp; 永远适用于 &nbsp; &nbsp; nchar &nbsp; &nbsp; 和 &nbsp; &nbsp; nvarchar。 &nbsp;&nbsp;</p>

<h2>三、char和varchar &nbsp;</h2>

<p>&nbsp; &nbsp; nchar(n) &nbsp;&nbsp; &nbsp;<br />
&nbsp; &nbsp; 包含 &nbsp; &nbsp; n &nbsp; &nbsp; 个字符的固定长度 &nbsp; &nbsp; Unicode &nbsp; &nbsp; 字符数据。n &nbsp; &nbsp; 的值必须介于 &nbsp; &nbsp; 1 &nbsp; &nbsp; 与 &nbsp; &nbsp; 4,000 &nbsp; &nbsp; 之间。存储大小为 &nbsp; &nbsp; n &nbsp; &nbsp; 字节的两倍。nchar &nbsp; &nbsp; 在 &nbsp; &nbsp; SQL-92 &nbsp; &nbsp; 中的同义词为 &nbsp; &nbsp; national &nbsp; &nbsp; char &nbsp; &nbsp; 和 &nbsp; &nbsp; national &nbsp; &nbsp; character。 &nbsp;&nbsp;&nbsp;<br />
&nbsp; &nbsp; nvarchar(n) &nbsp;&nbsp;&nbsp;</p>

<p>&nbsp; &nbsp; varchar[(n)] &nbsp;<br />
&nbsp; &nbsp; 长度为 &nbsp; &nbsp; n &nbsp; &nbsp; 个字节的可变长度且非 &nbsp; &nbsp; Unicode &nbsp; &nbsp; 的字符数据。n &nbsp; &nbsp; 必须是一个介于 &nbsp; &nbsp; 1 &nbsp; &nbsp; 和 &nbsp; &nbsp; 8,000 &nbsp; &nbsp; 之间的数值。存储大小为输入数据的字节的实际长度，而不是 &nbsp; &nbsp; n &nbsp; &nbsp; 个字节。所输入的数据字符长度可以为零。varchar &nbsp; &nbsp; 在 &nbsp; &nbsp; SQL-92 &nbsp; &nbsp; 中的同义词为 &nbsp; &nbsp; char &nbsp; &nbsp; varying &nbsp; &nbsp; 或 &nbsp; &nbsp; character &nbsp; &nbsp; varying。 &nbsp;<br />
&nbsp; &nbsp; 注释 &nbsp;<br />
&nbsp; &nbsp; 如果没有在数据定义或变量声明语句中指定 &nbsp; &nbsp; n，则默认长度为 &nbsp; &nbsp; 1。如果没有使用 &nbsp; &nbsp; CAST &nbsp; &nbsp; 函数指定 &nbsp; &nbsp; n，则默认长度为 &nbsp; &nbsp; 30。 &nbsp;<br />
<br />
&nbsp; &nbsp; 将为使用 &nbsp; &nbsp; char &nbsp; &nbsp; 或 &nbsp; &nbsp; varchar &nbsp; &nbsp; 的对象被指派数据库的默认排序规则，除非用 &nbsp; &nbsp; COLLATE &nbsp; &nbsp; 子句另外指派了特定的排序规则。该排序规则控制用于存储字符数据的代码页。 &nbsp;&nbsp;&nbsp;<br />
<br />
&nbsp; &nbsp; 支持多语言的站点应考虑使用 &nbsp; &nbsp; Unicode &nbsp; &nbsp; nchar &nbsp; &nbsp; 或 &nbsp; &nbsp; nvarchar &nbsp; &nbsp; 数据类型以尽量减少字符转换问题。</p>

<p>&nbsp; &nbsp; 如果希望列中的数据值大小接近一致，请使用 &nbsp; &nbsp; char。 &nbsp;&nbsp;</p>

<p>&nbsp; &nbsp; 如果希望列中的数据值大小显著不同，请使用 &nbsp; &nbsp; varchar。 &nbsp; &nbsp;<br />
<br />
&nbsp; &nbsp; 如果执行 CREATE TABLE 或 ALTER TABLE 时 SET ANSI_PADDING 为 OFF，则一个定义为 NULL 的 char 列将被作为 varchar 处理。&nbsp;<br />
<br />
&nbsp; &nbsp; 当排序规则代码页使用双字节字符时，存储大小仍然为 &nbsp; &nbsp; n &nbsp; &nbsp; 个字节。根据字符串的不同，n &nbsp; &nbsp; 个字节的存储大小可能小于 &nbsp; &nbsp; n &nbsp; &nbsp; 个字符。 &nbsp;<br />
<br />
总结：<br />
&nbsp; &nbsp;1、 varchar： &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可变长度的非 &nbsp; &nbsp;Unicode &nbsp; 数据，最长为 &nbsp; &nbsp;8,000 &nbsp; &nbsp;个字符。 &nbsp;<br />
&nbsp; &nbsp;2、nvarchar： &nbsp;<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可变长度 &nbsp; &nbsp;Unicode &nbsp; &nbsp;数据，其最大长度为 &nbsp; &nbsp;4,000 &nbsp; &nbsp;字符。 &nbsp;<br />
&nbsp; &nbsp;3、char:<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 固定长度的非 Unicode 字符数据，最大长度为 8,000 个字符。<br />
&nbsp; &nbsp;4、nchar<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;固定长度的 Unicode 数据，最大长度为 4,000 个字符。<br />
<br />
&nbsp; &nbsp;5、char和varchar都是字符串类型的</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 用Unicode编码的字符串,结果是字符的整数值</p>

<p>================================================================================================================================</p>

<p><strong>char是定长的，varchar是变长的。</strong></p>

<p>varchar2应该是varchar的升级，似乎只有<a href="http://lib.csdn.net/base/oracle" target="_blank" title="Oracle知识库">Oracle</a>才有，这里不作讨论。</p>

<p>char定长存储，速度快，但是存在一定的空间浪费，适用于字段不是很大，对速度要求高的场合。速度快是因为其在物理上是按定长存储的，这样，就可以根据偏移址一次取出固定长度的字符。</p>

<p>varchar变长存储，所以效率不如char。varchar在存储时，在物理上要先存储该字段的实际长度，然后才是内容。这样读取的时候，就要读取两次，一次读它的长度，然后才是内容。所以它的访问速度会比char慢一些。但它可以节省空间。　</p>

<p>由于<a href="http://lib.csdn.net/base/mysql" target="_blank" title="MySQL知识库">MySQL</a>自身的特点，如果一个数据表存在varchar字段，则表中的char字段将自动转为varchar字段。在这种情况下设置的char是没有意义的。所以要想利用char的高效率，要保证该表中不存在varchar字段；否则，应该设为varchar字段。</p>

<p>&nbsp;</p>

<p>SQL中char、varchar、text和nchar、nvarchar、ntext的区别<br />
1、CHAR。CHAR存储定长数据很方便，CHAR字段上的索引效率级高，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间。<br />
2、VARCHAR。存储变长数据，但存储效率没有CHAR高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。VARCHAR类型的实际长度是它的值的实际长度+1。为什么&ldquo;+1&rdquo;呢？这一个字节用于保存实际使用了多大的长度。<br />
从空间上考虑，用varchar合适；从效率上考虑，用char合适，关键是根据实际情况找到权衡点。<br />
3、TEXT。text存储可变长度的非Unicode数据，最大长度为2^31-1(2,147,483,647)个字符。<br />
4、NCHAR、NVARCHAR、NTEXT。这三种从名字上看比前面三种多了个&ldquo;N&rdquo;。<strong>它表示存储的是Unicode数据类型的字符</strong>。我们知道字符中，英文字符只需要一个字节存储就足够了，但汉字众多，需要两个字节存储，英文与汉字同时存在时容易造成混乱，Unicode字符集就是为了解决字符集这种不兼容的问题而产生的，它所有的字符都用两个字节表示，即英文字符也是用两个字节表示。nchar、nvarchar的长度是在1到4000之间。和char、varchar比较起来，nchar、nvarchar则最多存储4000个字符，不论是英文还是汉字；而char、varchar最多能存储8000个英文，4000个汉字。可以看出使用nchar、nvarchar数据类型时不用担心输入的字符是英文还是汉字，较为方便，但在存储英文时数量上有些损失。<br />
所以一般来说，如果含有中文字符，用nchar/nvarchar，如果纯英文和数字，用char/varchar。</p>

<p>------------------------</p>

<p><a href="http://lib.csdn.net/base/mysql" target="_blank" title="MySQL知识库">数据库</a>定义到char类型的字段时 char、nchar、varchar、nvarchar、text、ntext中哪一种呢?</p>

<p>数据库定义到char类型的字段时，不知道大家是否会犹豫一下，到底选char、nchar、varchar、nvarchar、text、ntext中哪一种呢？结果很可能是两种，一种是节俭人士的选择：最好是用定长的，感觉比变长能省些空间，而且处理起来会快些，无法定长只好选用定长，并且将长度设置尽可能地小；另一种是则是觉得无所谓，尽量用可变类型的，长度尽量放大些。<br />
鉴于现在硬件像萝卜一样便宜的大好形势，纠缠这样的小问题实在是没多大意义，不过如果不弄清它，总觉得对不起劳累过度的CPU和硬盘。</p>

<p>下面开始了(以下说明只针对SqlServer有效)：<br />
1、当使用非unicode时慎用以下这种查询：<br />
select f from t where f = N&#39;xx&#39;<br />
原因：无法利用到索引，因为数据库会将f先转换到unicode再和N&#39;xx&#39;比较<br />
2、char 和相同长度的varchar处理速度差不多（后面还有说明）<br />
3、varchar的长度不会影响处理速度！！！（看后面解释）<br />
4、索引中列总长度最多支持总为900字节，所以长度大于900的varchar、char和大于450的nvarchar,nchar将无法创建索引<br />
5、text、ntext上是无法创建索引的<br />
6、O/R Mapping中对应实体的属性类型一般是以string居多，用char[]的非常少，所以如果按mapping的合理性来说，可变长度的类型更加吻合<br />
7、一般基础资料表中的name在实际查询中基本上全部是使用like &#39;%xx%&#39;这种方式，而这种方式是无法利用索引的，所以如果对于此种字段，索引建了也白建<br />
8、其它一些像remark的字段则是根本不需要查询的，所以不需要索引<br />
9、varchar的存放和string是一样原理的，即length {block}这种方式，所以varchar的长度和它实际占用空间是无关的<br />
10、对于固定长度的字段，是需要额外空间来存放NULL标识的，所以如果一个char字段中出现非常多的NULL，那么很不幸，你的占用空间比没有NULL的大（但这个大并不是大太多，因为NULL标识是用bit存放的，可是如果你一行中只有你一个NULL需要标识，那么你就白白浪费1byte空间了，罪过罪过！），这时候，你可以使用特殊标识来存放，如：&#39;NV&#39;<br />
11、同上，所以对于这种NULL查询，索引是无法生效的，假如你使用了NULL标识替代的话，那么恭喜你，你可以利用到索引了<br />
12、char和varchar的比较成本是一样的，现在关键就看它们的索引查找的成本了，因为查找策略都一样，因此应该比较谁占用空间小。在存放相同数量的字符情况下，如果数量小，那么char占用长度是小于varchar的，但如果数量稍大，则varchar完全可能小于char，而且要看实际填充数值的充实度，比如说varchar(3)和char(3)，那么理论上应该是char快了，但如果是char(10)和varchar(10)，充实度只有30%的情况下，理论上就应该是varchar快了。因为varchar需要额外空间存放块长度，所以只要length(1-fillfactor)大于这个存放空间（好像是2字节)，那么它就会比相同长度的char快了。<br />
13、nvarchar比varchar要慢上一些，而且对于非unicode字符它会占用双倍的空间，那么这么一种类型推出来是为什么呢？对，就是为了国际化，对于unicode类型的数据，排序规则对它们是不起作用的，而非unicode字符在处理不同语言的数据时，必须指定排序规则才能正常工作，所以n类型就这么一点好处。</p>

<p><br />
<strong>总结：<br />
1、如果数据量非常大，又能100%确定长度且保存只是ansi字符，那么char<br />
2、能确定长度又不一定是ansi字符或者，那么用nchar；<br />
3、不确定长度，要查询且希望利用索引的话，用nvarchar类型吧，将它们设到400；<br />
4、不查询的话没什么好说的，用nvarchar(4000)<br />
5、性格豪爽的可以只用3和4，偶尔用用1，毕竟这是一种额外说明，等于告诉别人说，我一定需要长度为X位的数据</strong></p>

<p>&nbsp;</p>

<h1><a href="http://www.cnblogs.com/flqcchblog/p/4560781.html" id="cb_post_title_url">数据库中char、varchar、varchar2、nvarchar之间的关系</a></h1>

<p>符串&ldquo;abc&quot;，对于CHAR (20)，表示你存储的字符将占20个字节(包括17个空字符)，而同样的VARCHAR2 (20)则只占用3个字节的长度，20只是最大值，当你存储的字符小于20时，按实际长度存储。&nbsp;</p>

<p>oracle中，会有一个varchar2型的数据类型，varchar2型与varchar型的区别：</p>

<p>1、varchar2把所有字符都占两字节处理(一般情况下)，varchar只对汉字和全角等字符占两字节，数字，英文字符等都是一个字节；<br />
2、VARCHAR2把空串等同于null处理，而varchar仍按照空串处理；<br />
3、VARCHAR2字符要用几个字节存储，要看数据库使用的字符集，<br />
大部分情况下建议使用varchar2类型，可以保证更好的兼容性。</p>

<p>varchar(n),nvarchar(n) 中的n怎么解释：<br />
　　nvarchar(n)最多能存n个字符，不区分中英文。<br />
　　varchar(n)最多能存n个字节，一个中文是两个字节。<br />
所占空间：<br />
　　nvarchar(n)一个字符会占两个字节空间。<br />
　　varchar(n)中文占两字节空间，英文占一个。<br />
n的取值范围：<br />
　　nvarchar(n)&nbsp;&nbsp; n的范围是：1与4000之间<br />
　　varchar(n)&nbsp;&nbsp; n的范围是：1与8000之间<br />
n的大小是否会影响性能：<br />
　　varchar及nvarchar里的长度 n 不会影响空间大小及性能。除非n是max并且内容大于4000或8000<br />
　　设置n更多的是业务需要，如限制身份证只能输入18位，再多就报错，或者防止恶意攻击撑爆硬盘。对空间及性能都没有影响<br />
n设置多大比较好：<br />
　　既然对空间及性能都没有影响，那我们只要考虑业务需要就可以了，我分析过微软的数据库，大都设置为：256，也会看到64,128,512,max等，可能是便于记忆吧。<br />
varchar(n),nvarchar(n)存储空间举例解释：<br />
　　包含 n 个字符的可变长度 Unicode 字符数据。字节的存储大小是所输入字符个数的两倍。&nbsp;<br />
　　两字段分别有字段值：我和coffee&nbsp;<br />
　　那么varchar字段占2&times;2+6=10个字节的存储空间，而nvarchar字段占8&times;2=16个字节的存储空间。&nbsp;<br />
　　如字段值只是英文可选择varchar，而字段值存在较多的双字节（中文、韩文等）字符时用nvarchar。<br />
varchar和nvarchar如何选择？<br />
　　varchar在SQL Server中是采用单字节来存储数据的，nvarchar是使用Unicode来存储数据的．中文字符存储到SQL Server中会保存为两个字节（一般采用Unicode编码），英文字符保存到数据库中，如果字段的类型为varchar，则只会占用一个字节，而如果字段的类型为nvarchar，则会占用两个字节．<br />
　　正常情况下，我们使用varchar也可以存储中文字符，但是如果遇到操作系统是英文操作系统并且对中文字体的支持不全面时, 在SQL Server存储中文字符为varchar就会出现乱码(显示为??)．而且正常情况下，主机都会支持中文的环境，所以如果使用varchar来存储数据，在开发阶段是发现不了的．多数情况下，在布署的时候也不会有问题．<br />
　　但是！如果布署的主机是英文操作系统，并且不支持中文环境，那问题就出来了．所有的varchar字段在存储中文的时候都会变成乱码（显示为??）．而且一般情况下你不会知道这是因为你采用了错误的数据类型来存储所造成的，你会试着去装中文字体，试着去设置操作系统的语言环境．．．这些都不能解决问题，唯一能解决问题的是把数据库字段的类型个性为nvarchar（或者nchar）．对项目管理比较熟悉的朋友应该都知道，到布署阶段再来修改数据库是一个很恐怖的事情．<br />
　　使用nvarchar的另一个非常好处就是在判断字符串的时候可以不需要考虑中英文两种字符的差别．<br />
　　当然，使用nvarchar存储英文字符会增大一倍的存储空间．但是在存储代价已经很低廉的情况下，优先考虑兼容性会给你带来更多好处的．<br />
　　所以在Design的时候应该尽量使用nvarchar来存储数据．只有在你确保该字段不会保存中文的时候，才采用varchar来存储．</p>

<p>如果 varchar(300) 和 varchar(8000) 都存储相同的字符数，性能上是没有差别的，存储行为上也没有不同。因为它们都有相同的存储结构，两个字节的偏移，两个字节的列数（如果表中所有的列都是 varchar 类型）。区别只在于存储容量上。<br />
大多数的性能比较都集中在 varchar 和 char，varchar 和 varchar(max) 上。还有，行外存储（SQL Server 2005 支持的）。<br />
<br />
　　varchar(max) （lob 类型）与 varchar 存储方式是不同的。<br />
　　当 LOB 数据足够小时，可以考虑将数据直接存储在数据行（行所在的数据页面）中，从而可以避免额外的读取 LOB 页面，提升访问 LOB 数据的效率（将 LOB 数据直接存储在数据页面的阈值由 text in row 选项设置）。<br />
而当 LOB 数据大于此阈值，或者所在行的大小超过了 8060 字节（单行最大 SIZE），LOB 数据将会存储在 LOB 页面，而在数据页面中保留一个指向 LOB 页面的 16 字节的指针。其访问效率当然会将低。<br />
另外还有，恶意用户可以利用这一点&ldquo;撑爆&rdquo;你的磁盘。</p>

<p>&nbsp;</p>

<p>1.错误提示：</p>

<p>&nbsp; &nbsp; &nbsp;mysql的Data truncation: Data too long for column &#39;path&#39; at row 1</p>

<p>错误原因：</p>

<p>　　　1.字段过长而导致出错的,</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp; 2. 可能是因为数据库里的表设置的字符集不相同。</p>

<p>解决办法：</p>

<p>　　varchar(10) &mdash;&mdash;&gt;varchar(20)</p>

<p>　　alter table `cms_activity_test` convert to character set gbk collate gbk_chinese_ci;(单独修改指定表的字符集)</p>

<p>&nbsp;</p>

<p>其他参考：</p>

<p>mysql和oracle做数据同步。其中表的一个字段在mysql中设置为<strong>varchar(6),</strong>Oracle中为<strong>varchar2(6)</strong><br />
但mysql中能正常存放的数据同步到oracle中却抱<strong>ORA-12899: value too large for column</strong>错误。<br />
这是为什么呢？</p>

<p><strong>mysql中varchar(6)代表可以存放6个汉字，6个字母，或6个数字。<br />
oracle中varchar2(6)代表可以中存放6个字节。即oracle中varchar2的长度代表字节数而不是字符数。<br />
mysql中一个汉字占三个字节，Oracle中一个汉字占两个字节。</strong></p>

<p>虽然mysql varchar 和orache varchar2中字段设置相同的长度，但oracle中却存放不下</p>

<p>SQL&gt; insert into toracle values(&#39;北京蒙迪艾尔&#39;);<br />
insert into toracle values(&#39;北京蒙迪艾尔&#39;)<br />
ORA-12899: value too large for column &quot;SCOTT&quot;.&quot;TORACLE&quot;.&quot;NAME&quot; (actual: 12, maximum: 6)</p>

<p>-- 在oracle中varchar2(6)中插入6个汉字失败</p>

<pre>
1.varchar2把所有字符都占两字节处理(一般情况下)，varchar只对汉字和全角等字符占两字节，数字，英文字符等都是一个字节；
2.VARCHAR2把空串等同于null处理，而varchar仍按照空串处理；
3.VARCHAR2字符要用几个字节存储，要看数据库使用的字符集，
大部分情况下建议使用varchar2类型，可以保证更好的兼容性。</pre>

<p>&nbsp;</p>

<h1><a href="http://www.cnblogs.com/iyangyuan/p/3491215.html" id="cb_post_title_url">oracle数据库中varchar2陷阱</a></h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oracle数据库相信大家都比较熟悉，数据库中有一种非常常用的数据类型：字符串型。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对应该类型，在oracle中有三种比较常用的类型：varchar2(byte)、varchar2(char)、nvarchar2()。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么这三种类型到底有什么区别呢？</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先，我们要时刻记清：<strong>无论是</strong><strong>varchar2</strong><strong>还是nvarchar2</strong><strong>，最大字节数都是4000</strong><strong>。</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>varchar2(byte)</strong>：就是默认的表示方式，比如我们写成：varchar2(100)，就相当于varchar2(100 byte)，<strong>表示最大字节数是</strong><strong>100</strong><strong>，该字段最多能容纳100</strong><strong>个字节，强调空间大小</strong>。由于我们描述的是字节，因此，保存汉字等字符时，就要小心了。如果你的数据库用的是GBK编码，那么一个汉字将占用2个字节，最多能存50个汉字，如果你的数据库用的是UTF8编码，那么一个汉字将占用3个字节，最多能存33个汉字。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>varchar2(char)</strong><strong>：表示最大字符数是100</strong><strong>，该字段最多能容纳100</strong><strong>个字符，强调个数。</strong>假设我们写成varchar2(100 char)，那么无论是数字、字母、汉字，都看成一个字符，最多写100个，当然，汉字越多，占用的空间越大，同样遵循上边的数据库编码原则。例如：存入一个汉字，底层占2或3个字节，存入一个字母，占1个字节，<strong>绝对不是某些文章所说</strong><strong>1</strong><strong>个字母或数字也占2</strong><strong>或3</strong><strong>个字节！</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>nvarchar2()</strong><strong>：没有byte</strong><strong>、char</strong><strong>之分，类似于varchar2(char)</strong><strong>，只不过nvarchar2()</strong><strong>屏蔽了数据库编码，无论是何种编码，nvarchar2()</strong><strong>中一个汉字都占两个字节。</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般的教程，也就到这了，可是如果再多一步思考，会发现一个致命问题。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实际应用中，很可能会出现这种写法：varchar2(1400 char)，我们主观的认为，这个字段最长不能超过1400个字符，这意味着我们可能会存入1399个字符，貌似很正确的样子。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是，如果这1399个字符都是汉字，字符长度并没有超过1400，看起来一切正常，但实际上我们损失了一部分数据，为什么？</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>因为1399</strong><strong>个汉字，按UTF8</strong><strong>编码来说(99%</strong><strong>的项目都是UTF8</strong><strong>编码吧。。)</strong><strong>，需要占用1399*3=4197</strong><strong>个字节，而文章开篇就说，无论是什么char</strong><strong>，最大长度就是4000</strong><strong>字节，一个也不能多，因此多出来的197</strong><strong>个字节，都会抹去，而整个过程中，无任何错误提示，你的数据就这样蒸发了！</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所以，对于GBK编码的数据库而言，安全的写法为：varchar2(2000 char)、nvarchar2(2000)，对于UTF8编码的数据库而言，安全的写法为：varchar2(1333 char)、nvarchar2(2000)。</p>
