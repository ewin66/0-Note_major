<h1>MySQL中UNSIGNED和ZEROFILL的介绍</h1>

<p>UNSIGNED:(不建议使用，见下面粗体字)</p>

<p>将数字类型无符号化，这与C和C++这些程序语言的unsigned含义相同。</p>

<p>INT的类型范围-2 147 483 648~2 147 483 647</p>

<p>INT UNSIGNED范围0~4 294 967 295</p>

<p>看起来是个不错的属性选项，特别是对于主键自增长的类型，因为一般来说，用户都希望主键是非负数，然而，在实际使用中，UNSIGNED可能会带来一些负面的影响。</p>

<p>示例</p>

<pre>
CREATE TABLE t(a INT UNSIGNED,b INT UNSIGNED);

INSERT INTO t SELECT 1,2;

SELECT * FROM t;

     a       b 

------  --------

     1         2
</pre>

<p>我们创建了一个表t，存储引擎为InnoDB,表t 上有两个UNSIGNED的INT类型，输入(1,2)这一行的数据，目前看来是没有问题的，运行如下语句</p>

<pre>
SELECT a-b FROM t;</pre>

<p>&nbsp;</p>

<p>会报错</p>

<p><code>BIGINT UNSIGNED value is out of range in &#39;(`iot2`.`t`.`a` - `iot2`.`t`.`b`)&#39;</code></p>

<p>要怎么才能获得-1这个数呢，只需要将SQL_MODE这个参数进行设置即可</p>

<pre>
SET sql_mode=&#39;NO_UNSIGNED_SUBTRACTION&#39;;

SELECT a-b FROM t;

   a-b 

--------

      -1
</pre>

<p><strong>个人看法是尽量不要使用UNSIGNED，因为可能会带来一些意想不到的的效果，对于INT类型可能存放不了的数据，INT UNSIGNED同样可能存放不了，与其如此，还不如在数据库设计阶段将INT类型提升为BIGINT类型</strong></p>

<p>&nbsp;</p>

<h2>ZEROFILL:</h2>

<p>通过t表来表述</p>

<p><code>CREATE</code>&nbsp;<code>TABLE</code>&nbsp;<code>`t`(&nbsp;</code><code>`a`&nbsp;</code><code>int</code><code>(10) unsigned&nbsp;</code><code>DEFAULT</code>&nbsp;<code>NULL,`b`&nbsp;</code><code>int</code><code>(10) unsigned&nbsp;</code><code>DEFAULT</code>&nbsp;<code>NULL</code>&nbsp; &nbsp;<code>) ENGINE=InnoDB&nbsp;</code><code>DEFAULT</code>&nbsp;<code>CHARSET=utf8&nbsp;</code></p>

<p>可以看到int(10)，如果没有ZEROFILL这个属性，括号内int(10)这个10的数字是毫无意义</p>

<p>但是对列添加ZEROFILL属性后，结果就有所不同</p>

<pre>
ALTER TABLE t CHANGE COLUMN a  a INT(4) UNSIGNED ZEROFILL;
</pre>

<p>这里对a列进行了修改，为其添加了ZEROFILL属性，并且将默认的int(10)改成int(4)，在进行查找，返回的结果是</p>

<pre>
     a       b 

------  --------

  0001         2</pre>

<p>这是可以看到a的值由原来的1变为0001，这就是ZEROFILL属性的作用，如果宽度小于设定的宽度(这里宽度为4),则自动填充0，需要注意的是，这只是最后显示的结果，在MySQL中实际存储的还是1</p>

<pre>
SELECT a,HEX(a) FROM t;

     a  hex(a) 

------  --------

  0001  1      
</pre>

<p>可以看到数据库内部存储还是1,0001只是设置了ZEROFILL属性的一种格式化输出而已。</p>
