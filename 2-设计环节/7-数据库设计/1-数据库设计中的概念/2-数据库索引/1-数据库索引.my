<h1>数据库索引</h1>

<p>索引使数据读更快，写更慢。</p>

<p><a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>是对<a href="http://baike.baidu.com/view/1088.htm" target="_blank">数据库</a>表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</p>

<p><a href="http://baike.baidu.com/view/2079871.htm" target="_blank">数据库索引</a></p>

<p>聚簇索引 非聚簇索引</p>

<h3>技术原理</h3>

<p><a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。</p>

<p>例如这样一个查询：select * from table1 where id=10000。如果没有索引，必须遍历整个表，直到ID等于10000的这一行被找到为止；有了<a href="http://baike.baidu.com/subview/262241/8045149.htm" target="_blank">索引</a>之后(必须是在ID这一列上建立的索引)，即可在索引中查找。由于索引是经过某种算法优化过的，因而查找次数要少的多。可见，索引是用来定位的。</p>

<h3>主要种类</h3>

<p>数据库<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>好比是一本书前面的目录，能加快数据库的查询速度。索引分为<a href="http://baike.baidu.com/view/1028053.htm" target="_blank"><strong>聚簇索引</strong></a>和<a href="http://baike.baidu.com/view/1615249.htm" target="_blank"><strong>非聚簇索引</strong></a>两种，聚簇索引 是按照数据存放的物理位置为顺序的，而非聚簇索引就不一样了；聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索很快。</p>

<p>根据数据库的功能，可以在<a href="http://baike.baidu.com/view/8268.htm" target="_blank">数据库设计</a>器中创建三种<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>：<a href="http://baike.baidu.com/view/709651.htm" target="_blank">唯一索引</a>、主键索引和<a href="http://baike.baidu.com/view/692530.htm" target="_blank">聚集索引</a>。有关数据库所支持的索引功能的详细信息，请参见数据库文档。</p>

<p>提示：尽管唯一索引有助于定位信息，但为获得最佳性能结果，建议改用<a href="http://baike.baidu.com/view/68068.htm" target="_blank">主键</a>或<a href="http://baike.baidu.com/view/1550298.htm" target="_blank">唯一约束</a>。</p>

<p><strong>唯一索引</strong> 唯一索引是不允许其中任何两行具有相同索引值的索引。</p>

<p>当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。</p>

<h4><strong>主键索引</strong></h4>

<p>数据库表经常有一列或多列组合，其值唯一标识表中的每一行。该列称为表的<a href="http://baike.baidu.com/view/68068.htm" target="_blank">主键</a>。</p>

<p>在数据库关系图中为表定义主键将自动创建主键<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>，主键索引是<a href="http://baike.baidu.com/view/709651.htm" target="_blank">唯一索引</a>的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。</p>

<h4><strong><a href="http://baike.baidu.com/view/692530.htm" target="_blank">聚集索引</a></strong></h4>

<p>在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。</p>

<p>如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。</p>

<p>聚集索引和非聚集索引的区别，如字典默认按字母顺序排序，读者如知道某个字的读音可根据字母顺序快速定位。因此聚集索引和表的内容是在一起的。如读者需查询某个生僻字，则需按字典前面的索引，举例按偏旁进行定位，找到该字对应的页数，再打开对应页数找到该字。这种通过两个地方而查询到某个字的方式就如非聚集索引。</p>

<h4><strong>索引列</strong></h4>

<p>可以基于数据库表中的单列或多列创建<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>。多列索引可以区分其中一列可能有相同值的行。</p>

<p>如果经常同时搜索两列或多列或按两列或多列排序时，索引也很有帮助。例如，如果经常在同一查询中为姓和名两列设置判据，那么在这两列上创建多列索引将很有意义。</p>

<p>确定索引的有效性：</p>

<p>检查查询的WHERE和JOIN子句。在任一子句中包括的每一列都是索引可以选择的对象。</p>

<p>对新索引进行试验以检查它对运行查询性能的影响。</p>

<p>考虑已在表上创建的索引数量。最好避免在单个表上有很多索引。</p>

<p>检查已在表上创建的索引的定义。最好避免包含共享列的重叠<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>。</p>

<p>检查某列中唯一数据值的数量，并将该数量与表中的行数进行比较。比较的结果就是该列的可选择性，这有助于确定该列是否适合建立索引，如果适合，确定索引的类型。</p>

<h3>基本特点</h3>

<p>建立<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>的目的是加快对表中记录的<strong>查找</strong>或<strong>排序。</strong>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。数据库索引就是为了提高表的搜索效率而对某些字段中的值建立的目录 。</p>

<p>创建索引可以大大提高系统的性能。第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。第五，通过使用<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p>

<p>因为，增加索引也有许多不利的方面。第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立<a href="http://baike.baidu.com/view/1028053.htm" target="_blank">聚簇索引</a>，那么需要的空间就会更大。第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p>

<h3>注意事项</h3>

<p><a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。一般来说，应该在这些列上创建索引：</p>

<p>在经常需要搜索的列上，可以加快搜索的速度；</p>

<p>在作为<a href="http://baike.baidu.com/view/68068.htm" target="_blank">主键</a>的列上，强制该列的唯一性和组织表中数据的排列结构；</p>

<p>在经常用在连接的列上，这些列主要是一些<a href="http://baike.baidu.com/view/68073.htm" target="_blank">外键</a>，可以加快连接的速度；在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</p>

<p>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</p>

<p>在经常使用在WHERE子句中的列上面创建<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>，加快条件的判断速度。</p>

<p>同样，对于有些列不应该创建索引。一般来说，不应该创建索引的这些列具有下列特点：</p>

<p>第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p>

<p>第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，<a href="http://baike.baidu.com/view/691831.htm" target="_blank">结果集</a>的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>，并不能明显加快检索速度。</p>

<p>第三，对于那些定义为text, image和<a href="http://baike.baidu.com/view/3735143.htm" target="_blank">bit数据类型</a>的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少,不利于使用索引。</p>

<p>第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改操作远远多于检索操作时，不应该创建索引。</p>

<h3>操作案例</h3>

<p>最普通的情况，是为出现在where子句的<a href="http://baike.baidu.com/view/159839.htm" target="_blank">字段</a>建一个<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>。为方便讲述，先建立一个如下的表。</p>

<p><strong>CREATE TABLE mytable(</strong></p>

<p>idserial int primary key,</p>

<p>category_id int default 0not null ,</p>

<p>user_id int default 0not null ,</p>

<p>adddate int default 0not null</p>

<p>);</p>

<p>如果在查询时常用类似以下的语句：</p>

<p>SELECT * FROM mytable WHERE category_id=1;</p>

<p>最直接的应对之道，是为category_id建立一个简单的<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>：</p>

<p><strong>CREATE INDEX mytable_categoryid ON mytable (category_id);</strong></p>

<p>OK.如果有不止一个选择条件呢？例如：</p>

<p><strong>SELECT * FROM mytable WHERE category_id=1 AND user_id=2;</strong></p>

<p>第一反应可能是，再给user_id建立一个索引。不好，这不是一个最佳的方法。可以建立多重的<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>。</p>

<p><strong>CREATE INDEX mytable_categoryid_userid ON mytable(category_id,user_id);</strong></p>

<p>注意到在命名时的习惯了吗？使用"表名_<a href="http://baike.baidu.com/view/159839.htm" target="_blank">字段</a>1名_字段2名"的方式。很快就会知道为什么这样做了。</p>

<p>现在已经为适当的字段建立了索引，不过，还是有点不放心吧，可能会问，数据库会真正用到这些索引吗？测试一下就OK，对于大多数的数据库来说，这是很容易的，只要使用EXPLAIN命令：</p>

<p>EXPLAIN</p>

<p>SELECT * FROM mytable</p>

<p>WHERE category_id=1 AND user_id=2;</p>

<p>This is what Postgres 7.1 returns (exactlyasI expected)</p>

<p>NOTICE:QUERY PLAN:</p>

<p>Index Scan using mytable_categoryid_userid on</p>

<p>mytable(cost=0.00..2.02 rows=1 width=16)</p>

<p>EXPLAIN</p>

<p>以上是postgres的数据，可以看到该数据库在查询的时候使用了一个<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>（一个好开始），而且它使用的是创建的第二个索引。看到上面命名的好处了吧，马上知道它使用适当的索引了。</p>

<p>接着，来个稍微复杂一点的，如果有个ORDERBY 子句呢？不管你信不信，大多数的数据库在使用orderby的时候，都将会从索引中受益。</p>

<p>SELECT * FROM mytable</p>

<p>WHERE category_id=1 AND user_id=2</p>

<p>ORDER BY adddate DESC;</p>

<p>很简单，就像为where子句中的<a href="http://baike.baidu.com/view/159839.htm" target="_blank">字段</a>建立一个<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>一样，也为ORDER BY的子句中的字段建立一个索引：</p>

<p>CREATE INDEX mytable_categoryid_userid_adddate ON mytable (category_id,user_id,adddate);</p>

<p>注意:"mytable_categoryid_userid_adddate"将会被截短为"mytable_categoryid_userid_addda"</p>

<p>CREATE</p>

<p>EXPLAIN SELECT * FROM mytable</p>

<p>WHERE category_id=1 AND user_id=2</p>

<p>ORDER BY adddate DESC;</p>

<p>NOTICE:QUERY PLAN:</p>

<p>Sort(cost=2.03..2.03 rows=1 width=16)</p>

<p>->Index Scanusing mytable_categoryid_userid_addda</p>

<p>on mytable(cost=0.00..2.02 rows=1 width=16)</p>

<p>EXPLAIN</p>

<p>看看EXPLAIN的输出，数据库多做了一个没有要求的排序，这下知道性能如何受损了吧，看来对于数据库的自身运作是有点过于乐观了，那么，给数据库多一点提示吧。</p>

<p>为了跳过排序这一步，并不需要其它另外的<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>，只要将查询语句稍微改一下。这里用的是postgres，将给该数据库一个额外的提示--在ORDER BY语句中，加入where语句中的<a href="http://baike.baidu.com/view/159839.htm" target="_blank">字段</a>。这只是一个技术上的处理，并不是必须的，因为实际上在另外两个字段上，并不会有任何的排序操作，不过如果加入，postgres将会知道哪些是它应该做的。</p>

<p>EXPLAIN SELECT * FROM mytable</p>

<p>WHERE category_id=1 AND user_id=2</p>

<p>ORDER BY category_id DESC,user_id DESC,adddate DESC;</p>

<p>NOTICE:QUERY PLAN:</p>

<p>Index Scan Backward using</p>

<p>mytable_categoryid_userid_addda on mytable(cost=0.00..2.02 rows=1 width=16)</p>

<p>EXPLAIN</p>

<p>现在使用料想的<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>了，而且它还挺聪明，知道可以从索引后面开始读，从而避免了任何的排序。</p>

<p>以上说得细了一点，不过如果数据库非常巨大，并且每日的页面请求达上百万算，想会获益良多的。不过，如果要做更为复杂的查询呢，例如将多张表结合起来查询，特别是where限制字句中的<a href="http://baike.baidu.com/view/159839.htm" target="_blank">字段</a>是来自不止一个表格时，应该怎样处理呢？通常都尽量避免这种做法，因为这样数据库要将各个表中的东西都结合起来，然后再排除那些不合适的行，搞不好开销会很大。</p>

<p>如果不能避免，应该查看每张要结合起来的表，并且使用以上的策略来建立索引，然后再用EXPLAIN命令验证一下是否使用了料想中的索引。如果是的话，就OK。不是的话，可能要建立临时的表来将他们结合在一起，并且使用适当的索引。</p>

<p>要注意的是，建立太多的<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>将会影响更新和插入的速度，因为它需要同样更新每个<a href="http://baike.baidu.com/view/2064014.htm" target="_blank">索引文件</a>。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。</p>

<p>以上介绍的只是一些十分基本的东西，其实里面的学问也不少，单凭EXPLAIN是不能判定该方法是否就是最优化的，每个数据库都有自己的一些优化器，虽然可能还不太完善，但是它们都会在查询时对比过哪种方式较快，在某些情况下，建立<a href="http://baike.baidu.com/view/262241.htm" target="_blank">索引</a>的话也未必会快，例如索引放在一个不连续的存储空间时，这会增加读磁盘的负担，因此，哪个是最优，应该通过实际的使用环境来检验。</p>

<p>在刚开始的时候，如果表不大，没有必要作索引，意见是在需要的时候才作索引，也可用一些命令来优化表，例如MySQL可用"OPTIMIZETABLE"。</p>
