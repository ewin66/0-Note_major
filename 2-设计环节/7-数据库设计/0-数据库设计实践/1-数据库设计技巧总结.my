<h1>数据库设计技巧总结</h1>

<h2>工具使用技巧</h2>

<p>powerdesigner使用：</p>

<p>表名使用英文，这样在tables列表下比较好找。不要用中文。中文也行，用"模块名_业务名_*"格式。</p>

<p>每一个表，每一个字段，加上注释。</p>

<p>注释技巧：</p>

<p>同一个类型的字段，如id，外表的id，注释全统一，不要重复起名。</p>

<table>
<tbody>
<tr>
<td>类型</td>
<td>字段</td>
<td>例子</td>
<td>备注</td>
</tr>
<tr>
<td>字典表维护字段：</td>
<td>source</td>
<td>来源(数据字典表维护)</td>
<td>要是前端没控制界面，就存dict_code，否则用dict_id</td>
</tr>
<tr>
<td>状态字段：</td>
<td>status</td>
<td>是否被激活 0 未激活，1已激活</td>
<td> </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>

<h2>字段命名</h2>

<p>状态字段，标记是否状态的字段。例如是否使用过：不要用is_used，使用has_used命名。</p>

<h2>常见数据类型设置</h2>

<p>字符字段：varchar 字段，0-255 用字节存储长度，超过的全用两两个字节。长度的话，根据长度约束，尽量不要随意放太长。(2的倍数，内存对齐)？</p>

<p>金额字段：Decimal为专门为财务相关问题设计的数据类型。例如：decimal(14,2)，小数点前后位数一起14位，小数点后保留为两位，多退少补。java提供了工具类，比如用 <strong>BigDecimal</strong>。</p>

<p>状态字段：tinyint(2)，默认为0；这里设置为tinyint(1)的话，在转换时会出错。</p>

<p>数值字段：int(3),int(11); 这里定义的数值，并不是影响其实际长度，其实他们存储的数值范围都一样。他们只在定义了zerofill时才体现区分，会自动补0。</p>

<p>create table b(myint3 int(3), myint11 int(11), myint3fill int(3) zerofill, myint11fill int(11) zerofill);</p>

<p>insert into b values(1,1,1,1);</p>

<p>select * from b;</p>

<p>+--------+---------+------------+-------------+<br />
| myint3 | myint11 | myint3fill |      myint11fill |<br />
+--------+---------+------------+-------------+<br />
|      1     |       1      |          001  | 00000000001 |<br />
+--------+---------+------------+-------------+</p>

<p>日期字段：date 类型，       插入 1990-09-05 10:01:01 只能存入 1990-09-05</p>

<p>                 datetime 类型，插入 1990-09-05 10:01:01 能够存入 1990-09-05 10:01:01</p>

<h2>程序中数据的处理</h2>

<p>orm的时候，先用map，后期再用pojo进行整理。<br />
spring的sql查询缓存。<br />
spring的sql事务注释。</p>

<p> </p>
