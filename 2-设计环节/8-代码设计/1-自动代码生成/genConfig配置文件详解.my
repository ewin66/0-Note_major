<h1>generatorConfiguration配置文件详解</h1>

<p><?xml version="1.0" encoding="UTF-8"?><br />
<!DOCTYPE generatorConfiguration<br />
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"<br />
"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"><br />
<!-- 配置生成器 --><br />
<generatorConfiguration><br />
<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项<br />
    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        <br />
    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.<br />
    注意，两个属性只能选址一个;<br />
    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用<br />
<properties resource="" url="" /><br />
 --><br />
 <br />
 <!-- 在MBG工作的时候，需要额外加载的依赖包<br />
     location属性指明加载jar/zip包的全路径<br />
<classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /><br />
  --><br />
 <br />
<!-- <br />
    context:生成一组对象的环境 <br />
    id:必选，上下文id，用于在生成错误时提示<br />
    defaultModelType:指定生成对象的样式<br />
        1，conditional：类似hierarchical；<br />
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；<br />
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)<br />
    targetRuntime:<br />
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；<br />
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；<br />
    introspectedColumnImpl：类全限定名，用于扩展MBG<br />
--><br />
<context id="mysql" defaultModelType="hierarchical" targetRuntime="MyBatis3Simple" ><br />
 <br />
    <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；<br />
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖<br />
     --><br />
    <property name="autoDelimitKeywords" value="false"/><br />
    <!-- 生成的Java文件的编码 --><br />
    <property name="javaFileEncoding" value="UTF-8"/><br />
    <!-- 格式化java代码 --><br />
    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/><br />
    <!-- 格式化XML代码 --><br />
    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/><br />
 <br />
    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --><br />
    <property name="beginningDelimiter" value="`"/><br />
    <property name="endingDelimiter" value="`"/><br />
 <br />
    <!-- 必须要有的，使用这个配置链接数据库<br />
        @TODO:是否可以扩展<br />
     --><br />
    <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql:///pss" userId="root" password="admin"><br />
        <!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --><br />
    </jdbcConnection><br />
 <br />
    <!-- java类型处理器 <br />
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；<br />
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； <br />
    --><br />
    <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"><br />
        <!-- <br />
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型<br />
            false：默认,<br />
                scale>0;length>18：使用BigDecimal;<br />
                scale=0;length[10,18]：使用Long；<br />
                scale=0;length[5,9]：使用Integer；<br />
                scale=0;length<5：使用Short；<br />
         --><br />
        <property name="forceBigDecimals" value="false"/><br />
    </javaTypeResolver><br />
 <br />
 <br />
    <!-- java模型创建器，是必须要的元素<br />
        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类<br />
        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；<br />
        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录<br />
     --><br />
    <javaModelGenerator targetPackage="com._520it.mybatis.domain" targetProject="src/main/java"><br />
        <!--  for MyBatis3/MyBatis3Simple<br />
            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；<br />
         --><br />
        <property name="constructorBased" value="false"/><br />
 <br />
        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --><br />
        <property name="enableSubPackages" value="true"/><br />
 <br />
        <!-- for MyBatis3 / MyBatis3Simple<br />
            是否创建一个不可变的类，如果为true，<br />
            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类<br />
         --><br />
        <property name="immutable" value="false"/><br />
 <br />
        <!-- 设置一个根对象，<br />
            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项<br />
            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：<br />
                1，属性名相同，类型相同，有相同的getter/setter方法；<br />
         --><br />
        <property name="rootClass" value="com._520it.mybatis.domain.BaseDomain"/><br />
 <br />
        <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --><br />
        <property name="trimStrings" value="true"/><br />
    </javaModelGenerator><br />
 <br />
 <br />
    <!-- 生成SQL map的XML文件生成器，<br />
        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），<br />
            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置<br />
        targetPackage/targetProject:同javaModelGenerator<br />
     --><br />
    <sqlMapGenerator targetPackage="com._520it.mybatis.mapper" targetProject="src/main/resources"><br />
        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --><br />
        <property name="enableSubPackages" value="true"/><br />
    </sqlMapGenerator><br />
 <br />
 <br />
    <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 <br />
        targetPackage/targetProject:同javaModelGenerator<br />
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：<br />
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；<br />
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；<br />
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；<br />
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER<br />
    --><br />
    <javaClientGenerator targetPackage="com._520it.mybatis.mapper" type="ANNOTATEDMAPPER" targetProject="src/main/java"><br />
        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --><br />
        <property name="enableSubPackages" value="true"/><br />
 <br />
        <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查<br />
        <property name="rootInterface" value=""/><br />
         --><br />
    </javaClientGenerator><br />
 <br />
    <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素<br />
        选择的table会生成一下文件：<br />
        1，SQL map文件<br />
        2，生成一个主键类；<br />
        3，除了BLOB和主键的其他字段的类；<br />
        4，包含BLOB的类；<br />
        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；<br />
        6，Mapper接口（可选）<br />
        tableName（必要）：要生成对象的表名；<br />
        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会<br />
            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：<br />
            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；<br />
            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；<br />
            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；<br />
            4，否则，使用指定的大小写格式查询；<br />
        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；<br />
        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；<br />
        可选：<br />
        1，schema：数据库的schema；<br />
        2，catalog：数据库的catalog；<br />
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName<br />
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；<br />
        5，enableInsert（默认true）：指定是否生成insert语句；<br />
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；<br />
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；<br />
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；<br />
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；<br />
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；<br />
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；<br />
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；<br />
        13，modelType：参考context元素的defaultModelType，相当于覆盖；<br />
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）<br />
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性<br />
        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；<br />
     --><br />
    <table tableName="userinfo" ><br />
 <br />
        <!-- 参考 javaModelGenerator 的 constructorBased属性--><br />
        <property name="constructorBased" value="false"/><br />
 <br />
        <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --><br />
        <property name="ignoreQualifiersAtRuntime" value="false"/><br />
 <br />
        <!-- 参考 javaModelGenerator 的 immutable 属性 --><br />
        <property name="immutable" value="false"/><br />
 <br />
        <!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --><br />
        <property name="modelOnly" value="false"/><br />
 <br />
        <!-- 参考 javaModelGenerator 的 rootClass 属性 <br />
        <property name="rootClass" value=""/><br />
         --><br />
 <br />
        <!-- 参考javaClientGenerator 的  rootInterface 属性<br />
        <property name="rootInterface" value=""/><br />
        --><br />
 <br />
        <!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog <br />
        <property name="runtimeCatalog" value=""/><br />
        --><br />
 <br />
        <!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema <br />
        <property name="runtimeSchema" value=""/><br />
        --><br />
 <br />
        <!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename <br />
        <property name="runtimeTableName" value=""/><br />
        --><br />
 <br />
        <!-- 注意，该属性只针对MyBatis3Simple有用；<br />
            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；<br />
         --><br />
        <property name="selectAllOrderByClause" value="age desc,username asc"/><br />
 <br />
        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --><br />
        <property name="useActualColumnNames" value="false"/><br />
 <br />
 <br />
        <!-- generatedKey用于生成生成主键的方法，<br />
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选<br />
            column:主键的列名；<br />
            sqlStatement：要生成的selectKey语句，有以下可选项：<br />
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()<br />
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()<br />
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1<br />
                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()<br />
                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()<br />
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1<br />
                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()<br />
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()<br />
                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY<br />
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性<br />
        <generatedKey column="" sqlStatement=""/><br />
         --><br />
 <br />
        <!-- <br />
            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，<br />
            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；<br />
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是<br />
            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；<br />
            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，<br />
            如果使用了columnOverride元素，该属性无效；<br />
        <columnRenamingRule searchString="" replaceString=""/><br />
         --><br />
 <br />
 <br />
         <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；<br />
             column:要重新设置的列名；<br />
             注意，一个table元素中可以有多个columnOverride元素哈~<br />
          --><br />
         <columnOverride column="username"><br />
             <!-- 使用property属性来指定列要生成的属性名称 --><br />
             <property name="property" value="userName"/><br />
 <br />
             <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名<br />
             <property name="javaType" value=""/><br />
              --><br />
 <br />
             <!-- jdbcType用于指定该列的JDBC类型 <br />
             <property name="jdbcType" value=""/><br />
              --><br />
 <br />
             <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名<br />
                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler<br />
                 只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述<br />
             <property name="jdbcType" value=""/><br />
             --><br />
 <br />
             <!-- 参考table元素的delimitAllColumns配置，默认为false<br />
             <property name="delimitedColumnName" value=""/><br />
              --><br />
         </columnOverride><br />
 <br />
         <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 <br />
             column:指定要忽略的列的名字；<br />
             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false<br />
             注意，一个table元素中可以有多个ignoreColumn元素<br />
         <ignoreColumn column="deptId" delimitedColumnName=""/><br />
         --><br />
    </table><br />
 <br />
</context><br />
 <br />
</generatorConfiguration></p>
